CREATE OR REPLACE PACKAGE BODY Customer_Order_Line_API IS

-----------------------------------------------------------------------------
-------------------- PRIVATE DECLARATIONS -----------------------------------
-----------------------------------------------------------------------------

TYPE Indicator_Rec IS RECORD
  (order_no                       BOOLEAN := FALSE,
   line_no                        BOOLEAN := FALSE,
   rel_no                         BOOLEAN := FALSE,
   line_item_no                   BOOLEAN := FALSE,
   contract                       BOOLEAN := FALSE,
   catalog_no                     BOOLEAN := FALSE,
   note_id                        BOOLEAN := FALSE,
   order_code                     BOOLEAN := FALSE,
   part_no                        BOOLEAN := FALSE,
   pre_accounting_id              BOOLEAN := FALSE,
   sales_unit_meas                BOOLEAN := FALSE,
   base_sale_unit_price           BOOLEAN := FALSE,
   base_unit_price_incl_tax       BOOLEAN := FALSE,
   buy_qty_due                    BOOLEAN := FALSE,
   catalog_desc                   BOOLEAN := FALSE,
   catalog_type                   BOOLEAN := FALSE,
   conv_factor                    BOOLEAN := FALSE,
   cost                           BOOLEAN := FALSE,
   currency_rate                  BOOLEAN := FALSE,
   date_entered                   BOOLEAN := FALSE,
   discount                       BOOLEAN := FALSE,
   line_total_qty                 BOOLEAN := FALSE,
   line_total_weight              BOOLEAN := FALSE,
   note_text                      BOOLEAN := FALSE,
   order_discount                 BOOLEAN := FALSE,
   planned_delivery_date          BOOLEAN := FALSE,
   planned_due_date               BOOLEAN := FALSE,
   supply_site_due_date           BOOLEAN := FALSE,
   price_conv_factor              BOOLEAN := FALSE,
   promised_delivery_date         BOOLEAN := FALSE,
   qty_assigned                   BOOLEAN := FALSE,
   qty_invoiced                   BOOLEAN := FALSE,
   qty_on_order                   BOOLEAN := FALSE,
   qty_picked                     BOOLEAN := FALSE,
   qty_returned                   BOOLEAN := FALSE,
   qty_shipdiff                   BOOLEAN := FALSE,
   qty_shipped                    BOOLEAN := FALSE,
   qty_to_ship                    BOOLEAN := FALSE,
   qty_short                      BOOLEAN := FALSE,
   real_ship_date                 BOOLEAN := FALSE,
   revised_qty_due                BOOLEAN := FALSE,
   sale_unit_price                BOOLEAN := FALSE,
   unit_price_incl_tax            BOOLEAN := FALSE,
   supply_code                    BOOLEAN := FALSE,
   wanted_delivery_date           BOOLEAN := FALSE,
   delivery_type                  BOOLEAN := FALSE,
   vendor_no                      BOOLEAN := FALSE,
   tax_code                       BOOLEAN := FALSE,
   tax_class_id                   BOOLEAN := FALSE,
   customer_part_no               BOOLEAN := FALSE,
   customer_part_conv_factor      BOOLEAN := FALSE,
   customer_part_unit_meas        BOOLEAN := FALSE,
   customer_part_buy_qty          BOOLEAN := FALSE,
   planned_ship_date              BOOLEAN := FALSE,
   planned_ship_period            BOOLEAN := FALSE,
   customer_no                    BOOLEAN := FALSE,
   consignment_stock              BOOLEAN := FALSE,
   close_tolerance                BOOLEAN := FALSE,
   price_list_no                  BOOLEAN := FALSE,
   charged_item                   BOOLEAN := FALSE,
   demand_order_ref1              BOOLEAN := FALSE,
   demand_order_ref2              BOOLEAN := FALSE,
   demand_order_ref3              BOOLEAN := FALSE,
   demand_order_ref4              BOOLEAN := FALSE,
   demand_code                    BOOLEAN := FALSE,
   dop_connection                 BOOLEAN := FALSE,
   create_sm_object_option        BOOLEAN := FALSE,
   default_addr_flag              BOOLEAN := FALSE,
   addr_flag                      BOOLEAN := FALSE,
   ship_addr_no                   BOOLEAN := FALSE,
   route_id                       BOOLEAN := FALSE,
   forward_agent_id               BOOLEAN := FALSE,
   ship_via_code                  BOOLEAN := FALSE,
   delivery_terms                 BOOLEAN := FALSE,
   delivery_leadtime              BOOLEAN := FALSE,
   district_code                  BOOLEAN := FALSE,
   region_code                    BOOLEAN := FALSE,
   desired_qty                    BOOLEAN := FALSE,
   purchase_part_no               BOOLEAN := FALSE,
   staged_billing                 BOOLEAN := FALSE,
   tax_liability                  BOOLEAN := FALSE,
   original_part_no               BOOLEAN := FALSE,
   equipment_object_seq           BOOLEAN := FALSE,
   sup_sm_contract                BOOLEAN := FALSE,
   sup_sm_object                  BOOLEAN := FALSE,
   sm_connection                  BOOLEAN := FALSE,
   part_price                     BOOLEAN := FALSE,
   calc_char_price                BOOLEAN := FALSE,
   char_price                     BOOLEAN := FALSE,
   price_source                   BOOLEAN := FALSE,
   price_freeze                   BOOLEAN := FALSE,
   dock_code                      BOOLEAN := FALSE,
   sub_dock_code                  BOOLEAN := FALSE,
   ref_id                         BOOLEAN := FALSE,
   location_no                    BOOLEAN := FALSE,
   configuration_id               BOOLEAN := FALSE,
   price_effectivity_date         BOOLEAN := FALSE,
   configured_line_price_id       BOOLEAN := FALSE,
   latest_release_date            BOOLEAN := FALSE,
   ctp_planned                    BOOLEAN := FALSE,
   job_id                         BOOLEAN := FALSE,
   cust_warranty_id               BOOLEAN := FALSE,
   price_source_id                BOOLEAN := FALSE,
   intrastat_exempt               BOOLEAN := FALSE,
   price_unit_meas                BOOLEAN := FALSE,
   condition_code                 BOOLEAN := FALSE,
   additional_discount            BOOLEAN := FALSE,
   part_ownership                 BOOLEAN := FALSE,
   owning_customer_no             BOOLEAN := FALSE,
   exchange_item                  BOOLEAN := FALSE,
   supply_site_reserve_type       BOOLEAN := FALSE,
   originating_rel_no             BOOLEAN := FALSE,
   originating_line_item_no       BOOLEAN := FALSE,
   release_planning               BOOLEAN := FALSE,
   supplier_ship_via_transit      BOOLEAN := FALSE,
   supplier_ship_via_transit_desc BOOLEAN := FALSE,
   supply_site                    BOOLEAN := FALSE,
   shipment_connected             BOOLEAN := FALSE,
   self_billing                   BOOLEAN := FALSE,
   activity_seq                   BOOLEAN := FALSE,
   project_id                     BOOLEAN := FALSE,
   deliver_to_customer_no         BOOLEAN := FALSE,
   contact                        BOOLEAN := FALSE,
   input_qty                      BOOLEAN := FALSE,
   input_unit_meas                BOOLEAN := FALSE,
   input_conv_factor              BOOLEAN := FALSE,
   input_variable_values          BOOLEAN := FALSE,
   shipment_creation              BOOLEAN := FALSE,
   manufacturing_department       BOOLEAN := FALSE,
   delivery_sequence              BOOLEAN := FALSE,
   cancel_reason                  BOOLEAN := FALSE,
   delivery_confirmed             BOOLEAN := FALSE,
   customer_po_line_no            BOOLEAN := FALSE,
   customer_po_rel_no             BOOLEAN := FALSE,
   qty_confirmeddiff              BOOLEAN := FALSE,
   blocked_for_invoicing          BOOLEAN := FALSE,
   provisional_price              BOOLEAN := FALSE,
   receiving_advice_type          BOOLEAN := FALSE,
   first_actual_ship_date         BOOLEAN := FALSE,
   tax_id_no                      BOOLEAN := FALSE,
   tax_id_validated_date          BOOLEAN := FALSE,
   price_source_net_price         BOOLEAN := FALSE,
   target_date                    BOOLEAN := FALSE,
   allocation_id                  BOOLEAN := FALSE,
   del_terms_location             BOOLEAN := FALSE,
   classification_part_no         BOOLEAN := FALSE,
   classification_unit_meas       BOOLEAN := FALSE,
   classification_standard        BOOLEAN := FALSE,
   rebate_builder                 BOOLEAN := FALSE,
   line_total_weight_gross        BOOLEAN := FALSE,
   freight_map_id                 BOOLEAN := FALSE,
   zone_id                        BOOLEAN := FALSE,
   freight_price_list_no          BOOLEAN := FALSE,
   adjusted_weight_net            BOOLEAN := FALSE,
   adjusted_weight_gross          BOOLEAN := FALSE,
   adjusted_volume                BOOLEAN := FALSE,
   freight_free                   BOOLEAN := FALSE,
   part_level                     BOOLEAN := FALSE,
   part_level_id                  BOOLEAN := FALSE,
   customer_level                 BOOLEAN := FALSE,
   customer_level_id              BOOLEAN := FALSE,
   load_id                        BOOLEAN := FALSE,
   customs_value                  BOOLEAN := FALSE,
   abnormal_demand                BOOLEAN := FALSE,
   cust_calendar_id               BOOLEAN := FALSE,
   ext_transport_calendar_id      BOOLEAN := FALSE,
   rel_mtrl_planning              BOOLEAN := FALSE,
   qty_per_assembly               BOOLEAN := FALSE,
   new_comp_after_delivery        BOOLEAN := FALSE,
   inverted_conv_factor           BOOLEAN := FALSE,
   rental                         BOOLEAN := FALSE,
   end_customer_id                BOOLEAN := FALSE,
   picking_leadtime               BOOLEAN := FALSE,
   shipment_type                  BOOLEAN := FALSE,
   open_shipment_qty              BOOLEAN := FALSE,
   packing_instruction_id         BOOLEAN := FALSE,
   originating_co_lang_code       BOOLEAN := FALSE,
   cust_part_invert_conv_fact     BOOLEAN := FALSE,
   country_code                   BOOLEAN := FALSE,
   tax_liability_type             BOOLEAN := FALSE,
   free_of_charge                 BOOLEAN := FALSE,
   free_of_charge_tax_basis       BOOLEAN := FALSE,
   tax_calc_structure_id          BOOLEAN := FALSE,
   customer_tax_usage_type        BOOLEAN := FALSE,
   supply_site_part_no            BOOLEAN := FALSE,
   acquisition_origin             BOOLEAN := FALSE,
   statistical_code               BOOLEAN := FALSE,
   original_discount              BOOLEAN := FALSE,
   original_add_discount          BOOLEAN := FALSE,
   original_order_discount        BOOLEAN := FALSE,
   acquisition_reason_id          BOOLEAN := FALSE);

TYPE Purchase_Order_No_Rec IS RECORD (
   po_order_no  VARCHAR2(12),
   order_no     VARCHAR2(12),
   line_no      VARCHAR2(4),
   rel_no       VARCHAR2(4),
   line_item_no NUMBER,
   supply_code  VARCHAR2(3));

TYPE purchase_order_no_tab IS TABLE OF Purchase_Order_No_Rec INDEX BY BINARY_INTEGER;

--@ApproveGlobalVariable
purchase_order_no_tab_ purchase_order_no_tab;


-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION METHOD DECLARATIONS ---------------------
-----------------------------------------------------------------------------

FUNCTION Key_Message___ (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2;

FUNCTION Formatted_Key___ (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2;

PROCEDURE Raise_Too_Many_Rows___ (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER,
   methodname_ IN VARCHAR2 );

PROCEDURE Raise_Record_Not_Exist___ (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER );

PROCEDURE Raise_Record_Exist___ (
   rec_ IN customer_order_line_tab%ROWTYPE );

PROCEDURE Raise_Constraint_Violated___ (
   rec_ IN customer_order_line_tab%ROWTYPE,
   constraint_ IN VARCHAR2 );

PROCEDURE Raise_Item_Format___ (
   name_ IN VARCHAR2,
   value_ IN VARCHAR2 );

PROCEDURE Raise_Record_Modified___ (
   rec_ IN customer_order_line_tab%ROWTYPE );

PROCEDURE Raise_Record_Locked___ (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER );

PROCEDURE Raise_Record_Removed___ (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER );

FUNCTION Lock_By_Id___ (
   objid_      IN VARCHAR2,
   objversion_ IN VARCHAR2 ) RETURN customer_order_line_tab%ROWTYPE;

FUNCTION Lock_By_Keys___ (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER) RETURN customer_order_line_tab%ROWTYPE;

FUNCTION Lock_By_Keys_Nowait___ (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER) RETURN customer_order_line_tab%ROWTYPE;

FUNCTION Get_Object_By_Id___ (
   objid_ IN VARCHAR2 ) RETURN customer_order_line_tab%ROWTYPE;

FUNCTION Get_Object_By_Keys___ (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN customer_order_line_tab%ROWTYPE;

FUNCTION Check_Exist___ (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN BOOLEAN;

PROCEDURE Get_Version_By_Id___ (
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Get_Id_Version_By_Keys___ (
   objid_      IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER );

PROCEDURE Unpack___ (
   newrec_   IN OUT NOCOPY customer_order_line_tab%ROWTYPE,
   indrec_   IN OUT NOCOPY Indicator_Rec,
   attr_     IN OUT NOCOPY VARCHAR2 );

FUNCTION Pack___ (
   rec_ IN customer_order_line_tab%ROWTYPE ) RETURN VARCHAR2;

FUNCTION Pack___ (
   rec_ IN customer_order_line_tab%ROWTYPE,
   indrec_ IN Indicator_Rec ) RETURN VARCHAR2;

FUNCTION Pack_Table___ (
   rec_ IN customer_order_line_tab%ROWTYPE ) RETURN VARCHAR2;

FUNCTION Public_To_Table___ (
   public_ IN Public_Rec ) RETURN customer_order_line_tab%ROWTYPE;

FUNCTION Table_To_Public___ (
   rec_ IN customer_order_line_tab%ROWTYPE ) RETURN Public_Rec;

PROCEDURE Reset_Indicator_Rec___ (
   indrec_ IN OUT NOCOPY Indicator_Rec );

FUNCTION Get_Indicator_Rec___ (
   rec_ IN customer_order_line_tab%ROWTYPE ) RETURN Indicator_Rec;

FUNCTION Get_Indicator_Rec___ (
   oldrec_ IN customer_order_line_tab%ROWTYPE,
   newrec_ IN customer_order_line_tab%ROWTYPE ) RETURN Indicator_Rec;

PROCEDURE Check_Catalog_No_Ref___ (
   newrec_ IN OUT NOCOPY customer_order_line_tab%ROWTYPE );

PROCEDURE Check_Ship_Addr_No_Ref___ (
   newrec_ IN OUT NOCOPY customer_order_line_tab%ROWTYPE );

PROCEDURE Check_Configuration_Id_Ref___ (
   newrec_ IN OUT NOCOPY customer_order_line_tab%ROWTYPE );

PROCEDURE Check_Cust_Warranty_Id_Ref___ (
   newrec_ IN OUT NOCOPY customer_order_line_tab%ROWTYPE );

PROCEDURE Check_Cancel_Reason_Ref___ (
   newrec_ IN OUT NOCOPY customer_order_line_tab%ROWTYPE );

PROCEDURE Check_Tax_Calc_Struct_Ref___ (
   newrec_ IN OUT NOCOPY customer_order_line_tab%ROWTYPE );

PROCEDURE Check_Common___ (
   oldrec_ IN     customer_order_line_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY customer_order_line_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Prepare_Insert___ (
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Check_Insert___ (
   newrec_ IN OUT NOCOPY customer_order_line_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Insert___ (
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   newrec_     IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2 );

PROCEDURE Prepare_New___ (
   newrec_ IN OUT NOCOPY customer_order_line_tab%ROWTYPE );

PROCEDURE New___ (
   newrec_ IN OUT NOCOPY customer_order_line_tab%ROWTYPE );

PROCEDURE Check_Update___ (
   oldrec_ IN     customer_order_line_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY customer_order_line_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Update___ (
   objid_            IN     VARCHAR2,
   oldrec_           IN     CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   newrec_           IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   attr_             IN OUT NOCOPY VARCHAR2,
   objversion_       IN OUT NOCOPY VARCHAR2,
   by_keys_          IN     BOOLEAN DEFAULT FALSE );

PROCEDURE Modify___ (
   newrec_         IN OUT NOCOPY customer_order_line_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE );

PROCEDURE Check_Delete___ (
   remrec_ IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE );

PROCEDURE Delete___ (
   objid_  IN VARCHAR2,
   remrec_ IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE );

PROCEDURE Delete___ (
   remrec_ IN customer_order_line_tab%ROWTYPE );

PROCEDURE Remove___ (
   remrec_         IN OUT NOCOPY customer_order_line_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE );

FUNCTION Get_Db_Values___ RETURN VARCHAR2 DETERMINISTIC;

FUNCTION Get_Client_Values___ RETURN VARCHAR2 DETERMINISTIC;

PROCEDURE Check_Delete_Exp_License___ (
   rec_  IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Check_Delivery_Confirmed___ (
   rec_  IN     CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Do_Nothing___ (
   rec_  IN OUT NOCOPY customer_order_line_tab%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Do_Set_Pkg_Header_State___ (
   rec_  IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Do_Set_Qty_Assigned___ (
   rec_  IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Do_Set_Qty_Confirmeddiff___ (
   rec_  IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Do_Set_Qty_Invoiced___ (
   rec_  IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Do_Set_Qty_Picked___ (
   rec_  IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Do_Set_Qty_Shipdiff___ (
   rec_  IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Do_Set_Qty_Shipped___ (
   rec_  IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Do_Undo_Delivery___ (
   rec_  IN OUT NOCOPY customer_order_line_tab%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Do_Uninvoice_Pkg_Component___ (
   rec_  IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Do_Uninvoice_Pkg_Head_State___ (
   rec_  IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

FUNCTION Is_Any_Delivery_Exist___ (
   rec_  IN     customer_order_line_tab%ROWTYPE ) RETURN BOOLEAN;

FUNCTION Line_Is_Fully_Delivered___ (
   rec_ IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE ) RETURN BOOLEAN;

FUNCTION Line_Is_Fully_Invoiced___ (
   rec_ IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE ) RETURN BOOLEAN;

FUNCTION Line_Is_Picked___ (
   rec_ IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE ) RETURN BOOLEAN;

FUNCTION Line_Is_Reserved___ (
   rec_ IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE ) RETURN BOOLEAN;

FUNCTION Rental_Is_Completed___ (
   rec_  IN  customer_order_line_tab%ROWTYPE ) RETURN BOOLEAN;

PROCEDURE Finite_State_Set___ (
   rec_   IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   state_ IN     VARCHAR2 );

PROCEDURE Finite_State_Machine___ (
   rec_   IN OUT NOCOPY customer_order_line_tab%ROWTYPE,
   event_ IN     VARCHAR2,
   attr_  IN OUT NOCOPY VARCHAR2 );

PROCEDURE Finite_State_Add_To_Attr___ (
   rec_  IN     customer_order_line_tab%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Finite_State_Init___ (
   rec_  IN OUT NOCOPY customer_order_line_tab%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Update_Line___ (
   objid_  IN VARCHAR2,
   newrec_ IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE );

PROCEDURE Check_Allow_Backorders___ (
   order_no_              IN VARCHAR2,
   line_no_               IN VARCHAR2,
   rel_no_                IN VARCHAR2,
   line_item_no_          IN NUMBER,
   planned_delivery_date_ IN DATE );

PROCEDURE Modify_Line___ (
   attr_         IN OUT NOCOPY VARCHAR2,
   order_no_     IN     VARCHAR2,
   line_no_      IN     VARCHAR2,
   rel_no_       IN     VARCHAR2,
   line_item_no_ IN     NUMBER );

PROCEDURE Modify_Connected_Order_Line___ (
   newrec_                    IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   attr_                      IN OUT NOCOPY VARCHAR2,
   oldrec_                    IN     CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   replicate_changes_         IN     VARCHAR2,
   header_rowstate_           IN     VARCHAR2,
   po_charged_comp_change_    IN     VARCHAR2,
   update_pegged_orders_      IN     VARCHAR2,
   change_request_            IN     VARCHAR2,
   changed_attrib_not_in_pol_ IN     VARCHAR2,
   server_data_change_        IN     NUMBER );

PROCEDURE Insert_Package___ (
   pkg_planned_delivery_date_    IN OUT NOCOPY DATE,
   shipment_creation_            IN     VARCHAR2,
   pkg_contract_                 IN     VARCHAR2,
   pkg_catalog_no_               IN     VARCHAR2,
   pkg_order_no_                 IN     VARCHAR2,
   pkg_line_no_                  IN     VARCHAR2,
   pkg_rel_no_                   IN     VARCHAR2,
   pkg_order_code_               IN     VARCHAR2,
   pkg_tax_code_                 IN     VARCHAR2,
   pkg_tax_class_                IN     VARCHAR2,
   pkg_currency_rate_            IN     NUMBER,
   pkg_revised_qty_due_          IN     NUMBER,
   pkg_buy_qty_due_              IN     NUMBER,
   pkg_sale_unit_price_          IN     NUMBER,
   pkg_unit_price_incl_tax_      IN     NUMBER,
   pkg_base_sale_unit_price_     IN     NUMBER,
   pkg_base_unit_price_incl_tax_ IN     NUMBER,
   pkg_wanted_delivery_date_     IN     DATE,
   pkg_target_date_              IN     DATE,
   insert_package_mode_          IN     VARCHAR2 );

PROCEDURE Update_Package___ (
   pkg_promised_delivery_date_ IN OUT NOCOPY DATE,
   pkg_planned_delivery_date_  IN OUT NOCOPY DATE,
   pkg_planned_ship_date_      IN OUT NOCOPY DATE,
   pkg_planned_due_date_       IN OUT NOCOPY DATE,
   pkg_rec_                    IN     CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   insert_package_mode_        IN     VARCHAR2,
   block_component_info_       IN     VARCHAR2,
   dop_replicate_msg_          IN     VARCHAR2 );

PROCEDURE Update_Package_Cost___ (
   pkg_cost_     IN OUT NOCOPY NUMBER,
   pkg_order_no_ IN     VARCHAR2,
   pkg_line_no_  IN     VARCHAR2,
   pkg_rel_no_   IN     VARCHAR2 );

PROCEDURE Change_Package_Structure___ (
   pkg_promised_delivery_date_ IN OUT NOCOPY DATE,
   pkg_planned_delivery_date_  IN OUT NOCOPY DATE,
   pkg_planned_ship_date_      IN OUT NOCOPY DATE,
   pkg_planned_due_date_       IN OUT NOCOPY DATE,
   pkg_rec_                    IN     CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   do_qty_                     IN     BOOLEAN,
   do_price_                   IN     BOOLEAN,
   do_discount_                IN     BOOLEAN,
   do_planned_                 IN     BOOLEAN,
   do_wanted_                  IN     BOOLEAN,
   do_promised_                IN     BOOLEAN,
   do_target_                  IN     BOOLEAN,
   insert_package_mode_        IN     VARCHAR2,
   block_component_info_       IN     VARCHAR2,
   dop_replicate_msg_          IN     VARCHAR2 );

PROCEDURE Check_Active_Part___ (
   contract_ IN VARCHAR2,
   part_no_  IN VARCHAR2 );

PROCEDURE Get_Line_Defaults___ (
   attr_                     IN OUT NOCOPY VARCHAR2,
   catalog_no_               IN OUT NOCOPY VARCHAR2,
   order_no_                 IN     VARCHAR2,
   part_replacement_allowed_ IN     NUMBER );

PROCEDURE Get_Default_Part_Attributes___ (
   attr_                     IN OUT NOCOPY VARCHAR2,
   part_replacement_allowed_ IN     NUMBER );

PROCEDURE Exist_Vendor_No___ (
   vendor_no_        IN VARCHAR2,
   contract_         IN VARCHAR2,
   purchase_part_no_ IN VARCHAR2,
   rental_db_        IN VARCHAR2);

PROCEDURE Validate_Vendor_Category___ (
   vendor_no_   IN VARCHAR2,
   supply_code_ IN VARCHAR2 );

PROCEDURE Validate_Vendor_No___ (
   vendor_no_   IN VARCHAR2,
   supply_code_ IN VARCHAR2,
   category_    IN VARCHAR2 );

PROCEDURE Validate_Price___ (
   newrec_ IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE );

PROCEDURE Add_Info___(
   insert_package_mode_  VARCHAR2);

PROCEDURE Check_Before_Insert___ (
   attr_                IN OUT NOCOPY VARCHAR2,
   newrec_              IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   header_curr_code_    IN     VARCHAR2 );

PROCEDURE Check_Before_Update___ (
   attr_                  IN OUT NOCOPY VARCHAR2,
   newrec_                IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   oldrec_                IN     CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   header_curr_code_      IN     VARCHAR2,
   header_rowstate_       IN     VARCHAR2,
   delivery_date_changed_ IN     BOOLEAN );

PROCEDURE Pre_Unpack_Insert___ (
   attr_      IN OUT NOCOPY VARCHAR2,
   newrec_    IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE );

PROCEDURE Pre_Unpack_Update___ (
   attr_      IN OUT NOCOPY VARCHAR2,
   newrec_    IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE );

PROCEDURE Post_Insert_Actions___ (
   attr_   IN OUT NOCOPY VARCHAR2,
   newrec_ IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE);

PROCEDURE Calculate_Order_Line_Dates___ (
   newrec_ IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   oldrec_ IN     CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   objid_  IN     VARCHAR2 );

PROCEDURE Insert_Default_Address___ (
   order_no_               IN VARCHAR2,
   line_no_                IN VARCHAR2,
   rel_no_                 IN VARCHAR2,
   line_item_no_           IN NUMBER,
   customer_no_            IN VARCHAR2,
   ship_addr_no_           IN VARCHAR2,
   deliver_to_customer_no_ IN VARCHAR2 );

PROCEDURE Exist_Purchase_Part___ (
   contract_         IN VARCHAR2,
   purchase_part_no_ IN VARCHAR2,
   inventory_part_   IN BOOLEAN,
   rental_db_        IN VARCHAR2 );

PROCEDURE Check_Supply_Code___ (
   newrec_ IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE );

PROCEDURE Check_Purch_Supply_Code___ (
   newrec_ IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE );

PROCEDURE Update_Config_Pricing_Info___ (
   newrec_ IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE );

PROCEDURE Set_Job_Pre_Posting___ (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   job_id_       IN VARCHAR2,
   activity_seq_ IN NUMBER );

PROCEDURE Validate_Mro_Line___ (
   part_no_        IN VARCHAR2,
   sales_quantity_ IN NUMBER,
   part_ownership_ IN VARCHAR2 );

PROCEDURE Check_Qty_From_Repair_Order___ (
   demand_code_       IN VARCHAR2,
   demand_order_ref1_ IN VARCHAR2,
   part_no_           IN VARCHAR2 );

PROCEDURE Get_Supply_Chain_Defaults___ (
   newrec_  IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   indrec_  IN     Indicator_Rec,
   oldrec_  IN     CUSTOMER_ORDER_LINE_TAB%ROWTYPE DEFAULT NULL );

PROCEDURE Get_Def_Supplier_Ship_Via___ (
   supplier_ship_via_transit_     OUT VARCHAR2,
   supplier_ship_via_transit_dsc_ OUT VARCHAR2,
   vendor_no_                     IN  VARCHAR2,
   contract_                      IN  VARCHAR2,
   supply_site_                   IN  VARCHAR2,
   part_no_                       IN  VARCHAR2,
   supply_code_db_                IN  VARCHAR2,
   language_code_                 IN  VARCHAR2 );

PROCEDURE Get_Activity_Info___ (
   planned_cost_elements_     OUT Mpccom_Accounting_API.Project_Cost_Element_Tab,
   committed_cost_elements_   OUT Mpccom_Accounting_API.Project_Cost_Element_Tab,
   used_cost_elements_        OUT Mpccom_Accounting_API.Project_Cost_Element_Tab,
   object_progress_           OUT NUMBER,
   rec_                       IN  CUSTOMER_ORDER_LINE_TAB%ROWTYPE );

PROCEDURE Validate_Proj_Connect___ (
   project_id_               OUT    VARCHAR2,
   demand_code_db_           IN OUT NOCOPY VARCHAR2,
   supply_code_db_           IN OUT NOCOPY VARCHAR2,
   order_no_                 IN     VARCHAR2,
   contract_                 IN     VARCHAR2,
   rowstate_                 IN     VARCHAR2,
   consignment_stock_db_     IN     VARCHAR2,
   qty_on_order_             IN     NUMBER,
   new_activity_seq_         IN     NUMBER,
   old_activity_seq_         IN     NUMBER,
   planned_ship_date_        IN     DATE,
   catalog_no_               IN     VARCHAR2,
   new_pkg_component_line_   IN     BOOLEAN,
   catalog_type_             IN     VARCHAR2 );

PROCEDURE Validate_Proj_Disconnect___ (
   newrec_ IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE );

PROCEDURE Handle_Activity_Seq___ (
   rec_              IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   old_activity_seq_ IN NUMBER );

FUNCTION Is_Purch_Comp_Part_Line___ (
   rec_ IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE ) RETURN BOOLEAN;

PROCEDURE Calc_Dates_Forwards___ (
   planned_delivery_date_     IN OUT NOCOPY DATE,
   planned_ship_date_         IN OUT NOCOPY DATE,
   planned_due_date_          IN OUT NOCOPY DATE,
   supply_site_due_date_      IN OUT NOCOPY DATE,
   promised_delivery_date_    IN OUT NOCOPY DATE,
   planned_ship_period_       IN OUT NOCOPY VARCHAR2,
   target_date_               IN     DATE,
   contract_                  IN     VARCHAR2,
   supply_code_db_            IN     VARCHAR2,
   deliver_to_customer_no_    IN     VARCHAR2,
   vendor_no_                 IN     VARCHAR2,
   part_no_                   IN     VARCHAR2,
   purchase_part_no_          IN     VARCHAR2,
   ship_addr_no_              IN     VARCHAR2,
   ship_via_code_             IN     VARCHAR2,
   route_id_                  IN     VARCHAR2,
   delivery_leadtime_         IN     NUMBER,
   picking_leadtime_          IN     NUMBER,
   ext_transport_calendar_id_ IN     VARCHAR2,
   supplier_ship_via_transit_ IN     VARCHAR2,
   header_rowstate_           IN     VARCHAR2 );

FUNCTION Get_Auto_Capability_Check___ (
   supply_code_db_ IN VARCHAR2,
   contract_       IN VARCHAR2,
   supply_site_    IN VARCHAR2,
   part_no_        IN VARCHAR2 ) RETURN VARCHAR2;

PROCEDURE Perform_Capability_Check___ (
   newrec_                     IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   auto_cc_performed_          OUT    BOOLEAN,
   header_rowstate_            IN     VARCHAR2,
   automatic_capability_check_ IN     VARCHAR2 );

PROCEDURE Validate_Delivery_Conf___ (
   newrec_                        IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   insert_mode_                   IN BOOLEAN,
   catalog_group_                 IN VARCHAR2,
   pkg_catalog_group_             IN VARCHAR2,
   confirm_deliveries_db_         IN VARCHAR2 DEFAULT NULL,
   check_sales_grp_deliv_conf_db_ IN VARCHAR2 DEFAULT NULL,
   triggered_by_header_           IN BOOLEAN DEFAULT FALSE,
   insert_package_mode_           IN VARCHAR2 DEFAULT 'FALSE');

PROCEDURE Validate_Block_For_Invoic___ (
   newrec_ IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE );

PROCEDURE Log_Price_Changes___ (
   newrec_              IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   headrec_             IN CUSTOMER_ORDER_API.Public_Rec,
   calc_price_per_curr_ IN NUMBER );

PROCEDURE Validate_Prepayment___ (
   rec_     IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   action_  IN VARCHAR2);

PROCEDURE Handle_Replacement_Part___ (
   catalog_no_     IN OUT NOCOPY VARCHAR2,
   org_catalog_no_ IN OUT NOCOPY VARCHAR2,
   contract_       IN     VARCHAR2,
   by_info_        IN     BOOLEAN );

FUNCTION Get_Progress_Info___ (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   rowstate_     IN VARCHAR2 ) RETURN NUMBER;

FUNCTION Is_Number___ (
   string_   IN VARCHAR2 ) RETURN BOOLEAN;

PROCEDURE Generate_Next_Level_Demands___ (
   header_rowstate_  IN VARCHAR2,
   newrec_           IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE );

FUNCTION Get_Elements_From_Purch___ (
   contract_     IN VARCHAR2,
   part_no_      IN VARCHAR2,
   vendor_no_    IN VARCHAR2,
   quantity_     IN NUMBER,
   project_id_   IN VARCHAR2,
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN Mpccom_Accounting_API.Project_Cost_Element_Tab;

FUNCTION Get_Elements_From_Purch___ (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   contract_     IN VARCHAR2,
   part_no_      IN VARCHAR2,
   vendor_no_    IN VARCHAR2,
   quantity_     IN NUMBER,
   project_id_   IN VARCHAR2,
   charged_item_ IN VARCHAR2 ) RETURN Mpccom_Accounting_API.Project_Cost_Element_Tab;

FUNCTION Get_Activity_Planned_Cost___ (
   rec_              IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   inventory_part_   IN BOOLEAN ) RETURN Mpccom_Accounting_API.Project_Cost_Element_Tab;

FUNCTION Get_Elements_From_Invent___ (
   order_no_         IN VARCHAR2,
   line_no_          IN VARCHAR2,
   rel_no_           IN VARCHAR2,
   line_item_no_     IN NUMBER,
   contract_         IN VARCHAR2,
   part_no_          IN VARCHAR2,
   condition_code_   IN VARCHAR2,
   quantity_         IN VARCHAR2,
   charged_item_     IN VARCHAR2 ) RETURN Mpccom_Accounting_API.Project_Cost_Element_Tab;

FUNCTION Get_Elements_Non_Inv___ (
   rec_             IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   quantity_        IN NUMBER ) RETURN Mpccom_Accounting_API.Project_Cost_Element_Tab;

FUNCTION Get_Elements_Project_Inv___ (
   rec_             IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   quantity_        IN NUMBER ) RETURN Mpccom_Accounting_API.Project_Cost_Element_Tab;

FUNCTION Diff_Proj_Exist___ (
   order_no_     IN VARCHAR2,
   project_id_   IN VARCHAR2 ) RETURN BOOLEAN;

FUNCTION Project_Connection_Exist___ (
   order_no_       IN VARCHAR2,
   line_no_        IN VARCHAR2,
   rel_no_         IN VARCHAR2,
   line_item_no_   IN NUMBER,
   activity_seq_   IN NUMBER,
   proj_lu_name_   IN VARCHAR2 ) RETURN VARCHAR2;

PROCEDURE Remove_Project_Connection___ (
   order_no_          IN VARCHAR2,
   line_no_           IN VARCHAR2,
   rel_no_            IN VARCHAR2,
   line_item_no_      IN NUMBER,
   old_activity_seq_  IN NUMBER );

PROCEDURE Calculate_Revenue___ (
   order_no_              IN  VARCHAR2,
   line_no_               IN  VARCHAR2,
   rel_no_                IN  VARCHAR2,
   line_item_no_          IN  NUMBER);

PROCEDURE Update_Proj_Ms_Forecast___ (
   contract_         IN VARCHAR2,
   part_no_          IN VARCHAR2,
   qty_shipped_      IN NUMBER,
   planned_due_date_ IN DATE,
   activity_seq_     IN NUMBER );

FUNCTION Is_External_Service_Order___ (
   demand_code_       IN VARCHAR2,
   demand_order_ref1_ IN VARCHAR2 ) RETURN VARCHAR2;

PROCEDURE Check_Demand_Code___ (
   demand_code_         IN VARCHAR2,
   confirm_deliveries_  IN VARCHAR2,
   consignment_stock_   IN VARCHAR2 );

PROCEDURE Prepare_Rental___ (
   attr_ IN OUT NOCOPY VARCHAR2);

PROCEDURE New_Rental___ (
   attr_   IN VARCHAR2,
   newrec_ IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE);

PROCEDURE Modify_Rental___ (
   attr_   IN VARCHAR2,
   newrec_ IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE);

PROCEDURE Remove_Rental___ (
   remrec_ IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE);

PROCEDURE Add_Rental_Info_To_Attr___ (
   attr_         IN OUT NOCOPY VARCHAR2,
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER );

FUNCTION Get_Latest_Rent_Charge_Days___ (
   attr_    IN VARCHAR2,
   newrec_  IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE) RETURN NUMBER;

FUNCTION Get_Rental_Chargeable_Days___ (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER;

PROCEDURE Validate_Pack_Instr_Id___ (
   attr_   IN OUT NOCOPY VARCHAR2,
   newrec_ IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   oldrec_ IN     CUSTOMER_ORDER_LINE_TAB%ROWTYPE );

PROCEDURE Close_Financial_Project___ (
   company_ IN VARCHAR2,
   job_id_  IN VARCHAR2 );

FUNCTION Get_Elements_From_Manuf_Ord___ (
   rec_              IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   supply_option_    IN VARCHAR2,
   quantity_         IN NUMBER ) RETURN Mpccom_Accounting_API.Project_Cost_Element_Tab;

FUNCTION Is_Rental_Dates_Changed___ (
   attr_    IN VARCHAR2,
   newrec_  IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE) RETURN BOOLEAN;

PROCEDURE Validate_Update_Service_Con___ (
   attr_                IN VARCHAR2,
   demand_code_         IN VARCHAR2 );

PROCEDURE Create_Project_Connection___ (
   order_no_                        IN  VARCHAR2,
   line_no_                         IN  VARCHAR2,
   rel_no_                          IN  VARCHAR2,
   line_item_no_                    IN  NUMBER,
   proj_lu_name_                    IN  VARCHAR2,
   system_ctrl_connection_          IN  VARCHAR2,
   activity_info_tab_               IN  Public_Declarations_API.PROJ_Project_Conn_Cost_Tab,
   activity_revenue_info_tab_       IN  Public_Declarations_API.PROJ_Project_Conn_Revenue_Tab,
   attributes_                      IN  Public_Declarations_API.PROJ_Project_Conn_Attr_Type);

PROCEDURE Get_Backord_Value_Base_Curr___ (
   net_amount_   OUT VARCHAR2,
   gross_amount_ OUT VARCHAR2,
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER );

PROCEDURE Get_Backlog_Value_Ord_Curr___ (
   net_amount_   OUT NUMBER,
   gross_amount_ OUT NUMBER,
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER );

PROCEDURE Get_Backlog_Value_Base_Curr___ (
   net_amount_   OUT NUMBER,
   gross_amount_ OUT NUMBER,
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER );

FUNCTION Check_Default_Addr_Flag___(
   line_rec_          IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   order_no_          IN VARCHAR2,
   default_addr_flag_ IN VARCHAR2,
   duplicate_line_    IN BOOLEAN DEFAULT FALSE ) RETURN VARCHAR2;

PROCEDURE Build_Attr_For_New___ (
   discount_            OUT    CUSTOMER_ORDER_LINE_TAB.discount%TYPE,
   copy_discount_       OUT    VARCHAR2,
   create_partial_sum_  OUT    CUST_ORDER_LINE_DISCOUNT_TAB.Create_Partial_Sum%TYPE,   
	new_attr_            OUT    VARCHAR2,
   attr_                IN     VARCHAR2  );

PROCEDURE Build_Attr_Sourced_Co_Lines___ (
	   attr_                      OUT    VARCHAR2,
      sourced_lines_             IN OUT NOCOPY sourced_cust_order_line_tab%ROWTYPE,
      old_attr_                  IN     VARCHAR2,
      orglinerec_                IN     CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
      first_row_                 IN     BOOLEAN,
      sourced_reservation_exist_ IN     NUMBER,
      language_code_             IN     VARCHAR2,
      order_no_                  IN     VARCHAR2,
      line_no_                   IN     VARCHAR2,
      rel_no_                    IN     VARCHAR2,
      line_item_no_              IN     NUMBER );

PROCEDURE Add_Transaction_Tax_Info___ (
   newrec_              IN customer_order_line_tab%ROWTYPE,    
   company_             IN VARCHAR2,   
   customer_no_         IN VARCHAR2,
   ship_addr_no_        IN VARCHAR2,
   supply_country_db_   IN VARCHAR2,     
   use_price_incl_tax_  IN VARCHAR2,
   currency_code_       IN VARCHAR2,
   tax_from_defaults_   IN BOOLEAN,
   attr_                IN VARCHAR2);

PROCEDURE Recalculate_Tax_Lines___ (
   newrec_             IN customer_order_line_tab%ROWTYPE,
   company_            IN VARCHAR2,
   customer_no_        IN VARCHAR2,
   ship_addr_no_       IN VARCHAR2,
   supply_country_db_  IN VARCHAR2,
   use_price_incl_tax_ IN VARCHAR2,
   currency_code_      IN VARCHAR2,
   tax_from_defaults_  IN BOOLEAN,
   attr_               IN VARCHAR2);

PROCEDURE Build_Rec_For_Copy_Line___ (
   newrec_                      OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   indrec_                      IN OUT NOCOPY Indicator_Rec,
   attr_                        IN OUT NOCOPY VARCHAR2,
   order_line_rec_              IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   copy_order_adresses_         IN BOOLEAN,
   copy_misc_order_info_        IN BOOLEAN,
   copy_delivery_info_          IN BOOLEAN,
   copy_tax_detail_             IN BOOLEAN,
   copy_pricing_                IN BOOLEAN,
   copy_document_texts_         IN BOOLEAN,
   copy_notes_                  IN BOOLEAN,
   same_customer_               IN BOOLEAN,
   use_price_incl_tax_db_       IN VARCHAR2,
   language_code_               IN VARCHAR2);

PROCEDURE Copy_Order_Line_Address___ (from_order_no_     IN VARCHAR2,
                                   from_line_no_      IN VARCHAR2,
                                   from_rel_no_       IN VARCHAR2,
                                   from_line_item_no_ IN NUMBER,
                                   to_order_no_       IN VARCHAR2,
                                   to_line_no_        IN VARCHAR2,
                                   to_rel_no_         IN VARCHAR2,
                                   to_line_item_no_   IN NUMBER);

PROCEDURE Copy_Staged_Billing___ (
   order_no_             IN VARCHAR2,
   line_no_              IN VARCHAR2,
   rel_no_               IN VARCHAR2,
   line_item_no_         IN NUMBER,
   con_order_no_         IN VARCHAR2,   
   con_line_no_          IN VARCHAR2,
   con_rel_no_           IN VARCHAR2,
   con_line_item_no_     IN NUMBER,
   copy_document_texts_  IN BOOLEAN,
   copy_notes_           IN BOOLEAN );

FUNCTION Internal_Co_Line_Exists___(
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN BOOLEAN;

PROCEDURE Raise_No_Update_Error___;

PROCEDURE Raise_No_Update_Fsm_Error___;

PROCEDURE Raise_Sm_Object_Error___;

PROCEDURE Raise_Scrapped_Object_Error___ (
   sup_sm_object_ IN VARCHAR2 );

PROCEDURE Raise_Sales_Qty_Less_Error___ (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2 );

PROCEDURE Raise_Prepay_Amount_Error___;

PROCEDURE Raise_Info_Message___;

PROCEDURE Raise_Delnote_Info_Message___;

FUNCTION Get_Price_Total___ (
   order_no_              IN VARCHAR2,
   line_no_               IN VARCHAR2,
   rel_no_                IN VARCHAR2,
   line_item_no_          IN NUMBER,
   rental_chargable_days_ IN NUMBER,
   exclude_item_          IN VARCHAR2,
   price_in_base_curr_    IN BOOLEAN ) RETURN NUMBER;

PROCEDURE Check_And_Add_To_Shipment___(
   line_rec_        IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   header_rowstate_ IN VARCHAR2);

PROCEDURE Assign_Rel_Mtrl_Planning___ (
   newrec_            IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   header_rowstate_   IN VARCHAR2 );

FUNCTION Get_Amt_Ratio_Per_Tax_Deliv___ (
   order_no_      IN VARCHAR2,
   tax_code_      IN VARCHAR2,
   delivery_type_ IN VARCHAR2 DEFAULT NULL) RETURN NUMBER;

FUNCTION Get_Planned_Rental_Start_Dt___ (
   attr_        IN  VARCHAR2,
   newrec_      IN  CUSTOMER_ORDER_LINE_TAB%ROWTYPE) RETURN DATE;

FUNCTION Get_Catalog_Description___(
   contract_         IN VARCHAR2,
   catalog_no_       IN VARCHAR2,
   language_code_    IN VARCHAR2,
   customer_no_      IN VARCHAR2 ) RETURN VARCHAR2;

PROCEDURE Get_Condition_Code___(
   condition_code_ IN OUT NOCOPY VARCHAR2,
   part_no_        IN     VARCHAR2   );

PROCEDURE Get_Supply_Code___(
   supply_code_        IN OUT NOCOPY VARCHAR2,
   supply_code_client_ IN OUT NOCOPY VARCHAR2,
   contract_           IN VARCHAR2,
   configurable_       IN VARCHAR2,
   catalog_no_         IN VARCHAR2,
   rental_db_          IN VARCHAR2, 
   sourcing_option_    IN VARCHAR2,
   demand_code_        IN VARCHAR2,
   purchase_part_no_   IN VARCHAR2,
   created_by_server_  IN BOOLEAN );

FUNCTION Get_Vendor_No___(
   supply_code_ IN VARCHAR2,
   rental_db_   IN VARCHAR2,
   contract_    IN VARCHAR2,
   purchase_part_no_ IN VARCHAR2 ) RETURN VARCHAR2;

FUNCTION Get_Supply_Site___(
      supply_code_ IN VARCHAR2,
      vendor_no_   IN VARCHAR2,
      rental_db_   IN VARCHAR2 ) RETURN VARCHAR2;

-----------------------------------------------------------------------------
-------------------- BASE METHODS -------------------------------------------
-----------------------------------------------------------------------------

--@IgnoreMissingSysinit
FUNCTION Get_Key_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN customer_order_line_tab%ROWTYPE
IS
   rec_ customer_order_line_tab%ROWTYPE;
BEGIN
   IF (rowkey_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT order_no, line_no, rel_no, line_item_no
      INTO  rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no
      FROM  customer_order_line_tab
      WHERE rowkey = rowkey_;
   RETURN rec_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN rec_;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no, 'Get_Key_By_Rowkey');
END Get_Key_By_Rowkey;


--@IgnoreMissingSysinit
PROCEDURE Exist (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER )
IS
BEGIN
   IF (NOT Check_Exist___(order_no_, line_no_, rel_no_, line_item_no_)) THEN
      Raise_Record_Not_Exist___(order_no_, line_no_, rel_no_, line_item_no_);
   END IF;
END Exist;


--@IgnoreMissingSysinit
FUNCTION Exists (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN BOOLEAN
IS
BEGIN
   RETURN Check_Exist___(order_no_, line_no_, rel_no_, line_item_no_);
END Exists;


--@IgnoreMissingSysinit
PROCEDURE Rowkey_Exist (
   rowkey_ IN VARCHAR2 )
IS
   order_no_ customer_order_line_tab.order_no%TYPE;
   line_no_ customer_order_line_tab.line_no%TYPE;
   rel_no_ customer_order_line_tab.rel_no%TYPE;
   line_item_no_ customer_order_line_tab.line_item_no%TYPE;
BEGIN
   IF (rowkey_ IS NULL) THEN
      RAISE no_data_found;
   END IF;
   SELECT order_no, line_no, rel_no, line_item_no
   INTO  order_no_, line_no_, rel_no_, line_item_no_
   FROM  customer_order_line_tab
   WHERE rowkey = rowkey_;
EXCEPTION
   WHEN no_data_found THEN
      Raise_Record_Not_Exist___(order_no_, line_no_, rel_no_, line_item_no_);
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Rowkey_Exist___');
END Rowkey_Exist;


--@IgnoreMissingSysinit
FUNCTION Get_Contract (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.contract%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT contract
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Contract');
END Get_Contract;


--@IgnoreMissingSysinit
FUNCTION Get_Company (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ VARCHAR2(20);
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT Site_API.Get_Company(contract)
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Company');
END Get_Company;


--@IgnoreMissingSysinit
FUNCTION Get_Catalog_No (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.catalog_no%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT catalog_no
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Catalog_No');
END Get_Catalog_No;


--@IgnoreMissingSysinit
FUNCTION Get_Note_Id (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.note_id%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT note_id
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Note_Id');
END Get_Note_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Part_No (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.part_no%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT part_no
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Part_No');
END Get_Part_No;


--@IgnoreMissingSysinit
FUNCTION Get_Pre_Accounting_Id (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.pre_accounting_id%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT pre_accounting_id
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Pre_Accounting_Id');
END Get_Pre_Accounting_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Sales_Unit_Meas (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.sales_unit_meas%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT sales_unit_meas
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Sales_Unit_Meas');
END Get_Sales_Unit_Meas;


--@IgnoreMissingSysinit
FUNCTION Get_Base_Sale_Unit_Price (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.base_sale_unit_price%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT base_sale_unit_price
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Base_Sale_Unit_Price');
END Get_Base_Sale_Unit_Price;


--@IgnoreMissingSysinit
FUNCTION Get_Base_Unit_Price_Incl_Tax (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.base_unit_price_incl_tax%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT base_unit_price_incl_tax
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Base_Unit_Price_Incl_Tax');
END Get_Base_Unit_Price_Incl_Tax;


--@IgnoreMissingSysinit
FUNCTION Get_Buy_Qty_Due (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.buy_qty_due%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT buy_qty_due
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Buy_Qty_Due');
END Get_Buy_Qty_Due;


--@IgnoreMissingSysinit
FUNCTION Get_Catalog_Desc (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.catalog_desc%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT catalog_desc
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Catalog_Desc');
END Get_Catalog_Desc;


--@IgnoreMissingSysinit
FUNCTION Get_Catalog_Type (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.catalog_type%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT catalog_type
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN Sales_Part_Type_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Catalog_Type');
END Get_Catalog_Type;


--@IgnoreMissingSysinit
FUNCTION Get_Catalog_Type_Db (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN customer_order_line_tab.catalog_type%TYPE
IS
   temp_ customer_order_line_tab.catalog_type%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT catalog_type
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Catalog_Type_Db');
END Get_Catalog_Type_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Conv_Factor (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.conv_factor%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT conv_factor
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Conv_Factor');
END Get_Conv_Factor;


--@IgnoreMissingSysinit
FUNCTION Get_Cost (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.cost%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT cost
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Cost');
END Get_Cost;


--@IgnoreMissingSysinit
FUNCTION Get_Currency_Rate (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.currency_rate%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT currency_rate
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Currency_Rate');
END Get_Currency_Rate;


--@IgnoreMissingSysinit
FUNCTION Get_Date_Entered (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN DATE
IS
   temp_ customer_order_line_tab.date_entered%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT date_entered
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Date_Entered');
END Get_Date_Entered;


--@IgnoreMissingSysinit
FUNCTION Get_Discount (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.discount%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT discount
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Discount');
END Get_Discount;


--@IgnoreMissingSysinit
FUNCTION Get_Line_Total_Qty (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.line_total_qty%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT line_total_qty
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Line_Total_Qty');
END Get_Line_Total_Qty;


--@IgnoreMissingSysinit
FUNCTION Get_Line_Total_Weight (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.line_total_weight%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT line_total_weight
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Line_Total_Weight');
END Get_Line_Total_Weight;


--@IgnoreMissingSysinit
FUNCTION Get_Note_Text (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.note_text%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT note_text
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Note_Text');
END Get_Note_Text;


--@IgnoreMissingSysinit
FUNCTION Get_Order_Discount (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.order_discount%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT order_discount
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Order_Discount');
END Get_Order_Discount;


--@IgnoreMissingSysinit
FUNCTION Get_Planned_Delivery_Date (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN DATE
IS
   temp_ customer_order_line_tab.planned_delivery_date%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT planned_delivery_date
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Planned_Delivery_Date');
END Get_Planned_Delivery_Date;


--@IgnoreMissingSysinit
FUNCTION Get_Planned_Due_Date (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN DATE
IS
   temp_ customer_order_line_tab.planned_due_date%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT planned_due_date
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Planned_Due_Date');
END Get_Planned_Due_Date;


--@IgnoreMissingSysinit
FUNCTION Get_Supply_Site_Due_Date (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN DATE
IS
   temp_ customer_order_line_tab.supply_site_due_date%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT supply_site_due_date
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Supply_Site_Due_Date');
END Get_Supply_Site_Due_Date;


--@IgnoreMissingSysinit
FUNCTION Get_Price_Conv_Factor (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.price_conv_factor%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT price_conv_factor
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Price_Conv_Factor');
END Get_Price_Conv_Factor;


--@IgnoreMissingSysinit
FUNCTION Get_Promised_Delivery_Date (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN DATE
IS
   temp_ customer_order_line_tab.promised_delivery_date%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT promised_delivery_date
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Promised_Delivery_Date');
END Get_Promised_Delivery_Date;


--@IgnoreMissingSysinit
FUNCTION Get_Qty_Assigned (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.qty_assigned%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT qty_assigned
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Qty_Assigned');
END Get_Qty_Assigned;


--@IgnoreMissingSysinit
FUNCTION Get_Qty_Invoiced (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.qty_invoiced%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT qty_invoiced
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Qty_Invoiced');
END Get_Qty_Invoiced;


--@IgnoreMissingSysinit
FUNCTION Get_Qty_On_Order (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.qty_on_order%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT qty_on_order
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Qty_On_Order');
END Get_Qty_On_Order;


--@IgnoreMissingSysinit
FUNCTION Get_Qty_Picked (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.qty_picked%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT qty_picked
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Qty_Picked');
END Get_Qty_Picked;


--@IgnoreMissingSysinit
FUNCTION Get_Qty_Returned (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.qty_returned%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT qty_returned
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Qty_Returned');
END Get_Qty_Returned;


--@IgnoreMissingSysinit
FUNCTION Get_Qty_Shipdiff (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.qty_shipdiff%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT qty_shipdiff
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Qty_Shipdiff');
END Get_Qty_Shipdiff;


--@IgnoreMissingSysinit
FUNCTION Get_Qty_Shipped (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.qty_shipped%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT qty_shipped
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Qty_Shipped');
END Get_Qty_Shipped;


--@IgnoreMissingSysinit
FUNCTION Get_Qty_To_Ship (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.qty_to_ship%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT qty_to_ship
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Qty_To_Ship');
END Get_Qty_To_Ship;


--@IgnoreMissingSysinit
FUNCTION Get_Qty_Short (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.qty_short%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT qty_short
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Qty_Short');
END Get_Qty_Short;


--@IgnoreMissingSysinit
FUNCTION Get_Real_Ship_Date (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN DATE
IS
   temp_ customer_order_line_tab.real_ship_date%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT real_ship_date
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Real_Ship_Date');
END Get_Real_Ship_Date;


--@IgnoreMissingSysinit
FUNCTION Get_Revised_Qty_Due (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.revised_qty_due%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT revised_qty_due
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Revised_Qty_Due');
END Get_Revised_Qty_Due;


--@IgnoreMissingSysinit
FUNCTION Get_Sale_Unit_Price (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.sale_unit_price%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT sale_unit_price
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Sale_Unit_Price');
END Get_Sale_Unit_Price;


--@IgnoreMissingSysinit
FUNCTION Get_Unit_Price_Incl_Tax (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.unit_price_incl_tax%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT unit_price_incl_tax
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Unit_Price_Incl_Tax');
END Get_Unit_Price_Incl_Tax;


--@IgnoreMissingSysinit
FUNCTION Get_Supply_Code (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.supply_code%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT supply_code
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN Order_Supply_Type_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Supply_Code');
END Get_Supply_Code;


--@IgnoreMissingSysinit
FUNCTION Get_Supply_Code_Db (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN customer_order_line_tab.supply_code%TYPE
IS
   temp_ customer_order_line_tab.supply_code%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT supply_code
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Supply_Code_Db');
END Get_Supply_Code_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Wanted_Delivery_Date (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN DATE
IS
   temp_ customer_order_line_tab.wanted_delivery_date%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT wanted_delivery_date
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Wanted_Delivery_Date');
END Get_Wanted_Delivery_Date;


--@IgnoreMissingSysinit
FUNCTION Get_Delivery_Type (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.delivery_type%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT delivery_type
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Delivery_Type');
END Get_Delivery_Type;


--@IgnoreMissingSysinit
FUNCTION Get_Vendor_No (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.vendor_no%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT vendor_no
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Vendor_No');
END Get_Vendor_No;


--@IgnoreMissingSysinit
FUNCTION Get_Tax_Code (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.tax_code%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT tax_code
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Tax_Code');
END Get_Tax_Code;


--@IgnoreMissingSysinit
FUNCTION Get_Tax_Class_Id (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.tax_class_id%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT tax_class_id
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Tax_Class_Id');
END Get_Tax_Class_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Customer_Part_No (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.customer_part_no%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT customer_part_no
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Customer_Part_No');
END Get_Customer_Part_No;


--@IgnoreMissingSysinit
FUNCTION Get_Customer_Part_Conv_Factor (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.customer_part_conv_factor%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT customer_part_conv_factor
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Customer_Part_Conv_Factor');
END Get_Customer_Part_Conv_Factor;


--@IgnoreMissingSysinit
FUNCTION Get_Customer_Part_Unit_Meas (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.customer_part_unit_meas%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT customer_part_unit_meas
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Customer_Part_Unit_Meas');
END Get_Customer_Part_Unit_Meas;


--@IgnoreMissingSysinit
FUNCTION Get_Customer_Part_Buy_Qty (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.customer_part_buy_qty%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT customer_part_buy_qty
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Customer_Part_Buy_Qty');
END Get_Customer_Part_Buy_Qty;


--@IgnoreMissingSysinit
FUNCTION Get_Planned_Ship_Date (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN DATE
IS
   temp_ customer_order_line_tab.planned_ship_date%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT planned_ship_date
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Planned_Ship_Date');
END Get_Planned_Ship_Date;


--@IgnoreMissingSysinit
FUNCTION Get_Planned_Ship_Period (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.planned_ship_period%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT planned_ship_period
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Planned_Ship_Period');
END Get_Planned_Ship_Period;


--@IgnoreMissingSysinit
FUNCTION Get_Customer_No (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.customer_no%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT customer_no
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Customer_No');
END Get_Customer_No;


--@IgnoreMissingSysinit
FUNCTION Get_Consignment_Stock (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.consignment_stock%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT consignment_stock
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN Consignment_Stock_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Consignment_Stock');
END Get_Consignment_Stock;


--@IgnoreMissingSysinit
FUNCTION Get_Consignment_Stock_Db (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN customer_order_line_tab.consignment_stock%TYPE
IS
   temp_ customer_order_line_tab.consignment_stock%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT consignment_stock
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Consignment_Stock_Db');
END Get_Consignment_Stock_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Close_Tolerance (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.close_tolerance%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT close_tolerance
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Close_Tolerance');
END Get_Close_Tolerance;


--@IgnoreMissingSysinit
FUNCTION Get_Price_List_No (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.price_list_no%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT price_list_no
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Price_List_No');
END Get_Price_List_No;


--@IgnoreMissingSysinit
FUNCTION Get_Charged_Item (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.charged_item%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT charged_item
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN Charged_Item_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Charged_Item');
END Get_Charged_Item;


--@IgnoreMissingSysinit
FUNCTION Get_Charged_Item_Db (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN customer_order_line_tab.charged_item%TYPE
IS
   temp_ customer_order_line_tab.charged_item%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT charged_item
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Charged_Item_Db');
END Get_Charged_Item_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Demand_Order_Ref1 (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.demand_order_ref1%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT demand_order_ref1
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Demand_Order_Ref1');
END Get_Demand_Order_Ref1;


--@IgnoreMissingSysinit
FUNCTION Get_Demand_Order_Ref2 (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.demand_order_ref2%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT demand_order_ref2
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Demand_Order_Ref2');
END Get_Demand_Order_Ref2;


--@IgnoreMissingSysinit
FUNCTION Get_Demand_Order_Ref3 (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.demand_order_ref3%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT demand_order_ref3
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Demand_Order_Ref3');
END Get_Demand_Order_Ref3;


--@IgnoreMissingSysinit
FUNCTION Get_Demand_Order_Ref4 (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.demand_order_ref4%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT demand_order_ref4
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Demand_Order_Ref4');
END Get_Demand_Order_Ref4;


--@IgnoreMissingSysinit
FUNCTION Get_Demand_Code (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.demand_code%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT demand_code
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN Order_Supply_Type_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Demand_Code');
END Get_Demand_Code;


--@IgnoreMissingSysinit
FUNCTION Get_Demand_Code_Db (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN customer_order_line_tab.demand_code%TYPE
IS
   temp_ customer_order_line_tab.demand_code%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT demand_code
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Demand_Code_Db');
END Get_Demand_Code_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Dop_Connection (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.dop_connection%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT dop_connection
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN Dop_Connection_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Dop_Connection');
END Get_Dop_Connection;


--@IgnoreMissingSysinit
FUNCTION Get_Dop_Connection_Db (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN customer_order_line_tab.dop_connection%TYPE
IS
   temp_ customer_order_line_tab.dop_connection%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT dop_connection
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Dop_Connection_Db');
END Get_Dop_Connection_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Create_Sm_Object_Option (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.create_sm_object_option%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT create_sm_object_option
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN Create_Sm_Object_Option_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Create_Sm_Object_Option');
END Get_Create_Sm_Object_Option;


--@IgnoreMissingSysinit
FUNCTION Get_Create_Sm_Object_Option_Db (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN customer_order_line_tab.create_sm_object_option%TYPE
IS
   temp_ customer_order_line_tab.create_sm_object_option%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT create_sm_object_option
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Create_Sm_Object_Option_Db');
END Get_Create_Sm_Object_Option_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Default_Addr_Flag (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.default_addr_flag%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT default_addr_flag
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN Gen_Yes_No_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Default_Addr_Flag');
END Get_Default_Addr_Flag;


--@IgnoreMissingSysinit
FUNCTION Get_Default_Addr_Flag_Db (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN customer_order_line_tab.default_addr_flag%TYPE
IS
   temp_ customer_order_line_tab.default_addr_flag%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT default_addr_flag
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Default_Addr_Flag_Db');
END Get_Default_Addr_Flag_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Addr_Flag (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.addr_flag%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT addr_flag
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN Gen_Yes_No_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Addr_Flag');
END Get_Addr_Flag;


--@IgnoreMissingSysinit
FUNCTION Get_Addr_Flag_Db (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN customer_order_line_tab.addr_flag%TYPE
IS
   temp_ customer_order_line_tab.addr_flag%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT addr_flag
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Addr_Flag_Db');
END Get_Addr_Flag_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Ship_Addr_No (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.ship_addr_no%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT ship_addr_no
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Ship_Addr_No');
END Get_Ship_Addr_No;


--@IgnoreMissingSysinit
FUNCTION Get_Route_Id (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.route_id%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT route_id
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Route_Id');
END Get_Route_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Forward_Agent_Id (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.forward_agent_id%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT forward_agent_id
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Forward_Agent_Id');
END Get_Forward_Agent_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Ship_Via_Code (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.ship_via_code%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT ship_via_code
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Ship_Via_Code');
END Get_Ship_Via_Code;


--@IgnoreMissingSysinit
FUNCTION Get_Delivery_Terms (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.delivery_terms%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT delivery_terms
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Delivery_Terms');
END Get_Delivery_Terms;


--@IgnoreMissingSysinit
FUNCTION Get_Delivery_Leadtime (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.delivery_leadtime%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT delivery_leadtime
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Delivery_Leadtime');
END Get_Delivery_Leadtime;


--@IgnoreMissingSysinit
FUNCTION Get_District_Code (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.district_code%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT district_code
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_District_Code');
END Get_District_Code;


--@IgnoreMissingSysinit
FUNCTION Get_Region_Code (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.region_code%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT region_code
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Region_Code');
END Get_Region_Code;


--@IgnoreMissingSysinit
FUNCTION Get_Desired_Qty (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.desired_qty%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT desired_qty
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Desired_Qty');
END Get_Desired_Qty;


--@IgnoreMissingSysinit
FUNCTION Get_Purchase_Part_No (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.purchase_part_no%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT purchase_part_no
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Purchase_Part_No');
END Get_Purchase_Part_No;


--@IgnoreMissingSysinit
FUNCTION Get_Staged_Billing (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.staged_billing%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT staged_billing
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN Staged_Billing_Type_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Staged_Billing');
END Get_Staged_Billing;


--@IgnoreMissingSysinit
FUNCTION Get_Staged_Billing_Db (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN customer_order_line_tab.staged_billing%TYPE
IS
   temp_ customer_order_line_tab.staged_billing%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT staged_billing
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Staged_Billing_Db');
END Get_Staged_Billing_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Tax_Liability (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.tax_liability%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT tax_liability
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Tax_Liability');
END Get_Tax_Liability;


--@IgnoreMissingSysinit
FUNCTION Get_Original_Part_No (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.original_part_no%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT original_part_no
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Original_Part_No');
END Get_Original_Part_No;


--@IgnoreMissingSysinit
FUNCTION Get_Equipment_Object_Seq (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.equipment_object_seq%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT equipment_object_seq
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Equipment_Object_Seq');
END Get_Equipment_Object_Seq;


--@IgnoreMissingSysinit
FUNCTION Get_Sup_Sm_Contract (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.sup_sm_contract%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT sup_sm_contract
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Sup_Sm_Contract');
END Get_Sup_Sm_Contract;


--@IgnoreMissingSysinit
FUNCTION Get_Sup_Sm_Object (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.sup_sm_object%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT sup_sm_object
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Sup_Sm_Object');
END Get_Sup_Sm_Object;


--@IgnoreMissingSysinit
FUNCTION Get_Sm_Connection (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.sm_connection%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT sm_connection
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN Service_Management_Connect_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Sm_Connection');
END Get_Sm_Connection;


--@IgnoreMissingSysinit
FUNCTION Get_Sm_Connection_Db (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN customer_order_line_tab.sm_connection%TYPE
IS
   temp_ customer_order_line_tab.sm_connection%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT sm_connection
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Sm_Connection_Db');
END Get_Sm_Connection_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Part_Price (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.part_price%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT part_price
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Part_Price');
END Get_Part_Price;


--@IgnoreMissingSysinit
FUNCTION Get_Calc_Char_Price (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.calc_char_price%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT calc_char_price
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Calc_Char_Price');
END Get_Calc_Char_Price;


--@IgnoreMissingSysinit
FUNCTION Get_Char_Price (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.char_price%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT char_price
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Char_Price');
END Get_Char_Price;


--@IgnoreMissingSysinit
FUNCTION Get_Price_Source (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.price_source%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT price_source
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN Pricing_Source_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Price_Source');
END Get_Price_Source;


--@IgnoreMissingSysinit
FUNCTION Get_Price_Source_Db (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN customer_order_line_tab.price_source%TYPE
IS
   temp_ customer_order_line_tab.price_source%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT price_source
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Price_Source_Db');
END Get_Price_Source_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Price_Freeze (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.price_freeze%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT price_freeze
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN Freeze_Flag_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Price_Freeze');
END Get_Price_Freeze;


--@IgnoreMissingSysinit
FUNCTION Get_Price_Freeze_Db (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN customer_order_line_tab.price_freeze%TYPE
IS
   temp_ customer_order_line_tab.price_freeze%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT price_freeze
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Price_Freeze_Db');
END Get_Price_Freeze_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Dock_Code (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.dock_code%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT dock_code
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Dock_Code');
END Get_Dock_Code;


--@IgnoreMissingSysinit
FUNCTION Get_Sub_Dock_Code (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.sub_dock_code%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT sub_dock_code
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Sub_Dock_Code');
END Get_Sub_Dock_Code;


--@IgnoreMissingSysinit
FUNCTION Get_Ref_Id (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.ref_id%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT ref_id
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Ref_Id');
END Get_Ref_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Location_No (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.location_no%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT location_no
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Location_No');
END Get_Location_No;


--@IgnoreMissingSysinit
FUNCTION Get_Configuration_Id (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.configuration_id%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT configuration_id
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Configuration_Id');
END Get_Configuration_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Price_Effectivity_Date (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN DATE
IS
   temp_ customer_order_line_tab.price_effectivity_date%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT price_effectivity_date
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Price_Effectivity_Date');
END Get_Price_Effectivity_Date;


--@IgnoreMissingSysinit
FUNCTION Get_Configured_Line_Price_Id (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.configured_line_price_id%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT configured_line_price_id
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Configured_Line_Price_Id');
END Get_Configured_Line_Price_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Latest_Release_Date (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN DATE
IS
   temp_ customer_order_line_tab.latest_release_date%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT latest_release_date
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Latest_Release_Date');
END Get_Latest_Release_Date;


--@IgnoreMissingSysinit
FUNCTION Get_Ctp_Planned (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.ctp_planned%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT ctp_planned
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN Gen_Yes_No_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Ctp_Planned');
END Get_Ctp_Planned;


--@IgnoreMissingSysinit
FUNCTION Get_Ctp_Planned_Db (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN customer_order_line_tab.ctp_planned%TYPE
IS
   temp_ customer_order_line_tab.ctp_planned%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT ctp_planned
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Ctp_Planned_Db');
END Get_Ctp_Planned_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Job_Id (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.job_id%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT job_id
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Job_Id');
END Get_Job_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Cust_Warranty_Id (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.cust_warranty_id%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT cust_warranty_id
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Cust_Warranty_Id');
END Get_Cust_Warranty_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Price_Source_Id (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.price_source_id%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT price_source_id
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Price_Source_Id');
END Get_Price_Source_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Intrastat_Exempt (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.intrastat_exempt%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT intrastat_exempt
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN Intrastat_Exempt_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Intrastat_Exempt');
END Get_Intrastat_Exempt;


--@IgnoreMissingSysinit
FUNCTION Get_Intrastat_Exempt_Db (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN customer_order_line_tab.intrastat_exempt%TYPE
IS
   temp_ customer_order_line_tab.intrastat_exempt%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT intrastat_exempt
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Intrastat_Exempt_Db');
END Get_Intrastat_Exempt_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Price_Unit_Meas (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.price_unit_meas%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT price_unit_meas
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Price_Unit_Meas');
END Get_Price_Unit_Meas;


--@IgnoreMissingSysinit
FUNCTION Get_Condition_Code (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.condition_code%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT condition_code
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Condition_Code');
END Get_Condition_Code;


--@IgnoreMissingSysinit
FUNCTION Get_Additional_Discount (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.additional_discount%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT additional_discount
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Additional_Discount');
END Get_Additional_Discount;


--@IgnoreMissingSysinit
FUNCTION Get_Part_Ownership (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.part_ownership%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT part_ownership
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN Part_Ownership_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Part_Ownership');
END Get_Part_Ownership;


--@IgnoreMissingSysinit
FUNCTION Get_Part_Ownership_Db (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN customer_order_line_tab.part_ownership%TYPE
IS
   temp_ customer_order_line_tab.part_ownership%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT part_ownership
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Part_Ownership_Db');
END Get_Part_Ownership_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Owning_Customer_No (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.owning_customer_no%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT owning_customer_no
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Owning_Customer_No');
END Get_Owning_Customer_No;


--@IgnoreMissingSysinit
FUNCTION Get_Exchange_Item (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.exchange_item%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT exchange_item
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN Exchange_Item_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Exchange_Item');
END Get_Exchange_Item;


--@IgnoreMissingSysinit
FUNCTION Get_Exchange_Item_Db (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN customer_order_line_tab.exchange_item%TYPE
IS
   temp_ customer_order_line_tab.exchange_item%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT exchange_item
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Exchange_Item_Db');
END Get_Exchange_Item_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Supply_Site_Reserve_Type (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.supply_site_reserve_type%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT supply_site_reserve_type
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN Supply_Site_Reserve_Type_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Supply_Site_Reserve_Type');
END Get_Supply_Site_Reserve_Type;


--@IgnoreMissingSysinit
FUNCTION Get_Supply_Site_Reserve_Typ_Db (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN customer_order_line_tab.supply_site_reserve_type%TYPE
IS
   temp_ customer_order_line_tab.supply_site_reserve_type%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT supply_site_reserve_type
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Supply_Site_Reserve_Typ_Db');
END Get_Supply_Site_Reserve_Typ_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Originating_Rel_No (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.originating_rel_no%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT originating_rel_no
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Originating_Rel_No');
END Get_Originating_Rel_No;


--@IgnoreMissingSysinit
FUNCTION Get_Originating_Line_Item_No (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.originating_line_item_no%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT originating_line_item_no
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Originating_Line_Item_No');
END Get_Originating_Line_Item_No;


--@IgnoreMissingSysinit
FUNCTION Get_Release_Planning (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.release_planning%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT release_planning
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN Release_Planning_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Release_Planning');
END Get_Release_Planning;


--@IgnoreMissingSysinit
FUNCTION Get_Release_Planning_Db (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN customer_order_line_tab.release_planning%TYPE
IS
   temp_ customer_order_line_tab.release_planning%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT release_planning
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Release_Planning_Db');
END Get_Release_Planning_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Supplier_Ship_Via_Transit (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.supplier_ship_via_transit%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT supplier_ship_via_transit
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Supplier_Ship_Via_Transit');
END Get_Supplier_Ship_Via_Transit;


--@IgnoreMissingSysinit
FUNCTION Get_Supply_Site (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.supply_site%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT supply_site
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Supply_Site');
END Get_Supply_Site;


--@IgnoreMissingSysinit
FUNCTION Get_Shipment_Connected (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.shipment_connected%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT shipment_connected
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN Fnd_Boolean_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Shipment_Connected');
END Get_Shipment_Connected;


--@IgnoreMissingSysinit
FUNCTION Get_Shipment_Connected_Db (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN customer_order_line_tab.shipment_connected%TYPE
IS
   temp_ customer_order_line_tab.shipment_connected%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT shipment_connected
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Shipment_Connected_Db');
END Get_Shipment_Connected_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Self_Billing (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.self_billing%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT self_billing
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN Self_Billing_Type_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Self_Billing');
END Get_Self_Billing;


--@IgnoreMissingSysinit
FUNCTION Get_Self_Billing_Db (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN customer_order_line_tab.self_billing%TYPE
IS
   temp_ customer_order_line_tab.self_billing%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT self_billing
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Self_Billing_Db');
END Get_Self_Billing_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Activity_Seq (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.activity_seq%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT activity_seq
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Activity_Seq');
END Get_Activity_Seq;


--@IgnoreMissingSysinit
FUNCTION Get_Project_Id (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.project_id%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT project_id
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Project_Id');
END Get_Project_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Deliver_To_Customer_No (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.deliver_to_customer_no%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT deliver_to_customer_no
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Deliver_To_Customer_No');
END Get_Deliver_To_Customer_No;


--@IgnoreMissingSysinit
FUNCTION Get_Contact (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.contact%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT contact
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Contact');
END Get_Contact;


--@IgnoreMissingSysinit
FUNCTION Get_Input_Qty (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.input_qty%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT input_qty
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Input_Qty');
END Get_Input_Qty;


--@IgnoreMissingSysinit
FUNCTION Get_Input_Unit_Meas (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.input_unit_meas%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT input_unit_meas
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Input_Unit_Meas');
END Get_Input_Unit_Meas;


--@IgnoreMissingSysinit
FUNCTION Get_Input_Conv_Factor (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.input_conv_factor%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT input_conv_factor
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Input_Conv_Factor');
END Get_Input_Conv_Factor;


--@IgnoreMissingSysinit
FUNCTION Get_Shipment_Creation (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.shipment_creation%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT shipment_creation
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN Shipment_Creation_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Shipment_Creation');
END Get_Shipment_Creation;


--@IgnoreMissingSysinit
FUNCTION Get_Shipment_Creation_Db (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN customer_order_line_tab.shipment_creation%TYPE
IS
   temp_ customer_order_line_tab.shipment_creation%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT shipment_creation
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Shipment_Creation_Db');
END Get_Shipment_Creation_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Delivery_Sequence (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.delivery_sequence%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT delivery_sequence
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Delivery_Sequence');
END Get_Delivery_Sequence;


--@IgnoreMissingSysinit
FUNCTION Get_Cancel_Reason (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.cancel_reason%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT cancel_reason
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Cancel_Reason');
END Get_Cancel_Reason;


--@IgnoreMissingSysinit
FUNCTION Get_Delivery_Confirmed (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.delivery_confirmed%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT delivery_confirmed
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN Fnd_Boolean_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Delivery_Confirmed');
END Get_Delivery_Confirmed;


--@IgnoreMissingSysinit
FUNCTION Get_Delivery_Confirmed_Db (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN customer_order_line_tab.delivery_confirmed%TYPE
IS
   temp_ customer_order_line_tab.delivery_confirmed%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT delivery_confirmed
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Delivery_Confirmed_Db');
END Get_Delivery_Confirmed_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Customer_Po_Line_No (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.customer_po_line_no%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT customer_po_line_no
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Customer_Po_Line_No');
END Get_Customer_Po_Line_No;


--@IgnoreMissingSysinit
FUNCTION Get_Customer_Po_Rel_No (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.customer_po_rel_no%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT customer_po_rel_no
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Customer_Po_Rel_No');
END Get_Customer_Po_Rel_No;


--@IgnoreMissingSysinit
FUNCTION Get_Qty_Confirmeddiff (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.qty_confirmeddiff%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT qty_confirmeddiff
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Qty_Confirmeddiff');
END Get_Qty_Confirmeddiff;


--@IgnoreMissingSysinit
FUNCTION Get_Blocked_For_Invoicing (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.blocked_for_invoicing%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT blocked_for_invoicing
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN Fnd_Boolean_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Blocked_For_Invoicing');
END Get_Blocked_For_Invoicing;


--@IgnoreMissingSysinit
FUNCTION Get_Blocked_For_Invoicing_Db (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN customer_order_line_tab.blocked_for_invoicing%TYPE
IS
   temp_ customer_order_line_tab.blocked_for_invoicing%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT blocked_for_invoicing
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Blocked_For_Invoicing_Db');
END Get_Blocked_For_Invoicing_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Provisional_Price (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.provisional_price%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT provisional_price
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN Fnd_Boolean_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Provisional_Price');
END Get_Provisional_Price;


--@IgnoreMissingSysinit
FUNCTION Get_Provisional_Price_Db (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN customer_order_line_tab.provisional_price%TYPE
IS
   temp_ customer_order_line_tab.provisional_price%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT provisional_price
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Provisional_Price_Db');
END Get_Provisional_Price_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Receiving_Advice_Type (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.receiving_advice_type%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT receiving_advice_type
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN Receiving_Advice_Type_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Receiving_Advice_Type');
END Get_Receiving_Advice_Type;


--@IgnoreMissingSysinit
FUNCTION Get_Receiving_Advice_Type_Db (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN customer_order_line_tab.receiving_advice_type%TYPE
IS
   temp_ customer_order_line_tab.receiving_advice_type%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT receiving_advice_type
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Receiving_Advice_Type_Db');
END Get_Receiving_Advice_Type_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Tax_Id_No (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.tax_id_no%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT tax_id_no
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Tax_Id_No');
END Get_Tax_Id_No;


--@IgnoreMissingSysinit
FUNCTION Get_Tax_Id_Validated_Date (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN DATE
IS
   temp_ customer_order_line_tab.tax_id_validated_date%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT tax_id_validated_date
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Tax_Id_Validated_Date');
END Get_Tax_Id_Validated_Date;


--@IgnoreMissingSysinit
FUNCTION Get_Price_Source_Net_Price (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.price_source_net_price%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT price_source_net_price
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN Fnd_Boolean_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Price_Source_Net_Price');
END Get_Price_Source_Net_Price;


--@IgnoreMissingSysinit
FUNCTION Get_Price_Source_Net_Price_Db (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN customer_order_line_tab.price_source_net_price%TYPE
IS
   temp_ customer_order_line_tab.price_source_net_price%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT price_source_net_price
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Price_Source_Net_Price_Db');
END Get_Price_Source_Net_Price_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Target_Date (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN DATE
IS
   temp_ customer_order_line_tab.target_date%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT target_date
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Target_Date');
END Get_Target_Date;


--@IgnoreMissingSysinit
FUNCTION Get_Allocation_Id (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.allocation_id%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT allocation_id
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Allocation_Id');
END Get_Allocation_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Del_Terms_Location (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.del_terms_location%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT del_terms_location
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Del_Terms_Location');
END Get_Del_Terms_Location;


--@IgnoreMissingSysinit
FUNCTION Get_Classification_Part_No (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.classification_part_no%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT classification_part_no
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Classification_Part_No');
END Get_Classification_Part_No;


--@IgnoreMissingSysinit
FUNCTION Get_Classification_Unit_Meas (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.classification_unit_meas%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT classification_unit_meas
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Classification_Unit_Meas');
END Get_Classification_Unit_Meas;


--@IgnoreMissingSysinit
FUNCTION Get_Classification_Standard (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.classification_standard%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT classification_standard
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Classification_Standard');
END Get_Classification_Standard;


--@IgnoreMissingSysinit
FUNCTION Get_Rebate_Builder (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.rebate_builder%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT rebate_builder
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN Fnd_Boolean_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Rebate_Builder');
END Get_Rebate_Builder;


--@IgnoreMissingSysinit
FUNCTION Get_Rebate_Builder_Db (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN customer_order_line_tab.rebate_builder%TYPE
IS
   temp_ customer_order_line_tab.rebate_builder%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT rebate_builder
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Rebate_Builder_Db');
END Get_Rebate_Builder_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Line_Total_Weight_Gross (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.line_total_weight_gross%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT line_total_weight_gross
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Line_Total_Weight_Gross');
END Get_Line_Total_Weight_Gross;


--@IgnoreMissingSysinit
FUNCTION Get_Freight_Map_Id (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.freight_map_id%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT freight_map_id
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Freight_Map_Id');
END Get_Freight_Map_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Zone_Id (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.zone_id%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT zone_id
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Zone_Id');
END Get_Zone_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Freight_Price_List_No (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.freight_price_list_no%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT freight_price_list_no
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Freight_Price_List_No');
END Get_Freight_Price_List_No;


--@IgnoreMissingSysinit
FUNCTION Get_Adjusted_Weight_Net (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.adjusted_weight_net%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT adjusted_weight_net
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Adjusted_Weight_Net');
END Get_Adjusted_Weight_Net;


--@IgnoreMissingSysinit
FUNCTION Get_Adjusted_Weight_Gross (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.adjusted_weight_gross%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT adjusted_weight_gross
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Adjusted_Weight_Gross');
END Get_Adjusted_Weight_Gross;


--@IgnoreMissingSysinit
FUNCTION Get_Adjusted_Volume (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.adjusted_volume%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT adjusted_volume
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Adjusted_Volume');
END Get_Adjusted_Volume;


--@IgnoreMissingSysinit
FUNCTION Get_Freight_Free (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.freight_free%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT freight_free
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN Fnd_Boolean_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Freight_Free');
END Get_Freight_Free;


--@IgnoreMissingSysinit
FUNCTION Get_Freight_Free_Db (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN customer_order_line_tab.freight_free%TYPE
IS
   temp_ customer_order_line_tab.freight_free%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT freight_free
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Freight_Free_Db');
END Get_Freight_Free_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Part_Level (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.part_level%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT part_level
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN Price_Discount_Part_Level_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Part_Level');
END Get_Part_Level;


--@IgnoreMissingSysinit
FUNCTION Get_Part_Level_Db (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN customer_order_line_tab.part_level%TYPE
IS
   temp_ customer_order_line_tab.part_level%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT part_level
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Part_Level_Db');
END Get_Part_Level_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Part_Level_Id (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.part_level_id%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT part_level_id
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Part_Level_Id');
END Get_Part_Level_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Customer_Level (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.customer_level%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT customer_level
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN Price_Discount_Cust_Level_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Customer_Level');
END Get_Customer_Level;


--@IgnoreMissingSysinit
FUNCTION Get_Customer_Level_Db (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN customer_order_line_tab.customer_level%TYPE
IS
   temp_ customer_order_line_tab.customer_level%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT customer_level
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Customer_Level_Db');
END Get_Customer_Level_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Customer_Level_Id (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.customer_level_id%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT customer_level_id
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Customer_Level_Id');
END Get_Customer_Level_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Load_Id (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.load_id%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT load_id
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Load_Id');
END Get_Load_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Customs_Value (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.customs_value%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT customs_value
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Customs_Value');
END Get_Customs_Value;


--@IgnoreMissingSysinit
FUNCTION Get_Abnormal_Demand (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.abnormal_demand%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT abnormal_demand
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN Fnd_Boolean_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Abnormal_Demand');
END Get_Abnormal_Demand;


--@IgnoreMissingSysinit
FUNCTION Get_Abnormal_Demand_Db (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN customer_order_line_tab.abnormal_demand%TYPE
IS
   temp_ customer_order_line_tab.abnormal_demand%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT abnormal_demand
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Abnormal_Demand_Db');
END Get_Abnormal_Demand_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Cust_Calendar_Id (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.cust_calendar_id%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT cust_calendar_id
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Cust_Calendar_Id');
END Get_Cust_Calendar_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Ext_Transport_Calendar_Id (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.ext_transport_calendar_id%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT ext_transport_calendar_id
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Ext_Transport_Calendar_Id');
END Get_Ext_Transport_Calendar_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Rel_Mtrl_Planning (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.rel_mtrl_planning%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT rel_mtrl_planning
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Rel_Mtrl_Planning');
END Get_Rel_Mtrl_Planning;


--@IgnoreMissingSysinit
FUNCTION Get_Qty_Per_Assembly (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.qty_per_assembly%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT qty_per_assembly
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Qty_Per_Assembly');
END Get_Qty_Per_Assembly;


--@IgnoreMissingSysinit
FUNCTION Get_New_Comp_After_Delivery (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.new_comp_after_delivery%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT new_comp_after_delivery
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_New_Comp_After_Delivery');
END Get_New_Comp_After_Delivery;


--@IgnoreMissingSysinit
FUNCTION Get_Inverted_Conv_Factor (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.inverted_conv_factor%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT inverted_conv_factor
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Inverted_Conv_Factor');
END Get_Inverted_Conv_Factor;


--@IgnoreMissingSysinit
FUNCTION Get_Rental (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.rental%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT rental
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN Fnd_Boolean_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Rental');
END Get_Rental;


--@IgnoreMissingSysinit
FUNCTION Get_Rental_Db (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN customer_order_line_tab.rental%TYPE
IS
   temp_ customer_order_line_tab.rental%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT rental
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Rental_Db');
END Get_Rental_Db;


--@IgnoreMissingSysinit
FUNCTION Get_End_Customer_Id (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.end_customer_id%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT end_customer_id
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_End_Customer_Id');
END Get_End_Customer_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Picking_Leadtime (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.picking_leadtime%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT picking_leadtime
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Picking_Leadtime');
END Get_Picking_Leadtime;


--@IgnoreMissingSysinit
FUNCTION Get_Shipment_Type (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.shipment_type%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT shipment_type
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Shipment_Type');
END Get_Shipment_Type;


--@IgnoreMissingSysinit
FUNCTION Get_Open_Shipment_Qty (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.open_shipment_qty%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT open_shipment_qty
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Open_Shipment_Qty');
END Get_Open_Shipment_Qty;


--@IgnoreMissingSysinit
FUNCTION Get_Packing_Instruction_Id (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.packing_instruction_id%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT packing_instruction_id
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Packing_Instruction_Id');
END Get_Packing_Instruction_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Originating_Co_Lang_Code (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.originating_co_lang_code%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT originating_co_lang_code
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Originating_Co_Lang_Code');
END Get_Originating_Co_Lang_Code;


--@IgnoreMissingSysinit
FUNCTION Get_Cust_Part_Invert_Conv_Fact (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.cust_part_invert_conv_fact%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT cust_part_invert_conv_fact
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Cust_Part_Invert_Conv_Fact');
END Get_Cust_Part_Invert_Conv_Fact;


--@IgnoreMissingSysinit
FUNCTION Get_Country_Code (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.country_code%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT country_code
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Country_Code');
END Get_Country_Code;


--@IgnoreMissingSysinit
FUNCTION Get_Tax_Liability_Type (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.tax_liability_type%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT tax_liability_type
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN Tax_Liability_Type_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Tax_Liability_Type');
END Get_Tax_Liability_Type;


--@IgnoreMissingSysinit
FUNCTION Get_Tax_Liability_Type_Db (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN customer_order_line_tab.tax_liability_type%TYPE
IS
   temp_ customer_order_line_tab.tax_liability_type%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT tax_liability_type
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Tax_Liability_Type_Db');
END Get_Tax_Liability_Type_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Free_Of_Charge (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.free_of_charge%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT free_of_charge
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN Fnd_Boolean_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Free_Of_Charge');
END Get_Free_Of_Charge;


--@IgnoreMissingSysinit
FUNCTION Get_Free_Of_Charge_Db (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN customer_order_line_tab.free_of_charge%TYPE
IS
   temp_ customer_order_line_tab.free_of_charge%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT free_of_charge
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Free_Of_Charge_Db');
END Get_Free_Of_Charge_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Free_Of_Charge_Tax_Basis (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.free_of_charge_tax_basis%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT free_of_charge_tax_basis
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Free_Of_Charge_Tax_Basis');
END Get_Free_Of_Charge_Tax_Basis;


--@IgnoreMissingSysinit
FUNCTION Get_Tax_Calc_Structure_Id (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.tax_calc_structure_id%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT tax_calc_structure_id
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Tax_Calc_Structure_Id');
END Get_Tax_Calc_Structure_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Customer_Tax_Usage_Type (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.customer_tax_usage_type%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT customer_tax_usage_type
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Customer_Tax_Usage_Type');
END Get_Customer_Tax_Usage_Type;


--@IgnoreMissingSysinit
FUNCTION Get_Supply_Site_Part_No (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.supply_site_part_no%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT supply_site_part_no
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Supply_Site_Part_No');
END Get_Supply_Site_Part_No;


--@IgnoreMissingSysinit
FUNCTION Get_Acquisition_Origin (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.acquisition_origin%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT acquisition_origin
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Acquisition_Origin');
END Get_Acquisition_Origin;


--@IgnoreMissingSysinit
FUNCTION Get_Statistical_Code (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.statistical_code%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT statistical_code
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Statistical_Code');
END Get_Statistical_Code;


--@IgnoreMissingSysinit
FUNCTION Get_Original_Discount (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.original_discount%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT original_discount
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Original_Discount');
END Get_Original_Discount;


--@IgnoreMissingSysinit
FUNCTION Get_Original_Add_Discount (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.original_add_discount%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT original_add_discount
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Original_Add_Discount');
END Get_Original_Add_Discount;


--@IgnoreMissingSysinit
FUNCTION Get_Original_Order_Discount (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ customer_order_line_tab.original_order_discount%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT original_order_discount
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Original_Order_Discount');
END Get_Original_Order_Discount;


--@IgnoreMissingSysinit
FUNCTION Get_Acquisition_Reason_Id (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.acquisition_reason_id%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT acquisition_reason_id
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Acquisition_Reason_Id');
END Get_Acquisition_Reason_Id;


--@IgnoreMissingSysinit
FUNCTION Get_State (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
BEGIN
   RETURN Finite_State_Decode__(Get_Objstate(order_no_, line_no_, rel_no_, line_item_no_));
END Get_State;


--@IgnoreMissingSysinit
FUNCTION Get_Objstate (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.rowstate%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT rowstate
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Objstate');
END Get_Objstate;


--@IgnoreMissingSysinit
FUNCTION Get_Objevents (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
BEGIN
   RETURN Finite_State_Events__(Get_Objstate(order_no_, line_no_, rel_no_, line_item_no_));
END Get_Objevents;


--@IgnoreMissingSysinit
FUNCTION Get_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN Public_Rec
IS
   rowrec_ customer_order_line_tab%ROWTYPE;
BEGIN
   rowrec_ := Get_Key_By_Rowkey(rowkey_);
   RETURN Get(rowrec_.order_no, rowrec_.line_no, rowrec_.rel_no, rowrec_.line_item_no);
END Get_By_Rowkey;


--@IgnoreMissingSysinit
FUNCTION Get (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN Public_Rec
IS
   temp_ Public_Rec;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT order_no, line_no, rel_no, line_item_no, rowid, rowversion, rowkey, rowstate,
          contract, 
          Site_API.Get_Company(contract), 
          catalog_no, 
          note_id, 
          part_no, 
          pre_accounting_id, 
          sales_unit_meas, 
          base_sale_unit_price, 
          base_unit_price_incl_tax, 
          buy_qty_due, 
          catalog_desc, 
          catalog_type, 
          conv_factor, 
          cost, 
          currency_rate, 
          date_entered, 
          discount, 
          line_total_qty, 
          line_total_weight, 
          note_text, 
          order_discount, 
          planned_delivery_date, 
          planned_due_date, 
          supply_site_due_date, 
          price_conv_factor, 
          promised_delivery_date, 
          qty_assigned, 
          qty_invoiced, 
          qty_on_order, 
          qty_picked, 
          qty_returned, 
          qty_shipdiff, 
          qty_shipped, 
          qty_to_ship, 
          qty_short, 
          real_ship_date, 
          revised_qty_due, 
          sale_unit_price, 
          unit_price_incl_tax, 
          supply_code, 
          wanted_delivery_date, 
          delivery_type, 
          vendor_no, 
          tax_code, 
          tax_class_id, 
          customer_part_no, 
          customer_part_conv_factor, 
          customer_part_unit_meas, 
          customer_part_buy_qty, 
          planned_ship_date, 
          planned_ship_period, 
          customer_no, 
          consignment_stock, 
          close_tolerance, 
          price_list_no, 
          charged_item, 
          demand_order_ref1, 
          demand_order_ref2, 
          demand_order_ref3, 
          demand_order_ref4, 
          demand_code, 
          dop_connection, 
          create_sm_object_option, 
          default_addr_flag, 
          addr_flag, 
          ship_addr_no, 
          route_id, 
          forward_agent_id, 
          ship_via_code, 
          delivery_terms, 
          delivery_leadtime, 
          district_code, 
          region_code, 
          desired_qty, 
          purchase_part_no, 
          staged_billing, 
          tax_liability, 
          original_part_no, 
          equipment_object_seq, 
          sup_sm_contract, 
          sup_sm_object, 
          sm_connection, 
          part_price, 
          calc_char_price, 
          char_price, 
          price_source, 
          price_freeze, 
          dock_code, 
          sub_dock_code, 
          ref_id, 
          location_no, 
          configuration_id, 
          price_effectivity_date, 
          configured_line_price_id, 
          latest_release_date, 
          ctp_planned, 
          job_id, 
          cust_warranty_id, 
          price_source_id, 
          intrastat_exempt, 
          price_unit_meas, 
          condition_code, 
          additional_discount, 
          part_ownership, 
          owning_customer_no, 
          exchange_item, 
          supply_site_reserve_type, 
          originating_rel_no, 
          originating_line_item_no, 
          release_planning, 
          supplier_ship_via_transit, 
          supplier_ship_via_transit_desc, 
          supply_site, 
          shipment_connected, 
          self_billing, 
          activity_seq, 
          project_id, 
          deliver_to_customer_no, 
          contact, 
          input_qty, 
          input_unit_meas, 
          input_conv_factor, 
          shipment_creation, 
          delivery_sequence, 
          cancel_reason, 
          delivery_confirmed, 
          customer_po_line_no, 
          customer_po_rel_no, 
          qty_confirmeddiff, 
          blocked_for_invoicing, 
          provisional_price, 
          receiving_advice_type, 
          tax_id_no, 
          tax_id_validated_date, 
          price_source_net_price, 
          target_date, 
          allocation_id, 
          del_terms_location, 
          classification_part_no, 
          classification_unit_meas, 
          classification_standard, 
          rebate_builder, 
          line_total_weight_gross, 
          freight_map_id, 
          zone_id, 
          freight_price_list_no, 
          adjusted_weight_net, 
          adjusted_weight_gross, 
          adjusted_volume, 
          freight_free, 
          part_level, 
          part_level_id, 
          customer_level, 
          customer_level_id, 
          load_id, 
          customs_value, 
          abnormal_demand, 
          cust_calendar_id, 
          ext_transport_calendar_id, 
          rel_mtrl_planning, 
          qty_per_assembly, 
          new_comp_after_delivery, 
          inverted_conv_factor, 
          rental, 
          end_customer_id, 
          picking_leadtime, 
          shipment_type, 
          open_shipment_qty, 
          packing_instruction_id, 
          originating_co_lang_code, 
          cust_part_invert_conv_fact, 
          country_code, 
          tax_liability_type, 
          free_of_charge, 
          free_of_charge_tax_basis, 
          tax_calc_structure_id, 
          customer_tax_usage_type, 
          supply_site_part_no, 
          acquisition_origin, 
          statistical_code, 
          original_discount, 
          original_add_discount, 
          original_order_discount, 
          acquisition_reason_id
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get');
END Get;


--@IgnoreMissingSysinit
FUNCTION Get_Objkey (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   rowkey_ customer_order_line_tab.rowkey%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT rowkey
      INTO  rowkey_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN rowkey_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Objkey');
END Get_Objkey;


--@IgnoreMissingSysinit
FUNCTION Get_Supplier_Ship_Via_Transit_ (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ customer_order_line_tab.supplier_ship_via_transit_desc%TYPE;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT supplier_ship_via_transit_desc
      INTO  temp_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Supplier_Ship_Via_Transit_');
END Get_Supplier_Ship_Via_Transit_;


--@IgnoreMissingSysinit
PROCEDURE Lock__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2 )
IS
   dummy_ customer_order_line_tab%ROWTYPE;
BEGIN
   dummy_ := Lock_By_Id___(objid_, objversion_);
   info_ := Client_SYS.Get_All_Info;
END Lock__;


FUNCTION Key_Message___ (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   msg_ VARCHAR2(4000) := Message_SYS.Construct('ERROR_KEY');
BEGIN
   Message_SYS.Add_Attribute(msg_, 'ORDER_NO', order_no_);
   Message_SYS.Add_Attribute(msg_, 'LINE_NO', line_no_);
   Message_SYS.Add_Attribute(msg_, 'REL_NO', rel_no_);
   Message_SYS.Add_Attribute(msg_, 'LINE_ITEM_NO', line_item_no_);
   RETURN msg_;
END Key_Message___;


FUNCTION Formatted_Key___ (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   formatted_key_ VARCHAR2(4000) := Language_SYS.Translate_Item_Prompt_(lu_name_, 'ORDER_NO', Fnd_Session_API.Get_Language) || ': ' || order_no_ || ', ' ||
                                    Language_SYS.Translate_Item_Prompt_(lu_name_, 'LINE_NO', Fnd_Session_API.Get_Language) || ': ' || line_no_ || ', ' ||
                                    Language_SYS.Translate_Item_Prompt_(lu_name_, 'REL_NO', Fnd_Session_API.Get_Language) || ': ' || rel_no_ || ', ' ||
                                    Language_SYS.Translate_Item_Prompt_(lu_name_, 'LINE_ITEM_NO', Fnd_Session_API.Get_Language) || ': ' || line_item_no_;
BEGIN
   RETURN formatted_key_;
END Formatted_Key___;


PROCEDURE Raise_Too_Many_Rows___ (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER,
   methodname_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(order_no_, line_no_, rel_no_, line_item_no_),
                            Formatted_Key___(order_no_, line_no_, rel_no_, line_item_no_));
   Error_SYS.Fnd_Too_Many_Rows(Customer_Order_Line_API.lu_name_, NULL, methodname_);
END Raise_Too_Many_Rows___;


PROCEDURE Raise_Record_Not_Exist___ (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(order_no_, line_no_, rel_no_, line_item_no_),
                            Formatted_Key___(order_no_, line_no_, rel_no_, line_item_no_));
   Error_SYS.Fnd_Record_Not_Exist(Customer_Order_Line_API.lu_name_);
END Raise_Record_Not_Exist___;


PROCEDURE Raise_Record_Exist___ (
   rec_ IN customer_order_line_tab%ROWTYPE )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no),
                            Formatted_Key___(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no));
   Error_SYS.Fnd_Record_Exist(Customer_Order_Line_API.lu_name_);
END Raise_Record_Exist___;


PROCEDURE Raise_Constraint_Violated___ (
   rec_ IN customer_order_line_tab%ROWTYPE,
   constraint_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Fnd_Record_Exist(Customer_Order_Line_API.lu_name_);
END Raise_Constraint_Violated___;


PROCEDURE Raise_Item_Format___ (
   name_ IN VARCHAR2,
   value_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Fnd_Item_Format(Customer_Order_Line_API.lu_name_, name_, value_);
END Raise_Item_Format___;


PROCEDURE Raise_Record_Modified___ (
   rec_ IN customer_order_line_tab%ROWTYPE )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no),
                            Formatted_Key___(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no));
   Error_SYS.Fnd_Record_Modified(Customer_Order_Line_API.lu_name_);
END Raise_Record_Modified___;


PROCEDURE Raise_Record_Locked___ (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(order_no_, line_no_, rel_no_, line_item_no_),
                            Formatted_Key___(order_no_, line_no_, rel_no_, line_item_no_));
   Error_SYS.Fnd_Record_Locked(Customer_Order_Line_API.lu_name_);
END Raise_Record_Locked___;


PROCEDURE Raise_Record_Removed___ (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(order_no_, line_no_, rel_no_, line_item_no_),
                            Formatted_Key___(order_no_, line_no_, rel_no_, line_item_no_));
   Error_SYS.Fnd_Record_Removed(Customer_Order_Line_API.lu_name_);
END Raise_Record_Removed___;


FUNCTION Lock_By_Id___ (
   objid_      IN VARCHAR2,
   objversion_ IN VARCHAR2 ) RETURN customer_order_line_tab%ROWTYPE
IS
   row_locked  EXCEPTION;
   PRAGMA      EXCEPTION_INIT(row_locked, -0054);
   rec_        customer_order_line_tab%ROWTYPE;
BEGIN
   SELECT *
      INTO  rec_
      FROM  customer_order_line_tab
      WHERE rowid = objid_
      AND    to_char(rowversion,'YYYYMMDDHH24MISS') = objversion_
      FOR UPDATE NOWAIT;
   RETURN rec_;
EXCEPTION
   WHEN row_locked THEN
      Error_SYS.Fnd_Record_Locked(lu_name_);
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(NULL, NULL, NULL, NULL, 'Lock_By_Id___');
   WHEN no_data_found THEN
      BEGIN
         SELECT *
            INTO  rec_
            FROM  customer_order_line_tab
            WHERE rowid = objid_;
         Raise_Record_Modified___(rec_);
      EXCEPTION
         WHEN no_data_found THEN
            Error_SYS.Fnd_Record_Removed(lu_name_);
         WHEN too_many_rows THEN
            Raise_Too_Many_Rows___(NULL, NULL, NULL, NULL, 'Lock_By_Id___');
      END;
END Lock_By_Id___;


FUNCTION Lock_By_Keys___ (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER) RETURN customer_order_line_tab%ROWTYPE
IS
   rec_        customer_order_line_tab%ROWTYPE;
BEGIN
   BEGIN
      SELECT *
         INTO  rec_
         FROM  customer_order_line_tab
         WHERE order_no = order_no_
         AND   line_no = line_no_
         AND   rel_no = rel_no_
         AND   line_item_no = line_item_no_
         FOR UPDATE;
      RETURN rec_;
   EXCEPTION
      WHEN no_data_found THEN
         Raise_Record_Removed___(order_no_, line_no_, rel_no_, line_item_no_);
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Lock_By_Keys___');
   END;
END Lock_By_Keys___;


FUNCTION Lock_By_Keys_Nowait___ (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER) RETURN customer_order_line_tab%ROWTYPE
IS
   row_locked  EXCEPTION;
   PRAGMA      EXCEPTION_INIT(row_locked, -0054);
   rec_        customer_order_line_tab%ROWTYPE;
BEGIN
   BEGIN
      SELECT *
         INTO  rec_
         FROM  customer_order_line_tab
         WHERE order_no = order_no_
         AND   line_no = line_no_
         AND   rel_no = rel_no_
         AND   line_item_no = line_item_no_
         FOR UPDATE NOWAIT;
      RETURN rec_;
   EXCEPTION
      WHEN row_locked THEN
         Raise_Record_Locked___(order_no_, line_no_, rel_no_, line_item_no_);
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Lock_By_Keys___');
      WHEN no_data_found THEN
         Raise_Record_Removed___(order_no_, line_no_, rel_no_, line_item_no_);
   END;
END Lock_By_Keys_Nowait___;


FUNCTION Get_Object_By_Id___ (
   objid_ IN VARCHAR2 ) RETURN customer_order_line_tab%ROWTYPE
IS
   lu_rec_ customer_order_line_tab%ROWTYPE;
BEGIN
   SELECT *
      INTO  lu_rec_
      FROM  customer_order_line_tab
      WHERE rowid = objid_;
   RETURN lu_rec_;
EXCEPTION
   WHEN no_data_found THEN
      Error_SYS.Fnd_Record_Removed(lu_name_);
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(NULL, NULL, NULL, NULL, 'Get_Object_By_Id___');
END Get_Object_By_Id___;


--@IgnoreMissingSysinit
FUNCTION Get_Object_By_Keys___ (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN customer_order_line_tab%ROWTYPE
IS
   lu_rec_ customer_order_line_tab%ROWTYPE;
BEGIN
   SELECT *
      INTO  lu_rec_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN lu_rec_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN lu_rec_;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Object_By_Keys___');
END Get_Object_By_Keys___;


--@IgnoreMissingSysinit
FUNCTION Check_Exist___ (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN BOOLEAN
IS
   dummy_ NUMBER;
BEGIN
   IF (order_no_ IS NULL OR line_no_ IS NULL OR rel_no_ IS NULL OR line_item_no_ IS NULL) THEN
      RETURN FALSE;
   END IF;
   SELECT 1
      INTO  dummy_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
   RETURN TRUE;
EXCEPTION
   WHEN no_data_found THEN
      RETURN FALSE;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Check_Exist___');
END Check_Exist___;


PROCEDURE Get_Version_By_Id___ (
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2 )
IS
BEGIN
   SELECT to_char(rowversion,'YYYYMMDDHH24MISS')
      INTO  objversion_
      FROM  customer_order_line_tab
      WHERE rowid = objid_;
EXCEPTION
   WHEN no_data_found THEN
      objversion_ := NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(NULL, NULL, NULL, NULL, 'Get_Version_By_Id___');
END Get_Version_By_Id___;


PROCEDURE Get_Id_Version_By_Keys___ (
   objid_      IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER )
IS
BEGIN
   SELECT rowid, to_char(rowversion,'YYYYMMDDHH24MISS')
      INTO  objid_, objversion_
      FROM  customer_order_line_tab
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
EXCEPTION
   WHEN no_data_found THEN
      objid_      := NULL;
      objversion_ := NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, line_no_, rel_no_, line_item_no_, 'Get_Id_Version_By_Keys___');
END Get_Id_Version_By_Keys___;


FUNCTION Pack___ (
   rec_ IN customer_order_line_tab%ROWTYPE ) RETURN VARCHAR2
IS
   attr_ VARCHAR2(32000);
BEGIN
   Client_SYS.Clear_Attr(attr_);
   IF (rec_.order_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ORDER_NO', rec_.order_no, attr_);
   END IF;
   IF (rec_.line_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('LINE_NO', rec_.line_no, attr_);
   END IF;
   IF (rec_.rel_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('REL_NO', rec_.rel_no, attr_);
   END IF;
   IF (rec_.line_item_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('LINE_ITEM_NO', rec_.line_item_no, attr_);
   END IF;
   IF (rec_.contract IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CONTRACT', rec_.contract, attr_);
   END IF;
   IF (rec_.catalog_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CATALOG_NO', rec_.catalog_no, attr_);
   END IF;
   IF (rec_.note_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('NOTE_ID', rec_.note_id, attr_);
   END IF;
   IF (rec_.order_code IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ORDER_CODE', rec_.order_code, attr_);
   END IF;
   IF (rec_.part_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PART_NO', rec_.part_no, attr_);
   END IF;
   IF (rec_.pre_accounting_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PRE_ACCOUNTING_ID', rec_.pre_accounting_id, attr_);
   END IF;
   IF (rec_.sales_unit_meas IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('SALES_UNIT_MEAS', rec_.sales_unit_meas, attr_);
   END IF;
   IF (rec_.base_sale_unit_price IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('BASE_SALE_UNIT_PRICE', rec_.base_sale_unit_price, attr_);
   END IF;
   IF (rec_.base_unit_price_incl_tax IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('BASE_UNIT_PRICE_INCL_TAX', rec_.base_unit_price_incl_tax, attr_);
   END IF;
   IF (rec_.buy_qty_due IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('BUY_QTY_DUE', rec_.buy_qty_due, attr_);
   END IF;
   IF (rec_.catalog_desc IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CATALOG_DESC', rec_.catalog_desc, attr_);
   END IF;
   IF (rec_.catalog_type IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CATALOG_TYPE', Sales_Part_Type_API.Decode(rec_.catalog_type), attr_);
      Client_SYS.Add_To_Attr('CATALOG_TYPE_DB', rec_.catalog_type, attr_);
   END IF;
   IF (rec_.conv_factor IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CONV_FACTOR', rec_.conv_factor, attr_);
   END IF;
   IF (rec_.cost IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('COST', rec_.cost, attr_);
   END IF;
   IF (rec_.currency_rate IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CURRENCY_RATE', rec_.currency_rate, attr_);
   END IF;
   IF (rec_.date_entered IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DATE_ENTERED', rec_.date_entered, attr_);
   END IF;
   IF (rec_.discount IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DISCOUNT', rec_.discount, attr_);
   END IF;
   IF (rec_.line_total_qty IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('LINE_TOTAL_QTY', rec_.line_total_qty, attr_);
   END IF;
   IF (rec_.line_total_weight IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('LINE_TOTAL_WEIGHT', rec_.line_total_weight, attr_);
   END IF;
   IF (rec_.note_text IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('NOTE_TEXT', rec_.note_text, attr_);
   END IF;
   IF (rec_.order_discount IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ORDER_DISCOUNT', rec_.order_discount, attr_);
   END IF;
   IF (rec_.planned_delivery_date IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PLANNED_DELIVERY_DATE', rec_.planned_delivery_date, attr_);
   END IF;
   IF (rec_.planned_due_date IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PLANNED_DUE_DATE', rec_.planned_due_date, attr_);
   END IF;
   IF (rec_.supply_site_due_date IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('SUPPLY_SITE_DUE_DATE', rec_.supply_site_due_date, attr_);
   END IF;
   IF (rec_.price_conv_factor IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PRICE_CONV_FACTOR', rec_.price_conv_factor, attr_);
   END IF;
   IF (rec_.promised_delivery_date IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PROMISED_DELIVERY_DATE', rec_.promised_delivery_date, attr_);
   END IF;
   IF (rec_.qty_assigned IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('QTY_ASSIGNED', rec_.qty_assigned, attr_);
   END IF;
   IF (rec_.qty_invoiced IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('QTY_INVOICED', rec_.qty_invoiced, attr_);
   END IF;
   IF (rec_.qty_on_order IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('QTY_ON_ORDER', rec_.qty_on_order, attr_);
   END IF;
   IF (rec_.qty_picked IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('QTY_PICKED', rec_.qty_picked, attr_);
   END IF;
   IF (rec_.qty_returned IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('QTY_RETURNED', rec_.qty_returned, attr_);
   END IF;
   IF (rec_.qty_shipdiff IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('QTY_SHIPDIFF', rec_.qty_shipdiff, attr_);
   END IF;
   IF (rec_.qty_shipped IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('QTY_SHIPPED', rec_.qty_shipped, attr_);
   END IF;
   IF (rec_.qty_to_ship IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('QTY_TO_SHIP', rec_.qty_to_ship, attr_);
   END IF;
   IF (rec_.qty_short IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('QTY_SHORT', rec_.qty_short, attr_);
   END IF;
   IF (rec_.real_ship_date IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('REAL_SHIP_DATE', rec_.real_ship_date, attr_);
   END IF;
   IF (rec_.revised_qty_due IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('REVISED_QTY_DUE', rec_.revised_qty_due, attr_);
   END IF;
   IF (rec_.sale_unit_price IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('SALE_UNIT_PRICE', rec_.sale_unit_price, attr_);
   END IF;
   IF (rec_.unit_price_incl_tax IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('UNIT_PRICE_INCL_TAX', rec_.unit_price_incl_tax, attr_);
   END IF;
   IF (rec_.supply_code IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('SUPPLY_CODE', Order_Supply_Type_API.Decode(rec_.supply_code), attr_);
      Client_SYS.Add_To_Attr('SUPPLY_CODE_DB', rec_.supply_code, attr_);
   END IF;
   IF (rec_.wanted_delivery_date IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('WANTED_DELIVERY_DATE', rec_.wanted_delivery_date, attr_);
   END IF;
   IF (rec_.delivery_type IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DELIVERY_TYPE', rec_.delivery_type, attr_);
   END IF;
   IF (rec_.vendor_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('VENDOR_NO', rec_.vendor_no, attr_);
   END IF;
   IF (rec_.tax_code IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('TAX_CODE', rec_.tax_code, attr_);
   END IF;
   IF (rec_.tax_class_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('TAX_CLASS_ID', rec_.tax_class_id, attr_);
   END IF;
   IF (rec_.customer_part_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_PART_NO', rec_.customer_part_no, attr_);
   END IF;
   IF (rec_.customer_part_conv_factor IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_PART_CONV_FACTOR', rec_.customer_part_conv_factor, attr_);
   END IF;
   IF (rec_.customer_part_unit_meas IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_PART_UNIT_MEAS', rec_.customer_part_unit_meas, attr_);
   END IF;
   IF (rec_.customer_part_buy_qty IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_PART_BUY_QTY', rec_.customer_part_buy_qty, attr_);
   END IF;
   IF (rec_.planned_ship_date IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PLANNED_SHIP_DATE', rec_.planned_ship_date, attr_);
   END IF;
   IF (rec_.planned_ship_period IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PLANNED_SHIP_PERIOD', rec_.planned_ship_period, attr_);
   END IF;
   IF (rec_.customer_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_NO', rec_.customer_no, attr_);
   END IF;
   IF (rec_.consignment_stock IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CONSIGNMENT_STOCK', Consignment_Stock_API.Decode(rec_.consignment_stock), attr_);
      Client_SYS.Add_To_Attr('CONSIGNMENT_STOCK_DB', rec_.consignment_stock, attr_);
   END IF;
   IF (rec_.close_tolerance IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CLOSE_TOLERANCE', rec_.close_tolerance, attr_);
   END IF;
   IF (rec_.price_list_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PRICE_LIST_NO', rec_.price_list_no, attr_);
   END IF;
   IF (rec_.charged_item IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CHARGED_ITEM', Charged_Item_API.Decode(rec_.charged_item), attr_);
      Client_SYS.Add_To_Attr('CHARGED_ITEM_DB', rec_.charged_item, attr_);
   END IF;
   IF (rec_.demand_order_ref1 IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DEMAND_ORDER_REF1', rec_.demand_order_ref1, attr_);
   END IF;
   IF (rec_.demand_order_ref2 IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DEMAND_ORDER_REF2', rec_.demand_order_ref2, attr_);
   END IF;
   IF (rec_.demand_order_ref3 IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DEMAND_ORDER_REF3', rec_.demand_order_ref3, attr_);
   END IF;
   IF (rec_.demand_order_ref4 IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DEMAND_ORDER_REF4', rec_.demand_order_ref4, attr_);
   END IF;
   IF (rec_.demand_code IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DEMAND_CODE', Order_Supply_Type_API.Decode(rec_.demand_code), attr_);
      Client_SYS.Add_To_Attr('DEMAND_CODE_DB', rec_.demand_code, attr_);
   END IF;
   IF (rec_.dop_connection IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DOP_CONNECTION', Dop_Connection_API.Decode(rec_.dop_connection), attr_);
      Client_SYS.Add_To_Attr('DOP_CONNECTION_DB', rec_.dop_connection, attr_);
   END IF;
   IF (rec_.create_sm_object_option IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CREATE_SM_OBJECT_OPTION', Create_Sm_Object_Option_API.Decode(rec_.create_sm_object_option), attr_);
      Client_SYS.Add_To_Attr('CREATE_SM_OBJECT_OPTION_DB', rec_.create_sm_object_option, attr_);
   END IF;
   IF (rec_.default_addr_flag IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DEFAULT_ADDR_FLAG', Gen_Yes_No_API.Decode(rec_.default_addr_flag), attr_);
      Client_SYS.Add_To_Attr('DEFAULT_ADDR_FLAG_DB', rec_.default_addr_flag, attr_);
   END IF;
   IF (rec_.addr_flag IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ADDR_FLAG', Gen_Yes_No_API.Decode(rec_.addr_flag), attr_);
      Client_SYS.Add_To_Attr('ADDR_FLAG_DB', rec_.addr_flag, attr_);
   END IF;
   IF (rec_.ship_addr_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('SHIP_ADDR_NO', rec_.ship_addr_no, attr_);
   END IF;
   IF (rec_.route_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ROUTE_ID', rec_.route_id, attr_);
   END IF;
   IF (rec_.forward_agent_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('FORWARD_AGENT_ID', rec_.forward_agent_id, attr_);
   END IF;
   IF (rec_.ship_via_code IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('SHIP_VIA_CODE', rec_.ship_via_code, attr_);
   END IF;
   IF (rec_.delivery_terms IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DELIVERY_TERMS', rec_.delivery_terms, attr_);
   END IF;
   IF (rec_.delivery_leadtime IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DELIVERY_LEADTIME', rec_.delivery_leadtime, attr_);
   END IF;
   IF (rec_.district_code IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DISTRICT_CODE', rec_.district_code, attr_);
   END IF;
   IF (rec_.region_code IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('REGION_CODE', rec_.region_code, attr_);
   END IF;
   IF (rec_.desired_qty IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DESIRED_QTY', rec_.desired_qty, attr_);
   END IF;
   IF (rec_.purchase_part_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PURCHASE_PART_NO', rec_.purchase_part_no, attr_);
   END IF;
   IF (rec_.staged_billing IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('STAGED_BILLING', Staged_Billing_Type_API.Decode(rec_.staged_billing), attr_);
      Client_SYS.Add_To_Attr('STAGED_BILLING_DB', rec_.staged_billing, attr_);
   END IF;
   IF (rec_.tax_liability IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('TAX_LIABILITY', rec_.tax_liability, attr_);
   END IF;
   IF (rec_.original_part_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ORIGINAL_PART_NO', rec_.original_part_no, attr_);
   END IF;
   IF (rec_.equipment_object_seq IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('EQUIPMENT_OBJECT_SEQ', rec_.equipment_object_seq, attr_);
   END IF;
   IF (rec_.sup_sm_contract IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('SUP_SM_CONTRACT', rec_.sup_sm_contract, attr_);
   END IF;
   IF (rec_.sup_sm_object IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('SUP_SM_OBJECT', rec_.sup_sm_object, attr_);
   END IF;
   IF (rec_.sm_connection IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('SM_CONNECTION', Service_Management_Connect_API.Decode(rec_.sm_connection), attr_);
      Client_SYS.Add_To_Attr('SM_CONNECTION_DB', rec_.sm_connection, attr_);
   END IF;
   IF (rec_.part_price IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PART_PRICE', rec_.part_price, attr_);
   END IF;
   IF (rec_.calc_char_price IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CALC_CHAR_PRICE', rec_.calc_char_price, attr_);
   END IF;
   IF (rec_.char_price IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CHAR_PRICE', rec_.char_price, attr_);
   END IF;
   IF (rec_.price_source IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PRICE_SOURCE', Pricing_Source_API.Decode(rec_.price_source), attr_);
      Client_SYS.Add_To_Attr('PRICE_SOURCE_DB', rec_.price_source, attr_);
   END IF;
   IF (rec_.price_freeze IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PRICE_FREEZE', Freeze_Flag_API.Decode(rec_.price_freeze), attr_);
      Client_SYS.Add_To_Attr('PRICE_FREEZE_DB', rec_.price_freeze, attr_);
   END IF;
   IF (rec_.dock_code IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DOCK_CODE', rec_.dock_code, attr_);
   END IF;
   IF (rec_.sub_dock_code IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('SUB_DOCK_CODE', rec_.sub_dock_code, attr_);
   END IF;
   IF (rec_.ref_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('REF_ID', rec_.ref_id, attr_);
   END IF;
   IF (rec_.location_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('LOCATION_NO', rec_.location_no, attr_);
   END IF;
   IF (rec_.configuration_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CONFIGURATION_ID', rec_.configuration_id, attr_);
   END IF;
   IF (rec_.price_effectivity_date IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PRICE_EFFECTIVITY_DATE', rec_.price_effectivity_date, attr_);
   END IF;
   IF (rec_.configured_line_price_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CONFIGURED_LINE_PRICE_ID', rec_.configured_line_price_id, attr_);
   END IF;
   IF (rec_.latest_release_date IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('LATEST_RELEASE_DATE', rec_.latest_release_date, attr_);
   END IF;
   IF (rec_.ctp_planned IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CTP_PLANNED', Gen_Yes_No_API.Decode(rec_.ctp_planned), attr_);
      Client_SYS.Add_To_Attr('CTP_PLANNED_DB', rec_.ctp_planned, attr_);
   END IF;
   IF (rec_.job_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('JOB_ID', rec_.job_id, attr_);
   END IF;
   IF (rec_.cust_warranty_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CUST_WARRANTY_ID', rec_.cust_warranty_id, attr_);
   END IF;
   IF (rec_.price_source_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PRICE_SOURCE_ID', rec_.price_source_id, attr_);
   END IF;
   IF (rec_.intrastat_exempt IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('INTRASTAT_EXEMPT', Intrastat_Exempt_API.Decode(rec_.intrastat_exempt), attr_);
      Client_SYS.Add_To_Attr('INTRASTAT_EXEMPT_DB', rec_.intrastat_exempt, attr_);
   END IF;
   IF (rec_.price_unit_meas IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PRICE_UNIT_MEAS', rec_.price_unit_meas, attr_);
   END IF;
   IF (rec_.condition_code IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CONDITION_CODE', rec_.condition_code, attr_);
   END IF;
   IF (rec_.additional_discount IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ADDITIONAL_DISCOUNT', rec_.additional_discount, attr_);
   END IF;
   IF (rec_.part_ownership IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PART_OWNERSHIP', Part_Ownership_API.Decode(rec_.part_ownership), attr_);
      Client_SYS.Add_To_Attr('PART_OWNERSHIP_DB', rec_.part_ownership, attr_);
   END IF;
   IF (rec_.owning_customer_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('OWNING_CUSTOMER_NO', rec_.owning_customer_no, attr_);
   END IF;
   IF (rec_.exchange_item IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('EXCHANGE_ITEM', Exchange_Item_API.Decode(rec_.exchange_item), attr_);
      Client_SYS.Add_To_Attr('EXCHANGE_ITEM_DB', rec_.exchange_item, attr_);
   END IF;
   IF (rec_.supply_site_reserve_type IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('SUPPLY_SITE_RESERVE_TYPE', Supply_Site_Reserve_Type_API.Decode(rec_.supply_site_reserve_type), attr_);
      Client_SYS.Add_To_Attr('SUPPLY_SITE_RESERVE_TYPE_DB', rec_.supply_site_reserve_type, attr_);
   END IF;
   IF (rec_.originating_rel_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ORIGINATING_REL_NO', rec_.originating_rel_no, attr_);
   END IF;
   IF (rec_.originating_line_item_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ORIGINATING_LINE_ITEM_NO', rec_.originating_line_item_no, attr_);
   END IF;
   IF (rec_.release_planning IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('RELEASE_PLANNING', Release_Planning_API.Decode(rec_.release_planning), attr_);
      Client_SYS.Add_To_Attr('RELEASE_PLANNING_DB', rec_.release_planning, attr_);
   END IF;
   IF (rec_.supplier_ship_via_transit IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('SUPPLIER_SHIP_VIA_TRANSIT', rec_.supplier_ship_via_transit, attr_);
   END IF;
   IF (rec_.supplier_ship_via_transit_desc IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('SUPPLIER_SHIP_VIA_TRANSIT_DESC', rec_.supplier_ship_via_transit_desc, attr_);
   END IF;
   IF (rec_.supply_site IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('SUPPLY_SITE', rec_.supply_site, attr_);
   END IF;
   IF (rec_.shipment_connected IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('SHIPMENT_CONNECTED', Fnd_Boolean_API.Decode(rec_.shipment_connected), attr_);
      Client_SYS.Add_To_Attr('SHIPMENT_CONNECTED_DB', rec_.shipment_connected, attr_);
   END IF;
   IF (rec_.self_billing IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('SELF_BILLING', Self_Billing_Type_API.Decode(rec_.self_billing), attr_);
      Client_SYS.Add_To_Attr('SELF_BILLING_DB', rec_.self_billing, attr_);
   END IF;
   IF (rec_.activity_seq IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ACTIVITY_SEQ', rec_.activity_seq, attr_);
   END IF;
   IF (rec_.project_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PROJECT_ID', rec_.project_id, attr_);
   END IF;
   IF (rec_.deliver_to_customer_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DELIVER_TO_CUSTOMER_NO', rec_.deliver_to_customer_no, attr_);
   END IF;
   IF (rec_.contact IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CONTACT', rec_.contact, attr_);
   END IF;
   IF (rec_.input_qty IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('INPUT_QTY', rec_.input_qty, attr_);
   END IF;
   IF (rec_.input_unit_meas IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('INPUT_UNIT_MEAS', rec_.input_unit_meas, attr_);
   END IF;
   IF (rec_.input_conv_factor IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('INPUT_CONV_FACTOR', rec_.input_conv_factor, attr_);
   END IF;
   IF (rec_.input_variable_values IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('INPUT_VARIABLE_VALUES', rec_.input_variable_values, attr_);
   END IF;
   IF (rec_.shipment_creation IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('SHIPMENT_CREATION', Shipment_Creation_API.Decode(rec_.shipment_creation), attr_);
      Client_SYS.Add_To_Attr('SHIPMENT_CREATION_DB', rec_.shipment_creation, attr_);
   END IF;
   IF (rec_.manufacturing_department IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('MANUFACTURING_DEPARTMENT', rec_.manufacturing_department, attr_);
   END IF;
   IF (rec_.delivery_sequence IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DELIVERY_SEQUENCE', rec_.delivery_sequence, attr_);
   END IF;
   IF (rec_.cancel_reason IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CANCEL_REASON', rec_.cancel_reason, attr_);
   END IF;
   IF (rec_.delivery_confirmed IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DELIVERY_CONFIRMED', Fnd_Boolean_API.Decode(rec_.delivery_confirmed), attr_);
      Client_SYS.Add_To_Attr('DELIVERY_CONFIRMED_DB', rec_.delivery_confirmed, attr_);
   END IF;
   IF (rec_.customer_po_line_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_PO_LINE_NO', rec_.customer_po_line_no, attr_);
   END IF;
   IF (rec_.customer_po_rel_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_PO_REL_NO', rec_.customer_po_rel_no, attr_);
   END IF;
   IF (rec_.qty_confirmeddiff IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('QTY_CONFIRMEDDIFF', rec_.qty_confirmeddiff, attr_);
   END IF;
   IF (rec_.blocked_for_invoicing IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('BLOCKED_FOR_INVOICING', Fnd_Boolean_API.Decode(rec_.blocked_for_invoicing), attr_);
      Client_SYS.Add_To_Attr('BLOCKED_FOR_INVOICING_DB', rec_.blocked_for_invoicing, attr_);
   END IF;
   IF (rec_.provisional_price IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PROVISIONAL_PRICE', Fnd_Boolean_API.Decode(rec_.provisional_price), attr_);
      Client_SYS.Add_To_Attr('PROVISIONAL_PRICE_DB', rec_.provisional_price, attr_);
   END IF;
   IF (rec_.receiving_advice_type IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('RECEIVING_ADVICE_TYPE', Receiving_Advice_Type_API.Decode(rec_.receiving_advice_type), attr_);
      Client_SYS.Add_To_Attr('RECEIVING_ADVICE_TYPE_DB', rec_.receiving_advice_type, attr_);
   END IF;
   IF (rec_.first_actual_ship_date IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('FIRST_ACTUAL_SHIP_DATE', rec_.first_actual_ship_date, attr_);
   END IF;
   IF (rec_.tax_id_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('TAX_ID_NO', rec_.tax_id_no, attr_);
   END IF;
   IF (rec_.tax_id_validated_date IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('TAX_ID_VALIDATED_DATE', rec_.tax_id_validated_date, attr_);
   END IF;
   IF (rec_.price_source_net_price IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PRICE_SOURCE_NET_PRICE', Fnd_Boolean_API.Decode(rec_.price_source_net_price), attr_);
      Client_SYS.Add_To_Attr('PRICE_SOURCE_NET_PRICE_DB', rec_.price_source_net_price, attr_);
   END IF;
   IF (rec_.target_date IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('TARGET_DATE', rec_.target_date, attr_);
   END IF;
   IF (rec_.allocation_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ALLOCATION_ID', rec_.allocation_id, attr_);
   END IF;
   IF (rec_.del_terms_location IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DEL_TERMS_LOCATION', rec_.del_terms_location, attr_);
   END IF;
   IF (rec_.classification_part_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CLASSIFICATION_PART_NO', rec_.classification_part_no, attr_);
   END IF;
   IF (rec_.classification_unit_meas IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CLASSIFICATION_UNIT_MEAS', rec_.classification_unit_meas, attr_);
   END IF;
   IF (rec_.classification_standard IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CLASSIFICATION_STANDARD', rec_.classification_standard, attr_);
   END IF;
   IF (rec_.rebate_builder IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('REBATE_BUILDER', Fnd_Boolean_API.Decode(rec_.rebate_builder), attr_);
      Client_SYS.Add_To_Attr('REBATE_BUILDER_DB', rec_.rebate_builder, attr_);
   END IF;
   IF (rec_.line_total_weight_gross IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('LINE_TOTAL_WEIGHT_GROSS', rec_.line_total_weight_gross, attr_);
   END IF;
   IF (rec_.freight_map_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('FREIGHT_MAP_ID', rec_.freight_map_id, attr_);
   END IF;
   IF (rec_.zone_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ZONE_ID', rec_.zone_id, attr_);
   END IF;
   IF (rec_.freight_price_list_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('FREIGHT_PRICE_LIST_NO', rec_.freight_price_list_no, attr_);
   END IF;
   IF (rec_.adjusted_weight_net IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ADJUSTED_WEIGHT_NET', rec_.adjusted_weight_net, attr_);
   END IF;
   IF (rec_.adjusted_weight_gross IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ADJUSTED_WEIGHT_GROSS', rec_.adjusted_weight_gross, attr_);
   END IF;
   IF (rec_.adjusted_volume IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ADJUSTED_VOLUME', rec_.adjusted_volume, attr_);
   END IF;
   IF (rec_.freight_free IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('FREIGHT_FREE', Fnd_Boolean_API.Decode(rec_.freight_free), attr_);
      Client_SYS.Add_To_Attr('FREIGHT_FREE_DB', rec_.freight_free, attr_);
   END IF;
   IF (rec_.part_level IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PART_LEVEL', Price_Discount_Part_Level_API.Decode(rec_.part_level), attr_);
      Client_SYS.Add_To_Attr('PART_LEVEL_DB', rec_.part_level, attr_);
   END IF;
   IF (rec_.part_level_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PART_LEVEL_ID', rec_.part_level_id, attr_);
   END IF;
   IF (rec_.customer_level IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_LEVEL', Price_Discount_Cust_Level_API.Decode(rec_.customer_level), attr_);
      Client_SYS.Add_To_Attr('CUSTOMER_LEVEL_DB', rec_.customer_level, attr_);
   END IF;
   IF (rec_.customer_level_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_LEVEL_ID', rec_.customer_level_id, attr_);
   END IF;
   IF (rec_.load_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('LOAD_ID', rec_.load_id, attr_);
   END IF;
   IF (rec_.customs_value IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CUSTOMS_VALUE', rec_.customs_value, attr_);
   END IF;
   IF (rec_.abnormal_demand IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ABNORMAL_DEMAND', Fnd_Boolean_API.Decode(rec_.abnormal_demand), attr_);
      Client_SYS.Add_To_Attr('ABNORMAL_DEMAND_DB', rec_.abnormal_demand, attr_);
   END IF;
   IF (rec_.cust_calendar_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CUST_CALENDAR_ID', rec_.cust_calendar_id, attr_);
   END IF;
   IF (rec_.ext_transport_calendar_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('EXT_TRANSPORT_CALENDAR_ID', rec_.ext_transport_calendar_id, attr_);
   END IF;
   IF (rec_.rel_mtrl_planning IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('REL_MTRL_PLANNING', rec_.rel_mtrl_planning, attr_);
   END IF;
   IF (rec_.qty_per_assembly IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('QTY_PER_ASSEMBLY', rec_.qty_per_assembly, attr_);
   END IF;
   IF (rec_.new_comp_after_delivery IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('NEW_COMP_AFTER_DELIVERY', rec_.new_comp_after_delivery, attr_);
   END IF;
   IF (rec_.inverted_conv_factor IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('INVERTED_CONV_FACTOR', rec_.inverted_conv_factor, attr_);
   END IF;
   IF (rec_.rental IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('RENTAL', Fnd_Boolean_API.Decode(rec_.rental), attr_);
      Client_SYS.Add_To_Attr('RENTAL_DB', rec_.rental, attr_);
   END IF;
   IF (rec_.end_customer_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('END_CUSTOMER_ID', rec_.end_customer_id, attr_);
   END IF;
   IF (rec_.picking_leadtime IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PICKING_LEADTIME', rec_.picking_leadtime, attr_);
   END IF;
   IF (rec_.shipment_type IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('SHIPMENT_TYPE', rec_.shipment_type, attr_);
   END IF;
   IF (rec_.open_shipment_qty IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('OPEN_SHIPMENT_QTY', rec_.open_shipment_qty, attr_);
   END IF;
   IF (rec_.packing_instruction_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PACKING_INSTRUCTION_ID', rec_.packing_instruction_id, attr_);
   END IF;
   IF (rec_.originating_co_lang_code IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ORIGINATING_CO_LANG_CODE', rec_.originating_co_lang_code, attr_);
   END IF;
   IF (rec_.cust_part_invert_conv_fact IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CUST_PART_INVERT_CONV_FACT', rec_.cust_part_invert_conv_fact, attr_);
   END IF;
   IF (rec_.country_code IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('COUNTRY_CODE', rec_.country_code, attr_);
   END IF;
   IF (rec_.tax_liability_type IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('TAX_LIABILITY_TYPE', Tax_Liability_Type_API.Decode(rec_.tax_liability_type), attr_);
      Client_SYS.Add_To_Attr('TAX_LIABILITY_TYPE_DB', rec_.tax_liability_type, attr_);
   END IF;
   IF (rec_.free_of_charge IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('FREE_OF_CHARGE', Fnd_Boolean_API.Decode(rec_.free_of_charge), attr_);
      Client_SYS.Add_To_Attr('FREE_OF_CHARGE_DB', rec_.free_of_charge, attr_);
   END IF;
   IF (rec_.free_of_charge_tax_basis IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('FREE_OF_CHARGE_TAX_BASIS', rec_.free_of_charge_tax_basis, attr_);
   END IF;
   IF (rec_.tax_calc_structure_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('TAX_CALC_STRUCTURE_ID', rec_.tax_calc_structure_id, attr_);
   END IF;
   IF (rec_.customer_tax_usage_type IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_TAX_USAGE_TYPE', rec_.customer_tax_usage_type, attr_);
   END IF;
   IF (rec_.supply_site_part_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('SUPPLY_SITE_PART_NO', rec_.supply_site_part_no, attr_);
   END IF;
   IF (rec_.acquisition_origin IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ACQUISITION_ORIGIN', rec_.acquisition_origin, attr_);
   END IF;
   IF (rec_.statistical_code IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('STATISTICAL_CODE', rec_.statistical_code, attr_);
   END IF;
   IF (rec_.original_discount IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ORIGINAL_DISCOUNT', rec_.original_discount, attr_);
   END IF;
   IF (rec_.original_add_discount IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ORIGINAL_ADD_DISCOUNT', rec_.original_add_discount, attr_);
   END IF;
   IF (rec_.original_order_discount IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ORIGINAL_ORDER_DISCOUNT', rec_.original_order_discount, attr_);
   END IF;
   IF (rec_.acquisition_reason_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ACQUISITION_REASON_ID', rec_.acquisition_reason_id, attr_);
   END IF;
   RETURN attr_;
END Pack___;


FUNCTION Pack___ (
   rec_ IN customer_order_line_tab%ROWTYPE,
   indrec_ IN Indicator_Rec ) RETURN VARCHAR2
IS
   attr_ VARCHAR2(32000);
BEGIN
   Client_SYS.Clear_Attr(attr_);
   IF (indrec_.order_no) THEN
      Client_SYS.Add_To_Attr('ORDER_NO', rec_.order_no, attr_);
   END IF;
   IF (indrec_.line_no) THEN
      Client_SYS.Add_To_Attr('LINE_NO', rec_.line_no, attr_);
   END IF;
   IF (indrec_.rel_no) THEN
      Client_SYS.Add_To_Attr('REL_NO', rec_.rel_no, attr_);
   END IF;
   IF (indrec_.line_item_no) THEN
      Client_SYS.Add_To_Attr('LINE_ITEM_NO', rec_.line_item_no, attr_);
   END IF;
   IF (indrec_.contract) THEN
      Client_SYS.Add_To_Attr('CONTRACT', rec_.contract, attr_);
   END IF;
   IF (indrec_.catalog_no) THEN
      Client_SYS.Add_To_Attr('CATALOG_NO', rec_.catalog_no, attr_);
   END IF;
   IF (indrec_.note_id) THEN
      Client_SYS.Add_To_Attr('NOTE_ID', rec_.note_id, attr_);
   END IF;
   IF (indrec_.order_code) THEN
      Client_SYS.Add_To_Attr('ORDER_CODE', rec_.order_code, attr_);
   END IF;
   IF (indrec_.part_no) THEN
      Client_SYS.Add_To_Attr('PART_NO', rec_.part_no, attr_);
   END IF;
   IF (indrec_.pre_accounting_id) THEN
      Client_SYS.Add_To_Attr('PRE_ACCOUNTING_ID', rec_.pre_accounting_id, attr_);
   END IF;
   IF (indrec_.sales_unit_meas) THEN
      Client_SYS.Add_To_Attr('SALES_UNIT_MEAS', rec_.sales_unit_meas, attr_);
   END IF;
   IF (indrec_.base_sale_unit_price) THEN
      Client_SYS.Add_To_Attr('BASE_SALE_UNIT_PRICE', rec_.base_sale_unit_price, attr_);
   END IF;
   IF (indrec_.base_unit_price_incl_tax) THEN
      Client_SYS.Add_To_Attr('BASE_UNIT_PRICE_INCL_TAX', rec_.base_unit_price_incl_tax, attr_);
   END IF;
   IF (indrec_.buy_qty_due) THEN
      Client_SYS.Add_To_Attr('BUY_QTY_DUE', rec_.buy_qty_due, attr_);
   END IF;
   IF (indrec_.catalog_desc) THEN
      Client_SYS.Add_To_Attr('CATALOG_DESC', rec_.catalog_desc, attr_);
   END IF;
   IF (indrec_.catalog_type) THEN
      Client_SYS.Add_To_Attr('CATALOG_TYPE', Sales_Part_Type_API.Decode(rec_.catalog_type), attr_);
      Client_SYS.Add_To_Attr('CATALOG_TYPE_DB', rec_.catalog_type, attr_);
   END IF;
   IF (indrec_.conv_factor) THEN
      Client_SYS.Add_To_Attr('CONV_FACTOR', rec_.conv_factor, attr_);
   END IF;
   IF (indrec_.cost) THEN
      Client_SYS.Add_To_Attr('COST', rec_.cost, attr_);
   END IF;
   IF (indrec_.currency_rate) THEN
      Client_SYS.Add_To_Attr('CURRENCY_RATE', rec_.currency_rate, attr_);
   END IF;
   IF (indrec_.date_entered) THEN
      Client_SYS.Add_To_Attr('DATE_ENTERED', rec_.date_entered, attr_);
   END IF;
   IF (indrec_.discount) THEN
      Client_SYS.Add_To_Attr('DISCOUNT', rec_.discount, attr_);
   END IF;
   IF (indrec_.line_total_qty) THEN
      Client_SYS.Add_To_Attr('LINE_TOTAL_QTY', rec_.line_total_qty, attr_);
   END IF;
   IF (indrec_.line_total_weight) THEN
      Client_SYS.Add_To_Attr('LINE_TOTAL_WEIGHT', rec_.line_total_weight, attr_);
   END IF;
   IF (indrec_.note_text) THEN
      Client_SYS.Add_To_Attr('NOTE_TEXT', rec_.note_text, attr_);
   END IF;
   IF (indrec_.order_discount) THEN
      Client_SYS.Add_To_Attr('ORDER_DISCOUNT', rec_.order_discount, attr_);
   END IF;
   IF (indrec_.planned_delivery_date) THEN
      Client_SYS.Add_To_Attr('PLANNED_DELIVERY_DATE', rec_.planned_delivery_date, attr_);
   END IF;
   IF (indrec_.planned_due_date) THEN
      Client_SYS.Add_To_Attr('PLANNED_DUE_DATE', rec_.planned_due_date, attr_);
   END IF;
   IF (indrec_.supply_site_due_date) THEN
      Client_SYS.Add_To_Attr('SUPPLY_SITE_DUE_DATE', rec_.supply_site_due_date, attr_);
   END IF;
   IF (indrec_.price_conv_factor) THEN
      Client_SYS.Add_To_Attr('PRICE_CONV_FACTOR', rec_.price_conv_factor, attr_);
   END IF;
   IF (indrec_.promised_delivery_date) THEN
      Client_SYS.Add_To_Attr('PROMISED_DELIVERY_DATE', rec_.promised_delivery_date, attr_);
   END IF;
   IF (indrec_.qty_assigned) THEN
      Client_SYS.Add_To_Attr('QTY_ASSIGNED', rec_.qty_assigned, attr_);
   END IF;
   IF (indrec_.qty_invoiced) THEN
      Client_SYS.Add_To_Attr('QTY_INVOICED', rec_.qty_invoiced, attr_);
   END IF;
   IF (indrec_.qty_on_order) THEN
      Client_SYS.Add_To_Attr('QTY_ON_ORDER', rec_.qty_on_order, attr_);
   END IF;
   IF (indrec_.qty_picked) THEN
      Client_SYS.Add_To_Attr('QTY_PICKED', rec_.qty_picked, attr_);
   END IF;
   IF (indrec_.qty_returned) THEN
      Client_SYS.Add_To_Attr('QTY_RETURNED', rec_.qty_returned, attr_);
   END IF;
   IF (indrec_.qty_shipdiff) THEN
      Client_SYS.Add_To_Attr('QTY_SHIPDIFF', rec_.qty_shipdiff, attr_);
   END IF;
   IF (indrec_.qty_shipped) THEN
      Client_SYS.Add_To_Attr('QTY_SHIPPED', rec_.qty_shipped, attr_);
   END IF;
   IF (indrec_.qty_to_ship) THEN
      Client_SYS.Add_To_Attr('QTY_TO_SHIP', rec_.qty_to_ship, attr_);
   END IF;
   IF (indrec_.qty_short) THEN
      Client_SYS.Add_To_Attr('QTY_SHORT', rec_.qty_short, attr_);
   END IF;
   IF (indrec_.real_ship_date) THEN
      Client_SYS.Add_To_Attr('REAL_SHIP_DATE', rec_.real_ship_date, attr_);
   END IF;
   IF (indrec_.revised_qty_due) THEN
      Client_SYS.Add_To_Attr('REVISED_QTY_DUE', rec_.revised_qty_due, attr_);
   END IF;
   IF (indrec_.sale_unit_price) THEN
      Client_SYS.Add_To_Attr('SALE_UNIT_PRICE', rec_.sale_unit_price, attr_);
   END IF;
   IF (indrec_.unit_price_incl_tax) THEN
      Client_SYS.Add_To_Attr('UNIT_PRICE_INCL_TAX', rec_.unit_price_incl_tax, attr_);
   END IF;
   IF (indrec_.supply_code) THEN
      Client_SYS.Add_To_Attr('SUPPLY_CODE', Order_Supply_Type_API.Decode(rec_.supply_code), attr_);
      Client_SYS.Add_To_Attr('SUPPLY_CODE_DB', rec_.supply_code, attr_);
   END IF;
   IF (indrec_.wanted_delivery_date) THEN
      Client_SYS.Add_To_Attr('WANTED_DELIVERY_DATE', rec_.wanted_delivery_date, attr_);
   END IF;
   IF (indrec_.delivery_type) THEN
      Client_SYS.Add_To_Attr('DELIVERY_TYPE', rec_.delivery_type, attr_);
   END IF;
   IF (indrec_.vendor_no) THEN
      Client_SYS.Add_To_Attr('VENDOR_NO', rec_.vendor_no, attr_);
   END IF;
   IF (indrec_.tax_code) THEN
      Client_SYS.Add_To_Attr('TAX_CODE', rec_.tax_code, attr_);
   END IF;
   IF (indrec_.tax_class_id) THEN
      Client_SYS.Add_To_Attr('TAX_CLASS_ID', rec_.tax_class_id, attr_);
   END IF;
   IF (indrec_.customer_part_no) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_PART_NO', rec_.customer_part_no, attr_);
   END IF;
   IF (indrec_.customer_part_conv_factor) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_PART_CONV_FACTOR', rec_.customer_part_conv_factor, attr_);
   END IF;
   IF (indrec_.customer_part_unit_meas) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_PART_UNIT_MEAS', rec_.customer_part_unit_meas, attr_);
   END IF;
   IF (indrec_.customer_part_buy_qty) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_PART_BUY_QTY', rec_.customer_part_buy_qty, attr_);
   END IF;
   IF (indrec_.planned_ship_date) THEN
      Client_SYS.Add_To_Attr('PLANNED_SHIP_DATE', rec_.planned_ship_date, attr_);
   END IF;
   IF (indrec_.planned_ship_period) THEN
      Client_SYS.Add_To_Attr('PLANNED_SHIP_PERIOD', rec_.planned_ship_period, attr_);
   END IF;
   IF (indrec_.customer_no) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_NO', rec_.customer_no, attr_);
   END IF;
   IF (indrec_.consignment_stock) THEN
      Client_SYS.Add_To_Attr('CONSIGNMENT_STOCK', Consignment_Stock_API.Decode(rec_.consignment_stock), attr_);
      Client_SYS.Add_To_Attr('CONSIGNMENT_STOCK_DB', rec_.consignment_stock, attr_);
   END IF;
   IF (indrec_.close_tolerance) THEN
      Client_SYS.Add_To_Attr('CLOSE_TOLERANCE', rec_.close_tolerance, attr_);
   END IF;
   IF (indrec_.price_list_no) THEN
      Client_SYS.Add_To_Attr('PRICE_LIST_NO', rec_.price_list_no, attr_);
   END IF;
   IF (indrec_.charged_item) THEN
      Client_SYS.Add_To_Attr('CHARGED_ITEM', Charged_Item_API.Decode(rec_.charged_item), attr_);
      Client_SYS.Add_To_Attr('CHARGED_ITEM_DB', rec_.charged_item, attr_);
   END IF;
   IF (indrec_.demand_order_ref1) THEN
      Client_SYS.Add_To_Attr('DEMAND_ORDER_REF1', rec_.demand_order_ref1, attr_);
   END IF;
   IF (indrec_.demand_order_ref2) THEN
      Client_SYS.Add_To_Attr('DEMAND_ORDER_REF2', rec_.demand_order_ref2, attr_);
   END IF;
   IF (indrec_.demand_order_ref3) THEN
      Client_SYS.Add_To_Attr('DEMAND_ORDER_REF3', rec_.demand_order_ref3, attr_);
   END IF;
   IF (indrec_.demand_order_ref4) THEN
      Client_SYS.Add_To_Attr('DEMAND_ORDER_REF4', rec_.demand_order_ref4, attr_);
   END IF;
   IF (indrec_.demand_code) THEN
      Client_SYS.Add_To_Attr('DEMAND_CODE', Order_Supply_Type_API.Decode(rec_.demand_code), attr_);
      Client_SYS.Add_To_Attr('DEMAND_CODE_DB', rec_.demand_code, attr_);
   END IF;
   IF (indrec_.dop_connection) THEN
      Client_SYS.Add_To_Attr('DOP_CONNECTION', Dop_Connection_API.Decode(rec_.dop_connection), attr_);
      Client_SYS.Add_To_Attr('DOP_CONNECTION_DB', rec_.dop_connection, attr_);
   END IF;
   IF (indrec_.create_sm_object_option) THEN
      Client_SYS.Add_To_Attr('CREATE_SM_OBJECT_OPTION', Create_Sm_Object_Option_API.Decode(rec_.create_sm_object_option), attr_);
      Client_SYS.Add_To_Attr('CREATE_SM_OBJECT_OPTION_DB', rec_.create_sm_object_option, attr_);
   END IF;
   IF (indrec_.default_addr_flag) THEN
      Client_SYS.Add_To_Attr('DEFAULT_ADDR_FLAG', Gen_Yes_No_API.Decode(rec_.default_addr_flag), attr_);
      Client_SYS.Add_To_Attr('DEFAULT_ADDR_FLAG_DB', rec_.default_addr_flag, attr_);
   END IF;
   IF (indrec_.addr_flag) THEN
      Client_SYS.Add_To_Attr('ADDR_FLAG', Gen_Yes_No_API.Decode(rec_.addr_flag), attr_);
      Client_SYS.Add_To_Attr('ADDR_FLAG_DB', rec_.addr_flag, attr_);
   END IF;
   IF (indrec_.ship_addr_no) THEN
      Client_SYS.Add_To_Attr('SHIP_ADDR_NO', rec_.ship_addr_no, attr_);
   END IF;
   IF (indrec_.route_id) THEN
      Client_SYS.Add_To_Attr('ROUTE_ID', rec_.route_id, attr_);
   END IF;
   IF (indrec_.forward_agent_id) THEN
      Client_SYS.Add_To_Attr('FORWARD_AGENT_ID', rec_.forward_agent_id, attr_);
   END IF;
   IF (indrec_.ship_via_code) THEN
      Client_SYS.Add_To_Attr('SHIP_VIA_CODE', rec_.ship_via_code, attr_);
   END IF;
   IF (indrec_.delivery_terms) THEN
      Client_SYS.Add_To_Attr('DELIVERY_TERMS', rec_.delivery_terms, attr_);
   END IF;
   IF (indrec_.delivery_leadtime) THEN
      Client_SYS.Add_To_Attr('DELIVERY_LEADTIME', rec_.delivery_leadtime, attr_);
   END IF;
   IF (indrec_.district_code) THEN
      Client_SYS.Add_To_Attr('DISTRICT_CODE', rec_.district_code, attr_);
   END IF;
   IF (indrec_.region_code) THEN
      Client_SYS.Add_To_Attr('REGION_CODE', rec_.region_code, attr_);
   END IF;
   IF (indrec_.desired_qty) THEN
      Client_SYS.Add_To_Attr('DESIRED_QTY', rec_.desired_qty, attr_);
   END IF;
   IF (indrec_.purchase_part_no) THEN
      Client_SYS.Add_To_Attr('PURCHASE_PART_NO', rec_.purchase_part_no, attr_);
   END IF;
   IF (indrec_.staged_billing) THEN
      Client_SYS.Add_To_Attr('STAGED_BILLING', Staged_Billing_Type_API.Decode(rec_.staged_billing), attr_);
      Client_SYS.Add_To_Attr('STAGED_BILLING_DB', rec_.staged_billing, attr_);
   END IF;
   IF (indrec_.tax_liability) THEN
      Client_SYS.Add_To_Attr('TAX_LIABILITY', rec_.tax_liability, attr_);
   END IF;
   IF (indrec_.original_part_no) THEN
      Client_SYS.Add_To_Attr('ORIGINAL_PART_NO', rec_.original_part_no, attr_);
   END IF;
   IF (indrec_.equipment_object_seq) THEN
      Client_SYS.Add_To_Attr('EQUIPMENT_OBJECT_SEQ', rec_.equipment_object_seq, attr_);
   END IF;
   IF (indrec_.sup_sm_contract) THEN
      Client_SYS.Add_To_Attr('SUP_SM_CONTRACT', rec_.sup_sm_contract, attr_);
   END IF;
   IF (indrec_.sup_sm_object) THEN
      Client_SYS.Add_To_Attr('SUP_SM_OBJECT', rec_.sup_sm_object, attr_);
   END IF;
   IF (indrec_.sm_connection) THEN
      Client_SYS.Add_To_Attr('SM_CONNECTION', Service_Management_Connect_API.Decode(rec_.sm_connection), attr_);
      Client_SYS.Add_To_Attr('SM_CONNECTION_DB', rec_.sm_connection, attr_);
   END IF;
   IF (indrec_.part_price) THEN
      Client_SYS.Add_To_Attr('PART_PRICE', rec_.part_price, attr_);
   END IF;
   IF (indrec_.calc_char_price) THEN
      Client_SYS.Add_To_Attr('CALC_CHAR_PRICE', rec_.calc_char_price, attr_);
   END IF;
   IF (indrec_.char_price) THEN
      Client_SYS.Add_To_Attr('CHAR_PRICE', rec_.char_price, attr_);
   END IF;
   IF (indrec_.price_source) THEN
      Client_SYS.Add_To_Attr('PRICE_SOURCE', Pricing_Source_API.Decode(rec_.price_source), attr_);
      Client_SYS.Add_To_Attr('PRICE_SOURCE_DB', rec_.price_source, attr_);
   END IF;
   IF (indrec_.price_freeze) THEN
      Client_SYS.Add_To_Attr('PRICE_FREEZE', Freeze_Flag_API.Decode(rec_.price_freeze), attr_);
      Client_SYS.Add_To_Attr('PRICE_FREEZE_DB', rec_.price_freeze, attr_);
   END IF;
   IF (indrec_.dock_code) THEN
      Client_SYS.Add_To_Attr('DOCK_CODE', rec_.dock_code, attr_);
   END IF;
   IF (indrec_.sub_dock_code) THEN
      Client_SYS.Add_To_Attr('SUB_DOCK_CODE', rec_.sub_dock_code, attr_);
   END IF;
   IF (indrec_.ref_id) THEN
      Client_SYS.Add_To_Attr('REF_ID', rec_.ref_id, attr_);
   END IF;
   IF (indrec_.location_no) THEN
      Client_SYS.Add_To_Attr('LOCATION_NO', rec_.location_no, attr_);
   END IF;
   IF (indrec_.configuration_id) THEN
      Client_SYS.Add_To_Attr('CONFIGURATION_ID', rec_.configuration_id, attr_);
   END IF;
   IF (indrec_.price_effectivity_date) THEN
      Client_SYS.Add_To_Attr('PRICE_EFFECTIVITY_DATE', rec_.price_effectivity_date, attr_);
   END IF;
   IF (indrec_.configured_line_price_id) THEN
      Client_SYS.Add_To_Attr('CONFIGURED_LINE_PRICE_ID', rec_.configured_line_price_id, attr_);
   END IF;
   IF (indrec_.latest_release_date) THEN
      Client_SYS.Add_To_Attr('LATEST_RELEASE_DATE', rec_.latest_release_date, attr_);
   END IF;
   IF (indrec_.ctp_planned) THEN
      Client_SYS.Add_To_Attr('CTP_PLANNED', Gen_Yes_No_API.Decode(rec_.ctp_planned), attr_);
      Client_SYS.Add_To_Attr('CTP_PLANNED_DB', rec_.ctp_planned, attr_);
   END IF;
   IF (indrec_.job_id) THEN
      Client_SYS.Add_To_Attr('JOB_ID', rec_.job_id, attr_);
   END IF;
   IF (indrec_.cust_warranty_id) THEN
      Client_SYS.Add_To_Attr('CUST_WARRANTY_ID', rec_.cust_warranty_id, attr_);
   END IF;
   IF (indrec_.price_source_id) THEN
      Client_SYS.Add_To_Attr('PRICE_SOURCE_ID', rec_.price_source_id, attr_);
   END IF;
   IF (indrec_.intrastat_exempt) THEN
      Client_SYS.Add_To_Attr('INTRASTAT_EXEMPT', Intrastat_Exempt_API.Decode(rec_.intrastat_exempt), attr_);
      Client_SYS.Add_To_Attr('INTRASTAT_EXEMPT_DB', rec_.intrastat_exempt, attr_);
   END IF;
   IF (indrec_.price_unit_meas) THEN
      Client_SYS.Add_To_Attr('PRICE_UNIT_MEAS', rec_.price_unit_meas, attr_);
   END IF;
   IF (indrec_.condition_code) THEN
      Client_SYS.Add_To_Attr('CONDITION_CODE', rec_.condition_code, attr_);
   END IF;
   IF (indrec_.additional_discount) THEN
      Client_SYS.Add_To_Attr('ADDITIONAL_DISCOUNT', rec_.additional_discount, attr_);
   END IF;
   IF (indrec_.part_ownership) THEN
      Client_SYS.Add_To_Attr('PART_OWNERSHIP', Part_Ownership_API.Decode(rec_.part_ownership), attr_);
      Client_SYS.Add_To_Attr('PART_OWNERSHIP_DB', rec_.part_ownership, attr_);
   END IF;
   IF (indrec_.owning_customer_no) THEN
      Client_SYS.Add_To_Attr('OWNING_CUSTOMER_NO', rec_.owning_customer_no, attr_);
   END IF;
   IF (indrec_.exchange_item) THEN
      Client_SYS.Add_To_Attr('EXCHANGE_ITEM', Exchange_Item_API.Decode(rec_.exchange_item), attr_);
      Client_SYS.Add_To_Attr('EXCHANGE_ITEM_DB', rec_.exchange_item, attr_);
   END IF;
   IF (indrec_.supply_site_reserve_type) THEN
      Client_SYS.Add_To_Attr('SUPPLY_SITE_RESERVE_TYPE', Supply_Site_Reserve_Type_API.Decode(rec_.supply_site_reserve_type), attr_);
      Client_SYS.Add_To_Attr('SUPPLY_SITE_RESERVE_TYPE_DB', rec_.supply_site_reserve_type, attr_);
   END IF;
   IF (indrec_.originating_rel_no) THEN
      Client_SYS.Add_To_Attr('ORIGINATING_REL_NO', rec_.originating_rel_no, attr_);
   END IF;
   IF (indrec_.originating_line_item_no) THEN
      Client_SYS.Add_To_Attr('ORIGINATING_LINE_ITEM_NO', rec_.originating_line_item_no, attr_);
   END IF;
   IF (indrec_.release_planning) THEN
      Client_SYS.Add_To_Attr('RELEASE_PLANNING', Release_Planning_API.Decode(rec_.release_planning), attr_);
      Client_SYS.Add_To_Attr('RELEASE_PLANNING_DB', rec_.release_planning, attr_);
   END IF;
   IF (indrec_.supplier_ship_via_transit) THEN
      Client_SYS.Add_To_Attr('SUPPLIER_SHIP_VIA_TRANSIT', rec_.supplier_ship_via_transit, attr_);
   END IF;
   IF (indrec_.supplier_ship_via_transit_desc) THEN
      Client_SYS.Add_To_Attr('SUPPLIER_SHIP_VIA_TRANSIT_DESC', rec_.supplier_ship_via_transit_desc, attr_);
   END IF;
   IF (indrec_.supply_site) THEN
      Client_SYS.Add_To_Attr('SUPPLY_SITE', rec_.supply_site, attr_);
   END IF;
   IF (indrec_.shipment_connected) THEN
      Client_SYS.Add_To_Attr('SHIPMENT_CONNECTED', Fnd_Boolean_API.Decode(rec_.shipment_connected), attr_);
      Client_SYS.Add_To_Attr('SHIPMENT_CONNECTED_DB', rec_.shipment_connected, attr_);
   END IF;
   IF (indrec_.self_billing) THEN
      Client_SYS.Add_To_Attr('SELF_BILLING', Self_Billing_Type_API.Decode(rec_.self_billing), attr_);
      Client_SYS.Add_To_Attr('SELF_BILLING_DB', rec_.self_billing, attr_);
   END IF;
   IF (indrec_.activity_seq) THEN
      Client_SYS.Add_To_Attr('ACTIVITY_SEQ', rec_.activity_seq, attr_);
   END IF;
   IF (indrec_.project_id) THEN
      Client_SYS.Add_To_Attr('PROJECT_ID', rec_.project_id, attr_);
   END IF;
   IF (indrec_.deliver_to_customer_no) THEN
      Client_SYS.Add_To_Attr('DELIVER_TO_CUSTOMER_NO', rec_.deliver_to_customer_no, attr_);
   END IF;
   IF (indrec_.contact) THEN
      Client_SYS.Add_To_Attr('CONTACT', rec_.contact, attr_);
   END IF;
   IF (indrec_.input_qty) THEN
      Client_SYS.Add_To_Attr('INPUT_QTY', rec_.input_qty, attr_);
   END IF;
   IF (indrec_.input_unit_meas) THEN
      Client_SYS.Add_To_Attr('INPUT_UNIT_MEAS', rec_.input_unit_meas, attr_);
   END IF;
   IF (indrec_.input_conv_factor) THEN
      Client_SYS.Add_To_Attr('INPUT_CONV_FACTOR', rec_.input_conv_factor, attr_);
   END IF;
   IF (indrec_.input_variable_values) THEN
      Client_SYS.Add_To_Attr('INPUT_VARIABLE_VALUES', rec_.input_variable_values, attr_);
   END IF;
   IF (indrec_.shipment_creation) THEN
      Client_SYS.Add_To_Attr('SHIPMENT_CREATION', Shipment_Creation_API.Decode(rec_.shipment_creation), attr_);
      Client_SYS.Add_To_Attr('SHIPMENT_CREATION_DB', rec_.shipment_creation, attr_);
   END IF;
   IF (indrec_.manufacturing_department) THEN
      Client_SYS.Add_To_Attr('MANUFACTURING_DEPARTMENT', rec_.manufacturing_department, attr_);
   END IF;
   IF (indrec_.delivery_sequence) THEN
      Client_SYS.Add_To_Attr('DELIVERY_SEQUENCE', rec_.delivery_sequence, attr_);
   END IF;
   IF (indrec_.cancel_reason) THEN
      Client_SYS.Add_To_Attr('CANCEL_REASON', rec_.cancel_reason, attr_);
   END IF;
   IF (indrec_.delivery_confirmed) THEN
      Client_SYS.Add_To_Attr('DELIVERY_CONFIRMED', Fnd_Boolean_API.Decode(rec_.delivery_confirmed), attr_);
      Client_SYS.Add_To_Attr('DELIVERY_CONFIRMED_DB', rec_.delivery_confirmed, attr_);
   END IF;
   IF (indrec_.customer_po_line_no) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_PO_LINE_NO', rec_.customer_po_line_no, attr_);
   END IF;
   IF (indrec_.customer_po_rel_no) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_PO_REL_NO', rec_.customer_po_rel_no, attr_);
   END IF;
   IF (indrec_.qty_confirmeddiff) THEN
      Client_SYS.Add_To_Attr('QTY_CONFIRMEDDIFF', rec_.qty_confirmeddiff, attr_);
   END IF;
   IF (indrec_.blocked_for_invoicing) THEN
      Client_SYS.Add_To_Attr('BLOCKED_FOR_INVOICING', Fnd_Boolean_API.Decode(rec_.blocked_for_invoicing), attr_);
      Client_SYS.Add_To_Attr('BLOCKED_FOR_INVOICING_DB', rec_.blocked_for_invoicing, attr_);
   END IF;
   IF (indrec_.provisional_price) THEN
      Client_SYS.Add_To_Attr('PROVISIONAL_PRICE', Fnd_Boolean_API.Decode(rec_.provisional_price), attr_);
      Client_SYS.Add_To_Attr('PROVISIONAL_PRICE_DB', rec_.provisional_price, attr_);
   END IF;
   IF (indrec_.receiving_advice_type) THEN
      Client_SYS.Add_To_Attr('RECEIVING_ADVICE_TYPE', Receiving_Advice_Type_API.Decode(rec_.receiving_advice_type), attr_);
      Client_SYS.Add_To_Attr('RECEIVING_ADVICE_TYPE_DB', rec_.receiving_advice_type, attr_);
   END IF;
   IF (indrec_.first_actual_ship_date) THEN
      Client_SYS.Add_To_Attr('FIRST_ACTUAL_SHIP_DATE', rec_.first_actual_ship_date, attr_);
   END IF;
   IF (indrec_.tax_id_no) THEN
      Client_SYS.Add_To_Attr('TAX_ID_NO', rec_.tax_id_no, attr_);
   END IF;
   IF (indrec_.tax_id_validated_date) THEN
      Client_SYS.Add_To_Attr('TAX_ID_VALIDATED_DATE', rec_.tax_id_validated_date, attr_);
   END IF;
   IF (indrec_.price_source_net_price) THEN
      Client_SYS.Add_To_Attr('PRICE_SOURCE_NET_PRICE', Fnd_Boolean_API.Decode(rec_.price_source_net_price), attr_);
      Client_SYS.Add_To_Attr('PRICE_SOURCE_NET_PRICE_DB', rec_.price_source_net_price, attr_);
   END IF;
   IF (indrec_.target_date) THEN
      Client_SYS.Add_To_Attr('TARGET_DATE', rec_.target_date, attr_);
   END IF;
   IF (indrec_.allocation_id) THEN
      Client_SYS.Add_To_Attr('ALLOCATION_ID', rec_.allocation_id, attr_);
   END IF;
   IF (indrec_.del_terms_location) THEN
      Client_SYS.Add_To_Attr('DEL_TERMS_LOCATION', rec_.del_terms_location, attr_);
   END IF;
   IF (indrec_.classification_part_no) THEN
      Client_SYS.Add_To_Attr('CLASSIFICATION_PART_NO', rec_.classification_part_no, attr_);
   END IF;
   IF (indrec_.classification_unit_meas) THEN
      Client_SYS.Add_To_Attr('CLASSIFICATION_UNIT_MEAS', rec_.classification_unit_meas, attr_);
   END IF;
   IF (indrec_.classification_standard) THEN
      Client_SYS.Add_To_Attr('CLASSIFICATION_STANDARD', rec_.classification_standard, attr_);
   END IF;
   IF (indrec_.rebate_builder) THEN
      Client_SYS.Add_To_Attr('REBATE_BUILDER', Fnd_Boolean_API.Decode(rec_.rebate_builder), attr_);
      Client_SYS.Add_To_Attr('REBATE_BUILDER_DB', rec_.rebate_builder, attr_);
   END IF;
   IF (indrec_.line_total_weight_gross) THEN
      Client_SYS.Add_To_Attr('LINE_TOTAL_WEIGHT_GROSS', rec_.line_total_weight_gross, attr_);
   END IF;
   IF (indrec_.freight_map_id) THEN
      Client_SYS.Add_To_Attr('FREIGHT_MAP_ID', rec_.freight_map_id, attr_);
   END IF;
   IF (indrec_.zone_id) THEN
      Client_SYS.Add_To_Attr('ZONE_ID', rec_.zone_id, attr_);
   END IF;
   IF (indrec_.freight_price_list_no) THEN
      Client_SYS.Add_To_Attr('FREIGHT_PRICE_LIST_NO', rec_.freight_price_list_no, attr_);
   END IF;
   IF (indrec_.adjusted_weight_net) THEN
      Client_SYS.Add_To_Attr('ADJUSTED_WEIGHT_NET', rec_.adjusted_weight_net, attr_);
   END IF;
   IF (indrec_.adjusted_weight_gross) THEN
      Client_SYS.Add_To_Attr('ADJUSTED_WEIGHT_GROSS', rec_.adjusted_weight_gross, attr_);
   END IF;
   IF (indrec_.adjusted_volume) THEN
      Client_SYS.Add_To_Attr('ADJUSTED_VOLUME', rec_.adjusted_volume, attr_);
   END IF;
   IF (indrec_.freight_free) THEN
      Client_SYS.Add_To_Attr('FREIGHT_FREE', Fnd_Boolean_API.Decode(rec_.freight_free), attr_);
      Client_SYS.Add_To_Attr('FREIGHT_FREE_DB', rec_.freight_free, attr_);
   END IF;
   IF (indrec_.part_level) THEN
      Client_SYS.Add_To_Attr('PART_LEVEL', Price_Discount_Part_Level_API.Decode(rec_.part_level), attr_);
      Client_SYS.Add_To_Attr('PART_LEVEL_DB', rec_.part_level, attr_);
   END IF;
   IF (indrec_.part_level_id) THEN
      Client_SYS.Add_To_Attr('PART_LEVEL_ID', rec_.part_level_id, attr_);
   END IF;
   IF (indrec_.customer_level) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_LEVEL', Price_Discount_Cust_Level_API.Decode(rec_.customer_level), attr_);
      Client_SYS.Add_To_Attr('CUSTOMER_LEVEL_DB', rec_.customer_level, attr_);
   END IF;
   IF (indrec_.customer_level_id) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_LEVEL_ID', rec_.customer_level_id, attr_);
   END IF;
   IF (indrec_.load_id) THEN
      Client_SYS.Add_To_Attr('LOAD_ID', rec_.load_id, attr_);
   END IF;
   IF (indrec_.customs_value) THEN
      Client_SYS.Add_To_Attr('CUSTOMS_VALUE', rec_.customs_value, attr_);
   END IF;
   IF (indrec_.abnormal_demand) THEN
      Client_SYS.Add_To_Attr('ABNORMAL_DEMAND', Fnd_Boolean_API.Decode(rec_.abnormal_demand), attr_);
      Client_SYS.Add_To_Attr('ABNORMAL_DEMAND_DB', rec_.abnormal_demand, attr_);
   END IF;
   IF (indrec_.cust_calendar_id) THEN
      Client_SYS.Add_To_Attr('CUST_CALENDAR_ID', rec_.cust_calendar_id, attr_);
   END IF;
   IF (indrec_.ext_transport_calendar_id) THEN
      Client_SYS.Add_To_Attr('EXT_TRANSPORT_CALENDAR_ID', rec_.ext_transport_calendar_id, attr_);
   END IF;
   IF (indrec_.rel_mtrl_planning) THEN
      Client_SYS.Add_To_Attr('REL_MTRL_PLANNING', rec_.rel_mtrl_planning, attr_);
   END IF;
   IF (indrec_.qty_per_assembly) THEN
      Client_SYS.Add_To_Attr('QTY_PER_ASSEMBLY', rec_.qty_per_assembly, attr_);
   END IF;
   IF (indrec_.new_comp_after_delivery) THEN
      Client_SYS.Add_To_Attr('NEW_COMP_AFTER_DELIVERY', rec_.new_comp_after_delivery, attr_);
   END IF;
   IF (indrec_.inverted_conv_factor) THEN
      Client_SYS.Add_To_Attr('INVERTED_CONV_FACTOR', rec_.inverted_conv_factor, attr_);
   END IF;
   IF (indrec_.rental) THEN
      Client_SYS.Add_To_Attr('RENTAL', Fnd_Boolean_API.Decode(rec_.rental), attr_);
      Client_SYS.Add_To_Attr('RENTAL_DB', rec_.rental, attr_);
   END IF;
   IF (indrec_.end_customer_id) THEN
      Client_SYS.Add_To_Attr('END_CUSTOMER_ID', rec_.end_customer_id, attr_);
   END IF;
   IF (indrec_.picking_leadtime) THEN
      Client_SYS.Add_To_Attr('PICKING_LEADTIME', rec_.picking_leadtime, attr_);
   END IF;
   IF (indrec_.shipment_type) THEN
      Client_SYS.Add_To_Attr('SHIPMENT_TYPE', rec_.shipment_type, attr_);
   END IF;
   IF (indrec_.open_shipment_qty) THEN
      Client_SYS.Add_To_Attr('OPEN_SHIPMENT_QTY', rec_.open_shipment_qty, attr_);
   END IF;
   IF (indrec_.packing_instruction_id) THEN
      Client_SYS.Add_To_Attr('PACKING_INSTRUCTION_ID', rec_.packing_instruction_id, attr_);
   END IF;
   IF (indrec_.originating_co_lang_code) THEN
      Client_SYS.Add_To_Attr('ORIGINATING_CO_LANG_CODE', rec_.originating_co_lang_code, attr_);
   END IF;
   IF (indrec_.cust_part_invert_conv_fact) THEN
      Client_SYS.Add_To_Attr('CUST_PART_INVERT_CONV_FACT', rec_.cust_part_invert_conv_fact, attr_);
   END IF;
   IF (indrec_.country_code) THEN
      Client_SYS.Add_To_Attr('COUNTRY_CODE', rec_.country_code, attr_);
   END IF;
   IF (indrec_.tax_liability_type) THEN
      Client_SYS.Add_To_Attr('TAX_LIABILITY_TYPE', Tax_Liability_Type_API.Decode(rec_.tax_liability_type), attr_);
      Client_SYS.Add_To_Attr('TAX_LIABILITY_TYPE_DB', rec_.tax_liability_type, attr_);
   END IF;
   IF (indrec_.free_of_charge) THEN
      Client_SYS.Add_To_Attr('FREE_OF_CHARGE', Fnd_Boolean_API.Decode(rec_.free_of_charge), attr_);
      Client_SYS.Add_To_Attr('FREE_OF_CHARGE_DB', rec_.free_of_charge, attr_);
   END IF;
   IF (indrec_.free_of_charge_tax_basis) THEN
      Client_SYS.Add_To_Attr('FREE_OF_CHARGE_TAX_BASIS', rec_.free_of_charge_tax_basis, attr_);
   END IF;
   IF (indrec_.tax_calc_structure_id) THEN
      Client_SYS.Add_To_Attr('TAX_CALC_STRUCTURE_ID', rec_.tax_calc_structure_id, attr_);
   END IF;
   IF (indrec_.customer_tax_usage_type) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_TAX_USAGE_TYPE', rec_.customer_tax_usage_type, attr_);
   END IF;
   IF (indrec_.supply_site_part_no) THEN
      Client_SYS.Add_To_Attr('SUPPLY_SITE_PART_NO', rec_.supply_site_part_no, attr_);
   END IF;
   IF (indrec_.acquisition_origin) THEN
      Client_SYS.Add_To_Attr('ACQUISITION_ORIGIN', rec_.acquisition_origin, attr_);
   END IF;
   IF (indrec_.statistical_code) THEN
      Client_SYS.Add_To_Attr('STATISTICAL_CODE', rec_.statistical_code, attr_);
   END IF;
   IF (indrec_.original_discount) THEN
      Client_SYS.Add_To_Attr('ORIGINAL_DISCOUNT', rec_.original_discount, attr_);
   END IF;
   IF (indrec_.original_add_discount) THEN
      Client_SYS.Add_To_Attr('ORIGINAL_ADD_DISCOUNT', rec_.original_add_discount, attr_);
   END IF;
   IF (indrec_.original_order_discount) THEN
      Client_SYS.Add_To_Attr('ORIGINAL_ORDER_DISCOUNT', rec_.original_order_discount, attr_);
   END IF;
   IF (indrec_.acquisition_reason_id) THEN
      Client_SYS.Add_To_Attr('ACQUISITION_REASON_ID', rec_.acquisition_reason_id, attr_);
   END IF;
   RETURN attr_;
END Pack___;


FUNCTION Pack_Table___ (
   rec_ IN customer_order_line_tab%ROWTYPE ) RETURN VARCHAR2
IS
   attr_ VARCHAR2(32000);
BEGIN
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('ORDER_NO', rec_.order_no, attr_);
   Client_SYS.Add_To_Attr('LINE_NO', rec_.line_no, attr_);
   Client_SYS.Add_To_Attr('REL_NO', rec_.rel_no, attr_);
   Client_SYS.Add_To_Attr('LINE_ITEM_NO', rec_.line_item_no, attr_);
   Client_SYS.Add_To_Attr('CONTRACT', rec_.contract, attr_);
   Client_SYS.Add_To_Attr('CATALOG_NO', rec_.catalog_no, attr_);
   Client_SYS.Add_To_Attr('NOTE_ID', rec_.note_id, attr_);
   Client_SYS.Add_To_Attr('ORDER_CODE', rec_.order_code, attr_);
   Client_SYS.Add_To_Attr('PART_NO', rec_.part_no, attr_);
   Client_SYS.Add_To_Attr('PRE_ACCOUNTING_ID', rec_.pre_accounting_id, attr_);
   Client_SYS.Add_To_Attr('SALES_UNIT_MEAS', rec_.sales_unit_meas, attr_);
   Client_SYS.Add_To_Attr('BASE_SALE_UNIT_PRICE', rec_.base_sale_unit_price, attr_);
   Client_SYS.Add_To_Attr('BASE_UNIT_PRICE_INCL_TAX', rec_.base_unit_price_incl_tax, attr_);
   Client_SYS.Add_To_Attr('BUY_QTY_DUE', rec_.buy_qty_due, attr_);
   Client_SYS.Add_To_Attr('CATALOG_DESC', rec_.catalog_desc, attr_);
   Client_SYS.Add_To_Attr('CATALOG_TYPE', rec_.catalog_type, attr_);
   Client_SYS.Add_To_Attr('CONV_FACTOR', rec_.conv_factor, attr_);
   Client_SYS.Add_To_Attr('COST', rec_.cost, attr_);
   Client_SYS.Add_To_Attr('CURRENCY_RATE', rec_.currency_rate, attr_);
   Client_SYS.Add_To_Attr('DATE_ENTERED', rec_.date_entered, attr_);
   Client_SYS.Add_To_Attr('DISCOUNT', rec_.discount, attr_);
   Client_SYS.Add_To_Attr('LINE_TOTAL_QTY', rec_.line_total_qty, attr_);
   Client_SYS.Add_To_Attr('LINE_TOTAL_WEIGHT', rec_.line_total_weight, attr_);
   Client_SYS.Add_To_Attr('NOTE_TEXT', rec_.note_text, attr_);
   Client_SYS.Add_To_Attr('ORDER_DISCOUNT', rec_.order_discount, attr_);
   Client_SYS.Add_To_Attr('PLANNED_DELIVERY_DATE', rec_.planned_delivery_date, attr_);
   Client_SYS.Add_To_Attr('PLANNED_DUE_DATE', rec_.planned_due_date, attr_);
   Client_SYS.Add_To_Attr('SUPPLY_SITE_DUE_DATE', rec_.supply_site_due_date, attr_);
   Client_SYS.Add_To_Attr('PRICE_CONV_FACTOR', rec_.price_conv_factor, attr_);
   Client_SYS.Add_To_Attr('PROMISED_DELIVERY_DATE', rec_.promised_delivery_date, attr_);
   Client_SYS.Add_To_Attr('QTY_ASSIGNED', rec_.qty_assigned, attr_);
   Client_SYS.Add_To_Attr('QTY_INVOICED', rec_.qty_invoiced, attr_);
   Client_SYS.Add_To_Attr('QTY_ON_ORDER', rec_.qty_on_order, attr_);
   Client_SYS.Add_To_Attr('QTY_PICKED', rec_.qty_picked, attr_);
   Client_SYS.Add_To_Attr('QTY_RETURNED', rec_.qty_returned, attr_);
   Client_SYS.Add_To_Attr('QTY_SHIPDIFF', rec_.qty_shipdiff, attr_);
   Client_SYS.Add_To_Attr('QTY_SHIPPED', rec_.qty_shipped, attr_);
   Client_SYS.Add_To_Attr('QTY_TO_SHIP', rec_.qty_to_ship, attr_);
   Client_SYS.Add_To_Attr('QTY_SHORT', rec_.qty_short, attr_);
   Client_SYS.Add_To_Attr('REAL_SHIP_DATE', rec_.real_ship_date, attr_);
   Client_SYS.Add_To_Attr('REVISED_QTY_DUE', rec_.revised_qty_due, attr_);
   Client_SYS.Add_To_Attr('SALE_UNIT_PRICE', rec_.sale_unit_price, attr_);
   Client_SYS.Add_To_Attr('UNIT_PRICE_INCL_TAX', rec_.unit_price_incl_tax, attr_);
   Client_SYS.Add_To_Attr('SUPPLY_CODE', rec_.supply_code, attr_);
   Client_SYS.Add_To_Attr('WANTED_DELIVERY_DATE', rec_.wanted_delivery_date, attr_);
   Client_SYS.Add_To_Attr('DELIVERY_TYPE', rec_.delivery_type, attr_);
   Client_SYS.Add_To_Attr('VENDOR_NO', rec_.vendor_no, attr_);
   Client_SYS.Add_To_Attr('TAX_CODE', rec_.tax_code, attr_);
   Client_SYS.Add_To_Attr('TAX_CLASS_ID', rec_.tax_class_id, attr_);
   Client_SYS.Add_To_Attr('CUSTOMER_PART_NO', rec_.customer_part_no, attr_);
   Client_SYS.Add_To_Attr('CUSTOMER_PART_CONV_FACTOR', rec_.customer_part_conv_factor, attr_);
   Client_SYS.Add_To_Attr('CUSTOMER_PART_UNIT_MEAS', rec_.customer_part_unit_meas, attr_);
   Client_SYS.Add_To_Attr('CUSTOMER_PART_BUY_QTY', rec_.customer_part_buy_qty, attr_);
   Client_SYS.Add_To_Attr('PLANNED_SHIP_DATE', rec_.planned_ship_date, attr_);
   Client_SYS.Add_To_Attr('PLANNED_SHIP_PERIOD', rec_.planned_ship_period, attr_);
   Client_SYS.Add_To_Attr('CUSTOMER_NO', rec_.customer_no, attr_);
   Client_SYS.Add_To_Attr('CONSIGNMENT_STOCK', rec_.consignment_stock, attr_);
   Client_SYS.Add_To_Attr('CLOSE_TOLERANCE', rec_.close_tolerance, attr_);
   Client_SYS.Add_To_Attr('PRICE_LIST_NO', rec_.price_list_no, attr_);
   Client_SYS.Add_To_Attr('CHARGED_ITEM', rec_.charged_item, attr_);
   Client_SYS.Add_To_Attr('DEMAND_ORDER_REF1', rec_.demand_order_ref1, attr_);
   Client_SYS.Add_To_Attr('DEMAND_ORDER_REF2', rec_.demand_order_ref2, attr_);
   Client_SYS.Add_To_Attr('DEMAND_ORDER_REF3', rec_.demand_order_ref3, attr_);
   Client_SYS.Add_To_Attr('DEMAND_ORDER_REF4', rec_.demand_order_ref4, attr_);
   Client_SYS.Add_To_Attr('DEMAND_CODE', rec_.demand_code, attr_);
   Client_SYS.Add_To_Attr('DOP_CONNECTION', rec_.dop_connection, attr_);
   Client_SYS.Add_To_Attr('CREATE_SM_OBJECT_OPTION', rec_.create_sm_object_option, attr_);
   Client_SYS.Add_To_Attr('DEFAULT_ADDR_FLAG', rec_.default_addr_flag, attr_);
   Client_SYS.Add_To_Attr('ADDR_FLAG', rec_.addr_flag, attr_);
   Client_SYS.Add_To_Attr('SHIP_ADDR_NO', rec_.ship_addr_no, attr_);
   Client_SYS.Add_To_Attr('ROUTE_ID', rec_.route_id, attr_);
   Client_SYS.Add_To_Attr('FORWARD_AGENT_ID', rec_.forward_agent_id, attr_);
   Client_SYS.Add_To_Attr('SHIP_VIA_CODE', rec_.ship_via_code, attr_);
   Client_SYS.Add_To_Attr('DELIVERY_TERMS', rec_.delivery_terms, attr_);
   Client_SYS.Add_To_Attr('DELIVERY_LEADTIME', rec_.delivery_leadtime, attr_);
   Client_SYS.Add_To_Attr('DISTRICT_CODE', rec_.district_code, attr_);
   Client_SYS.Add_To_Attr('REGION_CODE', rec_.region_code, attr_);
   Client_SYS.Add_To_Attr('DESIRED_QTY', rec_.desired_qty, attr_);
   Client_SYS.Add_To_Attr('PURCHASE_PART_NO', rec_.purchase_part_no, attr_);
   Client_SYS.Add_To_Attr('STAGED_BILLING', rec_.staged_billing, attr_);
   Client_SYS.Add_To_Attr('TAX_LIABILITY', rec_.tax_liability, attr_);
   Client_SYS.Add_To_Attr('ORIGINAL_PART_NO', rec_.original_part_no, attr_);
   Client_SYS.Add_To_Attr('EQUIPMENT_OBJECT_SEQ', rec_.equipment_object_seq, attr_);
   Client_SYS.Add_To_Attr('SUP_SM_CONTRACT', rec_.sup_sm_contract, attr_);
   Client_SYS.Add_To_Attr('SUP_SM_OBJECT', rec_.sup_sm_object, attr_);
   Client_SYS.Add_To_Attr('SM_CONNECTION', rec_.sm_connection, attr_);
   Client_SYS.Add_To_Attr('PART_PRICE', rec_.part_price, attr_);
   Client_SYS.Add_To_Attr('CALC_CHAR_PRICE', rec_.calc_char_price, attr_);
   Client_SYS.Add_To_Attr('CHAR_PRICE', rec_.char_price, attr_);
   Client_SYS.Add_To_Attr('PRICE_SOURCE', rec_.price_source, attr_);
   Client_SYS.Add_To_Attr('PRICE_FREEZE', rec_.price_freeze, attr_);
   Client_SYS.Add_To_Attr('DOCK_CODE', rec_.dock_code, attr_);
   Client_SYS.Add_To_Attr('SUB_DOCK_CODE', rec_.sub_dock_code, attr_);
   Client_SYS.Add_To_Attr('REF_ID', rec_.ref_id, attr_);
   Client_SYS.Add_To_Attr('LOCATION_NO', rec_.location_no, attr_);
   Client_SYS.Add_To_Attr('CONFIGURATION_ID', rec_.configuration_id, attr_);
   Client_SYS.Add_To_Attr('PRICE_EFFECTIVITY_DATE', rec_.price_effectivity_date, attr_);
   Client_SYS.Add_To_Attr('CONFIGURED_LINE_PRICE_ID', rec_.configured_line_price_id, attr_);
   Client_SYS.Add_To_Attr('LATEST_RELEASE_DATE', rec_.latest_release_date, attr_);
   Client_SYS.Add_To_Attr('CTP_PLANNED', rec_.ctp_planned, attr_);
   Client_SYS.Add_To_Attr('JOB_ID', rec_.job_id, attr_);
   Client_SYS.Add_To_Attr('CUST_WARRANTY_ID', rec_.cust_warranty_id, attr_);
   Client_SYS.Add_To_Attr('PRICE_SOURCE_ID', rec_.price_source_id, attr_);
   Client_SYS.Add_To_Attr('INTRASTAT_EXEMPT', rec_.intrastat_exempt, attr_);
   Client_SYS.Add_To_Attr('PRICE_UNIT_MEAS', rec_.price_unit_meas, attr_);
   Client_SYS.Add_To_Attr('CONDITION_CODE', rec_.condition_code, attr_);
   Client_SYS.Add_To_Attr('ADDITIONAL_DISCOUNT', rec_.additional_discount, attr_);
   Client_SYS.Add_To_Attr('PART_OWNERSHIP', rec_.part_ownership, attr_);
   Client_SYS.Add_To_Attr('OWNING_CUSTOMER_NO', rec_.owning_customer_no, attr_);
   Client_SYS.Add_To_Attr('EXCHANGE_ITEM', rec_.exchange_item, attr_);
   Client_SYS.Add_To_Attr('SUPPLY_SITE_RESERVE_TYPE', rec_.supply_site_reserve_type, attr_);
   Client_SYS.Add_To_Attr('ORIGINATING_REL_NO', rec_.originating_rel_no, attr_);
   Client_SYS.Add_To_Attr('ORIGINATING_LINE_ITEM_NO', rec_.originating_line_item_no, attr_);
   Client_SYS.Add_To_Attr('RELEASE_PLANNING', rec_.release_planning, attr_);
   Client_SYS.Add_To_Attr('SUPPLIER_SHIP_VIA_TRANSIT', rec_.supplier_ship_via_transit, attr_);
   Client_SYS.Add_To_Attr('SUPPLIER_SHIP_VIA_TRANSIT_DESC', rec_.supplier_ship_via_transit_desc, attr_);
   Client_SYS.Add_To_Attr('SUPPLY_SITE', rec_.supply_site, attr_);
   Client_SYS.Add_To_Attr('SHIPMENT_CONNECTED', rec_.shipment_connected, attr_);
   Client_SYS.Add_To_Attr('SELF_BILLING', rec_.self_billing, attr_);
   Client_SYS.Add_To_Attr('ACTIVITY_SEQ', rec_.activity_seq, attr_);
   Client_SYS.Add_To_Attr('PROJECT_ID', rec_.project_id, attr_);
   Client_SYS.Add_To_Attr('DELIVER_TO_CUSTOMER_NO', rec_.deliver_to_customer_no, attr_);
   Client_SYS.Add_To_Attr('CONTACT', rec_.contact, attr_);
   Client_SYS.Add_To_Attr('INPUT_QTY', rec_.input_qty, attr_);
   Client_SYS.Add_To_Attr('INPUT_UNIT_MEAS', rec_.input_unit_meas, attr_);
   Client_SYS.Add_To_Attr('INPUT_CONV_FACTOR', rec_.input_conv_factor, attr_);
   Client_SYS.Add_To_Attr('INPUT_VARIABLE_VALUES', rec_.input_variable_values, attr_);
   Client_SYS.Add_To_Attr('SHIPMENT_CREATION', rec_.shipment_creation, attr_);
   Client_SYS.Add_To_Attr('MANUFACTURING_DEPARTMENT', rec_.manufacturing_department, attr_);
   Client_SYS.Add_To_Attr('DELIVERY_SEQUENCE', rec_.delivery_sequence, attr_);
   Client_SYS.Add_To_Attr('CANCEL_REASON', rec_.cancel_reason, attr_);
   Client_SYS.Add_To_Attr('DELIVERY_CONFIRMED', rec_.delivery_confirmed, attr_);
   Client_SYS.Add_To_Attr('CUSTOMER_PO_LINE_NO', rec_.customer_po_line_no, attr_);
   Client_SYS.Add_To_Attr('CUSTOMER_PO_REL_NO', rec_.customer_po_rel_no, attr_);
   Client_SYS.Add_To_Attr('QTY_CONFIRMEDDIFF', rec_.qty_confirmeddiff, attr_);
   Client_SYS.Add_To_Attr('BLOCKED_FOR_INVOICING', rec_.blocked_for_invoicing, attr_);
   Client_SYS.Add_To_Attr('PROVISIONAL_PRICE', rec_.provisional_price, attr_);
   Client_SYS.Add_To_Attr('RECEIVING_ADVICE_TYPE', rec_.receiving_advice_type, attr_);
   Client_SYS.Add_To_Attr('FIRST_ACTUAL_SHIP_DATE', rec_.first_actual_ship_date, attr_);
   Client_SYS.Add_To_Attr('TAX_ID_NO', rec_.tax_id_no, attr_);
   Client_SYS.Add_To_Attr('TAX_ID_VALIDATED_DATE', rec_.tax_id_validated_date, attr_);
   Client_SYS.Add_To_Attr('PRICE_SOURCE_NET_PRICE', rec_.price_source_net_price, attr_);
   Client_SYS.Add_To_Attr('TARGET_DATE', rec_.target_date, attr_);
   Client_SYS.Add_To_Attr('ALLOCATION_ID', rec_.allocation_id, attr_);
   Client_SYS.Add_To_Attr('DEL_TERMS_LOCATION', rec_.del_terms_location, attr_);
   Client_SYS.Add_To_Attr('CLASSIFICATION_PART_NO', rec_.classification_part_no, attr_);
   Client_SYS.Add_To_Attr('CLASSIFICATION_UNIT_MEAS', rec_.classification_unit_meas, attr_);
   Client_SYS.Add_To_Attr('CLASSIFICATION_STANDARD', rec_.classification_standard, attr_);
   Client_SYS.Add_To_Attr('REBATE_BUILDER', rec_.rebate_builder, attr_);
   Client_SYS.Add_To_Attr('LINE_TOTAL_WEIGHT_GROSS', rec_.line_total_weight_gross, attr_);
   Client_SYS.Add_To_Attr('FREIGHT_MAP_ID', rec_.freight_map_id, attr_);
   Client_SYS.Add_To_Attr('ZONE_ID', rec_.zone_id, attr_);
   Client_SYS.Add_To_Attr('FREIGHT_PRICE_LIST_NO', rec_.freight_price_list_no, attr_);
   Client_SYS.Add_To_Attr('ADJUSTED_WEIGHT_NET', rec_.adjusted_weight_net, attr_);
   Client_SYS.Add_To_Attr('ADJUSTED_WEIGHT_GROSS', rec_.adjusted_weight_gross, attr_);
   Client_SYS.Add_To_Attr('ADJUSTED_VOLUME', rec_.adjusted_volume, attr_);
   Client_SYS.Add_To_Attr('FREIGHT_FREE', rec_.freight_free, attr_);
   Client_SYS.Add_To_Attr('PART_LEVEL', rec_.part_level, attr_);
   Client_SYS.Add_To_Attr('PART_LEVEL_ID', rec_.part_level_id, attr_);
   Client_SYS.Add_To_Attr('CUSTOMER_LEVEL', rec_.customer_level, attr_);
   Client_SYS.Add_To_Attr('CUSTOMER_LEVEL_ID', rec_.customer_level_id, attr_);
   Client_SYS.Add_To_Attr('LOAD_ID', rec_.load_id, attr_);
   Client_SYS.Add_To_Attr('CUSTOMS_VALUE', rec_.customs_value, attr_);
   Client_SYS.Add_To_Attr('ABNORMAL_DEMAND', rec_.abnormal_demand, attr_);
   Client_SYS.Add_To_Attr('CUST_CALENDAR_ID', rec_.cust_calendar_id, attr_);
   Client_SYS.Add_To_Attr('EXT_TRANSPORT_CALENDAR_ID', rec_.ext_transport_calendar_id, attr_);
   Client_SYS.Add_To_Attr('REL_MTRL_PLANNING', rec_.rel_mtrl_planning, attr_);
   Client_SYS.Add_To_Attr('QTY_PER_ASSEMBLY', rec_.qty_per_assembly, attr_);
   Client_SYS.Add_To_Attr('NEW_COMP_AFTER_DELIVERY', rec_.new_comp_after_delivery, attr_);
   Client_SYS.Add_To_Attr('INVERTED_CONV_FACTOR', rec_.inverted_conv_factor, attr_);
   Client_SYS.Add_To_Attr('RENTAL', rec_.rental, attr_);
   Client_SYS.Add_To_Attr('END_CUSTOMER_ID', rec_.end_customer_id, attr_);
   Client_SYS.Add_To_Attr('PICKING_LEADTIME', rec_.picking_leadtime, attr_);
   Client_SYS.Add_To_Attr('SHIPMENT_TYPE', rec_.shipment_type, attr_);
   Client_SYS.Add_To_Attr('OPEN_SHIPMENT_QTY', rec_.open_shipment_qty, attr_);
   Client_SYS.Add_To_Attr('PACKING_INSTRUCTION_ID', rec_.packing_instruction_id, attr_);
   Client_SYS.Add_To_Attr('ORIGINATING_CO_LANG_CODE', rec_.originating_co_lang_code, attr_);
   Client_SYS.Add_To_Attr('CUST_PART_INVERT_CONV_FACT', rec_.cust_part_invert_conv_fact, attr_);
   Client_SYS.Add_To_Attr('COUNTRY_CODE', rec_.country_code, attr_);
   Client_SYS.Add_To_Attr('TAX_LIABILITY_TYPE', rec_.tax_liability_type, attr_);
   Client_SYS.Add_To_Attr('FREE_OF_CHARGE', rec_.free_of_charge, attr_);
   Client_SYS.Add_To_Attr('FREE_OF_CHARGE_TAX_BASIS', rec_.free_of_charge_tax_basis, attr_);
   Client_SYS.Add_To_Attr('TAX_CALC_STRUCTURE_ID', rec_.tax_calc_structure_id, attr_);
   Client_SYS.Add_To_Attr('CUSTOMER_TAX_USAGE_TYPE', rec_.customer_tax_usage_type, attr_);
   Client_SYS.Add_To_Attr('SUPPLY_SITE_PART_NO', rec_.supply_site_part_no, attr_);
   Client_SYS.Add_To_Attr('ACQUISITION_ORIGIN', rec_.acquisition_origin, attr_);
   Client_SYS.Add_To_Attr('STATISTICAL_CODE', rec_.statistical_code, attr_);
   Client_SYS.Add_To_Attr('ORIGINAL_DISCOUNT', rec_.original_discount, attr_);
   Client_SYS.Add_To_Attr('ORIGINAL_ADD_DISCOUNT', rec_.original_add_discount, attr_);
   Client_SYS.Add_To_Attr('ORIGINAL_ORDER_DISCOUNT', rec_.original_order_discount, attr_);
   Client_SYS.Add_To_Attr('ACQUISITION_REASON_ID', rec_.acquisition_reason_id, attr_);
   Client_SYS.Add_To_Attr('ROWKEY', rec_.rowkey, attr_);
   Client_SYS.Add_To_Attr('ROWSTATE', rec_.rowstate, attr_);
   RETURN attr_;
END Pack_Table___;


FUNCTION Public_To_Table___ (
   public_ IN Public_Rec ) RETURN customer_order_line_tab%ROWTYPE
IS
   rec_ customer_order_line_tab%ROWTYPE;
BEGIN
   rec_.rowversion                     := public_.rowversion;
   rec_.rowkey                         := public_.rowkey;
   rec_.rowstate                       := public_.rowstate;
   rec_.order_no                       := public_.order_no;
   rec_.line_no                        := public_.line_no;
   rec_.rel_no                         := public_.rel_no;
   rec_.line_item_no                   := public_.line_item_no;
   rec_.contract                       := public_.contract;
   rec_.catalog_no                     := public_.catalog_no;
   rec_.note_id                        := public_.note_id;
   rec_.part_no                        := public_.part_no;
   rec_.pre_accounting_id              := public_.pre_accounting_id;
   rec_.sales_unit_meas                := public_.sales_unit_meas;
   rec_.base_sale_unit_price           := public_.base_sale_unit_price;
   rec_.base_unit_price_incl_tax       := public_.base_unit_price_incl_tax;
   rec_.buy_qty_due                    := public_.buy_qty_due;
   rec_.catalog_desc                   := public_.catalog_desc;
   rec_.catalog_type                   := public_.catalog_type;
   rec_.conv_factor                    := public_.conv_factor;
   rec_.cost                           := public_.cost;
   rec_.currency_rate                  := public_.currency_rate;
   rec_.date_entered                   := public_.date_entered;
   rec_.discount                       := public_.discount;
   rec_.line_total_qty                 := public_.line_total_qty;
   rec_.line_total_weight              := public_.line_total_weight;
   rec_.note_text                      := public_.note_text;
   rec_.order_discount                 := public_.order_discount;
   rec_.planned_delivery_date          := public_.planned_delivery_date;
   rec_.planned_due_date               := public_.planned_due_date;
   rec_.supply_site_due_date           := public_.supply_site_due_date;
   rec_.price_conv_factor              := public_.price_conv_factor;
   rec_.promised_delivery_date         := public_.promised_delivery_date;
   rec_.qty_assigned                   := public_.qty_assigned;
   rec_.qty_invoiced                   := public_.qty_invoiced;
   rec_.qty_on_order                   := public_.qty_on_order;
   rec_.qty_picked                     := public_.qty_picked;
   rec_.qty_returned                   := public_.qty_returned;
   rec_.qty_shipdiff                   := public_.qty_shipdiff;
   rec_.qty_shipped                    := public_.qty_shipped;
   rec_.qty_to_ship                    := public_.qty_to_ship;
   rec_.qty_short                      := public_.qty_short;
   rec_.real_ship_date                 := public_.real_ship_date;
   rec_.revised_qty_due                := public_.revised_qty_due;
   rec_.sale_unit_price                := public_.sale_unit_price;
   rec_.unit_price_incl_tax            := public_.unit_price_incl_tax;
   rec_.supply_code                    := public_.supply_code;
   rec_.wanted_delivery_date           := public_.wanted_delivery_date;
   rec_.delivery_type                  := public_.delivery_type;
   rec_.vendor_no                      := public_.vendor_no;
   rec_.tax_code                       := public_.tax_code;
   rec_.tax_class_id                   := public_.tax_class_id;
   rec_.customer_part_no               := public_.customer_part_no;
   rec_.customer_part_conv_factor      := public_.customer_part_conv_factor;
   rec_.customer_part_unit_meas        := public_.customer_part_unit_meas;
   rec_.customer_part_buy_qty          := public_.customer_part_buy_qty;
   rec_.planned_ship_date              := public_.planned_ship_date;
   rec_.planned_ship_period            := public_.planned_ship_period;
   rec_.customer_no                    := public_.customer_no;
   rec_.consignment_stock              := public_.consignment_stock;
   rec_.close_tolerance                := public_.close_tolerance;
   rec_.price_list_no                  := public_.price_list_no;
   rec_.charged_item                   := public_.charged_item;
   rec_.demand_order_ref1              := public_.demand_order_ref1;
   rec_.demand_order_ref2              := public_.demand_order_ref2;
   rec_.demand_order_ref3              := public_.demand_order_ref3;
   rec_.demand_order_ref4              := public_.demand_order_ref4;
   rec_.demand_code                    := public_.demand_code;
   rec_.dop_connection                 := public_.dop_connection;
   rec_.create_sm_object_option        := public_.create_sm_object_option;
   rec_.default_addr_flag              := public_.default_addr_flag;
   rec_.addr_flag                      := public_.addr_flag;
   rec_.ship_addr_no                   := public_.ship_addr_no;
   rec_.route_id                       := public_.route_id;
   rec_.forward_agent_id               := public_.forward_agent_id;
   rec_.ship_via_code                  := public_.ship_via_code;
   rec_.delivery_terms                 := public_.delivery_terms;
   rec_.delivery_leadtime              := public_.delivery_leadtime;
   rec_.district_code                  := public_.district_code;
   rec_.region_code                    := public_.region_code;
   rec_.desired_qty                    := public_.desired_qty;
   rec_.purchase_part_no               := public_.purchase_part_no;
   rec_.staged_billing                 := public_.staged_billing;
   rec_.tax_liability                  := public_.tax_liability;
   rec_.original_part_no               := public_.original_part_no;
   rec_.equipment_object_seq           := public_.equipment_object_seq;
   rec_.sup_sm_contract                := public_.sup_sm_contract;
   rec_.sup_sm_object                  := public_.sup_sm_object;
   rec_.sm_connection                  := public_.sm_connection;
   rec_.part_price                     := public_.part_price;
   rec_.calc_char_price                := public_.calc_char_price;
   rec_.char_price                     := public_.char_price;
   rec_.price_source                   := public_.price_source;
   rec_.price_freeze                   := public_.price_freeze;
   rec_.dock_code                      := public_.dock_code;
   rec_.sub_dock_code                  := public_.sub_dock_code;
   rec_.ref_id                         := public_.ref_id;
   rec_.location_no                    := public_.location_no;
   rec_.configuration_id               := public_.configuration_id;
   rec_.price_effectivity_date         := public_.price_effectivity_date;
   rec_.configured_line_price_id       := public_.configured_line_price_id;
   rec_.latest_release_date            := public_.latest_release_date;
   rec_.ctp_planned                    := public_.ctp_planned;
   rec_.job_id                         := public_.job_id;
   rec_.cust_warranty_id               := public_.cust_warranty_id;
   rec_.price_source_id                := public_.price_source_id;
   rec_.intrastat_exempt               := public_.intrastat_exempt;
   rec_.price_unit_meas                := public_.price_unit_meas;
   rec_.condition_code                 := public_.condition_code;
   rec_.additional_discount            := public_.additional_discount;
   rec_.part_ownership                 := public_.part_ownership;
   rec_.owning_customer_no             := public_.owning_customer_no;
   rec_.exchange_item                  := public_.exchange_item;
   rec_.supply_site_reserve_type       := public_.supply_site_reserve_type;
   rec_.originating_rel_no             := public_.originating_rel_no;
   rec_.originating_line_item_no       := public_.originating_line_item_no;
   rec_.release_planning               := public_.release_planning;
   rec_.supplier_ship_via_transit      := public_.supplier_ship_via_transit;
   rec_.supplier_ship_via_transit_desc := public_.supplier_ship_via_transit_desc;
   rec_.supply_site                    := public_.supply_site;
   rec_.shipment_connected             := public_.shipment_connected;
   rec_.self_billing                   := public_.self_billing;
   rec_.activity_seq                   := public_.activity_seq;
   rec_.project_id                     := public_.project_id;
   rec_.deliver_to_customer_no         := public_.deliver_to_customer_no;
   rec_.contact                        := public_.contact;
   rec_.input_qty                      := public_.input_qty;
   rec_.input_unit_meas                := public_.input_unit_meas;
   rec_.input_conv_factor              := public_.input_conv_factor;
   rec_.shipment_creation              := public_.shipment_creation;
   rec_.delivery_sequence              := public_.delivery_sequence;
   rec_.cancel_reason                  := public_.cancel_reason;
   rec_.delivery_confirmed             := public_.delivery_confirmed;
   rec_.customer_po_line_no            := public_.customer_po_line_no;
   rec_.customer_po_rel_no             := public_.customer_po_rel_no;
   rec_.qty_confirmeddiff              := public_.qty_confirmeddiff;
   rec_.blocked_for_invoicing          := public_.blocked_for_invoicing;
   rec_.provisional_price              := public_.provisional_price;
   rec_.receiving_advice_type          := public_.receiving_advice_type;
   rec_.tax_id_no                      := public_.tax_id_no;
   rec_.tax_id_validated_date          := public_.tax_id_validated_date;
   rec_.price_source_net_price         := public_.price_source_net_price;
   rec_.target_date                    := public_.target_date;
   rec_.allocation_id                  := public_.allocation_id;
   rec_.del_terms_location             := public_.del_terms_location;
   rec_.classification_part_no         := public_.classification_part_no;
   rec_.classification_unit_meas       := public_.classification_unit_meas;
   rec_.classification_standard        := public_.classification_standard;
   rec_.rebate_builder                 := public_.rebate_builder;
   rec_.line_total_weight_gross        := public_.line_total_weight_gross;
   rec_.freight_map_id                 := public_.freight_map_id;
   rec_.zone_id                        := public_.zone_id;
   rec_.freight_price_list_no          := public_.freight_price_list_no;
   rec_.adjusted_weight_net            := public_.adjusted_weight_net;
   rec_.adjusted_weight_gross          := public_.adjusted_weight_gross;
   rec_.adjusted_volume                := public_.adjusted_volume;
   rec_.freight_free                   := public_.freight_free;
   rec_.part_level                     := public_.part_level;
   rec_.part_level_id                  := public_.part_level_id;
   rec_.customer_level                 := public_.customer_level;
   rec_.customer_level_id              := public_.customer_level_id;
   rec_.load_id                        := public_.load_id;
   rec_.customs_value                  := public_.customs_value;
   rec_.abnormal_demand                := public_.abnormal_demand;
   rec_.cust_calendar_id               := public_.cust_calendar_id;
   rec_.ext_transport_calendar_id      := public_.ext_transport_calendar_id;
   rec_.rel_mtrl_planning              := public_.rel_mtrl_planning;
   rec_.qty_per_assembly               := public_.qty_per_assembly;
   rec_.new_comp_after_delivery        := public_.new_comp_after_delivery;
   rec_.inverted_conv_factor           := public_.inverted_conv_factor;
   rec_.rental                         := public_.rental;
   rec_.end_customer_id                := public_.end_customer_id;
   rec_.picking_leadtime               := public_.picking_leadtime;
   rec_.shipment_type                  := public_.shipment_type;
   rec_.open_shipment_qty              := public_.open_shipment_qty;
   rec_.packing_instruction_id         := public_.packing_instruction_id;
   rec_.originating_co_lang_code       := public_.originating_co_lang_code;
   rec_.cust_part_invert_conv_fact     := public_.cust_part_invert_conv_fact;
   rec_.country_code                   := public_.country_code;
   rec_.tax_liability_type             := public_.tax_liability_type;
   rec_.free_of_charge                 := public_.free_of_charge;
   rec_.free_of_charge_tax_basis       := public_.free_of_charge_tax_basis;
   rec_.tax_calc_structure_id          := public_.tax_calc_structure_id;
   rec_.customer_tax_usage_type        := public_.customer_tax_usage_type;
   rec_.supply_site_part_no            := public_.supply_site_part_no;
   rec_.acquisition_origin             := public_.acquisition_origin;
   rec_.statistical_code               := public_.statistical_code;
   rec_.original_discount              := public_.original_discount;
   rec_.original_add_discount          := public_.original_add_discount;
   rec_.original_order_discount        := public_.original_order_discount;
   rec_.acquisition_reason_id          := public_.acquisition_reason_id;
   RETURN rec_;
END Public_To_Table___;


FUNCTION Table_To_Public___ (
   rec_ IN customer_order_line_tab%ROWTYPE ) RETURN Public_Rec
IS
   public_ Public_Rec;
BEGIN
   public_.rowversion                     := rec_.rowversion;
   public_.rowkey                         := rec_.rowkey;
   public_.rowstate                       := rec_.rowstate;
   public_.order_no                       := rec_.order_no;
   public_.line_no                        := rec_.line_no;
   public_.rel_no                         := rec_.rel_no;
   public_.line_item_no                   := rec_.line_item_no;
   public_.contract                       := rec_.contract;
   public_.catalog_no                     := rec_.catalog_no;
   public_.note_id                        := rec_.note_id;
   public_.part_no                        := rec_.part_no;
   public_.pre_accounting_id              := rec_.pre_accounting_id;
   public_.sales_unit_meas                := rec_.sales_unit_meas;
   public_.base_sale_unit_price           := rec_.base_sale_unit_price;
   public_.base_unit_price_incl_tax       := rec_.base_unit_price_incl_tax;
   public_.buy_qty_due                    := rec_.buy_qty_due;
   public_.catalog_desc                   := rec_.catalog_desc;
   public_.catalog_type                   := rec_.catalog_type;
   public_.conv_factor                    := rec_.conv_factor;
   public_.cost                           := rec_.cost;
   public_.currency_rate                  := rec_.currency_rate;
   public_.date_entered                   := rec_.date_entered;
   public_.discount                       := rec_.discount;
   public_.line_total_qty                 := rec_.line_total_qty;
   public_.line_total_weight              := rec_.line_total_weight;
   public_.note_text                      := rec_.note_text;
   public_.order_discount                 := rec_.order_discount;
   public_.planned_delivery_date          := rec_.planned_delivery_date;
   public_.planned_due_date               := rec_.planned_due_date;
   public_.supply_site_due_date           := rec_.supply_site_due_date;
   public_.price_conv_factor              := rec_.price_conv_factor;
   public_.promised_delivery_date         := rec_.promised_delivery_date;
   public_.qty_assigned                   := rec_.qty_assigned;
   public_.qty_invoiced                   := rec_.qty_invoiced;
   public_.qty_on_order                   := rec_.qty_on_order;
   public_.qty_picked                     := rec_.qty_picked;
   public_.qty_returned                   := rec_.qty_returned;
   public_.qty_shipdiff                   := rec_.qty_shipdiff;
   public_.qty_shipped                    := rec_.qty_shipped;
   public_.qty_to_ship                    := rec_.qty_to_ship;
   public_.qty_short                      := rec_.qty_short;
   public_.real_ship_date                 := rec_.real_ship_date;
   public_.revised_qty_due                := rec_.revised_qty_due;
   public_.sale_unit_price                := rec_.sale_unit_price;
   public_.unit_price_incl_tax            := rec_.unit_price_incl_tax;
   public_.supply_code                    := rec_.supply_code;
   public_.wanted_delivery_date           := rec_.wanted_delivery_date;
   public_.delivery_type                  := rec_.delivery_type;
   public_.vendor_no                      := rec_.vendor_no;
   public_.tax_code                       := rec_.tax_code;
   public_.tax_class_id                   := rec_.tax_class_id;
   public_.customer_part_no               := rec_.customer_part_no;
   public_.customer_part_conv_factor      := rec_.customer_part_conv_factor;
   public_.customer_part_unit_meas        := rec_.customer_part_unit_meas;
   public_.customer_part_buy_qty          := rec_.customer_part_buy_qty;
   public_.planned_ship_date              := rec_.planned_ship_date;
   public_.planned_ship_period            := rec_.planned_ship_period;
   public_.customer_no                    := rec_.customer_no;
   public_.consignment_stock              := rec_.consignment_stock;
   public_.close_tolerance                := rec_.close_tolerance;
   public_.price_list_no                  := rec_.price_list_no;
   public_.charged_item                   := rec_.charged_item;
   public_.demand_order_ref1              := rec_.demand_order_ref1;
   public_.demand_order_ref2              := rec_.demand_order_ref2;
   public_.demand_order_ref3              := rec_.demand_order_ref3;
   public_.demand_order_ref4              := rec_.demand_order_ref4;
   public_.demand_code                    := rec_.demand_code;
   public_.dop_connection                 := rec_.dop_connection;
   public_.create_sm_object_option        := rec_.create_sm_object_option;
   public_.default_addr_flag              := rec_.default_addr_flag;
   public_.addr_flag                      := rec_.addr_flag;
   public_.ship_addr_no                   := rec_.ship_addr_no;
   public_.route_id                       := rec_.route_id;
   public_.forward_agent_id               := rec_.forward_agent_id;
   public_.ship_via_code                  := rec_.ship_via_code;
   public_.delivery_terms                 := rec_.delivery_terms;
   public_.delivery_leadtime              := rec_.delivery_leadtime;
   public_.district_code                  := rec_.district_code;
   public_.region_code                    := rec_.region_code;
   public_.desired_qty                    := rec_.desired_qty;
   public_.purchase_part_no               := rec_.purchase_part_no;
   public_.staged_billing                 := rec_.staged_billing;
   public_.tax_liability                  := rec_.tax_liability;
   public_.original_part_no               := rec_.original_part_no;
   public_.equipment_object_seq           := rec_.equipment_object_seq;
   public_.sup_sm_contract                := rec_.sup_sm_contract;
   public_.sup_sm_object                  := rec_.sup_sm_object;
   public_.sm_connection                  := rec_.sm_connection;
   public_.part_price                     := rec_.part_price;
   public_.calc_char_price                := rec_.calc_char_price;
   public_.char_price                     := rec_.char_price;
   public_.price_source                   := rec_.price_source;
   public_.price_freeze                   := rec_.price_freeze;
   public_.dock_code                      := rec_.dock_code;
   public_.sub_dock_code                  := rec_.sub_dock_code;
   public_.ref_id                         := rec_.ref_id;
   public_.location_no                    := rec_.location_no;
   public_.configuration_id               := rec_.configuration_id;
   public_.price_effectivity_date         := rec_.price_effectivity_date;
   public_.configured_line_price_id       := rec_.configured_line_price_id;
   public_.latest_release_date            := rec_.latest_release_date;
   public_.ctp_planned                    := rec_.ctp_planned;
   public_.job_id                         := rec_.job_id;
   public_.cust_warranty_id               := rec_.cust_warranty_id;
   public_.price_source_id                := rec_.price_source_id;
   public_.intrastat_exempt               := rec_.intrastat_exempt;
   public_.price_unit_meas                := rec_.price_unit_meas;
   public_.condition_code                 := rec_.condition_code;
   public_.additional_discount            := rec_.additional_discount;
   public_.part_ownership                 := rec_.part_ownership;
   public_.owning_customer_no             := rec_.owning_customer_no;
   public_.exchange_item                  := rec_.exchange_item;
   public_.supply_site_reserve_type       := rec_.supply_site_reserve_type;
   public_.originating_rel_no             := rec_.originating_rel_no;
   public_.originating_line_item_no       := rec_.originating_line_item_no;
   public_.release_planning               := rec_.release_planning;
   public_.supplier_ship_via_transit      := rec_.supplier_ship_via_transit;
   public_.supplier_ship_via_transit_desc := rec_.supplier_ship_via_transit_desc;
   public_.supply_site                    := rec_.supply_site;
   public_.shipment_connected             := rec_.shipment_connected;
   public_.self_billing                   := rec_.self_billing;
   public_.activity_seq                   := rec_.activity_seq;
   public_.project_id                     := rec_.project_id;
   public_.deliver_to_customer_no         := rec_.deliver_to_customer_no;
   public_.contact                        := rec_.contact;
   public_.input_qty                      := rec_.input_qty;
   public_.input_unit_meas                := rec_.input_unit_meas;
   public_.input_conv_factor              := rec_.input_conv_factor;
   public_.shipment_creation              := rec_.shipment_creation;
   public_.delivery_sequence              := rec_.delivery_sequence;
   public_.cancel_reason                  := rec_.cancel_reason;
   public_.delivery_confirmed             := rec_.delivery_confirmed;
   public_.customer_po_line_no            := rec_.customer_po_line_no;
   public_.customer_po_rel_no             := rec_.customer_po_rel_no;
   public_.qty_confirmeddiff              := rec_.qty_confirmeddiff;
   public_.blocked_for_invoicing          := rec_.blocked_for_invoicing;
   public_.provisional_price              := rec_.provisional_price;
   public_.receiving_advice_type          := rec_.receiving_advice_type;
   public_.tax_id_no                      := rec_.tax_id_no;
   public_.tax_id_validated_date          := rec_.tax_id_validated_date;
   public_.price_source_net_price         := rec_.price_source_net_price;
   public_.target_date                    := rec_.target_date;
   public_.allocation_id                  := rec_.allocation_id;
   public_.del_terms_location             := rec_.del_terms_location;
   public_.classification_part_no         := rec_.classification_part_no;
   public_.classification_unit_meas       := rec_.classification_unit_meas;
   public_.classification_standard        := rec_.classification_standard;
   public_.rebate_builder                 := rec_.rebate_builder;
   public_.line_total_weight_gross        := rec_.line_total_weight_gross;
   public_.freight_map_id                 := rec_.freight_map_id;
   public_.zone_id                        := rec_.zone_id;
   public_.freight_price_list_no          := rec_.freight_price_list_no;
   public_.adjusted_weight_net            := rec_.adjusted_weight_net;
   public_.adjusted_weight_gross          := rec_.adjusted_weight_gross;
   public_.adjusted_volume                := rec_.adjusted_volume;
   public_.freight_free                   := rec_.freight_free;
   public_.part_level                     := rec_.part_level;
   public_.part_level_id                  := rec_.part_level_id;
   public_.customer_level                 := rec_.customer_level;
   public_.customer_level_id              := rec_.customer_level_id;
   public_.load_id                        := rec_.load_id;
   public_.customs_value                  := rec_.customs_value;
   public_.abnormal_demand                := rec_.abnormal_demand;
   public_.cust_calendar_id               := rec_.cust_calendar_id;
   public_.ext_transport_calendar_id      := rec_.ext_transport_calendar_id;
   public_.rel_mtrl_planning              := rec_.rel_mtrl_planning;
   public_.qty_per_assembly               := rec_.qty_per_assembly;
   public_.new_comp_after_delivery        := rec_.new_comp_after_delivery;
   public_.inverted_conv_factor           := rec_.inverted_conv_factor;
   public_.rental                         := rec_.rental;
   public_.end_customer_id                := rec_.end_customer_id;
   public_.picking_leadtime               := rec_.picking_leadtime;
   public_.shipment_type                  := rec_.shipment_type;
   public_.open_shipment_qty              := rec_.open_shipment_qty;
   public_.packing_instruction_id         := rec_.packing_instruction_id;
   public_.originating_co_lang_code       := rec_.originating_co_lang_code;
   public_.cust_part_invert_conv_fact     := rec_.cust_part_invert_conv_fact;
   public_.country_code                   := rec_.country_code;
   public_.tax_liability_type             := rec_.tax_liability_type;
   public_.free_of_charge                 := rec_.free_of_charge;
   public_.free_of_charge_tax_basis       := rec_.free_of_charge_tax_basis;
   public_.tax_calc_structure_id          := rec_.tax_calc_structure_id;
   public_.customer_tax_usage_type        := rec_.customer_tax_usage_type;
   public_.supply_site_part_no            := rec_.supply_site_part_no;
   public_.acquisition_origin             := rec_.acquisition_origin;
   public_.statistical_code               := rec_.statistical_code;
   public_.original_discount              := rec_.original_discount;
   public_.original_add_discount          := rec_.original_add_discount;
   public_.original_order_discount        := rec_.original_order_discount;
   public_.acquisition_reason_id          := rec_.acquisition_reason_id;
   RETURN public_;
END Table_To_Public___;


PROCEDURE Reset_Indicator_Rec___ (
   indrec_ IN OUT NOCOPY Indicator_Rec )
IS
   empty_indrec_ Indicator_Rec;
BEGIN
   indrec_ := empty_indrec_;
END Reset_Indicator_Rec___;


FUNCTION Get_Indicator_Rec___ (
   rec_ IN customer_order_line_tab%ROWTYPE ) RETURN Indicator_Rec
IS
   indrec_ Indicator_Rec;
BEGIN
   indrec_.order_no := rec_.order_no IS NOT NULL;
   indrec_.line_no := rec_.line_no IS NOT NULL;
   indrec_.rel_no := rec_.rel_no IS NOT NULL;
   indrec_.line_item_no := rec_.line_item_no IS NOT NULL;
   indrec_.contract := rec_.contract IS NOT NULL;
   indrec_.catalog_no := rec_.catalog_no IS NOT NULL;
   indrec_.note_id := rec_.note_id IS NOT NULL;
   indrec_.order_code := rec_.order_code IS NOT NULL;
   indrec_.part_no := rec_.part_no IS NOT NULL;
   indrec_.pre_accounting_id := rec_.pre_accounting_id IS NOT NULL;
   indrec_.sales_unit_meas := rec_.sales_unit_meas IS NOT NULL;
   indrec_.base_sale_unit_price := rec_.base_sale_unit_price IS NOT NULL;
   indrec_.base_unit_price_incl_tax := rec_.base_unit_price_incl_tax IS NOT NULL;
   indrec_.buy_qty_due := rec_.buy_qty_due IS NOT NULL;
   indrec_.catalog_desc := rec_.catalog_desc IS NOT NULL;
   indrec_.catalog_type := rec_.catalog_type IS NOT NULL;
   indrec_.conv_factor := rec_.conv_factor IS NOT NULL;
   indrec_.cost := rec_.cost IS NOT NULL;
   indrec_.currency_rate := rec_.currency_rate IS NOT NULL;
   indrec_.date_entered := rec_.date_entered IS NOT NULL;
   indrec_.discount := rec_.discount IS NOT NULL;
   indrec_.line_total_qty := rec_.line_total_qty IS NOT NULL;
   indrec_.line_total_weight := rec_.line_total_weight IS NOT NULL;
   indrec_.note_text := rec_.note_text IS NOT NULL;
   indrec_.order_discount := rec_.order_discount IS NOT NULL;
   indrec_.planned_delivery_date := rec_.planned_delivery_date IS NOT NULL;
   indrec_.planned_due_date := rec_.planned_due_date IS NOT NULL;
   indrec_.supply_site_due_date := rec_.supply_site_due_date IS NOT NULL;
   indrec_.price_conv_factor := rec_.price_conv_factor IS NOT NULL;
   indrec_.promised_delivery_date := rec_.promised_delivery_date IS NOT NULL;
   indrec_.qty_assigned := rec_.qty_assigned IS NOT NULL;
   indrec_.qty_invoiced := rec_.qty_invoiced IS NOT NULL;
   indrec_.qty_on_order := rec_.qty_on_order IS NOT NULL;
   indrec_.qty_picked := rec_.qty_picked IS NOT NULL;
   indrec_.qty_returned := rec_.qty_returned IS NOT NULL;
   indrec_.qty_shipdiff := rec_.qty_shipdiff IS NOT NULL;
   indrec_.qty_shipped := rec_.qty_shipped IS NOT NULL;
   indrec_.qty_to_ship := rec_.qty_to_ship IS NOT NULL;
   indrec_.qty_short := rec_.qty_short IS NOT NULL;
   indrec_.real_ship_date := rec_.real_ship_date IS NOT NULL;
   indrec_.revised_qty_due := rec_.revised_qty_due IS NOT NULL;
   indrec_.sale_unit_price := rec_.sale_unit_price IS NOT NULL;
   indrec_.unit_price_incl_tax := rec_.unit_price_incl_tax IS NOT NULL;
   indrec_.supply_code := rec_.supply_code IS NOT NULL;
   indrec_.wanted_delivery_date := rec_.wanted_delivery_date IS NOT NULL;
   indrec_.delivery_type := rec_.delivery_type IS NOT NULL;
   indrec_.vendor_no := rec_.vendor_no IS NOT NULL;
   indrec_.tax_code := rec_.tax_code IS NOT NULL;
   indrec_.tax_class_id := rec_.tax_class_id IS NOT NULL;
   indrec_.customer_part_no := rec_.customer_part_no IS NOT NULL;
   indrec_.customer_part_conv_factor := rec_.customer_part_conv_factor IS NOT NULL;
   indrec_.customer_part_unit_meas := rec_.customer_part_unit_meas IS NOT NULL;
   indrec_.customer_part_buy_qty := rec_.customer_part_buy_qty IS NOT NULL;
   indrec_.planned_ship_date := rec_.planned_ship_date IS NOT NULL;
   indrec_.planned_ship_period := rec_.planned_ship_period IS NOT NULL;
   indrec_.customer_no := rec_.customer_no IS NOT NULL;
   indrec_.consignment_stock := rec_.consignment_stock IS NOT NULL;
   indrec_.close_tolerance := rec_.close_tolerance IS NOT NULL;
   indrec_.price_list_no := rec_.price_list_no IS NOT NULL;
   indrec_.charged_item := rec_.charged_item IS NOT NULL;
   indrec_.demand_order_ref1 := rec_.demand_order_ref1 IS NOT NULL;
   indrec_.demand_order_ref2 := rec_.demand_order_ref2 IS NOT NULL;
   indrec_.demand_order_ref3 := rec_.demand_order_ref3 IS NOT NULL;
   indrec_.demand_order_ref4 := rec_.demand_order_ref4 IS NOT NULL;
   indrec_.demand_code := rec_.demand_code IS NOT NULL;
   indrec_.dop_connection := rec_.dop_connection IS NOT NULL;
   indrec_.create_sm_object_option := rec_.create_sm_object_option IS NOT NULL;
   indrec_.default_addr_flag := rec_.default_addr_flag IS NOT NULL;
   indrec_.addr_flag := rec_.addr_flag IS NOT NULL;
   indrec_.ship_addr_no := rec_.ship_addr_no IS NOT NULL;
   indrec_.route_id := rec_.route_id IS NOT NULL;
   indrec_.forward_agent_id := rec_.forward_agent_id IS NOT NULL;
   indrec_.ship_via_code := rec_.ship_via_code IS NOT NULL;
   indrec_.delivery_terms := rec_.delivery_terms IS NOT NULL;
   indrec_.delivery_leadtime := rec_.delivery_leadtime IS NOT NULL;
   indrec_.district_code := rec_.district_code IS NOT NULL;
   indrec_.region_code := rec_.region_code IS NOT NULL;
   indrec_.desired_qty := rec_.desired_qty IS NOT NULL;
   indrec_.purchase_part_no := rec_.purchase_part_no IS NOT NULL;
   indrec_.staged_billing := rec_.staged_billing IS NOT NULL;
   indrec_.tax_liability := rec_.tax_liability IS NOT NULL;
   indrec_.original_part_no := rec_.original_part_no IS NOT NULL;
   indrec_.equipment_object_seq := rec_.equipment_object_seq IS NOT NULL;
   indrec_.sup_sm_contract := rec_.sup_sm_contract IS NOT NULL;
   indrec_.sup_sm_object := rec_.sup_sm_object IS NOT NULL;
   indrec_.sm_connection := rec_.sm_connection IS NOT NULL;
   indrec_.part_price := rec_.part_price IS NOT NULL;
   indrec_.calc_char_price := rec_.calc_char_price IS NOT NULL;
   indrec_.char_price := rec_.char_price IS NOT NULL;
   indrec_.price_source := rec_.price_source IS NOT NULL;
   indrec_.price_freeze := rec_.price_freeze IS NOT NULL;
   indrec_.dock_code := rec_.dock_code IS NOT NULL;
   indrec_.sub_dock_code := rec_.sub_dock_code IS NOT NULL;
   indrec_.ref_id := rec_.ref_id IS NOT NULL;
   indrec_.location_no := rec_.location_no IS NOT NULL;
   indrec_.configuration_id := rec_.configuration_id IS NOT NULL;
   indrec_.price_effectivity_date := rec_.price_effectivity_date IS NOT NULL;
   indrec_.configured_line_price_id := rec_.configured_line_price_id IS NOT NULL;
   indrec_.latest_release_date := rec_.latest_release_date IS NOT NULL;
   indrec_.ctp_planned := rec_.ctp_planned IS NOT NULL;
   indrec_.job_id := rec_.job_id IS NOT NULL;
   indrec_.cust_warranty_id := rec_.cust_warranty_id IS NOT NULL;
   indrec_.price_source_id := rec_.price_source_id IS NOT NULL;
   indrec_.intrastat_exempt := rec_.intrastat_exempt IS NOT NULL;
   indrec_.price_unit_meas := rec_.price_unit_meas IS NOT NULL;
   indrec_.condition_code := rec_.condition_code IS NOT NULL;
   indrec_.additional_discount := rec_.additional_discount IS NOT NULL;
   indrec_.part_ownership := rec_.part_ownership IS NOT NULL;
   indrec_.owning_customer_no := rec_.owning_customer_no IS NOT NULL;
   indrec_.exchange_item := rec_.exchange_item IS NOT NULL;
   indrec_.supply_site_reserve_type := rec_.supply_site_reserve_type IS NOT NULL;
   indrec_.originating_rel_no := rec_.originating_rel_no IS NOT NULL;
   indrec_.originating_line_item_no := rec_.originating_line_item_no IS NOT NULL;
   indrec_.release_planning := rec_.release_planning IS NOT NULL;
   indrec_.supplier_ship_via_transit := rec_.supplier_ship_via_transit IS NOT NULL;
   indrec_.supplier_ship_via_transit_desc := rec_.supplier_ship_via_transit_desc IS NOT NULL;
   indrec_.supply_site := rec_.supply_site IS NOT NULL;
   indrec_.shipment_connected := rec_.shipment_connected IS NOT NULL;
   indrec_.self_billing := rec_.self_billing IS NOT NULL;
   indrec_.activity_seq := rec_.activity_seq IS NOT NULL;
   indrec_.project_id := rec_.project_id IS NOT NULL;
   indrec_.deliver_to_customer_no := rec_.deliver_to_customer_no IS NOT NULL;
   indrec_.contact := rec_.contact IS NOT NULL;
   indrec_.input_qty := rec_.input_qty IS NOT NULL;
   indrec_.input_unit_meas := rec_.input_unit_meas IS NOT NULL;
   indrec_.input_conv_factor := rec_.input_conv_factor IS NOT NULL;
   indrec_.input_variable_values := rec_.input_variable_values IS NOT NULL;
   indrec_.shipment_creation := rec_.shipment_creation IS NOT NULL;
   indrec_.manufacturing_department := rec_.manufacturing_department IS NOT NULL;
   indrec_.delivery_sequence := rec_.delivery_sequence IS NOT NULL;
   indrec_.cancel_reason := rec_.cancel_reason IS NOT NULL;
   indrec_.delivery_confirmed := rec_.delivery_confirmed IS NOT NULL;
   indrec_.customer_po_line_no := rec_.customer_po_line_no IS NOT NULL;
   indrec_.customer_po_rel_no := rec_.customer_po_rel_no IS NOT NULL;
   indrec_.qty_confirmeddiff := rec_.qty_confirmeddiff IS NOT NULL;
   indrec_.blocked_for_invoicing := rec_.blocked_for_invoicing IS NOT NULL;
   indrec_.provisional_price := rec_.provisional_price IS NOT NULL;
   indrec_.receiving_advice_type := rec_.receiving_advice_type IS NOT NULL;
   indrec_.first_actual_ship_date := rec_.first_actual_ship_date IS NOT NULL;
   indrec_.tax_id_no := rec_.tax_id_no IS NOT NULL;
   indrec_.tax_id_validated_date := rec_.tax_id_validated_date IS NOT NULL;
   indrec_.price_source_net_price := rec_.price_source_net_price IS NOT NULL;
   indrec_.target_date := rec_.target_date IS NOT NULL;
   indrec_.allocation_id := rec_.allocation_id IS NOT NULL;
   indrec_.del_terms_location := rec_.del_terms_location IS NOT NULL;
   indrec_.classification_part_no := rec_.classification_part_no IS NOT NULL;
   indrec_.classification_unit_meas := rec_.classification_unit_meas IS NOT NULL;
   indrec_.classification_standard := rec_.classification_standard IS NOT NULL;
   indrec_.rebate_builder := rec_.rebate_builder IS NOT NULL;
   indrec_.line_total_weight_gross := rec_.line_total_weight_gross IS NOT NULL;
   indrec_.freight_map_id := rec_.freight_map_id IS NOT NULL;
   indrec_.zone_id := rec_.zone_id IS NOT NULL;
   indrec_.freight_price_list_no := rec_.freight_price_list_no IS NOT NULL;
   indrec_.adjusted_weight_net := rec_.adjusted_weight_net IS NOT NULL;
   indrec_.adjusted_weight_gross := rec_.adjusted_weight_gross IS NOT NULL;
   indrec_.adjusted_volume := rec_.adjusted_volume IS NOT NULL;
   indrec_.freight_free := rec_.freight_free IS NOT NULL;
   indrec_.part_level := rec_.part_level IS NOT NULL;
   indrec_.part_level_id := rec_.part_level_id IS NOT NULL;
   indrec_.customer_level := rec_.customer_level IS NOT NULL;
   indrec_.customer_level_id := rec_.customer_level_id IS NOT NULL;
   indrec_.load_id := rec_.load_id IS NOT NULL;
   indrec_.customs_value := rec_.customs_value IS NOT NULL;
   indrec_.abnormal_demand := rec_.abnormal_demand IS NOT NULL;
   indrec_.cust_calendar_id := rec_.cust_calendar_id IS NOT NULL;
   indrec_.ext_transport_calendar_id := rec_.ext_transport_calendar_id IS NOT NULL;
   indrec_.rel_mtrl_planning := rec_.rel_mtrl_planning IS NOT NULL;
   indrec_.qty_per_assembly := rec_.qty_per_assembly IS NOT NULL;
   indrec_.new_comp_after_delivery := rec_.new_comp_after_delivery IS NOT NULL;
   indrec_.inverted_conv_factor := rec_.inverted_conv_factor IS NOT NULL;
   indrec_.rental := rec_.rental IS NOT NULL;
   indrec_.end_customer_id := rec_.end_customer_id IS NOT NULL;
   indrec_.picking_leadtime := rec_.picking_leadtime IS NOT NULL;
   indrec_.shipment_type := rec_.shipment_type IS NOT NULL;
   indrec_.open_shipment_qty := rec_.open_shipment_qty IS NOT NULL;
   indrec_.packing_instruction_id := rec_.packing_instruction_id IS NOT NULL;
   indrec_.originating_co_lang_code := rec_.originating_co_lang_code IS NOT NULL;
   indrec_.cust_part_invert_conv_fact := rec_.cust_part_invert_conv_fact IS NOT NULL;
   indrec_.country_code := rec_.country_code IS NOT NULL;
   indrec_.tax_liability_type := rec_.tax_liability_type IS NOT NULL;
   indrec_.free_of_charge := rec_.free_of_charge IS NOT NULL;
   indrec_.free_of_charge_tax_basis := rec_.free_of_charge_tax_basis IS NOT NULL;
   indrec_.tax_calc_structure_id := rec_.tax_calc_structure_id IS NOT NULL;
   indrec_.customer_tax_usage_type := rec_.customer_tax_usage_type IS NOT NULL;
   indrec_.supply_site_part_no := rec_.supply_site_part_no IS NOT NULL;
   indrec_.acquisition_origin := rec_.acquisition_origin IS NOT NULL;
   indrec_.statistical_code := rec_.statistical_code IS NOT NULL;
   indrec_.original_discount := rec_.original_discount IS NOT NULL;
   indrec_.original_add_discount := rec_.original_add_discount IS NOT NULL;
   indrec_.original_order_discount := rec_.original_order_discount IS NOT NULL;
   indrec_.acquisition_reason_id := rec_.acquisition_reason_id IS NOT NULL;
   RETURN indrec_;
END Get_Indicator_Rec___;


FUNCTION Get_Indicator_Rec___ (
   oldrec_ IN customer_order_line_tab%ROWTYPE,
   newrec_ IN customer_order_line_tab%ROWTYPE ) RETURN Indicator_Rec
IS
   indrec_ Indicator_Rec;
BEGIN
   indrec_.order_no := Validate_SYS.Is_Changed(oldrec_.order_no, newrec_.order_no);
   indrec_.line_no := Validate_SYS.Is_Changed(oldrec_.line_no, newrec_.line_no);
   indrec_.rel_no := Validate_SYS.Is_Changed(oldrec_.rel_no, newrec_.rel_no);
   indrec_.line_item_no := Validate_SYS.Is_Changed(oldrec_.line_item_no, newrec_.line_item_no);
   indrec_.contract := Validate_SYS.Is_Changed(oldrec_.contract, newrec_.contract);
   indrec_.catalog_no := Validate_SYS.Is_Changed(oldrec_.catalog_no, newrec_.catalog_no);
   indrec_.note_id := Validate_SYS.Is_Changed(oldrec_.note_id, newrec_.note_id);
   indrec_.order_code := Validate_SYS.Is_Changed(oldrec_.order_code, newrec_.order_code);
   indrec_.part_no := Validate_SYS.Is_Changed(oldrec_.part_no, newrec_.part_no);
   indrec_.pre_accounting_id := Validate_SYS.Is_Changed(oldrec_.pre_accounting_id, newrec_.pre_accounting_id);
   indrec_.sales_unit_meas := Validate_SYS.Is_Changed(oldrec_.sales_unit_meas, newrec_.sales_unit_meas);
   indrec_.base_sale_unit_price := Validate_SYS.Is_Changed(oldrec_.base_sale_unit_price, newrec_.base_sale_unit_price);
   indrec_.base_unit_price_incl_tax := Validate_SYS.Is_Changed(oldrec_.base_unit_price_incl_tax, newrec_.base_unit_price_incl_tax);
   indrec_.buy_qty_due := Validate_SYS.Is_Changed(oldrec_.buy_qty_due, newrec_.buy_qty_due);
   indrec_.catalog_desc := Validate_SYS.Is_Changed(oldrec_.catalog_desc, newrec_.catalog_desc);
   indrec_.catalog_type := Validate_SYS.Is_Changed(oldrec_.catalog_type, newrec_.catalog_type);
   indrec_.conv_factor := Validate_SYS.Is_Changed(oldrec_.conv_factor, newrec_.conv_factor);
   indrec_.cost := Validate_SYS.Is_Changed(oldrec_.cost, newrec_.cost);
   indrec_.currency_rate := Validate_SYS.Is_Changed(oldrec_.currency_rate, newrec_.currency_rate);
   indrec_.date_entered := Validate_SYS.Is_Changed(oldrec_.date_entered, newrec_.date_entered);
   indrec_.discount := Validate_SYS.Is_Changed(oldrec_.discount, newrec_.discount);
   indrec_.line_total_qty := Validate_SYS.Is_Changed(oldrec_.line_total_qty, newrec_.line_total_qty);
   indrec_.line_total_weight := Validate_SYS.Is_Changed(oldrec_.line_total_weight, newrec_.line_total_weight);
   indrec_.note_text := Validate_SYS.Is_Changed(oldrec_.note_text, newrec_.note_text);
   indrec_.order_discount := Validate_SYS.Is_Changed(oldrec_.order_discount, newrec_.order_discount);
   indrec_.planned_delivery_date := Validate_SYS.Is_Changed(oldrec_.planned_delivery_date, newrec_.planned_delivery_date);
   indrec_.planned_due_date := Validate_SYS.Is_Changed(oldrec_.planned_due_date, newrec_.planned_due_date);
   indrec_.supply_site_due_date := Validate_SYS.Is_Changed(oldrec_.supply_site_due_date, newrec_.supply_site_due_date);
   indrec_.price_conv_factor := Validate_SYS.Is_Changed(oldrec_.price_conv_factor, newrec_.price_conv_factor);
   indrec_.promised_delivery_date := Validate_SYS.Is_Changed(oldrec_.promised_delivery_date, newrec_.promised_delivery_date);
   indrec_.qty_assigned := Validate_SYS.Is_Changed(oldrec_.qty_assigned, newrec_.qty_assigned);
   indrec_.qty_invoiced := Validate_SYS.Is_Changed(oldrec_.qty_invoiced, newrec_.qty_invoiced);
   indrec_.qty_on_order := Validate_SYS.Is_Changed(oldrec_.qty_on_order, newrec_.qty_on_order);
   indrec_.qty_picked := Validate_SYS.Is_Changed(oldrec_.qty_picked, newrec_.qty_picked);
   indrec_.qty_returned := Validate_SYS.Is_Changed(oldrec_.qty_returned, newrec_.qty_returned);
   indrec_.qty_shipdiff := Validate_SYS.Is_Changed(oldrec_.qty_shipdiff, newrec_.qty_shipdiff);
   indrec_.qty_shipped := Validate_SYS.Is_Changed(oldrec_.qty_shipped, newrec_.qty_shipped);
   indrec_.qty_to_ship := Validate_SYS.Is_Changed(oldrec_.qty_to_ship, newrec_.qty_to_ship);
   indrec_.qty_short := Validate_SYS.Is_Changed(oldrec_.qty_short, newrec_.qty_short);
   indrec_.real_ship_date := Validate_SYS.Is_Changed(oldrec_.real_ship_date, newrec_.real_ship_date);
   indrec_.revised_qty_due := Validate_SYS.Is_Changed(oldrec_.revised_qty_due, newrec_.revised_qty_due);
   indrec_.sale_unit_price := Validate_SYS.Is_Changed(oldrec_.sale_unit_price, newrec_.sale_unit_price);
   indrec_.unit_price_incl_tax := Validate_SYS.Is_Changed(oldrec_.unit_price_incl_tax, newrec_.unit_price_incl_tax);
   indrec_.supply_code := Validate_SYS.Is_Changed(oldrec_.supply_code, newrec_.supply_code);
   indrec_.wanted_delivery_date := Validate_SYS.Is_Changed(oldrec_.wanted_delivery_date, newrec_.wanted_delivery_date);
   indrec_.delivery_type := Validate_SYS.Is_Changed(oldrec_.delivery_type, newrec_.delivery_type);
   indrec_.vendor_no := Validate_SYS.Is_Changed(oldrec_.vendor_no, newrec_.vendor_no);
   indrec_.tax_code := Validate_SYS.Is_Changed(oldrec_.tax_code, newrec_.tax_code);
   indrec_.tax_class_id := Validate_SYS.Is_Changed(oldrec_.tax_class_id, newrec_.tax_class_id);
   indrec_.customer_part_no := Validate_SYS.Is_Changed(oldrec_.customer_part_no, newrec_.customer_part_no);
   indrec_.customer_part_conv_factor := Validate_SYS.Is_Changed(oldrec_.customer_part_conv_factor, newrec_.customer_part_conv_factor);
   indrec_.customer_part_unit_meas := Validate_SYS.Is_Changed(oldrec_.customer_part_unit_meas, newrec_.customer_part_unit_meas);
   indrec_.customer_part_buy_qty := Validate_SYS.Is_Changed(oldrec_.customer_part_buy_qty, newrec_.customer_part_buy_qty);
   indrec_.planned_ship_date := Validate_SYS.Is_Changed(oldrec_.planned_ship_date, newrec_.planned_ship_date);
   indrec_.planned_ship_period := Validate_SYS.Is_Changed(oldrec_.planned_ship_period, newrec_.planned_ship_period);
   indrec_.customer_no := Validate_SYS.Is_Changed(oldrec_.customer_no, newrec_.customer_no);
   indrec_.consignment_stock := Validate_SYS.Is_Changed(oldrec_.consignment_stock, newrec_.consignment_stock);
   indrec_.close_tolerance := Validate_SYS.Is_Changed(oldrec_.close_tolerance, newrec_.close_tolerance);
   indrec_.price_list_no := Validate_SYS.Is_Changed(oldrec_.price_list_no, newrec_.price_list_no);
   indrec_.charged_item := Validate_SYS.Is_Changed(oldrec_.charged_item, newrec_.charged_item);
   indrec_.demand_order_ref1 := Validate_SYS.Is_Changed(oldrec_.demand_order_ref1, newrec_.demand_order_ref1);
   indrec_.demand_order_ref2 := Validate_SYS.Is_Changed(oldrec_.demand_order_ref2, newrec_.demand_order_ref2);
   indrec_.demand_order_ref3 := Validate_SYS.Is_Changed(oldrec_.demand_order_ref3, newrec_.demand_order_ref3);
   indrec_.demand_order_ref4 := Validate_SYS.Is_Changed(oldrec_.demand_order_ref4, newrec_.demand_order_ref4);
   indrec_.demand_code := Validate_SYS.Is_Changed(oldrec_.demand_code, newrec_.demand_code);
   indrec_.dop_connection := Validate_SYS.Is_Changed(oldrec_.dop_connection, newrec_.dop_connection);
   indrec_.create_sm_object_option := Validate_SYS.Is_Changed(oldrec_.create_sm_object_option, newrec_.create_sm_object_option);
   indrec_.default_addr_flag := Validate_SYS.Is_Changed(oldrec_.default_addr_flag, newrec_.default_addr_flag);
   indrec_.addr_flag := Validate_SYS.Is_Changed(oldrec_.addr_flag, newrec_.addr_flag);
   indrec_.ship_addr_no := Validate_SYS.Is_Changed(oldrec_.ship_addr_no, newrec_.ship_addr_no);
   indrec_.route_id := Validate_SYS.Is_Changed(oldrec_.route_id, newrec_.route_id);
   indrec_.forward_agent_id := Validate_SYS.Is_Changed(oldrec_.forward_agent_id, newrec_.forward_agent_id);
   indrec_.ship_via_code := Validate_SYS.Is_Changed(oldrec_.ship_via_code, newrec_.ship_via_code);
   indrec_.delivery_terms := Validate_SYS.Is_Changed(oldrec_.delivery_terms, newrec_.delivery_terms);
   indrec_.delivery_leadtime := Validate_SYS.Is_Changed(oldrec_.delivery_leadtime, newrec_.delivery_leadtime);
   indrec_.district_code := Validate_SYS.Is_Changed(oldrec_.district_code, newrec_.district_code);
   indrec_.region_code := Validate_SYS.Is_Changed(oldrec_.region_code, newrec_.region_code);
   indrec_.desired_qty := Validate_SYS.Is_Changed(oldrec_.desired_qty, newrec_.desired_qty);
   indrec_.purchase_part_no := Validate_SYS.Is_Changed(oldrec_.purchase_part_no, newrec_.purchase_part_no);
   indrec_.staged_billing := Validate_SYS.Is_Changed(oldrec_.staged_billing, newrec_.staged_billing);
   indrec_.tax_liability := Validate_SYS.Is_Changed(oldrec_.tax_liability, newrec_.tax_liability);
   indrec_.original_part_no := Validate_SYS.Is_Changed(oldrec_.original_part_no, newrec_.original_part_no);
   indrec_.equipment_object_seq := Validate_SYS.Is_Changed(oldrec_.equipment_object_seq, newrec_.equipment_object_seq);
   indrec_.sup_sm_contract := Validate_SYS.Is_Changed(oldrec_.sup_sm_contract, newrec_.sup_sm_contract);
   indrec_.sup_sm_object := Validate_SYS.Is_Changed(oldrec_.sup_sm_object, newrec_.sup_sm_object);
   indrec_.sm_connection := Validate_SYS.Is_Changed(oldrec_.sm_connection, newrec_.sm_connection);
   indrec_.part_price := Validate_SYS.Is_Changed(oldrec_.part_price, newrec_.part_price);
   indrec_.calc_char_price := Validate_SYS.Is_Changed(oldrec_.calc_char_price, newrec_.calc_char_price);
   indrec_.char_price := Validate_SYS.Is_Changed(oldrec_.char_price, newrec_.char_price);
   indrec_.price_source := Validate_SYS.Is_Changed(oldrec_.price_source, newrec_.price_source);
   indrec_.price_freeze := Validate_SYS.Is_Changed(oldrec_.price_freeze, newrec_.price_freeze);
   indrec_.dock_code := Validate_SYS.Is_Changed(oldrec_.dock_code, newrec_.dock_code);
   indrec_.sub_dock_code := Validate_SYS.Is_Changed(oldrec_.sub_dock_code, newrec_.sub_dock_code);
   indrec_.ref_id := Validate_SYS.Is_Changed(oldrec_.ref_id, newrec_.ref_id);
   indrec_.location_no := Validate_SYS.Is_Changed(oldrec_.location_no, newrec_.location_no);
   indrec_.configuration_id := Validate_SYS.Is_Changed(oldrec_.configuration_id, newrec_.configuration_id);
   indrec_.price_effectivity_date := Validate_SYS.Is_Changed(oldrec_.price_effectivity_date, newrec_.price_effectivity_date);
   indrec_.configured_line_price_id := Validate_SYS.Is_Changed(oldrec_.configured_line_price_id, newrec_.configured_line_price_id);
   indrec_.latest_release_date := Validate_SYS.Is_Changed(oldrec_.latest_release_date, newrec_.latest_release_date);
   indrec_.ctp_planned := Validate_SYS.Is_Changed(oldrec_.ctp_planned, newrec_.ctp_planned);
   indrec_.job_id := Validate_SYS.Is_Changed(oldrec_.job_id, newrec_.job_id);
   indrec_.cust_warranty_id := Validate_SYS.Is_Changed(oldrec_.cust_warranty_id, newrec_.cust_warranty_id);
   indrec_.price_source_id := Validate_SYS.Is_Changed(oldrec_.price_source_id, newrec_.price_source_id);
   indrec_.intrastat_exempt := Validate_SYS.Is_Changed(oldrec_.intrastat_exempt, newrec_.intrastat_exempt);
   indrec_.price_unit_meas := Validate_SYS.Is_Changed(oldrec_.price_unit_meas, newrec_.price_unit_meas);
   indrec_.condition_code := Validate_SYS.Is_Changed(oldrec_.condition_code, newrec_.condition_code);
   indrec_.additional_discount := Validate_SYS.Is_Changed(oldrec_.additional_discount, newrec_.additional_discount);
   indrec_.part_ownership := Validate_SYS.Is_Changed(oldrec_.part_ownership, newrec_.part_ownership);
   indrec_.owning_customer_no := Validate_SYS.Is_Changed(oldrec_.owning_customer_no, newrec_.owning_customer_no);
   indrec_.exchange_item := Validate_SYS.Is_Changed(oldrec_.exchange_item, newrec_.exchange_item);
   indrec_.supply_site_reserve_type := Validate_SYS.Is_Changed(oldrec_.supply_site_reserve_type, newrec_.supply_site_reserve_type);
   indrec_.originating_rel_no := Validate_SYS.Is_Changed(oldrec_.originating_rel_no, newrec_.originating_rel_no);
   indrec_.originating_line_item_no := Validate_SYS.Is_Changed(oldrec_.originating_line_item_no, newrec_.originating_line_item_no);
   indrec_.release_planning := Validate_SYS.Is_Changed(oldrec_.release_planning, newrec_.release_planning);
   indrec_.supplier_ship_via_transit := Validate_SYS.Is_Changed(oldrec_.supplier_ship_via_transit, newrec_.supplier_ship_via_transit);
   indrec_.supplier_ship_via_transit_desc := Validate_SYS.Is_Changed(oldrec_.supplier_ship_via_transit_desc, newrec_.supplier_ship_via_transit_desc);
   indrec_.supply_site := Validate_SYS.Is_Changed(oldrec_.supply_site, newrec_.supply_site);
   indrec_.shipment_connected := Validate_SYS.Is_Changed(oldrec_.shipment_connected, newrec_.shipment_connected);
   indrec_.self_billing := Validate_SYS.Is_Changed(oldrec_.self_billing, newrec_.self_billing);
   indrec_.activity_seq := Validate_SYS.Is_Changed(oldrec_.activity_seq, newrec_.activity_seq);
   indrec_.project_id := Validate_SYS.Is_Changed(oldrec_.project_id, newrec_.project_id);
   indrec_.deliver_to_customer_no := Validate_SYS.Is_Changed(oldrec_.deliver_to_customer_no, newrec_.deliver_to_customer_no);
   indrec_.contact := Validate_SYS.Is_Changed(oldrec_.contact, newrec_.contact);
   indrec_.input_qty := Validate_SYS.Is_Changed(oldrec_.input_qty, newrec_.input_qty);
   indrec_.input_unit_meas := Validate_SYS.Is_Changed(oldrec_.input_unit_meas, newrec_.input_unit_meas);
   indrec_.input_conv_factor := Validate_SYS.Is_Changed(oldrec_.input_conv_factor, newrec_.input_conv_factor);
   indrec_.input_variable_values := Validate_SYS.Is_Changed(oldrec_.input_variable_values, newrec_.input_variable_values);
   indrec_.shipment_creation := Validate_SYS.Is_Changed(oldrec_.shipment_creation, newrec_.shipment_creation);
   indrec_.manufacturing_department := Validate_SYS.Is_Changed(oldrec_.manufacturing_department, newrec_.manufacturing_department);
   indrec_.delivery_sequence := Validate_SYS.Is_Changed(oldrec_.delivery_sequence, newrec_.delivery_sequence);
   indrec_.cancel_reason := Validate_SYS.Is_Changed(oldrec_.cancel_reason, newrec_.cancel_reason);
   indrec_.delivery_confirmed := Validate_SYS.Is_Changed(oldrec_.delivery_confirmed, newrec_.delivery_confirmed);
   indrec_.customer_po_line_no := Validate_SYS.Is_Changed(oldrec_.customer_po_line_no, newrec_.customer_po_line_no);
   indrec_.customer_po_rel_no := Validate_SYS.Is_Changed(oldrec_.customer_po_rel_no, newrec_.customer_po_rel_no);
   indrec_.qty_confirmeddiff := Validate_SYS.Is_Changed(oldrec_.qty_confirmeddiff, newrec_.qty_confirmeddiff);
   indrec_.blocked_for_invoicing := Validate_SYS.Is_Changed(oldrec_.blocked_for_invoicing, newrec_.blocked_for_invoicing);
   indrec_.provisional_price := Validate_SYS.Is_Changed(oldrec_.provisional_price, newrec_.provisional_price);
   indrec_.receiving_advice_type := Validate_SYS.Is_Changed(oldrec_.receiving_advice_type, newrec_.receiving_advice_type);
   indrec_.first_actual_ship_date := Validate_SYS.Is_Changed(oldrec_.first_actual_ship_date, newrec_.first_actual_ship_date);
   indrec_.tax_id_no := Validate_SYS.Is_Changed(oldrec_.tax_id_no, newrec_.tax_id_no);
   indrec_.tax_id_validated_date := Validate_SYS.Is_Changed(oldrec_.tax_id_validated_date, newrec_.tax_id_validated_date);
   indrec_.price_source_net_price := Validate_SYS.Is_Changed(oldrec_.price_source_net_price, newrec_.price_source_net_price);
   indrec_.target_date := Validate_SYS.Is_Changed(oldrec_.target_date, newrec_.target_date);
   indrec_.allocation_id := Validate_SYS.Is_Changed(oldrec_.allocation_id, newrec_.allocation_id);
   indrec_.del_terms_location := Validate_SYS.Is_Changed(oldrec_.del_terms_location, newrec_.del_terms_location);
   indrec_.classification_part_no := Validate_SYS.Is_Changed(oldrec_.classification_part_no, newrec_.classification_part_no);
   indrec_.classification_unit_meas := Validate_SYS.Is_Changed(oldrec_.classification_unit_meas, newrec_.classification_unit_meas);
   indrec_.classification_standard := Validate_SYS.Is_Changed(oldrec_.classification_standard, newrec_.classification_standard);
   indrec_.rebate_builder := Validate_SYS.Is_Changed(oldrec_.rebate_builder, newrec_.rebate_builder);
   indrec_.line_total_weight_gross := Validate_SYS.Is_Changed(oldrec_.line_total_weight_gross, newrec_.line_total_weight_gross);
   indrec_.freight_map_id := Validate_SYS.Is_Changed(oldrec_.freight_map_id, newrec_.freight_map_id);
   indrec_.zone_id := Validate_SYS.Is_Changed(oldrec_.zone_id, newrec_.zone_id);
   indrec_.freight_price_list_no := Validate_SYS.Is_Changed(oldrec_.freight_price_list_no, newrec_.freight_price_list_no);
   indrec_.adjusted_weight_net := Validate_SYS.Is_Changed(oldrec_.adjusted_weight_net, newrec_.adjusted_weight_net);
   indrec_.adjusted_weight_gross := Validate_SYS.Is_Changed(oldrec_.adjusted_weight_gross, newrec_.adjusted_weight_gross);
   indrec_.adjusted_volume := Validate_SYS.Is_Changed(oldrec_.adjusted_volume, newrec_.adjusted_volume);
   indrec_.freight_free := Validate_SYS.Is_Changed(oldrec_.freight_free, newrec_.freight_free);
   indrec_.part_level := Validate_SYS.Is_Changed(oldrec_.part_level, newrec_.part_level);
   indrec_.part_level_id := Validate_SYS.Is_Changed(oldrec_.part_level_id, newrec_.part_level_id);
   indrec_.customer_level := Validate_SYS.Is_Changed(oldrec_.customer_level, newrec_.customer_level);
   indrec_.customer_level_id := Validate_SYS.Is_Changed(oldrec_.customer_level_id, newrec_.customer_level_id);
   indrec_.load_id := Validate_SYS.Is_Changed(oldrec_.load_id, newrec_.load_id);
   indrec_.customs_value := Validate_SYS.Is_Changed(oldrec_.customs_value, newrec_.customs_value);
   indrec_.abnormal_demand := Validate_SYS.Is_Changed(oldrec_.abnormal_demand, newrec_.abnormal_demand);
   indrec_.cust_calendar_id := Validate_SYS.Is_Changed(oldrec_.cust_calendar_id, newrec_.cust_calendar_id);
   indrec_.ext_transport_calendar_id := Validate_SYS.Is_Changed(oldrec_.ext_transport_calendar_id, newrec_.ext_transport_calendar_id);
   indrec_.rel_mtrl_planning := Validate_SYS.Is_Changed(oldrec_.rel_mtrl_planning, newrec_.rel_mtrl_planning);
   indrec_.qty_per_assembly := Validate_SYS.Is_Changed(oldrec_.qty_per_assembly, newrec_.qty_per_assembly);
   indrec_.new_comp_after_delivery := Validate_SYS.Is_Changed(oldrec_.new_comp_after_delivery, newrec_.new_comp_after_delivery);
   indrec_.inverted_conv_factor := Validate_SYS.Is_Changed(oldrec_.inverted_conv_factor, newrec_.inverted_conv_factor);
   indrec_.rental := Validate_SYS.Is_Changed(oldrec_.rental, newrec_.rental);
   indrec_.end_customer_id := Validate_SYS.Is_Changed(oldrec_.end_customer_id, newrec_.end_customer_id);
   indrec_.picking_leadtime := Validate_SYS.Is_Changed(oldrec_.picking_leadtime, newrec_.picking_leadtime);
   indrec_.shipment_type := Validate_SYS.Is_Changed(oldrec_.shipment_type, newrec_.shipment_type);
   indrec_.open_shipment_qty := Validate_SYS.Is_Changed(oldrec_.open_shipment_qty, newrec_.open_shipment_qty);
   indrec_.packing_instruction_id := Validate_SYS.Is_Changed(oldrec_.packing_instruction_id, newrec_.packing_instruction_id);
   indrec_.originating_co_lang_code := Validate_SYS.Is_Changed(oldrec_.originating_co_lang_code, newrec_.originating_co_lang_code);
   indrec_.cust_part_invert_conv_fact := Validate_SYS.Is_Changed(oldrec_.cust_part_invert_conv_fact, newrec_.cust_part_invert_conv_fact);
   indrec_.country_code := Validate_SYS.Is_Changed(oldrec_.country_code, newrec_.country_code);
   indrec_.tax_liability_type := Validate_SYS.Is_Changed(oldrec_.tax_liability_type, newrec_.tax_liability_type);
   indrec_.free_of_charge := Validate_SYS.Is_Changed(oldrec_.free_of_charge, newrec_.free_of_charge);
   indrec_.free_of_charge_tax_basis := Validate_SYS.Is_Changed(oldrec_.free_of_charge_tax_basis, newrec_.free_of_charge_tax_basis);
   indrec_.tax_calc_structure_id := Validate_SYS.Is_Changed(oldrec_.tax_calc_structure_id, newrec_.tax_calc_structure_id);
   indrec_.customer_tax_usage_type := Validate_SYS.Is_Changed(oldrec_.customer_tax_usage_type, newrec_.customer_tax_usage_type);
   indrec_.supply_site_part_no := Validate_SYS.Is_Changed(oldrec_.supply_site_part_no, newrec_.supply_site_part_no);
   indrec_.acquisition_origin := Validate_SYS.Is_Changed(oldrec_.acquisition_origin, newrec_.acquisition_origin);
   indrec_.statistical_code := Validate_SYS.Is_Changed(oldrec_.statistical_code, newrec_.statistical_code);
   indrec_.original_discount := Validate_SYS.Is_Changed(oldrec_.original_discount, newrec_.original_discount);
   indrec_.original_add_discount := Validate_SYS.Is_Changed(oldrec_.original_add_discount, newrec_.original_add_discount);
   indrec_.original_order_discount := Validate_SYS.Is_Changed(oldrec_.original_order_discount, newrec_.original_order_discount);
   indrec_.acquisition_reason_id := Validate_SYS.Is_Changed(oldrec_.acquisition_reason_id, newrec_.acquisition_reason_id);
   RETURN indrec_;
END Get_Indicator_Rec___;


PROCEDURE Prepare_New___ (
   newrec_ IN OUT NOCOPY customer_order_line_tab%ROWTYPE )
IS
   attr_    VARCHAR2(32000);
   indrec_  Indicator_Rec;
BEGIN
   attr_ := Pack___(newrec_);
   Prepare_Insert___(attr_);
   Unpack___(newrec_, indrec_, attr_);
END Prepare_New___;


PROCEDURE New___ (
   newrec_ IN OUT NOCOPY customer_order_line_tab%ROWTYPE )
IS
   objid_         VARCHAR2(20);
   objversion_    VARCHAR2(100);
   attr_          VARCHAR2(32000);
   indrec_        Indicator_Rec;
BEGIN
   indrec_ := Get_Indicator_Rec___(newrec_);
   Check_Insert___(newrec_, indrec_, attr_);
   Insert___(objid_, objversion_, newrec_, attr_);
END New___;


PROCEDURE Modify___ (
   newrec_         IN OUT NOCOPY customer_order_line_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
IS
   objid_      VARCHAR2(20);
   objversion_ VARCHAR2(100);
   attr_       VARCHAR2(32000);
   indrec_     Indicator_rec;
   oldrec_     customer_order_line_tab%ROWTYPE;
BEGIN
   IF (lock_mode_wait_) THEN
      oldrec_ := Lock_By_Keys___(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
   ELSE
      oldrec_ := Lock_By_Keys_Nowait___(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
   END IF;
   indrec_ := Get_Indicator_Rec___(oldrec_, newrec_);
   Check_Update___(oldrec_, newrec_, indrec_, attr_);
   Update___(objid_, oldrec_, newrec_, attr_, objversion_, TRUE);
END Modify___;


PROCEDURE Delete___ (
   remrec_ IN customer_order_line_tab%ROWTYPE )
IS
BEGIN
   Delete___(NULL, remrec_);
END Delete___;


PROCEDURE Remove___ (
   remrec_         IN OUT NOCOPY customer_order_line_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
IS
   oldrec_     customer_order_line_tab%ROWTYPE;
BEGIN
   IF (lock_mode_wait_) THEN
      oldrec_ := Lock_By_Keys___(remrec_.order_no, remrec_.line_no, remrec_.rel_no, remrec_.line_item_no);
   ELSE
      oldrec_ := Lock_By_Keys_Nowait___(remrec_.order_no, remrec_.line_no, remrec_.rel_no, remrec_.line_item_no);
   END IF;
   Check_Delete___(oldrec_);
   Delete___(NULL, oldrec_);
END Remove___;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------
-----------------------------------------------------------------------------

--@IgnoreMissingSysinit
PROCEDURE Get_Part_Ownership_And_Owner (
   part_ownership_ OUT VARCHAR2,
   owner_          OUT VARCHAR2,
   order_no_       IN  VARCHAR2,
   line_no_        IN  VARCHAR2,
   rel_no_         IN  VARCHAR2,
   line_item_no_   IN  NUMBER )
IS
   temp_ CUSTOMER_ORDER_LINE_TAB.part_ownership%TYPE;
   CURSOR get_attr IS
      SELECT part_ownership
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    line_no  = line_no_
      AND    rel_no   = rel_no_
      AND    line_item_no = line_item_no_;
BEGIN
   OPEN  get_attr;
   FETCH get_attr INTO temp_;
   CLOSE get_attr;
   part_ownership_ := temp_;
   owner_ := Get_Owner_For_Part_Ownership(order_no_, line_no_, rel_no_, line_item_no_, part_ownership_);
END Get_Part_Ownership_And_Owner;


FUNCTION Get_Owning_Cust_After_Delivery (
   order_no_               IN  VARCHAR2,
   line_no_                IN  VARCHAR2,
   rel_no_                 IN  VARCHAR2,
   line_item_no_           IN  NUMBER ) RETURN VARCHAR2
IS
   ownership_before_delivery_ CUSTOMER_ORDER_LINE_TAB.part_ownership%TYPE;
   line_rec_                  CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   keep_ownership_            BOOLEAN := FALSE;
   new_owning_customer_no_    CUSTOMER_ORDER_LINE_TAB.deliver_to_customer_no%TYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Get_Owning_Cust_After_Delivery');
   line_rec_                  := Get_Object_By_Keys___(order_no_, line_no_, rel_no_, line_item_no_);
   ownership_before_delivery_ := line_rec_.part_ownership;

   IF (ownership_before_delivery_ IN (Part_Ownership_API.DB_COMPANY_OWNED,
                                      Part_Ownership_API.DB_CONSIGNMENT)) THEN
      IF ((line_rec_.demand_code = Order_Supply_Type_API.DB_COMPONENT_REPAIR_EXCHANGE) AND
          (line_rec_.supply_code = Order_Supply_Type_API.DB_COMPONENT_REPAIR_ORDER)) THEN
          keep_ownership_ := TRUE;
      END IF;
   ELSIF (ownership_before_delivery_ IN (Part_Ownership_API.DB_CUSTOMER_OWNED,
                                         Part_Ownership_API.DB_SUPPLIER_LOANED)) THEN
      keep_ownership_ := TRUE;
   ELSIF (ownership_before_delivery_ IN (Part_Ownership_API.DB_SUPPLIER_RENTED,
                                         Part_Ownership_API.DB_COMPANY_RENTAL_ASSET)) THEN
      IF (line_rec_.rental = Fnd_Boolean_API.DB_TRUE) THEN
          keep_ownership_ := TRUE; 
      END IF;
   END IF;
   
   IF NOT (keep_ownership_) THEN
      new_owning_customer_no_ := line_rec_.deliver_to_customer_no;
   END IF;

   RETURN (new_owning_customer_no_);
END Get_Owning_Cust_After_Delivery;


PROCEDURE Lock_By_Id (
   objid_      IN VARCHAR2,
   objversion_ IN VARCHAR2 )
IS
   dummy_ CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Lock_By_Id');
   dummy_ := Lock_By_Id___(objid_, objversion_);
END Lock_By_Id;


PROCEDURE Modify_Real_Ship_Date (
   order_no_       IN VARCHAR2,
   line_no_        IN VARCHAR2,
   rel_no_         IN VARCHAR2,
   line_item_no_   IN NUMBER,
   real_ship_date_ IN DATE )
IS
   attr_                   VARCHAR2(2000);
   first_actual_ship_date_ DATE;

   CURSOR get_first_actual_ship_date IS
      SELECT first_actual_ship_date
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    line_no = line_no_
      AND    rel_no = rel_no_
      AND    line_item_no = line_item_no_;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Real_Ship_Date');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('REAL_SHIP_DATE', real_ship_date_, attr_);

   OPEN get_first_actual_ship_date;
   FETCH get_first_actual_ship_date INTO first_actual_ship_date_;
   CLOSE get_first_actual_ship_date;
   IF first_actual_ship_date_ IS NULL THEN
      Client_SYS.Add_To_Attr('FIRST_ACTUAL_SHIP_DATE', real_ship_date_, attr_);
   END IF;

   Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);
END Modify_Real_Ship_Date;


PROCEDURE Set_First_Actual_Ship_Date (
   order_no_       IN VARCHAR2,
   line_no_        IN VARCHAR2,
   rel_no_         IN VARCHAR2,
   line_item_no_   IN NUMBER )
IS
   attr_                   VARCHAR2(2000);
   first_actual_ship_date_ DATE;
   line_rec_                  CUSTOMER_ORDER_LINE_TAB%ROWTYPE; 
   set_date_               BOOLEAN := FALSE;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Set_First_Actual_Ship_Date');
   first_actual_ship_date_ := Customer_Order_Delivery_API.Get_First_Delivery_Date(order_no_, line_no_, rel_no_, line_item_no_);
   line_rec_                  := Get_Object_By_Keys___(order_no_, line_no_, rel_no_, line_item_no_);
   
   IF (first_actual_ship_date_ IS NOT NULL AND line_rec_.first_actual_ship_date IS NOT NULL) THEN
      IF (first_actual_ship_date_ != line_rec_.first_actual_ship_date) THEN
         set_date_ := TRUE;   
      END IF;   
   ELSE
      IF ((first_actual_ship_date_ IS NULL AND line_rec_.first_actual_ship_date IS NOT NULL) OR 
         (first_actual_ship_date_ IS NOT NULL AND line_rec_.first_actual_ship_date IS NULL)) THEN
         set_date_ := TRUE;
      END IF;
   END IF;   
     
   IF (set_date_) THEN
      Client_SYS.Clear_Attr(attr_);
      Client_SYS.Add_To_Attr('FIRST_ACTUAL_SHIP_DATE', first_actual_ship_date_, attr_);
      Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);
   END IF;
END Set_First_Actual_Ship_Date;


PROCEDURE Modify_Ref_Id(
   order_no_       IN   VARCHAR2,
   ref_id_         IN   VARCHAR2 )
IS
   attr_                   VARCHAR2(2000);
   
   CURSOR get_lines IS
      SELECT order_no, line_no, rel_no, line_item_no 
      FROM customer_order_line_tab
      WHERE order_no = order_no_;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Ref_Id');
   FOR line_rec_ IN get_lines LOOP 
      Client_SYS.Clear_Attr(attr_);
      Client_SYS.Add_To_Attr('REF_ID', ref_id_, attr_);
      Modify_Line___(attr_, line_rec_.order_no, line_rec_.line_no,line_rec_.rel_no, line_rec_.line_item_no);
   END LOOP;
END Modify_Ref_Id;


PROCEDURE Modify_Order_Discount (
   order_no_       IN VARCHAR2,
   line_no_        IN VARCHAR2,
   rel_no_         IN VARCHAR2,
   line_item_no_   IN NUMBER,
   order_discount_ IN NUMBER,
   update_tax_     IN BOOLEAN DEFAULT TRUE )
IS
   attr_   VARCHAR2(2000);
   CURSOR get_package_lines IS
      SELECT line_item_no
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    line_no = line_no_
      AND    rel_no = rel_no_
      AND    line_item_no > 0
      AND    rowstate != 'Cancelled';
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Order_Discount');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('ORDER_DISCOUNT', order_discount_, attr_);
   
   IF NOT update_tax_ THEN 
      Client_SYS.Add_To_Attr('UPDATE_TAX', 'FALSE', attr_);
   END IF;
   
   Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);
   IF (line_item_no_ = -1) THEN
      FOR component_ IN get_package_lines LOOP
         -- Reinitialize the attribute string as it might have been changed in the previous update
         Client_SYS.Clear_Attr(attr_);
         Client_SYS.Add_To_Attr('ORDER_DISCOUNT', order_discount_, attr_);
         IF NOT update_tax_ THEN 
            Client_SYS.Add_To_Attr('UPDATE_TAX', 'FALSE', attr_);
         END IF;
         Modify_Line___(attr_, order_no_, line_no_, rel_no_, component_.line_item_no);
      END LOOP;
   END IF;
END Modify_Order_Discount;


PROCEDURE Modify_Qty_On_Order (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   qty_on_order_ IN NUMBER )
IS
   attr_  VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Qty_On_Order');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('QTY_ON_ORDER', qty_on_order_, attr_);
   Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);
END Modify_Qty_On_Order;


PROCEDURE Modify_Arrival (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   qty_assigned_ IN NUMBER )
IS
   attr_ VARCHAR2(2000);
   rec_  CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Arrival');
   IF NOT Check_Exist___(order_no_, line_no_, rel_no_, line_item_no_) THEN
      Error_SYS.Record_Not_Exist(lu_name_);
   ELSE
      rec_ := Get_Object_By_Keys___(order_no_, line_no_, rel_no_, line_item_no_);
      Client_SYS.Clear_Attr(attr_);
      Client_SYS.Add_To_Attr('QTY_ON_ORDER', greatest(rec_.qty_on_order - qty_assigned_, 0), attr_);
      Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);
      CUSTOMER_ORDER_API.Set_Line_Qty_Assigned(order_no_, line_no_, rel_no_, line_item_no_, rec_.qty_assigned + qty_assigned_);
   END IF;
END Modify_Arrival;


PROCEDURE Modify_Qty_Returned (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   qty_returned_ IN NUMBER )
IS
   oldrec_ CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   attr_   VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Qty_Returned');
   oldrec_ := Get_Object_By_Keys___(order_no_, line_no_, rel_no_, line_item_no_);
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('QTY_RETURNED', qty_returned_, attr_);
   Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);

   -- Insert a new entry in CustomerOrderLineHistory
   IF (oldrec_.qty_returned < qty_returned_) THEN
      Customer_Order_Line_Hist_API.New(order_no_, line_no_, rel_no_, line_item_no_,
         Language_SYS.Translate_Constant(lu_name_, 'CUSTORDERRETURN: Customer order return'));
   ELSIF (oldrec_.qty_returned > qty_returned_) THEN
      Customer_Order_Line_Hist_API.New(order_no_, line_no_, rel_no_, line_item_no_,
         Language_SYS.Translate_Constant(lu_name_, 'CUSTORDREM: Customer order return removed'));
   END IF;
END Modify_Qty_Returned;


PROCEDURE Modify_Revised_Qty_Due (
   order_no_        IN VARCHAR2,
   line_no_         IN VARCHAR2,
   rel_no_          IN VARCHAR2,
   line_item_no_    IN NUMBER,
   revised_qty_due_ IN NUMBER )
IS
   attr_  VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Revised_Qty_Due');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_to_Attr('REVISED_QTY_DUE', revised_qty_due_, attr_);
   Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);
END Modify_Revised_Qty_Due;


PROCEDURE Modify_Cost (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   cost_         IN NUMBER )
IS
   attr_  VARCHAR2(2000);
   line_rec_                   Customer_Order_Line_API.Public_Rec;
   header_rec_                 Customer_Order_api.Public_Rec;
   free_of_charge_tax_basis_   NUMBER := 0;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Cost');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_to_Attr('COST', cost_, attr_);
   IF (NVL(cost_,0) != NVL(Get_Cost(order_no_, line_no_, rel_no_, line_item_no_),0)) THEN
      header_rec_   := Customer_Order_API.Get(order_no_);   
      line_rec_     := Customer_Order_Line_API.Get(order_no_, line_no_, rel_no_, line_item_no_);  
      IF (line_rec_.free_of_charge = Fnd_Boolean_API.DB_TRUE AND line_rec_.rowstate != 'Invoiced') THEN
         Tax_Handling_Order_Util_API.Calc_And_Save_Foc_Tax_Basis(free_of_charge_tax_basis_, 
                                                                 Tax_Source_API.DB_CUSTOMER_ORDER_LINE,
                                                                 order_no_, 
                                                                 line_no_,
                                                                 rel_no_,
                                                                 line_item_no_,    
                                                                 '*',
                                                                 cost_, 
                                                                 line_rec_.part_price, 
                                                                 line_rec_.revised_qty_due,                                      
                                                                 nvl(header_rec_.customer_no_pay,line_rec_.customer_no), 
                                                                 line_rec_.contract,
                                                                 header_rec_.currency_code,
                                                                 header_rec_.currency_rate_type,
                                                                 'TRUE');
      END IF;  
      Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);
   END IF;
END Modify_Cost;


PROCEDURE Modify_Char_Price (
   order_no_        IN VARCHAR2,
   line_no_         IN VARCHAR2,
   rel_no_          IN VARCHAR2,
   line_item_no_    IN NUMBER,
   calc_char_price_ IN NUMBER,
   char_price_      IN NUMBER )
IS
   attr_  VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Char_Price');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('CALC_CHAR_PRICE', calc_char_price_, attr_);
   Client_SYS.Add_To_Attr('CHAR_PRICE', char_price_, attr_);
   Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);
END Modify_Char_Price;


PROCEDURE Modify_Foc_Tax_Basis (
   order_no_      IN VARCHAR2,
   line_no_       IN VARCHAR2,
   rel_no_        IN VARCHAR2,
   line_item_no_  IN NUMBER,
   foc_tax_basis_ IN NUMBER )
IS
   attr_          VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Foc_Tax_Basis');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('FREE_OF_CHARGE_TAX_BASIS', foc_tax_basis_, attr_);
   Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);
END Modify_Foc_Tax_Basis;


--@IgnoreMissingSysinit
FUNCTION Get_Qty_Demand (
   contract_ IN VARCHAR2,
   part_no_  IN VARCHAR2 ) RETURN NUMBER
IS
   qty_demand_ NUMBER;

   CURSOR get_demand IS
      SELECT NVL(sum(revised_qty_due - qty_assigned - qty_shipped), 0)
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  contract = contract_
      AND    part_no = part_no_
      AND    rowstate IN ('Released', 'Reserved', 'Picked', 'PartiallyDelivered')
      AND    revised_qty_due - qty_assigned - qty_shipped > 0
      AND    part_ownership IN ('COMPANY OWNED' , 'CONSIGNMENT');
BEGIN
   OPEN get_demand;
   FETCH get_demand INTO qty_demand_;
   IF get_demand%NOTFOUND THEN
      qty_demand_ := 0;
   END IF;
   CLOSE get_demand;
   RETURN qty_demand_;
END Get_Qty_Demand;


--@IgnoreMissingSysinit
FUNCTION Get_Sale_Price_Total (
   order_no_              IN VARCHAR2,
   line_no_               IN VARCHAR2,
   rel_no_                IN VARCHAR2,
   line_item_no_          IN NUMBER,
   rental_chargable_days_ IN NUMBER DEFAULT NULL,
   exclude_item_          IN VARCHAR2 DEFAULT 'FALSE') RETURN NUMBER
IS
BEGIN
   RETURN Get_Price_Total___( order_no_, line_no_, rel_no_, line_item_no_, rental_chargable_days_, exclude_item_, false );
END Get_Sale_Price_Total;


--@IgnoreMissingSysinit
FUNCTION Get_Sale_Price_Incl_Tax_Total (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2 DEFAULT NULL,
   rel_no_       IN VARCHAR2 DEFAULT NULL,
   line_item_no_ IN NUMBER DEFAULT NULL,
   exclude_item_ IN VARCHAR2 DEFAULT 'FALSE') RETURN NUMBER
IS
   contract_               CUSTOMER_ORDER_LINE_TAB.contract%TYPE;
   currency_code_          VARCHAR2(3);
   total_gross_amount_     NUMBER;
   net_curr_amount_        NUMBER;
   gross_curr_amount_      NUMBER := 0;
   rounding_               NUMBER;
   rental_chargeable_days_ NUMBER;
   total_discount_amount_  NUMBER;
   fetched_line_no_        CUSTOMER_ORDER_LINE_TAB.line_no%TYPE;
   fetched_rel_no_         CUSTOMER_ORDER_LINE_TAB.rel_no%TYPE;
   fetched_line_item_no_   CUSTOMER_ORDER_LINE_TAB.line_item_no%TYPE;   
   free_of_charge_db_      VARCHAR2(20);
   rental_db_              VARCHAR2(20);
   header_rec_             Customer_Order_API.Public_Rec;
   CURSOR get_total IS
      SELECT contract, buy_qty_due * price_conv_factor * unit_price_incl_tax total_gross_amount, line_no, rel_no, line_item_no, free_of_charge, rental
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no     = order_no_
      AND    (line_no = line_no_ OR line_no_ IS NULL)
      AND    (rel_no = rel_no_ OR rel_no_ IS NULL)
      AND    (line_item_no = line_item_no_ 
              OR (line_item_no_ IS NULL AND line_item_no <= 0 AND rowstate != 'Cancelled'))
      AND    (exclude_item_ != 'TRUE' OR (charged_item != 'ITEM NOT CHARGED' AND exchange_item != 'EXCHANGED ITEM'));
BEGIN
   OPEN get_total;
   FETCH get_total INTO contract_, total_gross_amount_, fetched_line_no_, fetched_rel_no_, fetched_line_item_no_, free_of_charge_db_, rental_db_;
   
   header_rec_ := Customer_Order_API.Get(order_no_);    
   WHILE get_total%FOUND LOOP
      IF (currency_code_ IS NULL) THEN
         -- Enough to fetch once in the loop
         currency_code_          := header_rec_.currency_code;
         rounding_               := Currency_Code_API.Get_Currency_Rounding(Site_API.Get_Company(contract_), currency_code_);
      END IF;
      IF (free_of_charge_db_ = Fnd_Boolean_API.DB_TRUE) THEN
         gross_curr_amount_ := gross_curr_amount_ + Get_Total_Tax_Amount_Curr(order_no_, fetched_line_no_, fetched_rel_no_, fetched_line_item_no_, rounding_);
      ELSE 
         IF header_rec_.use_price_incl_tax = 'TRUE' THEN
            rental_chargeable_days_ := Get_Rental_Chargeable_Days(order_no_, fetched_line_no_, fetched_rel_no_, fetched_line_item_no_, rental_db_);

            total_gross_amount_     := ROUND((total_gross_amount_ * rental_chargeable_days_), rounding_);
            total_discount_amount_  := Get_Total_Discount_Amount(order_no_, fetched_line_no_, fetched_rel_no_, fetched_line_item_no_, total_gross_amount_);
            gross_curr_amount_      := gross_curr_amount_ + total_gross_amount_ - total_discount_amount_;      
         ELSE
            net_curr_amount_   := Get_Sale_Price_Total(order_no_, fetched_line_no_, fetched_rel_no_, fetched_line_item_no_);
            gross_curr_amount_ := gross_curr_amount_ + net_curr_amount_ + Get_Total_Tax_Amount_Curr(order_no_, fetched_line_no_, fetched_rel_no_, fetched_line_item_no_, rounding_);
         END IF;
      END IF;
      FETCH get_total INTO contract_, total_gross_amount_, fetched_line_no_, fetched_rel_no_, fetched_line_item_no_, free_of_charge_db_, rental_db_;
   END LOOP;
   CLOSE get_total; 
   RETURN gross_curr_amount_;
END Get_Sale_Price_Incl_Tax_Total;


--@IgnoreMissingSysinit
FUNCTION Get_Sale_Price_Excl_Tax_Total (
   order_no_       IN VARCHAR2,
   line_no_        IN VARCHAR2,
   rel_no_         IN VARCHAR2,
   line_item_no_   IN NUMBER,
   tax_percentage_ IN NUMBER ) RETURN NUMBER
IS
   contract_               VARCHAR2(5);
   currency_code_          VARCHAR2(3);
   total_gross_amount_     NUMBER;
   total_net_amount_       NUMBER;
   discount_               NUMBER;
   order_discount_         NUMBER;
   additional_discount_    NUMBER;
   line_discount_amount_   NUMBER;
   add_disc_amt_           NUMBER;
   order_discount_amount_  NUMBER;
   net_curr_amount_        NUMBER;
   rounding_               NUMBER;
   rental_db_              CUSTOMER_ORDER_LINE_TAB.rental%TYPE;
   buy_qty_due_            NUMBER;
   price_conv_factor_      NUMBER;
   total_discount_         NUMBER;
   rental_chargeable_days_ NUMBER;

   CURSOR get_total IS
      SELECT contract, buy_qty_due * price_conv_factor * unit_price_incl_tax total_gross_amount,
             discount, order_discount, additional_discount, buy_qty_due, price_conv_factor, rental
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    line_no = line_no_
      AND    rel_no = rel_no_
      AND    line_item_no = line_item_no_;
BEGIN
   OPEN get_total;
   FETCH get_total INTO contract_, total_gross_amount_, discount_, order_discount_, additional_discount_, buy_qty_due_, price_conv_factor_, rental_db_;
   CLOSE get_total;
   currency_code_          := CUSTOMER_ORDER_API.Get_Currency_Code(order_no_);
   rounding_               := Currency_Code_API.Get_Currency_Rounding(Site_API.Get_Company(contract_),currency_code_);

   rental_chargeable_days_ := Get_Rental_Chargeable_Days(order_no_, line_no_, rel_no_, line_item_no_, rental_db_);

   total_gross_amount_     := total_gross_amount_ * rental_chargeable_days_;
   total_gross_amount_     := ROUND(total_gross_amount_, rounding_);
   total_net_amount_       := ROUND(total_gross_amount_ / (1 + (tax_percentage_/100)), rounding_);
   line_discount_amount_   := Cust_Order_Line_Discount_API.Get_Total_Line_Discount(order_no_, line_no_, rel_no_, line_item_no_,
                                                                                   buy_qty_due_, price_conv_factor_, rounding_);
   add_disc_amt_           := ROUND(((total_gross_amount_ - line_discount_amount_) * additional_discount_/100 ), rounding_);
   order_discount_amount_  := ROUND((total_gross_amount_ - line_discount_amount_) * (order_discount_ / 100), rounding_);

   -- discount without tax is calculated seperately for discount types
   line_discount_amount_   := Cust_Order_Line_Discount_API.Get_Total_Line_Discount(order_no_, line_no_, rel_no_, line_item_no_,
                                                                                   buy_qty_due_, price_conv_factor_, rounding_, tax_percentage_ => tax_percentage_);
   add_disc_amt_           := ROUND(add_disc_amt_ / (1 + (tax_percentage_/100)), rounding_);
   order_discount_amount_  := ROUND(order_discount_amount_ / (1 + (tax_percentage_/100)), rounding_);
   total_discount_         := line_discount_amount_ + add_disc_amt_ + order_discount_amount_;
   net_curr_amount_        := total_net_amount_ - total_discount_;

   RETURN net_curr_amount_;
END Get_Sale_Price_Excl_Tax_Total;


--@IgnoreMissingSysinit
FUNCTION Get_Base_Sale_Price_Total (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   net_base_amount_  NUMBER;
BEGIN
   -- Please Note : Since sale_unit_price (price each) can have as many decimals as you like discounts and total_gross_base_amount_ needed to get rounded using Order Currency settings though the calculation is for base amounts.
   -- The final line total base amount (net_base_amount_) is rounded using accounting currency settings. This is to tally with invoice figures.
   net_base_amount_ := Get_Price_Total___( order_no_, line_no_, rel_no_, line_item_no_, NULL, 'FALSE', true );

   RETURN net_base_amount_;
END Get_Base_Sale_Price_Total;


--@IgnoreMissingSysinit
FUNCTION Get_Base_Sale_Price_Total (
   order_no_         IN VARCHAR2,
   line_no_          IN VARCHAR2,
   rel_no_           IN VARCHAR2,
   line_item_no_     IN NUMBER,
   net_curr_amount_  IN NUMBER) RETURN NUMBER
IS
   currency_rate_    NUMBER;
   rounding_         NUMBER;
   company_          VARCHAR2(20);
   net_base_amount_  NUMBER;
   contract_         customer_order_line_tab.contract%TYPE;
   
   CURSOR get_curr_rate IS
      SELECT currency_rate, contract
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no     = order_no_
      AND    line_no      = line_no_
      AND    rel_no       = rel_no_
      AND    line_item_no = line_item_no_;
BEGIN
   OPEN  get_curr_rate;
   FETCH get_curr_rate INTO currency_rate_, contract_;
   CLOSE get_curr_rate;
   company_    := Site_API.Get_Company(contract_);
   rounding_   := Currency_Code_API.Get_Currency_Rounding(company_, Company_Finance_API.Get_Currency_Code(company_));   
   -- Please Note : Since sale_unit_price (price each) can have as many decimals as you like discounts and total_gross_base_amount_ needed to get rounded using Order Currency settings though the calculation is for base amounts.
   -- The final line total base amount (net_base_amount_) is rounded using accounting currency settings. This is to tally with invoice figures.
   net_base_amount_ := ROUND(net_curr_amount_ * currency_rate_, rounding_);

   RETURN net_base_amount_;
END Get_Base_Sale_Price_Total;


--@IgnoreMissingSysinit
FUNCTION Get_Base_Sale_Price_Total (
   order_no_              IN VARCHAR2,
   freight_map_id_        IN VARCHAR2,
   zone_id_               IN VARCHAR2,
   freight_price_list_no_ IN VARCHAR2,
   planned_ship_date_     IN DATE ) RETURN NUMBER
IS
   temp_          NUMBER;
   company_       VARCHAR2(20);
   currency_code_ VARCHAR2(3);
   rounding_      NUMBER;
   line_discount_ NUMBER;
   price_total_   NUMBER :=0;
   price_curr_    NUMBER;
   curr_rounding_ NUMBER;
   sale_amount_   NUMBER;
   header_rec_    Customer_Order_API.Public_Rec;
   
   CURSOR get_line_data IS
      SELECT line_no, rel_no, line_item_no, buy_qty_due, price_conv_factor, currency_rate,
             (buy_qty_due * sale_unit_price * price_conv_factor) sale_amount,
             (buy_qty_due * unit_price_incl_tax * price_conv_factor) sale_amt_with_tax,
             order_discount, additional_discount
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    freight_map_id = freight_map_id_
      AND    zone_id = zone_id_
      AND    freight_price_list_no = freight_price_list_no_
      AND    planned_ship_date = planned_ship_date_
      AND    rowstate != 'Cancelled';
BEGIN
   header_rec_    := Customer_Order_API.Get(order_no_);    
   company_       := Site_API.Get_Company(header_rec_.contract);
   currency_code_ := Company_Finance_API.Get_Currency_Code(company_);
   rounding_      := Currency_Code_API.Get_Currency_Rounding(company_, currency_code_);

   curr_rounding_ := Currency_Code_API.Get_Currency_Rounding(company_,  header_rec_.currency_code);
   FOR rec_ IN get_line_data LOOP
      IF (header_rec_.use_price_incl_tax  = 'TRUE' )THEN
         sale_amount_ := rec_.sale_amt_with_tax;
      ELSE
         sale_amount_ := rec_.sale_amount;
      END IF;
      line_discount_ :=  Cust_Order_Line_Discount_API.Get_Total_Line_Discount(order_no_, rec_.line_no, rec_.rel_no, rec_.line_item_no,
                                                                              rec_.buy_qty_due, rec_.price_conv_factor, curr_rounding_);
      price_curr_    := ROUND((sale_amount_ - line_discount_) * (1-(rec_.order_discount + rec_.additional_discount)/100), curr_rounding_);
      price_total_   := price_total_ + ROUND(price_curr_ * rec_.currency_rate, rounding_ ) ;
   END LOOP;
   IF price_total_ = 0 THEN
      temp_ := NULL;
   ELSE
      temp_ := price_total_;
   END IF;
   RETURN temp_;
END Get_Base_Sale_Price_Total;


--@IgnoreMissingSysinit
FUNCTION Get_Base_Price_Incl_Tax_Total (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   currency_rate_       NUMBER;
   rounding_            NUMBER;
   company_             VARCHAR2(20);
   gross_base_amount_   NUMBER;
   CURSOR get_curr_rate IS
      SELECT currency_rate, Site_API.Get_Company(contract) company
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    line_no = line_no_
      AND    rel_no = rel_no_
      AND    line_item_no = line_item_no_;
BEGIN
   IF (Customer_Order_API.Get_Use_Price_Incl_Tax_Db(order_no_)  = 'TRUE') THEN
      OPEN  get_curr_rate;
      FETCH get_curr_rate INTO currency_rate_, company_;
      CLOSE get_curr_rate;
      rounding_ := Currency_Code_API.Get_Currency_Rounding(company_, Company_Finance_API.Get_Currency_Code(company_));
      -- Please Note : Since unit_price_incl_tax (price each) can have as many decimals as you like discounts and total_gross_base_amount_ needed to get rounded using Order Currency settings though the calculation is for base amounts.
      -- The final line total base amount (gross_base_amount_) is rounded using accounting currency settings. This is to tally with invoice figures.
      gross_base_amount_ := ROUND(Get_Sale_Price_Incl_Tax_Total(order_no_, line_no_, rel_no_, line_item_no_) * currency_rate_, rounding_);
   ELSE
      gross_base_amount_ := Get_Base_Sale_Price_Total(order_no_, line_no_, rel_no_, line_item_no_) + Get_Total_Tax_Amount_Base(order_no_, line_no_, rel_no_, line_item_no_);
   END IF;
   RETURN gross_base_amount_;
END Get_Base_Price_Incl_Tax_Total;


PROCEDURE Get_Next_Line_Item_No (
   line_item_no_ IN OUT NOCOPY NUMBER,
   order_no_     IN     VARCHAR2,
   line_no_      IN     VARCHAR2,
   rel_no_       IN     VARCHAR2 )
IS
   CURSOR get_line_item_no IS
   SELECT NVL(max(line_item_no + 1), 1)
   FROM   CUSTOMER_ORDER_LINE_TAB
   WHERE  order_no = order_no_
   AND    line_no = line_no_
   AND    rel_no = rel_no_
   AND    line_item_no != -1;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Get_Next_Line_Item_No');
   OPEN  get_line_item_no;
   FETCH get_line_item_no into line_item_no_;
   CLOSE get_line_item_no;
END Get_Next_Line_Item_No;


PROCEDURE Get_Shop_Order_Info (
   so_order_no_      IN OUT NOCOPY VARCHAR2,
   so_release_no_    IN OUT NOCOPY VARCHAR2,
   so_sequence_no_   IN OUT NOCOPY VARCHAR2,
   revised_qty_due_  IN OUT NOCOPY NUMBER,
   revised_due_date_ IN OUT NOCOPY DATE,
   status_code_      IN OUT NOCOPY VARCHAR2,
   order_no_         IN     VARCHAR2,
   line_no_          IN     VARCHAR2,
   rel_no_           IN     VARCHAR2,
   line_item_no_     IN     NUMBER )
IS
   number_ NUMBER := NULL;
   date_   DATE := NULL;
   string_ VARCHAR2(252) := NULL;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Get_Shop_Order_Info');
   Customer_Order_Shop_Order_API.Get_Shop_Order(so_order_no_, so_release_no_,
   so_sequence_no_, order_no_, line_no_, rel_no_, line_item_no_);
   $IF (Component_Shpord_SYS.INSTALLED) $THEN
      number_  := Shop_Ord_API.Get_Revised_Qty_Due(so_order_no_, so_release_no_, so_sequence_no_);
      date_    := Shop_Ord_Util_API.Get_Due_Date(so_order_no_, so_release_no_, so_sequence_no_);
      string_  := Shop_Ord_Util_API.Get_State(so_order_no_, so_release_no_, so_sequence_no_);
   $END
   revised_qty_due_  := number_;
   revised_due_date_ := date_;
   status_code_      := string_;
END Get_Shop_Order_Info;


PROCEDURE Get_Purchase_Order_Info (
   po_order_no_          IN OUT NOCOPY VARCHAR2,
   po_line_no_           IN OUT NOCOPY VARCHAR2,
   po_rel_no_            IN OUT NOCOPY VARCHAR2,
   revised_qty_          IN OUT NOCOPY NUMBER,
   planned_receipt_date_ IN OUT NOCOPY DATE,
   status_code_          IN OUT NOCOPY VARCHAR2,
   vendor_no_            IN OUT NOCOPY VARCHAR2,
   contract_             IN OUT NOCOPY VARCHAR2,
   part_no_              IN OUT NOCOPY VARCHAR2,
   description_          IN OUT NOCOPY VARCHAR2,
   unit_meas_            IN OUT NOCOPY VARCHAR2,
   purchase_type_        IN OUT NOCOPY VARCHAR2,
   order_no_             IN     VARCHAR2,
   line_no_              IN     VARCHAR2,
   rel_no_               IN     VARCHAR2,
   line_item_no_         IN     NUMBER )
IS
   $IF Component_Purch_SYS.INSTALLED $THEN
      pur_order_line_part_rec_  Purchase_Order_Line_Part_API.Public_Rec;        
   $END
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Get_Purchase_Order_Info');
   Customer_Order_Pur_Order_API.Get_Purord_For_Custord(po_order_no_, po_line_no_,
                     po_rel_no_, purchase_type_, order_no_, line_no_, rel_no_, line_item_no_);

-- Purchase order
   $IF (Component_Purch_SYS.INSTALLED)$THEN
      IF (purchase_type_ = Purchase_Type_API.Decode('O')) THEN
         pur_order_line_part_rec_ := Purchase_Order_Line_Part_API.Get(po_order_no_, po_line_no_, po_rel_no_);
         vendor_no_            := Purchase_Order_API.Get_Vendor_No(order_no_);
         revised_qty_          := pur_order_line_part_rec_.revised_qty;
         planned_receipt_date_ := pur_order_line_part_rec_.planned_receipt_date;
         status_code_          := Purchase_Order_Line_Util_API.Get_State(po_order_no_, po_line_no_, po_rel_no_);
         description_          := pur_order_line_part_rec_.description;
         unit_meas_            := pur_order_line_part_rec_.unit_meas;
         part_no_              := pur_order_line_part_rec_.part_no;
         contract_             := pur_order_line_part_rec_.contract;
      ELSE
         revised_qty_          := Purchase_Req_Util_API.Get_Line_Original_Qty(po_order_no_, po_line_no_, po_rel_no_);
         part_no_              := Purchase_Req_Util_API.Get_Line_Part_No(po_order_no_, po_line_no_, po_rel_no_);
         contract_             := Purchase_Req_Util_API.Get_Line_Contract(po_order_no_, po_line_no_, po_rel_no_);
         description_          := Purchase_Req_Util_API.Get_Line_Description(po_order_no_, po_line_no_, po_rel_no_);
         planned_receipt_date_ := Purchase_Req_Util_API.Get_Line_Wanted_Receipt_Date(po_order_no_, po_line_no_, po_rel_no_);
         vendor_no_            := Purchase_Req_Util_API.Get_Line_Vendor_No(po_order_no_, po_line_no_, po_rel_no_);
         status_code_          := Purchase_Req_Line_API.Get_State( po_order_no_, po_line_no_, po_rel_no_ );
         unit_meas_            := Purchase_Req_Util_API.Get_Line_Unit_Meas(po_order_no_, po_line_no_, po_rel_no_);
      END IF;
   $ELSE
      NULL;
   $END
END Get_Purchase_Order_Info;


--@IgnoreMissingSysinit
FUNCTION Part_Exist (
   contract_ IN VARCHAR2,
   part_no_  IN VARCHAR2 ) RETURN NUMBER
IS
   dummy_  NUMBER;
   CURSOR exist_control IS
      SELECT 1
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  contract = contract_
      AND    part_no = part_no_
      AND    rowstate NOT IN ('Invoiced', 'Cancelled');
BEGIN
   OPEN exist_control;
   FETCH exist_control INTO dummy_;
   IF exist_control%NOTFOUND THEN
      dummy_ := 0;
   END IF;
   CLOSE exist_control;
   RETURN dummy_;
END Part_Exist;


PROCEDURE Exist_Line_No (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER )
IS
   dummy_ NUMBER;
   CURSOR exist_control IS
      SELECT 1
        FROM CUSTOMER_ORDER_LINE_TAB
       WHERE order_no = order_no_
         AND line_no = line_no_
         AND rel_no = rel_no_
         AND line_item_no = NVL(line_item_no_, line_item_no);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Exist_Line_No');
   OPEN exist_control;
   FETCH exist_control INTO dummy_;
   IF (exist_control%FOUND) THEN
      CLOSE exist_control;
      Error_SYS.Record_General(lu_name_, 'LINE_ALREADY_EXISTS: This order line already exists!');
   END IF;
   CLOSE exist_control;
END Exist_Line_No;


--@IgnoreMissingSysinit
FUNCTION Exist_Note_Text (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ CUSTOMER_ORDER_LINE_TAB.note_text%TYPE;
   CURSOR get_attr IS
      SELECT note_text
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    line_no = line_no_
      AND    rel_no = rel_no_
      AND    line_item_no = line_item_no_;
BEGIN
   OPEN get_attr;
   FETCH get_attr INTO temp_;
   CLOSE get_attr;
   IF (temp_ IS NOT NULL) THEN
      RETURN '1';
   ELSE
      RETURN '0';
   END IF;
END Exist_Note_Text;


--@IgnoreMissingSysinit
FUNCTION Get_Part_Description (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   CURSOR get_attr IS
      SELECT contract, catalog_no, part_no
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    line_no = line_no_
      AND    rel_no = rel_no_
      AND    line_item_no = line_item_no_;
   rec_  get_attr%ROWTYPE;
BEGIN
   IF NOT Check_Exist___(order_no_, line_no_, rel_no_, line_item_no_) THEN
      RETURN NULL;
   ELSE
      OPEN get_attr;
      FETCH get_attr INTO rec_.contract, rec_.catalog_no, rec_.part_no;
      CLOSE get_attr;
      IF (rec_.part_no IS NULL) THEN
         RETURN Sales_Part_API.Get_Catalog_Desc(rec_.contract, rec_.catalog_no);
      ELSE
         RETURN Inventory_Part_API.Get_Description(rec_.contract, rec_.part_no);
      END IF;
   END IF;
END Get_Part_Description;


--@IgnoreMissingSysinit
FUNCTION Line_On_Delivery_Note (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   delnote_no_   IN VARCHAR2 ) RETURN NUMBER
IS
   found_   NUMBER;

   CURSOR on_delnote IS
      SELECT 1
      FROM   CUSTOMER_ORDER_DELIVERY
      WHERE  order_no = order_no_
      AND    line_no  = line_no_
      AND    rel_no   = rel_no_
      AND    line_item_no = line_item_no_
      AND    delnote_no = delnote_no_
      AND    cancelled_delivery_db = 'FALSE';
BEGIN
   OPEN on_delnote;
   FETCH on_delnote INTO found_;
   IF (on_delnote%NOTFOUND) THEN
      found_ := 0;
   END IF;
   CLOSE on_delnote;
   RETURN found_;
END Line_On_Delivery_Note;


--@IgnoreMissingSysinit
FUNCTION Get_Qty_Shipped_On_Deliv_Note (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   delnote_no_   IN VARCHAR2 ) RETURN NUMBER
IS
   sum_ NUMBER;
   CURSOR get_sum_qty_shipped IS
      SELECT SUM(qty_shipped)
      FROM   CUSTOMER_ORDER_DELIVERY_TAB
      WHERE  order_no = order_no_
      AND    line_no = line_no_
      AND    rel_no = rel_no_
      AND    line_item_no = line_item_no_
      AND    delnote_no = delnote_no_
      AND    cancelled_delivery = 'FALSE';
BEGIN
   OPEN get_sum_qty_shipped;
   FETCH get_sum_qty_shipped INTO sum_;
   IF (get_sum_qty_shipped%NOTFOUND) THEN
      sum_ := 0;
   END IF;
   CLOSE get_sum_qty_shipped;
   RETURN NVL(sum_, 0);
END Get_Qty_Shipped_On_Deliv_Note;


--@IgnoreMissingSysinit
FUNCTION Get_Shipped_Not_Invoiced (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_  NUMBER;
   CURSOR get_attr IS
      SELECT qty_shipped - qty_invoiced
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    line_no = line_no_
      AND    rel_no = rel_no_
      AND    line_item_no = line_item_no_;
BEGIN
   OPEN get_attr;
   FETCH get_attr INTO temp_;
   CLOSE get_attr;
   RETURN temp_;
END Get_Shipped_Not_Invoiced;


PROCEDURE Set_Qty_Assigned (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   qty_assigned_ IN NUMBER,
   add_hist_log_ IN VARCHAR2 DEFAULT 'TRUE' )
IS
   attr_             VARCHAR2(32000);
   info_             VARCHAR2(32000);
   rec_              CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   objid_            VARCHAR2(2000);
   objversion_       VARCHAR2(2000);
   msg_              VARCHAR2(200);
   old_qty_assigned_ NUMBER;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Set_Qty_Assigned');
   old_qty_assigned_ := NVL(Get_Qty_Assigned(order_no_, line_no_, rel_no_, line_item_no_),0);
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('QTY_ASSIGNED', qty_assigned_, attr_);
   rec_ := Get_Object_By_Keys___(order_no_, line_no_, rel_no_, line_item_no_);
   Get_Id_Version_By_Keys___(objid_, objversion_, order_no_, line_no_, rel_no_, line_item_no_);
   Set_Qty_Assigned__(info_, objid_, objversion_, attr_, 'DO');
   IF ((qty_assigned_ > old_qty_assigned_) AND NVL(add_hist_log_, 'TRUE') != 'FALSE') THEN
      msg_ := Language_SYS.Translate_Constant(lu_name_, 'LINERESERVED: :P1 :P2 Reserved', NULL, to_char(qty_assigned_ - old_qty_assigned_), Inventory_Part_API.Get_Unit_Meas(rec_.contract, rec_.part_no));
      Customer_Order_Line_Hist_API.New(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no, msg_);
   END IF;
END Set_Qty_Assigned;


PROCEDURE Set_Qty_Confirmeddiff (
   order_no_          IN VARCHAR2,
   line_no_           IN VARCHAR2,
   rel_no_            IN VARCHAR2,
   line_item_no_      IN NUMBER,
   qty_confirmeddiff_ IN NUMBER )
IS
   attr_        VARCHAR2(32000);
   info_        VARCHAR2(32000);
   rec_         CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   objid_       VARCHAR2(2000);
   objversion_  VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Set_Qty_Confirmeddiff');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('QTY_CONFIRMEDDIFF', qty_confirmeddiff_, attr_);
   rec_ := Get_Object_By_Keys___(order_no_, line_no_, rel_no_, line_item_no_);
   Get_Id_Version_By_Keys___(objid_, objversion_, order_no_, line_no_, rel_no_, line_item_no_);
   Set_Qty_Confirmeddiff__(info_, objid_, objversion_, attr_, 'DO');
   -- IF the state has changed create a history record
   IF (rec_.rowstate != Get_Objstate(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no)) THEN
      Customer_Order_Line_Hist_API.New(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no);
   END IF;
END Set_Qty_Confirmeddiff;


PROCEDURE Set_Qty_Picked (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   qty_picked_   IN NUMBER,
   add_hist_log_ IN VARCHAR2 DEFAULT 'TRUE')
IS
   attr_       VARCHAR2(32000);
   info_       VARCHAR2(32000);
   rec_        CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
   msg_        VARCHAR2(200);
   new_state_  CUSTOMER_ORDER_LINE_TAB.rowstate%TYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Set_Qty_Picked');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('QTY_PICKED', qty_picked_, attr_);
   rec_ := Get_Object_By_Keys___(order_no_, line_no_, rel_no_, line_item_no_);
   Get_Id_Version_By_Keys___(objid_, objversion_, order_no_, line_no_, rel_no_, line_item_no_);
   Set_Qty_Picked__(info_, objid_, objversion_, attr_, 'DO');
   new_state_ := Get_Objstate(order_no_, line_no_, rel_no_, line_item_no_);   
   IF ((rec_.rowstate != new_state_) AND (new_state_ = 'Released') AND (add_hist_log_ = 'TRUE')) THEN
      -- Added message saying 0 delivered.
      msg_ := Language_SYS.Translate_Constant(lu_name_, 'ZERODELIVERED: 0 :P1 delivered with differences', NULL, rec_.sales_unit_meas);
      Customer_Order_Line_Hist_API.New(order_no_, line_no_, rel_no_, line_item_no_, msg_);
   END IF;
END Set_Qty_Picked;


PROCEDURE Set_Qty_Shipped (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   qty_shipped_  IN NUMBER,
   from_undo_delivery_ IN VARCHAR2 DEFAULT 'FALSE')
IS
   attr_              VARCHAR2(32000);
   info_              VARCHAR2(32000);
   rec_               CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   objid_             VARCHAR2(2000);
   objversion_        VARCHAR2(2000);
   msg_               VARCHAR2(200);
   old_qty_shipped_   NUMBER;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Set_Qty_Shipped');
   old_qty_shipped_ := Get_Qty_Shipped(order_no_, line_no_, rel_no_, line_item_no_);
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('QTY_SHIPPED', qty_shipped_, attr_);
   rec_ := Get_Object_By_Keys___(order_no_, line_no_, rel_no_, line_item_no_);
   Get_Id_Version_By_Keys___(objid_, objversion_, order_no_, line_no_, rel_no_, line_item_no_);
   Set_Qty_Shipped__(info_, objid_, objversion_, attr_, 'DO');
   -- The state after delivery could be Invoiced/Closed, but the message should still be 'Delivered'.
   msg_ := Language_SYS.Translate_Constant(lu_name_, 'LINEDELIVERED: :P1 :P2 Delivered', NULL, to_char(qty_shipped_ - old_qty_shipped_), Inventory_Part_API.Get_Unit_Meas(rec_.contract, rec_.part_no));
   -- Added a new condition to state the delivered state when the CO line is in Invoiced/Closed state after the delivery.
   IF(Get_Objstate(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no) = 'Invoiced') THEN
      Customer_Order_Line_Hist_API.New(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no, msg_, 'Delivered');
      IF (from_undo_delivery_ = 'FALSE') THEN
         Customer_Order_Line_Hist_API.New(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no);
      END IF;
   ELSE
      Customer_Order_Line_Hist_API.New(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no, msg_);
   END IF;
END Set_Qty_Shipped;


PROCEDURE Set_Qty_Shipdiff (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   qty_shipdiff_ IN NUMBER )
IS
   attr_       VARCHAR2(32000);
   info_       VARCHAR2(32000);
   rec_        CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Set_Qty_Shipdiff');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('QTY_SHIPDIFF', qty_shipdiff_, attr_);
   rec_ := Get_Object_By_Keys___(order_no_, line_no_, rel_no_, line_item_no_);
   Get_Id_Version_By_Keys___(objid_, objversion_, order_no_, line_no_, rel_no_, line_item_no_);
   Set_Qty_Shipdiff__(info_, objid_, objversion_, attr_, 'DO');

   -- IF the state has changed create a history record
   IF (rec_.rowstate != Get_Objstate(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no)) THEN
      Customer_Order_Line_Hist_API.New(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no);
   END IF;
END Set_Qty_Shipdiff;


PROCEDURE Set_Qty_Invoiced (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   qty_invoiced_ IN NUMBER )
IS
   attr_         VARCHAR2(32000);
   info_         VARCHAR2(32000);
   rec_          CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   objid_        VARCHAR2(2000);
   objversion_   VARCHAR2(2000);
   new_objstate_ VARCHAR2(30);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Set_Qty_Invoiced');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('QTY_INVOICED', qty_invoiced_, attr_);
   rec_ := Get_Object_By_Keys___(order_no_, line_no_, rel_no_, line_item_no_);
   Get_Id_Version_By_Keys___(objid_, objversion_, order_no_, line_no_, rel_no_, line_item_no_);
   Set_Qty_Invoiced__(info_, objid_, objversion_, attr_, 'DO');

   -- IF the state has changed create a history record
   new_objstate_ := Get_Objstate(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no);
   IF (rec_.rowstate != new_objstate_) THEN
      Customer_Order_Line_Hist_API.New(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no);
   END IF;
END Set_Qty_Invoiced;


PROCEDURE Set_Cancelled (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER )
IS
   attr_       VARCHAR2(32000);
   info_       VARCHAR2(32000);
   rec_        CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Set_Cancelled');
   Client_SYS.Clear_Attr(attr_);
   rec_ := Get_Object_By_Keys___(order_no_, line_no_, rel_no_, line_item_no_);
   Get_Id_Version_By_Keys___(objid_, objversion_, order_no_, line_no_, rel_no_, line_item_no_);
   Set_Cancelled__(info_, objid_, objversion_, attr_, 'DO');
   Order_Line_Commission_API.Cancel_Order_Commission_Lines(order_no_, line_no_, rel_no_, line_item_no_);

   -- IF the state has changed create a history record
   IF (rec_.rowstate != Get_Objstate(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no)) THEN
      Customer_Order_Line_Hist_API.New(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no);
   END IF;
END Set_Cancelled;


PROCEDURE Set_Released (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER )
IS
   attr_       VARCHAR2(32000);
   info_       VARCHAR2(32000);
   rec_        CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Set_Released');
   Client_SYS.Clear_Attr(attr_);
   rec_ := Get_Object_By_Keys___(order_no_, line_no_, rel_no_, line_item_no_);
   Get_Id_Version_By_Keys___(objid_, objversion_, order_no_, line_no_, rel_no_, line_item_no_);
   Set_Released__(info_, objid_, objversion_, attr_, 'DO');

   -- IF the state has changed create a history record
   IF (rec_.rowstate != Get_Objstate(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no)) THEN
      Customer_Order_Line_Hist_API.New(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no);
   END IF;
END Set_Released;


PROCEDURE Set_Qty_Short (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   qty_short_    IN NUMBER )
IS
   attr_  VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Set_Qty_Short');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('QTY_SHORT', qty_short_, attr_);
   Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);
END Set_Qty_Short;


--@IgnoreMissingSysinit
FUNCTION Calculate_Qty_To_Load (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ NUMBER;
   CURSOR get_attr IS
      SELECT DECODE(col.part_no, NULL, col.qty_to_ship, col.qty_picked)
      FROM   CUSTOMER_ORDER_LINE_TAB col, CUSTOMER_ORDER_TAB co
      WHERE  col.order_no = co.order_no
      AND    col.order_no = order_no_
      AND    col.line_no = line_no_
      AND    col.rel_no = rel_no_
      AND    col.line_item_no = line_item_no_
      AND    co.rowstate != 'Planned';
BEGIN
   OPEN get_attr;
   FETCH get_attr INTO temp_;
   CLOSE get_attr;
   RETURN NVL(temp_, 0);
END Calculate_Qty_To_Load;


--@IgnoreMissingSysinit
FUNCTION Get_Sum_Invoiced_Base_Curr (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
BEGIN
   RETURN Get_Sum_Invoiced_Base_Curr__(order_no_, line_no_, rel_no_, line_item_no_);
END Get_Sum_Invoiced_Base_Curr;


PROCEDURE New (
   info_ OUT    VARCHAR2,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   new_attr_                VARCHAR2(32000);
   newrec_                  CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   objid_                   VARCHAR2(2000);
   objversion_              VARCHAR2(2000);   
   discount_                CUSTOMER_ORDER_LINE_TAB.discount%TYPE := NULL;   
   insert_package_mode_     VARCHAR2(5);
   current_info_            VARCHAR2(32000);
   indrec_                  Indicator_Rec;   
   create_partial_sum_      CUST_ORDER_LINE_DISCOUNT_TAB.Create_Partial_Sum%TYPE;
   copy_discount_           VARCHAR2(5);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'New');
   Client_SYS.Clear_Info;
   current_info_ := NULL;
   App_Context_SYS.Set_Value('CUSTOMER_ORDER_LINE_API.CURRENT_INFO_',current_info_);   
   
   Build_Attr_For_New___(discount_, copy_discount_, create_partial_sum_, new_attr_, attr_);
   
   Unpack___(newrec_, indrec_, new_attr_);
   Check_Insert___(newrec_, indrec_, new_attr_);
   current_info_ := Client_SYS.Get_All_Info;
   App_Context_SYS.Set_Value('CUSTOMER_ORDER_LINE_API.CURRENT_INFO_',current_info_);
   Insert___(objid_, objversion_, newrec_, new_attr_);

   insert_package_mode_ := Client_SYS.Get_Item_Value('INSERT_PACKAGE_MODE_', new_attr_);

   Add_Info___(insert_package_mode_);
   current_info_ := App_Context_SYS.Find_Value('CUSTOMER_ORDER_LINE_API.CURRENT_INFO_');

   info_ := current_info_;
   attr_ := new_attr_;

   -- IF the discount passed in is not the same as the current discount for the order line
   -- then all the default discount records should be removed and a new record containing
   -- the desired discount should be created.
   IF (discount_ IS NOT NULL) THEN
      IF ((discount_ != newrec_.discount) OR NVL(copy_discount_, 'FALSE') = 'TRUE') THEN
         Customer_Order_Pricing_API.Replace_Default_Discount_Rec(newrec_.order_no, newrec_.line_no, newrec_.rel_no,
                                                                 newrec_.line_item_no, discount_, create_partial_sum_, copy_discount_);
      END IF;
   END IF;
END New;


PROCEDURE Modify (
   attr_         IN OUT NOCOPY VARCHAR2,
   order_no_     IN     VARCHAR2,
   line_no_      IN     VARCHAR2,
   rel_no_       IN     VARCHAR2,
   line_item_no_ IN     NUMBER )
IS
   newrec_          CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   header_rowstate_ CUSTOMER_ORDER_TAB.rowstate%TYPE;
   oldrec_          Public_Rec;
   qty_on_order_    NUMBER;
   sent_configuration_ VARCHAR2(5);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify');
   oldrec_ := Get (order_no_, line_no_, rel_no_, line_item_no_);
   Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);

   newrec_          := Lock_By_Keys___(order_no_, line_no_, rel_no_, line_item_no_);
   header_rowstate_ := CUSTOMER_ORDER_API.Get_Objstate(order_no_);
   IF ((newrec_.supply_code IN ('SO', 'PT', 'PD', 'IPT', 'IPD', 'DOP' )) AND
      (header_rowstate_ NOT IN ('Planned', 'Blocked'))) THEN
      -- Note: Connected orders are normally created when the order is released,
      -- Note: but if the configured lines are added after releasing the order, connected orders must be created
      -- Note: while entering the configuration details
      sent_configuration_ := Client_Sys.Get_Item_Value('SENT_CONFIGURATION', attr_);
      IF (Sales_Part_API.Get_Configurable_Db(newrec_.contract, NVL(newrec_.part_no, newrec_.catalog_no)) = 'CONFIGURED'
          AND newrec_.configuration_id != '*'
          AND oldrec_.qty_on_order = 0
          AND sent_configuration_ = 'TRUE'
          AND Order_Config_Util_API.Get_Config_Spec_Objstate(NVL(newrec_.part_no, newrec_.catalog_no), newrec_.configuration_id) = 'Completed') THEN
         Connect_Customer_Order_API.Create_Connected_Order_Line(qty_on_order_, order_no_, line_no_, rel_no_, line_item_no_, FALSE);
      END IF;
   END IF;

   IF ((newrec_.configuration_id != '*') AND (oldrec_.configuration_id != newrec_.configuration_id)) THEN
      IF (newrec_.load_id IS NOT NULL) THEN
         Cust_Order_Load_List_Line_API.Modify_Line_Weights(load_id_      => newrec_.load_id,
                                                           pos_          => Cust_Order_Load_List_Line_API.Get_Pos(newrec_.load_id, newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no),
                                                           weight_net_   => newrec_.line_total_weight,
                                                           weight_gross_ => newrec_.line_total_weight_gross);
      END IF;
   END IF;
END Modify;


PROCEDURE Remove (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER )
IS
   remrec_     CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Remove');
   remrec_ := Lock_By_Keys___(order_no_, line_no_, rel_no_, line_item_no_);
   Check_Delete___(remrec_);
   Get_Id_Version_By_Keys___(objid_, objversion_, order_no_, line_no_, rel_no_, line_item_no_);
   Delete___(objid_, remrec_);
END Remove;


--@IgnoreMissingSysinit
FUNCTION Get_Objversion (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_  CUSTOMER_ORDER_LINE_TAB.rowversion%TYPE;
   CURSOR get_attr IS
      SELECT rowversion
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    line_no = line_no_
      AND    rel_no = rel_no_
      AND    line_item_no = line_item_no_;
BEGIN
   OPEN get_attr;
   FETCH get_attr INTO temp_;
   CLOSE get_attr;
   RETURN TO_CHAR(temp_, 'YYYYMMDDHH24MISS');
END Get_Objversion;


PROCEDURE Check_State (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER )
IS
   rec_      CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   attr_     VARCHAR2(2000);
   objstate_ CUSTOMER_ORDER_LINE_TAB.rowstate%TYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Check_State');
   rec_      := Get_Object_By_Keys___(order_no_, line_no_, rel_no_, line_item_no_);
   objstate_ := rec_.rowstate;
   IF (objstate_ != 'Invoiced') THEN
      Finite_State_Machine___(rec_, NULL, attr_);
   END IF;

   IF (objstate_ != rec_.rowstate) THEN
      -- Objstate was changed, the state of the header should also be checked
      CUSTOMER_ORDER_API.Check_State(order_no_);
   END IF;
END Check_State;


PROCEDURE Modify_Sm_Connection (
   order_no_         IN VARCHAR2,
   line_no_          IN VARCHAR2,
   rel_no_           IN VARCHAR2,
   line_item_no_     IN NUMBER,
   sm_connection_db_ IN VARCHAR2 )
IS
   attr_  VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Sm_Connection');
   -- Checks for prepayment exists before a work order is connected to a customer order line.
   IF (Customer_Order_API.Get_Proposed_Prepayment_Amount(order_no_) > 0) THEN
      Error_SYS.Record_General(lu_name_, 'PREPAY_EXIST_SM: When required prepayment exists for the customer order SM object can not be connected.');
   END IF;

   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_to_Attr('SM_CONNECTION_DB', sm_connection_db_, attr_);
   Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);
END Modify_Sm_Connection;


--@IgnoreMissingSysinit
FUNCTION Get_Total_Cost (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_          NUMBER;
   contract_      VARCHAR2(5);
   company_       VARCHAR2(20);
   currency_code_ VARCHAR2(3);
   rounding_      NUMBER;

   CURSOR get_total(rounding_ in NUMBER) IS
      SELECT round(revised_qty_due * cost, rounding_)
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    line_no = line_no_
      AND    rel_no = rel_no_
      AND    line_item_no = line_item_no_;
BEGIN
   contract_      := CUSTOMER_ORDER_API.Get_Contract(order_no_);
   company_       := Site_API.Get_Company(contract_);
   currency_code_ := Company_Finance_API.Get_Currency_Code(company_);
   rounding_      := Currency_Code_API.Get_Currency_Rounding(company_, currency_code_);
   OPEN get_total(rounding_);
   FETCH get_total INTO temp_;
   IF (get_total%NOTFOUND) THEN
      temp_ := NULL;
   END IF;
   CLOSE get_total;
   RETURN temp_;
END Get_Total_Cost;


--@IgnoreMissingSysinit
FUNCTION Get_Total_Discount_Percentage (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   -- -- gelr:disc_price_rounded, added original_order_discount, original_add_discount
   CURSOR get_attr IS
      SELECT buy_qty_due * sale_unit_price * price_conv_factor     net_amount_,
             buy_qty_due * unit_price_incl_tax * price_conv_factor gross_amount_,
             buy_qty_due, price_conv_factor, order_discount, additional_discount, rental,
             original_order_discount, original_add_discount
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no     = order_no_
      AND    line_no      = line_no_
      AND    rel_no       = rel_no_
      AND    line_item_no = line_item_no_;

   rec_                    get_attr%ROWTYPE;
   discount_percentage_    CUSTOMER_ORDER_LINE_TAB.discount%TYPE := 0;
   amount_                 NUMBER;
   rental_chargable_days_  NUMBER;
   line_discount_amount_   NUMBER;
   additional_disc_amount_ NUMBER;
   order_discount_amount_  NUMBER;
BEGIN
   OPEN get_attr;
   FETCH get_attr INTO rec_;
   CLOSE get_attr;
   
   IF (Customer_Order_API.Get_Use_Price_Incl_Tax_Db(order_no_)  = 'TRUE') THEN
      amount_ := NVL(rec_.gross_amount_, 0);
   ELSE
      amount_ := NVL(rec_.net_amount_, 0);
   END IF;   
   
   IF (amount_ != 0) THEN
      rental_chargable_days_  := Get_Rental_Chargeable_Days(order_no_, line_no_, rel_no_, line_item_no_, rec_.rental);
      IF (rental_chargable_days_ != 0) THEN
         amount_                 := amount_ * rental_chargable_days_;
         -- gelr:disc_price_rounded, begin
         -- use  original_order_discount, original_add_discount when using Discounted Price Rounded
         IF (Customer_Order_API.Get_Discounted_Price_Rounded(order_no_)) THEN
            line_discount_amount_ := Cust_Order_Line_Discount_API.Get_Original_Total_Line_Disc (order_no_,
                                                                  line_no_,
                                                                  rel_no_,
                                                                  line_item_no_,
                                                                  rec_.buy_qty_due,
                                                                  rec_.price_conv_factor);                       
            additional_disc_amount_ := (amount_ - line_discount_amount_) * rec_.original_add_discount/100 ;
            order_discount_amount_  := (amount_ - line_discount_amount_) * rec_.original_order_discount /100;                  
         ELSE
         -- gelr:disc_price_rounded, end
            line_discount_amount_   := Cust_Order_Line_Discount_API.Get_Total_Line_Discount(order_no_, 
                                                                                            line_no_, 
                                                                                            rel_no_, 
                                                                                            line_item_no_,
                                                                                            rec_.buy_qty_due, 
                                                                                            rec_.price_conv_factor);           
            additional_disc_amount_ := (amount_ - line_discount_amount_) * rec_.additional_discount/100 ;
            order_discount_amount_  := (amount_ - line_discount_amount_) * rec_.order_discount /100;  
         -- gelr:disc_price_rounded, begin
         END IF;
         -- gelr:disc_price_rounded, end
         discount_percentage_    := (line_discount_amount_ + additional_disc_amount_ + order_discount_amount_) / amount_ * 100;
         discount_percentage_    := ROUND(discount_percentage_, 2);
      END IF;         
   END IF;
   RETURN discount_percentage_;
END Get_Total_Discount_Percentage;


FUNCTION Get_Total_Discount_Amount (
   order_no_              IN VARCHAR2,
   line_no_               IN VARCHAR2,
   rel_no_                IN VARCHAR2,
   line_item_no_          IN NUMBER,
   total_amount_          IN NUMBER ) RETURN NUMBER
IS
   rec_                    Public_Rec;
   currency_code_          VARCHAR2(3);
   rounding_               NUMBER;
   line_discount_amount_   NUMBER;
   additional_disc_amount_ NUMBER;
   order_discount_amount_  NUMBER;
   total_discount_amount_  NUMBER;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Get_Total_Discount_Amount');
   rec_           := Get(order_no_, line_no_, rel_no_, line_item_no_);      
   currency_code_ := Customer_Order_API.Get_Currency_Code(order_no_);
   rounding_      := Currency_Code_API.Get_Currency_Rounding(Site_API.Get_Company(rec_.contract), currency_code_);   
   
   line_discount_amount_   := Cust_Order_Line_Discount_API.Get_Total_Line_Discount( order_no_, 
                                                                                    line_no_, 
                                                                                    rel_no_, 
                                                                                    line_item_no_, 
                                                                                    rec_.buy_qty_due, 
                                                                                    rec_.price_conv_factor, 
                                                                                    rounding_ );
   additional_disc_amount_ := ROUND(((total_amount_ - line_discount_amount_) * rec_.additional_discount/100 ), rounding_);
   order_discount_amount_  := ROUND(((total_amount_ - line_discount_amount_) * rec_.order_discount /100), rounding_);
   total_discount_amount_  := line_discount_amount_ + additional_disc_amount_ +  order_discount_amount_;
  
   RETURN total_discount_amount_;
END Get_Total_Discount_Amount;


FUNCTION Get_Total_Discount_Incl_Tax (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   contract_               CUSTOMER_ORDER_LINE_TAB.contract%TYPE;
   currency_code_          VARCHAR2(3);
   total_gross_amount_     NUMBER;
   rounding_               NUMBER;
   rental_chargeable_days_ NUMBER;
   total_discount_amount_  NUMBER;
   rental_db_              VARCHAR2(20);
   CURSOR get_total IS
      SELECT contract, buy_qty_due * price_conv_factor * unit_price_incl_tax total_gross_amount, rental
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no     = order_no_
      AND    line_no      = line_no_
      AND    rel_no       = rel_no_
      AND    line_item_no = line_item_no_;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Get_Total_Discount_Incl_Tax');
   OPEN get_total;
   FETCH get_total INTO contract_, total_gross_amount_, rental_db_;
   CLOSE get_total;
   
   currency_code_          := Customer_Order_API.Get_Currency_Code(order_no_);
   rounding_               := Currency_Code_API.Get_Currency_Rounding(Site_API.Get_Company(contract_), currency_code_);
   rental_chargeable_days_ := Get_Rental_Chargeable_Days(order_no_, line_no_, rel_no_, line_item_no_, rental_db_);
   total_gross_amount_     := ROUND((total_gross_amount_ * rental_chargeable_days_), rounding_);
   
   total_discount_amount_  := Get_Total_Discount_Amount(order_no_, line_no_, rel_no_, line_item_no_, total_gross_amount_);      
   RETURN total_discount_amount_;
END Get_Total_Discount_Incl_Tax;


PROCEDURE Set_Ctp_Planned (
   order_no_         IN VARCHAR2,
   line_no_          IN VARCHAR2,
   rel_no_           IN VARCHAR2,
   line_item_no_     IN NUMBER )
IS
   attr_   VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Set_Ctp_Planned');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('CTP_PLANNED_DB', 'Y', attr_);
   Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);
END Set_Ctp_Planned;


PROCEDURE Clear_Ctp_Planned (
   order_no_         IN VARCHAR2,
   line_no_          IN VARCHAR2,
   rel_no_           IN VARCHAR2,
   line_item_no_     IN NUMBER )
IS
   attr_       VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Clear_Ctp_Planned');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('CTP_PLANNED_DB', 'N', attr_);
   Client_SYS.Add_To_Attr('LATEST_RELEASE_DATE', TO_DATE(NULL), attr_);
   -- adding new delivery date so we get some default dates back
   Client_SYS.Add_To_Attr('PLANNED_DELIVERY_DATE', Get_Wanted_Delivery_Date(order_no_, line_no_, rel_no_, line_item_no_), attr_);
   Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);
END Clear_Ctp_Planned;


PROCEDURE Update_Planning_Date (
   order_no_                    IN VARCHAR2,
   line_no_                     IN VARCHAR2,
   rel_no_                      IN VARCHAR2,
   line_item_no_                IN NUMBER,
   planned_due_date_            IN DATE,
   message_                     IN VARCHAR2,
   latest_release_date_         IN DATE DEFAULT NULL,
   allocate_db_                 IN VARCHAR2 DEFAULT NULL,
   ignore_wanted_delivery_date_ IN BOOLEAN DEFAULT FALSE )
IS
   text_message_                VARCHAR2(200);
   objid_                       VARCHAR2(2000);
   rowversion_                  VARCHAR2(2000);
   old_delivery_date_           DATE;
   newrec_                      CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   header_rowstate_             CUSTOMER_ORDER_TAB.rowstate%TYPE;
   text_                        VARCHAR2(200);
   wanted_delivery_date_        DATE;
   oldrec_                      CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   attr_                        VARCHAR2(100);
   ctp_run_id_                  NUMBER;   
   lowest_node_count_           NUMBER;
   lowest_node_finish_date_     DATE;
   lowest_node_part_no_         VARCHAR2(25);
   lowest_node_contract_        VARCHAR2(5);   
   lowest_node_info_            VARCHAR2(400);
   cc_info_                     VARCHAR2(3200);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Update_Planning_Date');
   newrec_                  := Lock_By_Keys___(order_no_, line_no_, rel_no_, line_item_no_);
   oldrec_                  := newrec_;
   header_rowstate_         := CUSTOMER_ORDER_API.Get_Objstate(newrec_.order_no);
   newrec_.planned_due_date := planned_due_date_;
   old_delivery_date_       := newrec_.planned_delivery_date;

   -- ignore_wanted_delivery_date_ is set to TRUE when we want to eliminate the calculation based on the wanted_delivery date
   -- This is used when calling the forward calculation for the Dist Orders created from Dist Allcoation Lines and the Dist Allocation Line's PLanned due date is changed.
   IF ignore_wanted_delivery_date_ THEN
      wanted_delivery_date_ := NULL;
   ELSE
      wanted_delivery_date_ := newrec_.target_date;
   END IF;

   -- calculate planned_delivery_date ,planned_ship_date, supply_site_due_date forwards from planned_due_date
   Calc_Dates_Forwards___(newrec_.planned_delivery_date, newrec_.planned_ship_date, newrec_.planned_due_date,
                          newrec_.supply_site_due_date, newrec_.promised_delivery_date, newrec_.planned_ship_period,
                          wanted_delivery_date_, newrec_.contract, newrec_.supply_code, newrec_.deliver_to_customer_no,
                          newrec_.vendor_no, newrec_.part_no, newrec_.purchase_part_no, newrec_.ship_addr_no, newrec_.ship_via_code,
                          newrec_.route_id, newrec_.delivery_leadtime, newrec_.picking_leadtime, newrec_.ext_transport_calendar_id, newrec_.supplier_ship_via_transit, header_rowstate_);

   -- When the wanted delviery date is ignores, it will be equal to the updated planned delivery date.
   IF  ignore_wanted_delivery_date_ THEN
      newrec_.wanted_delivery_date := newrec_.planned_delivery_date;
      newrec_.target_date          := newrec_.wanted_delivery_date;
   END IF;

   IF (newrec_.rowstate !='Cancelled') THEN
      IF (line_item_no_ <= 0 )  THEN
         IF (old_delivery_date_ != newrec_.planned_delivery_date AND latest_release_date_ IS NULL) THEN
            text_ := SUBSTR(Language_SYS.Translate_Constant(lu_name_, 'TARGETDATECHG2: The planned delivery date has been changed from :P1 to :P2',
                            NULL, TO_CHAR(old_delivery_date_, 'YYYY-MM-DD HH24.MI.SS'), to_char(newrec_.planned_delivery_date, 'YYYY-MM-DD HH24.MI.SS')), 1, 200);
            Customer_Order_Line_Hist_API.New(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, text_);
         END IF;
      END IF;
   END IF;

   -- the capability check engine have returned a date and its one of the allocate/reserve cc alternatives, set the cc planned flag
   IF (latest_release_date_ IS NOT NULL AND allocate_db_ IN ('RESERVE AND ALLOCATE','ALLOCATE ONLY')) THEN
      newrec_.latest_release_date := latest_release_date_;
      newrec_.ctp_planned         := 'Y';
   -- for the neither case set the latest_release_date and set flag to false
   ELSIF (latest_release_date_ IS NOT NULL AND allocate_db_ = 'NEITHER RESERVE NOR ALLOCATE') THEN
      newrec_.latest_release_date := latest_release_date_;
      newrec_.ctp_planned         := 'N';
   END IF;

   IF (old_delivery_date_ != newrec_.planned_delivery_date AND newrec_.latest_release_date IS NOT NULL) THEN
      $IF (Component_Ordstr_SYS.INSTALLED) $THEN
         IF (App_Context_SYS.Find_Number_Value('CTP_RUN_ID') IS NOT NULL) THEN
            ctp_run_id_ := App_Context_SYS.Get_Number_Value('CTP_RUN_ID');
         END IF;
         IF (ctp_run_id_ > 0) THEN
            Interim_Ctp_Critical_Path_API.Update_Is_Deliverable(ctp_run_id_, Fnd_Boolean_API.DB_FALSE);
            Interim_Ctp_Critical_Path_API.Get_Lowest_Node_Details(lowest_node_part_no_, lowest_node_contract_, lowest_node_finish_date_, lowest_node_count_, ctp_run_id_);
            
            IF (lowest_node_count_ > 1) THEN
               lowest_node_info_ := Language_SYS.Translate_Constant(lu_name_,'SEVLOWESTNODE: Several parts exist as lower nodes in the critical path. Would you like to analyze the capability check result?');
            ELSIF (lowest_node_count_ = 1) THEN
               lowest_node_info_ := Language_SYS.Translate_Constant(lu_name_,'LOWESTNODEXIST: Would you like to analyze the capability check result?', NULL,lowest_node_part_no_, lowest_node_contract_, to_char(lowest_node_finish_date_, 'YYYY-MM-DD'));
            END IF;
         END IF;
      $END
      cc_info_ := Language_SYS.Translate_Constant(lu_name_, 'MCCDELDATECHANGED: The planned delivery date will be changed from :P1 to :P2.', NULL,
                           to_char(old_delivery_date_, 'YYYY-MM-DD'), to_char(newrec_.planned_delivery_date, 'YYYY-MM-DD'));
      Client_SYS.Add_Info(lu_name_, cc_info_ ||' '|| lowest_node_info_);
      text_message_ := SUBSTR(Language_SYS.Translate_Constant(lu_name_, 'DATESCHANGEDBYMCC: Ran Capability Check. Planned Del Date changed from :P1 to :P2.',NULL,
                                       to_char(old_delivery_date_, 'YYYY-MM-DD'),
                                       to_char(newrec_.planned_delivery_date, 'YYYY-MM-DD')), 1, 200);
      Customer_Order_Line_Hist_API.New(order_no_, line_no_, rel_no_, line_item_no_, text_message_);      
   ELSIF (newrec_.latest_release_date IS NOT NULL) THEN
      Client_SYS.Add_Info(lu_name_, 'MCCDELDATENOCHANGE: The delivery date can be fulfilled as planned.');
      $IF (Component_Ordstr_SYS.INSTALLED) $THEN
         IF (App_Context_SYS.Find_Number_Value('CTP_RUN_ID') IS NOT NULL) THEN
            ctp_run_id_ := App_Context_SYS.Get_Number_Value('CTP_RUN_ID');
         END IF;
         IF (ctp_run_id_ > 0) THEN
            Interim_Ctp_Critical_Path_API.Update_Is_Deliverable(ctp_run_id_, Fnd_Boolean_API.DB_TRUE);
         END IF;
      $END
   END IF;

   Get_Id_Version_By_Keys___(objid_, rowversion_, order_no_, line_no_, rel_no_, line_item_no_);
   newrec_.rowversion := sysdate;
   IF (NOT (newrec_.planned_delivery_date = old_delivery_date_)) THEN
      Cust_Ord_Date_Calculation_API.Check_Date_On_Cust_Calendar_(newrec_.customer_no, newrec_.cust_calendar_id,
                                               newrec_.planned_delivery_date, 'PLANNED');
   END IF;

   IF (message_ = 'Shop Order Schedule Changed') THEN
      Client_SYS.Add_To_Attr('SERVER_DATA_CHANGE', 1, attr_);
      Update_License_Connect_Head__(newrec_, oldrec_, attr_);
   END IF;

   Update_Line___(objid_, newrec_);

   IF (NOT (newrec_.planned_delivery_date = old_delivery_date_)) THEN
      IF (header_rowstate_ != 'Planned') THEN
         Cust_Order_Event_Creation_API.Delivery_Date_Or_Qty_Changed(oldrec_.order_no, oldrec_.line_no, oldrec_.rel_no, oldrec_.line_item_no,
                                                                 oldrec_.planned_delivery_date, oldrec_.revised_qty_due,
                                                                 newrec_.planned_delivery_date, newrec_.revised_qty_due,
                                                                 newrec_.supply_code, newrec_.qty_on_order, newrec_.part_no);  
      END IF;
   END IF;

   -- package handling
   IF (line_item_no_ > 0) THEN
      Update_Package_Dates(order_no_, line_no_, rel_no_);
   END IF;

   IF (message_ IS NOT NULL) THEN
      text_message_ := SUBSTR(message_, 1, 200);
      Customer_Order_Line_Hist_API.New( order_no_, line_no_, rel_no_, line_item_no_, text_message_);
   END IF;
END Update_Planning_Date;


PROCEDURE Update_Package_Dates (
   order_no_            IN VARCHAR2,
   line_no_             IN VARCHAR2,
   rel_no_              IN VARCHAR2 )
IS
   max_planned_delivery_date_ DATE;
   newrec_                    CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   oldrec_                    CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   objid_                     VARCHAR2(2000);
   rowversion_                VARCHAR2(2000);

   CURSOR get_max_del_date IS
      SELECT planned_delivery_date
      FROM  CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no > 0
      ORDER BY planned_delivery_date DESC;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Update_Package_Dates');
   newrec_ := Get_Object_By_Keys___(order_no_, line_no_, rel_no_, -1);
   oldrec_ := newrec_;

   OPEN  get_max_del_date;
   FETCH get_max_del_date INTO max_planned_delivery_date_;
   CLOSE get_max_del_date;

   newrec_.planned_delivery_date := max_planned_delivery_date_;

   IF (max_planned_delivery_date_ < newrec_.target_date) THEN
      newrec_.target_date := max_planned_delivery_date_;
   END IF;

   Get_Id_Version_By_Keys___(objid_, rowversion_, order_no_, line_no_, rel_no_, -1);
   Calculate_Order_Line_Dates___(newrec_, oldrec_, objid_);
   Update_Line___(objid_, newrec_);
END Update_Package_Dates;


PROCEDURE Set_Job_Id (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   job_id_       IN VARCHAR2 )
IS
   attr_          VARCHAR2(32000);
   activity_seq_  NUMBER := 0;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Set_Job_Id');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Set_Item_Value('JOB_ID', job_id_, attr_);
   Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);
   Set_Job_Pre_Posting___(order_no_, line_no_, rel_no_, line_item_no_, job_id_, activity_seq_);
END Set_Job_Id;


FUNCTION Check_Order_Line_For_Planning (
   contract_ IN VARCHAR2,
   part_no_  IN VARCHAR2 ) RETURN BOOLEAN
IS
   temp_ CUSTOMER_ORDER_LINE_TAB.line_item_no%TYPE;
   CURSOR get_line_no IS
      SELECT line_item_no
      FROM CUSTOMER_ORDER_LINE_TAB
      WHERE part_no = part_no_
      AND  contract = contract_
      AND  rowstate IN ('Released', 'Reserved', 'Picked', 'PartiallyDelivered');
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Check_Order_Line_For_Planning');
   OPEN get_line_no;
    FETCH get_line_no INTO temp_;
    IF (get_line_no%FOUND) THEN
       CLOSE get_line_no;
       RETURN TRUE;
    END IF;
    CLOSE get_line_no;
    RETURN FALSE;
END Check_Order_Line_For_Planning;


FUNCTION Is_Pre_Posting_Mandatory (
   company_  IN VARCHAR2,
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   code_a_flag_        NUMBER;
   code_b_flag_        NUMBER;
   code_c_flag_        NUMBER;
   code_d_flag_        NUMBER;
   code_e_flag_        NUMBER;
   code_f_flag_        NUMBER;
   code_g_flag_        NUMBER;
   code_h_flag_        NUMBER;
   code_i_flag_        NUMBER;
   code_j_flag_        NUMBER;
   pre_accounting_id_  NUMBER;
   pre_accounting_rec_ PRE_ACCOUNTING_API.Public_Rec;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Is_Pre_Posting_Mandatory');
   pre_accounting_id_ := CUSTOMER_ORDER_API.Get_Pre_Accounting_Id(order_no_);
   Trace_SYS.Field('pre_accounting_id_', pre_accounting_id_);
   Trace_SYS.Field('order_no_', order_no_);

   pre_accounting_rec_ := PRE_ACCOUNTING_API.get(pre_accounting_id_);

   Accounting_Codestr_API.Execute_Accounting(code_a_flag_,
                                             code_b_flag_,
                                             code_c_flag_,
                                             code_d_flag_,
                                             code_e_flag_,
                                             code_f_flag_,
                                             code_g_flag_,
                                             code_h_flag_,
                                             code_i_flag_,
                                             code_j_flag_,
                                             NULL,
                                             company_,
                                             'M104',
                                             'C58');

   IF (code_a_flag_ = 1) AND (pre_accounting_rec_.account_no  IS NULL) OR
      (code_b_flag_ = 1) AND (pre_accounting_rec_.codeno_b    IS NULL) OR
      (code_c_flag_ = 1) AND (pre_accounting_rec_.codeno_c    IS NULL) OR
      (code_d_flag_ = 1) AND (pre_accounting_rec_.codeno_d    IS NULL) OR
      (code_e_flag_ = 1) AND (pre_accounting_rec_.codeno_e    IS NULL) OR
      (code_f_flag_ = 1) AND (pre_accounting_rec_.codeno_f    IS NULL) OR
      (code_g_flag_ = 1) AND (pre_accounting_rec_.codeno_g    IS NULL) OR
      (code_h_flag_ = 1) AND (pre_accounting_rec_.codeno_h    IS NULL) OR
      (code_i_flag_ = 1) AND (pre_accounting_rec_.codeno_i    IS NULL) OR
      (code_j_flag_ = 1) AND (pre_accounting_rec_.codeno_j    IS NULL) THEN
      RETURN 1;
   ELSE
      RETURN 0;
   END IF;
END Is_Pre_Posting_Mandatory;


PROCEDURE New_Cust_Sched (
   info_ OUT    VARCHAR2,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   order_no_        CUSTOMER_ORDER_LINE_TAB.order_no%TYPE;
   header_rowstate_ CUSTOMER_ORDER_TAB.rowstate%TYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'New_Cust_Sched');
   Client_SYS.Clear_Info;
   -- New order lines not allowed when the order is in state 'Cancelled'
   -- when creating new lines from Cust_Sched. Check New_Order_Lines_Allowed
   -- in method New does not cover this.

   order_no_        := Client_SYS.Get_Item_Value('ORDER_NO', attr_);
   header_rowstate_ := CUSTOMER_ORDER_API.Get_Objstate(order_no_);
   IF header_rowstate_ = 'Cancelled' THEN
      Error_SYS.Record_General(lu_name_, 'CANCELORD: Order lines cannot be added if the order is Cancelled.');
   END IF;
   New(info_, attr_);
END New_Cust_Sched;


FUNCTION Shop_Ord_Req_Exist (
   contract_ IN VARCHAR2,
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   CURSOR get_order_data IS
      SELECT part_no,supply_code,planned_due_date
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  ORDER_NO = order_no_
      AND    CONTRACT = contract_;

   ret_   VARCHAR2(20) := NULL;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Shop_Ord_Req_Exist');
   FOR order_lines_ IN get_order_data LOOP
      IF (order_lines_.supply_code = 'SO') THEN
         $IF (Component_Shpord_SYS.INSTALLED)$THEN
            ret_ := Shop_Order_Prop_API.Get_Shop_Ord_Req(contract_, order_lines_.part_no, order_lines_.planned_due_date);

            Trace_SYS.Field('............ret_', ret_);

            IF (ret_ IS NOT NULL) THEN
               RETURN ret_;
            END IF;
         $ELSE
            NULL;
         $END
      END IF;
   END LOOP;
   RETURN ret_;
END Shop_Ord_Req_Exist;


--@IgnoreMissingSysinit
FUNCTION Get_Interim_Order_No (
   order_no_       IN VARCHAR2,
   line_no_        IN VARCHAR2,
   rel_no_         IN VARCHAR2,
   line_item_no_   IN NUMBER,
   ctp_planned_db_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   dop_id_               VARCHAR2(12);
   interim_ord_id_       VARCHAR2(12);
   order_usage_          VARCHAR2(20);
   temp_order_no_        CUSTOMER_ORDER_LINE_TAB.order_no%TYPE;
   temp_line_no_         CUSTOMER_ORDER_LINE_TAB.line_no%TYPE;
   temp_rel_no_          CUSTOMER_ORDER_LINE_TAB.rel_no%TYPE;
   temp_line_item_no_    CUSTOMER_ORDER_LINE_TAB.line_item_no%TYPE;
BEGIN
   $IF (Component_Dop_SYS.INSTALLED) $THEN
      dop_id_ := Dop_Demand_Cust_Ord_API.Get_Dop_Id_For_Cust_Ord_Line(order_no_, line_no_, rel_no_, line_item_no_);
   $END
   IF (dop_id_ IS NOT NULL) THEN
      order_usage_ :='DOPHEAD';
      temp_order_no_:= to_char(dop_id_);
      temp_line_no_:= '*';
      temp_rel_no_:='*';
      temp_line_item_no_:= 0;
   ELSE
      order_usage_:='CUSTOMERORDER';
      temp_order_no_:=order_no_;
      temp_line_no_:=line_no_;
      temp_rel_no_:=rel_no_;
      temp_line_item_no_:=line_item_no_;
   END IF;

   $IF (Component_Ordstr_SYS.INSTALLED)$THEN
      IF (NVL(ctp_planned_db_, 'N') = 'N') THEN
         Interim_ord_id_ := Interim_Demand_Head_API.Get_Int_Head_By_Usage(order_usage_, temp_order_no_, temp_line_no_, temp_rel_no_, temp_line_item_no_);
      ELSIF (NVL(ctp_planned_db_, 'N') = 'Y')THEN
         Interim_ord_id_ := Interim_Ctp_Manager_API.Get_Top_Int_Head_By_Usage(order_usage_, temp_order_no_, temp_line_no_, temp_rel_no_, temp_line_item_no_);
      END IF;
   $END
   RETURN Interim_ord_id_;
END Get_Interim_Order_No;


PROCEDURE Check_Line_Total_Discount_Pct (
   order_no_            IN VARCHAR2,
   additional_discount_ IN NUMBER )
IS
   CURSOR get_lines IS
      SELECT line_no, rel_no, line_item_no, order_discount
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    line_item_no <= 0
      AND    rowstate NOT IN ('Cancelled', 'Closed');

    total_order_discount_  NUMBER := 0;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Check_Line_Total_Discount_Pct');
   FOR next_line_ IN get_lines LOOP
      total_order_discount_ := next_line_.order_discount + additional_discount_;
      IF total_order_discount_ > 100 THEN
         Error_SYS.Record_General(lu_name_, 'LINEDISCOUNTEXCEED: Total Order Discount should not exceed 100% in line (Line No :P1, Del No :P2)', next_line_.line_no,next_line_.rel_no );
      END IF;
      total_order_discount_ := 0;
    END LOOP;
END Check_Line_Total_Discount_Pct;


PROCEDURE Modify_Tax_Code (
   attr_         IN OUT NOCOPY VARCHAR2,
   order_no_     IN     VARCHAR2,
   line_no_      IN     VARCHAR2,
   rel_no_       IN     VARCHAR2,
   line_item_no_ IN     NUMBER )
IS
   objid_            VARCHAR2(2000);
   objversion_       VARCHAR2(2000);
   oldrec_           CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   newrec_           CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   tax_code_         CUSTOMER_ORDER_LINE_TAB.tax_code%TYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Tax_Code');
   Get_Id_Version_By_Keys___(objid_, objversion_, order_no_, line_no_, rel_no_, line_item_no_);
   oldrec_ := Lock_By_Id___(objid_, objversion_);
   newrec_ := oldrec_;
   tax_code_ := Client_Sys.Get_Item_Value('TAX_CODE', attr_);
   Client_SYS.Add_To_Attr('TAX_CODE_CHANGED', 'TRUE', attr_);
   newrec_.tax_code := tax_code_;
   Update___(objid_, oldrec_, newrec_, attr_, objversion_);
END Modify_Tax_Code;


PROCEDURE Modify_Tax_Class_Id (
   attr_         IN OUT NOCOPY VARCHAR2,
   order_no_     IN     VARCHAR2,
   line_no_      IN     VARCHAR2,
   rel_no_       IN     VARCHAR2,
   line_item_no_ IN     NUMBER )
IS
   objid_            VARCHAR2(2000);
   objversion_       VARCHAR2(2000);
   oldrec_           CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   newrec_           CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Tax_Class_Id');
   Get_Id_Version_By_Keys___(objid_, objversion_, order_no_, line_no_, rel_no_, line_item_no_);
   oldrec_ := Lock_By_Id___(objid_, objversion_);
   newrec_ := oldrec_;
   newrec_.tax_class_id := Client_Sys.Get_Item_Value('TAX_CLASS_ID', attr_);
   Update___(objid_, oldrec_, newrec_, attr_, objversion_);
END Modify_Tax_Class_Id;


PROCEDURE Modify_Tax_Details_For_IPD(
   order_no_     IN     VARCHAR2,
   line_no_      IN     VARCHAR2,
   rel_no_       IN     VARCHAR2,
   line_item_no_ IN     NUMBER )
IS
   attr_             VARCHAR2(2000);
   newrec_           CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   oldrec_           CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   objid_            VARCHAR2(2000);
   objversion_       VARCHAR2(2000);
   order_rec_  Customer_Order_API.Public_Rec;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Tax_Details_For_IPD');
   Get_Id_Version_By_Keys___(objid_, objversion_, order_no_, line_no_, rel_no_, line_item_no_);
   oldrec_ := Lock_By_Id___(objid_, objversion_);
   newrec_ := oldrec_;
   
   IF (newrec_.demand_code = 'IPD' AND Get_Ship_Addr_No( newrec_.order_No, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no) != newrec_.ship_addr_no) THEN
      Client_SYS.Add_Info(lu_name_, 'NOTAXUPDATE: The tax information will not be updated automatically. Consider reviewing the information.');
   END IF;
   order_rec_ := Customer_Order_API.Get(newrec_.order_no);
   Add_Transaction_Tax_Info___ ( newrec_,  
                                 Site_API.Get_Company(newrec_.contract),                                      
                                 order_rec_.customer_no,
                                 order_rec_.ship_addr_no,                                      
                                 order_rec_.supply_country,                                        
                                 order_rec_.use_price_incl_tax,
                                 order_rec_.currency_code,                                       
                                 TRUE,                                      
                                 attr_  => NULL);
   IF (NVL(oldrec_.tax_code, Database_SYS.string_null_) != NVL(newrec_.tax_code, Database_SYS.string_null_) OR NVL(oldrec_.tax_class_id, Database_SYS.string_null_) != NVL(newrec_.tax_class_id, Database_SYS.string_null_)) THEN
       client_SYS.Add_To_Attr('TAX_CODE', newrec_.tax_code, attr_);
       client_SYS.Add_To_Attr('TAX_CLASS_ID', newrec_.tax_class_id, attr_);
       Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);
   END IF;
END Modify_Tax_Details_For_IPD;


--@IgnoreMissingSysinit
FUNCTION Get_Owner_For_Part_Ownership (
   order_no_       IN VARCHAR2,
   line_no_        IN VARCHAR2,
   rel_no_         IN VARCHAR2,
   line_item_no_   IN NUMBER,
   part_ownership_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   customer_no_    CUSTOMER_ORDER_LINE_TAB.customer_no%TYPE;
   vendor_no_      CUSTOMER_ORDER_LINE_TAB.vendor_no%TYPE;
BEGIN
   IF (part_ownership_ IN (Part_Ownership_API.DB_COMPANY_OWNED, Part_Ownership_API.DB_COMPANY_RENTAL_ASSET)) THEN
      RETURN NULL;
   ELSIF (part_ownership_ = Part_Ownership_API.DB_CUSTOMER_OWNED) THEN
      RETURN Get_Owning_Customer_No(order_no_, line_no_, rel_no_, line_item_no_);
   ELSIF (part_ownership_ = Part_Ownership_API.DB_SUPPLIER_LOANED) THEN
      $IF (Component_Purch_SYS.INSTALLED)$THEN
         customer_no_ := CUSTOMER_ORDER_API.Get_Customer_No(order_no_);
         vendor_no_   := Supplier_API.Get_Cust_Vendor_No(customer_no_);
         RETURN vendor_no_;
      $ELSE
         RETURN NULL;
      $END
   ELSE
      RETURN NULL;
   END IF;
END Get_Owner_For_Part_Ownership;


FUNCTION Get_Next_Rel_No (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   line_item_no_ IN NUMBER,
   contract_     IN VARCHAR2 ) RETURN VARCHAR2
IS
   CURSOR get_rel_no IS
      SELECT to_char(max(to_number(rel_no)))
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    line_no = line_no_
      AND    contract || '' = contract_
      AND    line_item_no <= 0;

   CURSOR count_rel_no IS
      SELECT count(DISTINCT(to_number(rel_no)))
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    line_no = line_no_
      AND    contract || '' = contract_;

   rel_          VARCHAR2(4);
   rel_no_count_ NUMBER;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Get_Next_Rel_No');
   IF (line_no_ IS NOT NULL) THEN
      OPEN get_rel_no;
      FETCH get_rel_no INTO rel_;
      CLOSE get_rel_no;
      IF (rel_ IS NOT NULL) THEN
         IF (to_number(rel_) + 1 > 9999) THEN
            OPEN count_rel_no;
            FETCH count_rel_no INTO rel_no_count_;
            CLOSE count_rel_no;

            IF (rel_no_count_ < 9999) THEN
               Error_Sys.Record_General(lu_name_,'RELNOMAX: The maximum limit of the delivery number has been reached. Enter a value less than 9999 in the Del No field manually.');
            ELSE
               Error_Sys.Record_General(lu_name_,'NOMORERELNO: The maximum limit of the delivery number has been reached.');
            END IF;
         END IF;
         rel_ := to_char(to_number(rel_) + 1);
         RETURN rel_;
      ELSE
         rel_ := '1';
         RETURN rel_;
      END IF;
   END IF;
   RETURN rel_;
END Get_Next_Rel_No;


PROCEDURE Modify_Staged_Billing (
   order_no_       IN VARCHAR2,
   line_no_        IN VARCHAR2,
   rel_no_         IN VARCHAR2,
   line_item_no_   IN NUMBER,
   staged_billing_ IN VARCHAR2 )
IS
   attr_           VARCHAR2(2000);
   qty_to_invoice_ NUMBER;
   ordrec_         CUSTOMER_ORDER_API.Public_Rec;
   company_        VARCHAR2(20);

   co_line_rec_    Public_Rec;

   CURSOR get_qty_to_invoiced IS
      SELECT qty_shipped, qty_invoiced, deliv_no, line_item_no, date_delivered, cost
      FROM   customer_order_delivery_tab
      WHERE  order_no = order_no_
      AND    line_no = line_no_
      AND    rel_no = rel_no_
      AND    cancelled_delivery = 'FALSE';
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Staged_Billing');
   co_line_rec_ := Get(order_no_, line_no_, rel_no_, line_item_no_);

   IF (staged_billing_ = 'STAGED BILLING') THEN
      IF (co_line_rec_.consignment_stock = 'CONSIGNMENT STOCK') THEN
         Error_SYS.Record_General(lu_name_, 'STAGE_BILL_CON_STOCK: Staged Billing cannot be used together with Customer Consignment Stock.');
      END IF;

      IF Get_Objstate(order_no_, line_no_, rel_no_, line_item_no_) IN ('PartiallyDelivered','Delivered') THEN
         Error_SYS.Record_General(lu_name_, 'ORD_DELIV: Cannot add new profile once the order line is Partially Delivered or Delivered.');
      END IF;
      IF (co_line_rec_.rental = Fnd_Boolean_API.DB_TRUE) THEN
         Error_SYS.Record_General(lu_name_, 'NOSTBILLFORRENTAL: Staged billing is not allowed for rental customer order lines.');
      END IF;
   END IF;

   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('STAGED_BILLING_DB', staged_billing_, attr_);
   Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);

   IF (staged_billing_ = 'NOT STAGED BILLING') THEN
      ordrec_ := CUSTOMER_ORDER_API.Get(order_no_);
      company_ := Site_API.Get_Company(ordrec_.contract);

      -- fetch all deliveries for the order line (incl. package components)
      FOR delivrec_ IN get_qty_to_invoiced LOOP
         qty_to_invoice_ := delivrec_.qty_shipped / co_line_rec_.conv_factor * co_line_rec_.inverted_conv_factor;

         Customer_Order_Delivery_API.Modify_Qty_To_Invoice(delivrec_.deliv_no, qty_to_invoice_);

         -- IF COGS is NOT posted at delivery confirmation (or Delivery confirmation is not used at all),
         -- a record in Outstanding Sales has to be created - but only if quantity > 0.
         -- Package components should not create outstanding sales records.
         IF (delivrec_.line_item_no <= 0) AND (qty_to_invoice_ > 0) THEN
            IF (ordrec_.delay_cogs_to_deliv_conf = 'FALSE') THEN
               Client_SYS.Clear_Attr(attr_);
               Client_SYS.Add_To_Attr('DELIV_NO', delivrec_.deliv_no, attr_);
               Client_SYS.Add_To_Attr('CONTRACT', ordrec_.contract, attr_);
               Client_SYS.Add_To_Attr('COMPANY', company_, attr_);
               Client_SYS.Add_To_Attr('QTY_EXPECTED', qty_to_invoice_, attr_);
               Client_SYS.Add_To_Attr('QTY_SHIPPED', delivrec_.qty_shipped, attr_);
               Client_SYS.Add_To_Attr('COST', delivrec_.cost, attr_);
               -- use the date when the delivery record was created (otherwise default sysdate)
               Client_SYS.Add_To_Attr('DATE_COGS_POSTED', delivrec_.date_delivered, attr_);
               Outstanding_Sales_API.New(attr_);
            END IF;
         END IF;

      END LOOP;
   END IF;
END Modify_Staged_Billing;


PROCEDURE Copy_Customer_Order_Line (
   new_attr_values_ IN OUT NOCOPY VARCHAR2,
   order_no_        IN     VARCHAR2,
   line_no_         IN     VARCHAR2,
   rel_no_          IN     VARCHAR2,
   line_item_no_    IN     NUMBER )
IS
   -- Public get not used since some of the private variables may be needed.
   CURSOR order_line IS
      SELECT *
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
        AND  line_no = line_no_
        AND  rel_no = rel_no_
        AND  line_item_no = line_item_no_;

   order_line_rec_  CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   order_objstate_  VARCHAR2(20);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Copy_Customer_Order_Line');
   OPEN order_line;
   FETCH order_line INTO order_line_rec_;
   CLOSE order_line;
   
   Client_SYS.Add_To_Attr('ORIGINATING_REL_NO', order_line_rec_.rel_no, new_attr_values_);
   Client_SYS.Add_To_Attr('ORIGINATING_LINE_ITEM_NO', order_line_rec_.line_item_no, new_attr_values_);
   
   Client_SYS.Add_To_Attr('CATALOG_NO', order_line_rec_.catalog_no, new_attr_values_);
   Client_SYS.Add_To_Attr('CATALOG_DESC', order_line_rec_.catalog_desc, new_attr_values_);
   Client_SYS.Add_To_Attr('DISCOUNT', order_line_rec_.discount, new_attr_values_);
   Client_SYS.Add_To_Attr('NOTE_TEXT', order_line_rec_.note_text, new_attr_values_);
   Client_SYS.Add_To_Attr('ORDER_DISCOUNT', order_line_rec_.order_discount, new_attr_values_);
   Client_SYS.Add_To_Attr('SALE_UNIT_PRICE', order_line_rec_.sale_unit_price, new_attr_values_);
   Client_SYS.Add_To_Attr('UNIT_PRICE_INCL_TAX', order_line_rec_.unit_price_incl_tax, new_attr_values_);
   Client_SYS.Add_To_Attr('DELIVERY_TYPE', order_line_rec_.delivery_type, new_attr_values_);
   Client_SYS.Add_To_Attr('TAX_CODE', order_line_rec_.tax_code, new_attr_values_);
   Client_SYS.Add_To_Attr('TAX_CLASS_ID', order_line_rec_.tax_class_id, new_attr_values_);

   Client_SYS.Add_To_Attr('CONSIGNMENT_STOCK_DB', order_line_rec_.consignment_stock, new_attr_values_);
   Client_SYS.Add_To_Attr('CLOSE_TOLERANCE', order_line_rec_.close_tolerance, new_attr_values_);
   Client_SYS.Add_To_Attr('PRICE_LIST_NO', order_line_rec_.price_list_no, new_attr_values_);
   Client_SYS.Add_To_Attr('CHARGED_ITEM_DB', order_line_rec_.charged_item, new_attr_values_);
   Client_SYS.Add_To_Attr('DOP_CONNECTION_DB', order_line_rec_.dop_connection, new_attr_values_);
   Client_SYS.Add_To_Attr('CREATE_SM_OBJECT_OPTION_DB', order_line_rec_.create_sm_object_option, new_attr_values_);
   Client_SYS.Add_To_Attr('DEFAULT_ADDR_FLAG', Gen_Yes_No_API.Decode(order_line_rec_.default_addr_flag), new_attr_values_);
   Client_SYS.Add_To_Attr('DEFAULT_ADDR_FLAG_DB', order_line_rec_.default_addr_flag, new_attr_values_);
   Client_SYS.Add_To_Attr('ADDR_FLAG_DB', order_line_rec_.addr_flag, new_attr_values_);
   Client_SYS.Add_To_Attr('SHIP_ADDR_NO', order_line_rec_.ship_addr_no, new_attr_values_);
   Client_SYS.Add_To_Attr('CONTACT', order_line_rec_.contact, new_attr_values_);
   Client_SYS.Add_To_Attr('ROUTE_ID', order_line_rec_.route_id, new_attr_values_);
   Client_SYS.Add_To_Attr('FORWARD_AGENT_ID', order_line_rec_.forward_agent_id, new_attr_values_);

   Client_SYS.Add_To_Attr('DELIVERY_TERMS', order_line_rec_.delivery_terms, new_attr_values_);
   Client_SYS.Add_To_Attr('DEL_TERMS_LOCATION', order_line_rec_.del_terms_location, new_attr_values_);
   Client_SYS.Add_To_Attr('DISTRICT_CODE', order_line_rec_.district_code, new_attr_values_);
   Client_SYS.Add_To_Attr('REGION_CODE', order_line_rec_.region_code, new_attr_values_);
   Client_SYS.Add_To_Attr('STAGED_BILLING_DB', order_line_rec_.staged_billing, new_attr_values_);
   Client_SYS.Add_To_Attr('TAX_LIABILITY', order_line_rec_.tax_liability, new_attr_values_);
   Client_SYS.Add_To_Attr('ORIGINAL_PART_NO', order_line_rec_.original_part_no, new_attr_values_);
   Client_SYS.Add_To_Attr('EQUIPMENT_OBJECT_SEQ', order_line_rec_.equipment_object_seq, new_attr_values_);
   Client_SYS.Add_To_Attr('SUP_SM_CONTRACT', order_line_rec_.sup_sm_contract, new_attr_values_);
   Client_SYS.Add_To_Attr('SUP_SM_OBJECT', order_line_rec_.sup_sm_object, new_attr_values_);
   Client_SYS.Add_To_Attr('SM_CONNECTION_DB', order_line_rec_.sm_connection, new_attr_values_);
   Client_SYS.Add_To_Attr('PRICE_FREEZE_DB', order_line_rec_.price_freeze, new_attr_values_);
   Client_SYS.Add_To_Attr('DOCK_CODE', order_line_rec_.dock_code, new_attr_values_);
   Client_SYS.Add_To_Attr('SUB_DOCK_CODE', order_line_rec_.sub_dock_code, new_attr_values_);
   Client_SYS.Add_To_Attr('REF_ID', order_line_rec_.ref_id, new_attr_values_);
   Client_SYS.Add_To_Attr('LOCATION_NO', order_line_rec_.location_no, new_attr_values_);
   Client_SYS.Add_To_Attr('CONFIGURATION_ID', order_line_rec_.configuration_id, new_attr_values_);
   Client_SYS.Add_To_Attr('PRICE_EFFECTIVITY_DATE', order_line_rec_.price_effectivity_date, new_attr_values_);
   Client_SYS.Add_To_Attr('INTRASTAT_EXEMPT_DB', order_line_rec_.intrastat_exempt, new_attr_values_);
   Client_SYS.Add_To_Attr('ADDITIONAL_DISCOUNT', order_line_rec_.additional_discount, new_attr_values_);
   Client_SYS.Add_To_Attr('CONDITION_CODE', order_line_rec_.condition_code, new_attr_values_);
   Client_SYS.Add_To_Attr('PART_OWNERSHIP_DB', order_line_rec_.part_ownership, new_attr_values_);
   Client_SYS.Add_To_Attr('PART_OWNERSHIP', Part_Ownership_API.Decode(order_line_rec_.part_ownership), new_attr_values_);
   Client_SYS.Add_To_Attr('DELIVER_TO_CUSTOMER_NO', order_line_rec_.deliver_to_customer_no, new_attr_values_);
   Client_SYS.Add_To_Attr('TAX_ID_NO', order_line_rec_.tax_id_no, new_attr_values_);
   Client_SYS.Add_To_Attr('TAX_ID_VALIDATED_DATE', order_line_rec_.tax_id_validated_date, new_attr_values_);
   Client_SYS.Add_To_Attr('ABNORMAL_DEMAND_DB', order_line_rec_.abnormal_demand, new_attr_values_);
   Client_SYS.Add_To_Attr('REL_MTRL_PLANNING', order_line_rec_.rel_mtrl_planning, new_attr_values_);
   Client_SYS.Add_To_Attr('RENTAL_DB', order_line_rec_.rental, new_attr_values_);
   Client_SYS.Add_To_Attr('COUNTRY_CODE', order_line_rec_.country_code, new_attr_values_);
   Client_SYS.Add_To_Attr('TAX_LIABILITY_TYPE_DB', order_line_rec_.tax_liability_type, new_attr_values_);
   -- IF the customer order has been released the promised delivery date should also be copied
   order_objstate_ := CUSTOMER_ORDER_API.Get_Objstate(order_no_);
   IF (order_objstate_ != 'Planned') THEN
      Client_SYS.Add_To_Attr('PROMISED_DELIVERY_DATE', order_line_rec_.promised_delivery_date, new_attr_values_);
   END IF;
   -- Note: Add the rental information to the attr_
   IF (order_line_rec_.rental = Fnd_Boolean_API.DB_TRUE) THEN
      Add_Rental_Info_To_Attr___ (new_attr_values_,
                                  order_no_,
                                  line_no_,
                                  rel_no_,
                                  line_item_no_);
   END IF;
   Client_SYS.Add_To_Attr('FREE_OF_CHARGE_DB', order_line_rec_.free_of_charge, new_attr_values_);
   Client_SYS.Add_To_Attr('FREE_OF_CHARGE_TAX_BASIS', order_line_rec_.free_of_charge_tax_basis, new_attr_values_);
END Copy_Customer_Order_Line;


PROCEDURE Copy_Customer_Order_Line (
   from_order_no_               IN     VARCHAR2,
   to_order_no_                 IN     VARCHAR2,
   copy_order_lines_            IN     VARCHAR2,
   copy_rental_order_lines_     IN     VARCHAR2,   
   copy_charges_                IN     VARCHAR2,
   copy_order_adresses_         IN     VARCHAR2,
   copy_delivery_info_          IN     VARCHAR2,
   copy_misc_order_info_        IN     VARCHAR2,  
   copy_tax_detail_             IN     VARCHAR2,   
   copy_pricing_                IN     VARCHAR2,
   copy_document_texts_         IN     VARCHAR2,
   copy_notes_                  IN     VARCHAR2,
   copy_pre_accounting_         IN     VARCHAR2)
IS
   -- component lines in the proper order.
   CURSOR get_order_line IS
      SELECT *
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = from_order_no_
      AND    (demand_code NOT IN ('PO', 'DO', 'CRE', 'CRO', 'WO', 'IPD', 'IPT') OR demand_code IS NULL)
      AND    supply_code NOT IN ('MRO')
      AND    ((rental = 'FALSE' AND (NVL(copy_order_lines_, 'FALSE') = 'TRUE')) OR
              (rental = 'TRUE' AND (NVL(copy_rental_order_lines_, 'FALSE') = 'TRUE')))
      ORDER BY order_no, line_no, rel_no, line_item_no;
 
   CURSOR get_old_discount_line(order_no_ IN VARCHAR2, line_no_ IN VARCHAR2, rel_no_ IN VARCHAR2, line_item_no_ IN NUMBER) IS
      SELECT *
      FROM cust_order_line_discount_tab
      WHERE order_no = order_no_
      AND  line_no = line_no_
      AND  rel_no  = rel_no_
      AND  line_item_no = line_item_no_;

   from_order_rec_                Customer_Order_API.Public_Rec;
   to_order_rec_                  Customer_Order_API.Public_Rec;  
   newrec_                        CUSTOMER_ORDER_LINE_TAB%ROWTYPE; 
   indrec_                        Indicator_Rec;
   objid_                         VARCHAR2(20);
   objversion_                    VARCHAR2(100);   
   attr_                          VARCHAR2(32000);
   new_attr_                      VARCHAR2(32000);
   true_                          VARCHAR2(5) := Fnd_Boolean_API.DB_TRUE;
   false_                         VARCHAR2(5) := Fnd_Boolean_API.DB_FALSE;   
   same_customer_                 BOOLEAN := TRUE;
   copy_address_                  BOOLEAN := FALSE;
   copy_delivery_information_     BOOLEAN := FALSE;
   copy_misc_order_information_   BOOLEAN := FALSE;
   copy_tax_information_          BOOLEAN := FALSE;
   copy_pricing_information_      BOOLEAN := FALSE;
   copy_original_pre_accounting_  BOOLEAN := FALSE;
   copy_document_text_            BOOLEAN := FALSE;
   copy_note_text_                BOOLEAN := FALSE;
   line_discount_exist_           BOOLEAN := FALSE;
   discount_                      CUSTOMER_ORDER_LINE_TAB.discount%TYPE;
   copy_discount_                 VARCHAR2(5);
   dummy_info_                    VARCHAR2(32000);
   create_partial_sum_            CUST_ORDER_LINE_DISCOUNT_TAB.Create_Partial_Sum%TYPE;   
   orginal_pre_accounting_id_     CUSTOMER_ORDER_LINE_TAB.pre_accounting_id%TYPE;
   original_config_line_price_id_ CUSTOMER_ORDER_LINE_TAB.configured_line_price_id%TYPE;
   rental_chargeable_days_        NUMBER;
   supply_code_                   CUSTOMER_ORDER_LINE_TAB.supply_code%TYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Copy_Customer_Order_Line');
   from_order_rec_ := Customer_Order_API.Get(from_order_no_);   
   to_order_rec_ := Customer_Order_API.Get(to_order_no_);
   same_customer_  := from_order_rec_.customer_no = to_order_rec_.customer_no;
   
   IF (same_customer_) THEN
      copy_address_                 := (NVL(copy_order_adresses_,false_) = true_);
      copy_misc_order_information_  := (NVL(copy_misc_order_info_,false_) = true_) ;
   END IF;
   copy_tax_information_         := (NVL(copy_tax_detail_,false_) = true_);   
   copy_delivery_information_    := (NVL(copy_delivery_info_,false_) = true_);
   copy_pricing_information_     := (NVL(copy_pricing_,false_) = true_);   
   copy_document_text_           := (NVL(copy_document_texts_, false_) = true_);
   copy_note_text_               := (NVL(copy_notes_, false_) = true_);
   copy_original_pre_accounting_ := (NVL(copy_pre_accounting_, false_) = true_);
  
   FOR order_line_rec_ IN get_order_line LOOP
      attr_ := NULL;
      new_attr_ := NULL;
      -- Values that can be fetched regardless of the customer the order was created
      Client_SYS.Add_To_Attr('ORDER_NO', to_order_no_, attr_);
      Client_SYS.Add_To_Attr('LINE_NO', order_line_rec_.line_no, attr_);
      Client_SYS.Add_To_Attr('REL_NO', order_line_rec_.rel_no, attr_);
      Client_SYS.Add_To_Attr('LINE_ITEM_NO', order_line_rec_.line_item_no, attr_);
      Client_SYS.Add_To_Attr('CATALOG_NO', order_line_rec_.catalog_no, attr_);
      Client_SYS.Add_To_Attr('BUY_QTY_DUE', order_line_rec_.buy_qty_due, attr_);     
      Client_SYS.Add_To_Attr('CONTRACT', to_order_rec_.contract, attr_);
      Client_SYS.Add_To_Attr('WANTED_DELIVERY_DATE', to_order_rec_.wanted_delivery_date, attr_); 
      Client_SYS.Add_To_Attr('CLOSE_TOLERANCE', order_line_rec_.close_tolerance, attr_);
      Client_SYS.Add_To_Attr('CONDITION_CODE', order_line_rec_.condition_code, attr_);
      Client_SYS.Add_To_Attr('CONFIGURATION_ID', order_line_rec_.configuration_id, attr_);
      Client_SYS.Add_To_Attr('CHARGED_ITEM_DB', order_line_rec_.charged_item, attr_);
      Client_SYS.Add_To_Attr('DELIVERY_TYPE', order_line_rec_.delivery_type, attr_);     
      Client_SYS.Add_To_Attr('RENTAL_DB', order_line_rec_.rental, attr_);
      Client_SYS.Add_To_Attr('ABNORMAL_DEMAND_DB', order_line_rec_.abnormal_demand, attr_);
      
      IF order_line_rec_.supply_code IN ('IO', 'NO', 'PKG', 'PD', 'PT', 'IPD', 'IPT','ND','PS','DOP','SO') THEN
         supply_code_ := order_line_rec_.supply_code;       
      ELSIF order_line_rec_.supply_code IN('PRJ') THEN
         supply_code_ := 'NO';
      ELSE
         supply_code_ := 'IO'; 
      END IF;
      Client_SYS.Add_To_Attr('SUPPLY_CODE', Order_Supply_Type_API.Decode(supply_code_), attr_);
      --------------------------------------------------------------------------------      
            
      Build_Attr_For_New___(discount_, copy_discount_, create_partial_sum_, new_attr_, attr_);
      
      -- Note: Add the rental information to the attr_
      IF (order_line_rec_.rental = Fnd_Boolean_API.DB_TRUE) THEN
         Add_Rental_Info_To_Attr___ (new_attr_,
                                    from_order_no_,
                                    order_line_rec_.line_no,
                                    order_line_rec_.rel_no,
                                    order_line_rec_.line_item_no);         
      END IF;
      
      Build_Rec_For_Copy_Line___ (newrec_,
                                 indrec_,
                                 new_attr_,
                                 order_line_rec_,
                                 copy_address_, 
                                 copy_misc_order_information_,
                                 copy_delivery_information_,
                                 copy_tax_information_,
                                 copy_pricing_information_,
                                 copy_document_text_,
                                 copy_note_text_,
                                 same_customer_,
                                 to_order_rec_.use_price_incl_tax,
                                 from_order_rec_.language_code);    
      
      Client_SYS.Add_To_Attr('COPY_ORDER_LINE', 'TRUE', new_attr_);   

      IF (NVL(copy_charges_, 'FALSE') = 'TRUE') THEN
         Client_SYS.Add_To_Attr('DEFAULT_CHARGES', 'FALSE', new_attr_);     
      END IF;

      IF (copy_delivery_information_) THEN
         Client_SYS.Add_To_Attr('FETCH_SUPPLY_CHAIN_DEFAULTS', 'FALSE', new_attr_);      
      END IF;
      
      IF (copy_tax_information_) THEN
         Client_SYS.Add_To_Attr('FETCH_TAX_FROM_DEFAULTS', 'FALSE', new_attr_);
         Client_SYS.Add_To_Attr('ORIGINAL_ORDER_NO', order_line_rec_.order_no, new_attr_);
         Client_SYS.Add_To_Attr('ORIGINAL_LINE_NO', order_line_rec_.line_no, new_attr_);
         Client_SYS.Add_To_Attr('ORIGINAL_REL_NO', order_line_rec_.rel_no, new_attr_);
         Client_SYS.Add_To_Attr('ORIGINAL_ITEM_NO', order_line_rec_.line_item_no, new_attr_);
         IF (NOT copy_pricing_information_) THEN
            Client_SYS.Add_To_Attr('RECALC_TAX_AMOUNTS', 'TRUE', new_attr_);
         END IF;
      END IF;

      -- Configured Line Price
      IF(copy_pricing_information_) THEN
         original_config_line_price_id_ := order_line_rec_.configured_line_price_id;
      END IF;
      
      -- Preposting
      IF (copy_original_pre_accounting_) THEN
         orginal_pre_accounting_id_ := order_line_rec_.pre_accounting_id;
      END IF;
      
      Check_Insert___(newrec_, indrec_, new_attr_);
                
      Insert___(objid_, objversion_, newrec_, new_attr_);
      
      Custom_Objects_SYS.Copy_Cf_Instance(lu_name_, order_line_rec_.rowkey, newrec_.rowkey);
      
      -- Copy Order line Address
      IF ((copy_address_) AND (newrec_.default_addr_flag = 'N') AND (order_line_rec_.addr_flag = 'Y')) THEN
         
         Copy_Order_Line_Address___ (order_line_rec_.order_no,
                                     order_line_rec_.line_no,
                                     order_line_rec_.rel_no,
                                     order_line_rec_.line_item_no,
                                     newrec_.order_no,
                                     newrec_.line_no,
                                     newrec_.rel_no,
                                     newrec_.line_item_no);
      END IF;
      -- Fetch Correct Default Info Flag
      Modify_Line_Default_Addr_Flag(newrec_ ,
                                    newrec_.order_no,
                                    newrec_.default_addr_flag);      
      
      -- Copy Pre-Accounting
      IF (copy_original_pre_accounting_) THEN
         Pre_Accounting_API.Copy_Pre_Accounting(orginal_pre_accounting_id_,
                                                newrec_.pre_accounting_id,
                                                newrec_.contract,
                                                TRUE,
                                                'CUSTOMER ORDER',
                                                TRUE,
                                                TRUE);     
      END IF;
      
      IF (copy_pricing_information_) THEN
         -- Copy Configuration Line Price 
         Configured_Line_price_API.Transfer_Pricing__(dummy_info_, original_config_line_price_id_, newrec_.configured_line_price_id, FALSE);
         
         -- Copy Discount Lines
         FOR get_old_line_rec_ IN get_old_discount_line(order_line_rec_.order_no,order_line_rec_.line_no,order_line_rec_.rel_no,order_line_rec_.line_item_no) LOOP    
            Cust_Order_Line_Discount_API.New(newrec_.order_no, 
                                              newrec_.line_no, 
                                              newrec_.rel_no, 
                                              newrec_.line_item_no, 
                                              get_old_line_rec_.discount_type,
                                              get_old_line_rec_.discount, 
                                              Discount_Source_API.DB_MANUAL, 
                                              get_old_line_rec_.create_partial_sum,
                                              get_old_line_rec_.discount_line_no,
                                              NULL,
                                              get_old_line_rec_.discount_amount,
                                              get_old_line_rec_.part_level,
                                              get_old_line_rec_.part_level_id,
                                              get_old_line_rec_.customer_level,
                                              get_old_line_rec_.customer_level_id);
            line_discount_exist_ := TRUE;
         END LOOP;
         IF (line_discount_exist_) THEN
            Cust_Order_Line_Discount_API.Calc_Discount_Upd_Co_Line__(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
         END IF;
      ELSE
         -- Default Configuration Line Price 
         Configured_Line_price_API.Transfer_Pricing__(dummy_info_, original_config_line_price_id_, newrec_.configured_line_price_id, TRUE);
         
         -- Default Line Discounts
         IF (newrec_.rental = Fnd_Boolean_API.DB_TRUE) THEN
            rental_chargeable_days_ := Get_Latest_Rent_Charge_Days___(new_attr_, newrec_);
         END IF;  
                  
         Customer_Order_Pricing_API.New_Default_Discount_Rec(newrec_.order_no,
                                                             newrec_.line_no,
                                                             newrec_.rel_no,
                                                             newrec_.line_item_no,
                                                             newrec_.contract,
                                                             newrec_.customer_no,
                                                             to_order_rec_.currency_code,
                                                             to_order_rec_.agreement_id,
                                                             newrec_.catalog_no,
                                                             newrec_.buy_qty_due,
                                                             newrec_.price_list_no,
                                                             newrec_.customer_level,
                                                             newrec_.customer_level_id,
                                                             rental_chargeable_days_);
      END IF;
      
      -- Copy Milestones
      IF (Customer_Order_Milestone_API.Milestone_Exist(order_line_rec_.order_no, order_line_rec_.line_no, order_line_rec_.rel_no, order_line_rec_.line_item_no ) = 'TRUE') THEN
         Customer_Order_Milestone_API.Copy_Milestone_Lines(newrec_.order_no,
                                                          newrec_.line_no,
                                                          newrec_.rel_no,
                                                          newrec_.line_item_no,
                                                          order_line_rec_.order_no,
                                                          order_line_rec_.line_no,
                                                          order_line_rec_.rel_no,
                                                          order_line_rec_.line_item_no);   
      END IF;

      -- Copy Staged Billing
      IF (order_line_rec_.staged_billing = 'STAGED BILLING') THEN
         Copy_Staged_Billing___(newrec_.order_no, 
                                newrec_.line_no, 
                                newrec_.rel_no,
                                newrec_.line_item_no,
                                order_line_rec_.order_no,
                                order_line_rec_.line_no,
                                order_line_rec_.rel_no,
                                order_line_rec_.line_item_no,
                                copy_document_text_,
                                copy_note_text_);
      END IF;               

      -- Copy Commission Information if the line copied had any related manual commission information.
      Order_Line_Commission_API.Copy_Manual_Commission_Lines(newrec_.order_no, 
                                                            newrec_.line_no, 
                                                            newrec_.rel_no,
                                                            newrec_.line_item_no,
                                                            order_line_rec_.order_no,
                                                            order_line_rec_.line_no,
                                                            order_line_rec_.rel_no,
                                                            order_line_rec_.line_item_no,
                                                            copy_document_text_,
                                                            copy_note_text_);
      -- Create a customer Order Line History Record
      Customer_Order_Line_Hist_API.New(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no,
                                       Language_SYS.Translate_Constant(lu_name_, 'LINECOPIED: Copied from order :P1',NULL, order_line_rec_.order_no));
   END LOOP;
END Copy_Customer_Order_Line;


PROCEDURE Create_Sourced_Co_Lines (
   created_flag_ OUT VARCHAR2,
   order_no_     IN  VARCHAR2,
   line_no_      IN  VARCHAR2,
   rel_no_       IN  VARCHAR2,
   line_item_no_ IN  NUMBER )
IS
   new_line_no_               VARCHAR2(4);
   new_rel_no_                VARCHAR2(4);
   new_line_item_no_          NUMBER;
   total_sourced_qty_         NUMBER := 0;   
   first_row_                 BOOLEAN := TRUE;
   attr_                      VARCHAR2(32000);
   old_attr_                  VARCHAR2(32000);
   attr2_                     VARCHAR2(32000);
   info_                      VARCHAR2(2000);
   milestone_flag_            VARCHAR2(6);
   language_code_             VARCHAR2(2);   
   sourced_reservation_exist_ NUMBER;
   orglinerec_                CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   co_line_address_           Cust_Order_Line_Address_API.Co_Line_Addr_Rec;
   objid_                     VARCHAR2(2000);
   objversion_                VARCHAR2(2000);
   sales_price_               NUMBER;
   discount_amount_           NUMBER;
   rounding_                  NUMBER;
   line_net_                  NUMBER;
   line_gross_                NUMBER;
   line_qty_                  NUMBER;
   contract_                  VARCHAR2(10);   
   msg_text_                  VARCHAR2(200);
   curr_rounding_             NUMBER;
   line_discount_             NUMBER;
   order_rec_                 CUSTOMER_ORDER_API.Public_Rec;
   sale_price_incl_tax_       NUMBER;
   ptr_                       NUMBER;
   name_                      VARCHAR2(30);
   value_                     VARCHAR2(4000);
   company_                   VARCHAR2(20);

  -- values for stage billing from newly created customer order lines
  CURSOR get_new_line_rec ( line_no_ IN VARCHAR2, rel_no_ IN VARCHAR2, line_item_no_ IN NUMBER ) IS
       SELECT buy_qty_due, discount, order_discount, price_conv_factor, base_sale_unit_price, base_unit_price_incl_tax, additional_discount,
              sale_unit_price,unit_price_incl_tax, currency_rate
       FROM CUSTOMER_ORDER_LINE_TAB
       WHERE order_no = order_no_
         AND line_no = line_no_
         AND rel_no = rel_no_
         AND line_item_no = line_item_no_;

  -- Connected discount lines for the old order line
  CURSOR old_discount_lines IS
     SELECT *
       FROM cust_order_line_discount_tab
      WHERE  order_no = order_no_
        AND  line_no = line_no_
        AND  rel_no  = rel_no_
        AND  line_item_no = line_item_no_;

  -- New Created lines discount no
  CURSOR new_discount_lines ( dis_line_no_ IN VARCHAR2, dis_rel_no_ IN VARCHAR2, dis_line_item_no_ IN NUMBER) IS
     SELECT discount_no
       FROM cust_order_line_discount_tab
      WHERE order_no = order_no_
        AND line_no = dis_line_no_
        AND rel_no = dis_rel_no_
        AND line_item_no = dis_line_item_no_;

  -- All the attributes with the source_id required for a corresponding CO line
  CURSOR sourced_cust_lines IS
     SELECT  *
       FROM  sourced_cust_order_line_tab
      WHERE  order_no     = order_no_
        AND  line_no      = line_no_
        AND  rel_no       = rel_no_
        AND  line_item_no = line_item_no_
   ORDER BY  source_id;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Create_Sourced_Co_Lines');
   order_rec_:= Customer_Order_API.Get(order_no_);
   language_code_ := order_rec_.language_code;

   total_sourced_qty_ := Sourced_Cust_Order_Line_API.Get_Total_Sourced_Qty(order_no_,line_no_,rel_no_,line_item_no_);

   -- get original line details.
   orglinerec_ := Get_Object_By_Keys___(order_no_, line_no_, rel_no_, line_item_no_);
   milestone_flag_ := Customer_Order_Milestone_API.Milestone_Exist(order_no_, line_no_, rel_no_, line_item_no_ );
   company_    := Site_API.Get_Company(orglinerec_.contract);   

   IF (total_sourced_qty_ = orglinerec_.revised_qty_due) THEN
      Client_SYS.Clear_Attr(old_attr_);

      -- set order line values to attr.
      Copy_Customer_Order_Line(old_attr_, order_no_, line_no_, rel_no_, line_item_no_);

      -- For all sourced lines create new customer order lines,(do update for first sourced line)
      FOR sourced_lines_ IN sourced_cust_lines LOOP

         sourced_reservation_exist_ := Sourced_Co_Supply_Site_Res_API.Sourced_Reservation_Exist(order_no_, line_no_, rel_no_,
                                                                 line_item_no_, sourced_lines_.source_id);
                                                                 
         Build_Attr_Sourced_Co_Lines___(attr_, sourced_lines_, old_attr_, orglinerec_, first_row_, sourced_reservation_exist_, language_code_, 
                                        order_no_, line_no_, rel_no_, line_item_no_);  
         
         -- modify first row
         IF first_row_ THEN
            Modify(attr_, order_no_, line_no_, rel_no_, line_item_no_ );
            msg_text_ := SUBSTR(Language_SYS.Translate_Constant(lu_name_,'DESIREDQTYCHANGED: This order line was modified by automatic/manual sourcing. The desired quantity on the line was :P1.', NULL, orglinerec_.desired_qty), 1, 200);
            Customer_Order_Line_Hist_API.New(order_no_, line_no_, rel_no_, line_item_no_, msg_text_);
            first_row_ := FALSE;
         -- Create New Customer Order Lines for rest of sourcing lines.
         ELSE
	    -- Removed the dicsount before inserting the new CO line. Discount will get added to the new line by calling
            -- Cust_Order_Line_Discount_API.New() at the latter part of this method.
            attr_ := Client_SYS.Remove_Attr('DISCOUNT', attr_);
            New(info_, attr_);
            
            WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
               IF(name_ = 'LINE_NO') THEN
                  new_line_no_ := value_;
               ELSIF(name_ = 'REL_NO') THEN
                  new_rel_no_ := value_;
               ELSIF(name_ = 'LINE_ITEM_NO') THEN
                  new_line_item_no_ := value_;
               END IF;
            END LOOP;
            
            -- Update all related objects to the original customer order line.

            -- IF the original line had connected milestone details copy those to newly created lines.
            IF milestone_flag_ = 'TRUE' THEN
               -- First the new line parameters then the connected line parameters.
               Customer_Order_Milestone_API.Copy_Milestone_Lines( order_no_, new_line_no_, new_rel_no_, new_line_item_no_, order_no_, line_no_, rel_no_, line_item_no_);
            END IF;

            -- IF tax lines exist for the line Remove tax lines created
            IF Source_Tax_Item_API.Tax_Items_Exist(company_, Tax_Source_API.DB_CUSTOMER_ORDER_LINE, order_no_, new_line_no_, new_rel_no_, TO_CHAR(new_line_item_no_), '*') = 'TRUE' THEN
               Source_Tax_Item_Order_API.Remove_Tax_Items(company_, Tax_Source_API.DB_CUSTOMER_ORDER_LINE, order_no_, new_line_no_, new_rel_no_, TO_CHAR(new_line_item_no_), '*');
            END IF;
            -- Copy originating line tax details.
            Tax_Handling_Order_Util_API.Transfer_Tax_lines(company_, Tax_Source_API.DB_CUSTOMER_ORDER_LINE, order_no_, line_no_, rel_no_, TO_CHAR(line_item_no_), '*',
                                                            Tax_Source_API.DB_CUSTOMER_ORDER_LINE, order_no_, new_line_no_, new_rel_no_, new_line_item_no_, '*');
            
            -- Create New Discount lines if originating line was related to any discount information.
            FOR get_line_rec_ IN new_discount_lines( new_line_no_, new_rel_no_, new_line_item_no_ ) LOOP
               Cust_Order_Line_Discount_API.Remove_Discount_Row(order_no_, new_line_no_, new_rel_no_, new_line_item_no_, get_line_rec_.discount_no);
            END LOOP;
            FOR get_old_line_rec_ IN old_discount_lines LOOP
               Cust_Order_Line_Discount_API.New(order_no_, new_line_no_,
                                                new_rel_no_, new_line_item_no_,
                                                get_old_line_rec_.discount_type,
                                                get_old_line_rec_.discount,
                                                get_old_line_rec_.discount_source,
                                                get_old_line_rec_.create_partial_sum,
                                                get_old_line_rec_.discount_line_no,
                                                get_old_line_rec_.discount_source_id,
                                                get_old_line_rec_.discount_amount,
                                                get_old_line_rec_.part_level,
                                                get_old_line_rec_.part_level_id,
                                                get_old_line_rec_.customer_level,
                                                get_old_line_rec_.customer_level_id );
               Cust_Order_Line_Discount_API.Calc_Discount_Upd_Co_Line__(order_no_, new_line_no_, new_rel_no_, new_line_item_no_);
            END LOOP;

            -- IF the original line had connected staged billing details copy those to newly created lines.
            IF (orglinerec_.staged_billing = 'STAGED BILLING') THEN
               -- IF CO header contains stage billing the lines will inheret so remove those first.
               IF (order_rec_.staged_billing = Staged_Billing_Type_API.DB_STAGED_BILLING) THEN
                  Order_Line_Staged_Billing_API.Remove_Stage_Lines( order_no_, new_line_no_, new_rel_no_, new_line_item_no_);
               END IF;
               -- Copy for new lines originating lines stage billing informations.
               Copy_Staged_Billing___(order_no_, 
                                   new_line_no_, 
                                   new_rel_no_,
                                   new_line_item_no_,
                                   order_no_,
                                   line_no_,
                                   rel_no_,
                                   line_item_no_,
                                   TRUE,
                                   TRUE);

            END IF;

            -- Copy Commission Information if originating line had any related commission information.
            Order_Line_Commission_API.Copy_Commission_Lines(order_no_, new_line_no_, new_rel_no_, new_line_item_no_, line_no_, rel_no_, line_item_no_);

            -- Order Line Address Information on originating line
            IF (orglinerec_.default_addr_flag = 'N') AND (orglinerec_.addr_flag = 'Y') THEN
               -- remove any address occurence
               Cust_Order_Line_Address_API.Remove_Address__(order_no_, new_line_no_, new_rel_no_, new_line_item_no_);
               co_line_address_ := Cust_Order_Line_Address_API.Get_Co_Line_Addr(orglinerec_.order_no, orglinerec_.line_no, orglinerec_.rel_no, orglinerec_.line_item_no );
               attr2_ := NULL;
               Client_SYS.Add_To_Attr('ORDER_NO', order_no_, attr2_);
               Client_SYS.Add_To_Attr('LINE_NO', new_line_no_, attr2_);
               Client_SYS.Add_To_Attr('REL_NO', new_rel_no_, attr2_);
               Client_SYS.Add_To_Attr('LINE_ITEM_NO', new_line_item_no_, attr2_);
               Client_SYS.Add_To_Attr('ADDR_1',   co_line_address_.addr_1 , attr2_);
               Client_SYS.Add_To_Attr('ADDRESS1', co_line_address_.address1 , attr2_);
               Client_SYS.Add_To_Attr('ADDRESS2', co_line_address_.address2 , attr2_);
               Client_SYS.Add_To_Attr('ZIP_CODE', co_line_address_.zip_code , attr2_);
               Client_SYS.Add_To_Attr('CITY', co_line_address_.city , attr2_);
               Client_SYS.Add_To_Attr('IN_CITY', co_line_address_.in_city , attr2_);
               Client_SYS.Add_To_Attr('COUNTY', co_line_address_.county , attr2_);
               Client_SYS.Add_To_Attr('STATE', co_line_address_.state , attr2_);
               Client_SYS.Add_To_Attr('COUNTRY_CODE', co_line_address_.country_code , attr2_);
               -- create lines corresponding to the originating lines.
               Cust_Order_Line_Address_API.New__(info_, objid_, objversion_, attr2_, 'DO');
            END IF;

            -- IF Originating line contained a cust_warranty_id update the new line with this cust_warranty_id_.
            IF (orglinerec_.cust_warranty_id IS NOT NULL) THEN
               Client_SYS.Clear_Attr(attr2_);
               Client_SYS.Add_To_Attr('CUST_WARRANTY_ID', orglinerec_.cust_warranty_id, attr2_);
               Modify(attr2_, order_no_, new_line_no_, new_rel_no_, new_line_item_no_);
            END IF;
         END IF;

         -- transfer any sourced supply site reservation to CO supply site reservations
         IF (sourced_reservation_exist_ = 1) THEN
            Sourced_Co_Supply_Site_Res_API.Transfer_Sourced_Reservations(order_no_, line_no_, rel_no_,
                                                                line_item_no_, sourced_lines_.source_id,
                                                                new_line_no_, new_rel_no_, new_line_item_no_);
         END IF;
      END LOOP;

     created_flag_ := 'TRUE';
     -- Remove all source lines related to the customer order line that is sourced.
     Sourced_Cust_Order_Line_API.Remove(info_, order_no_, line_no_, rel_no_, line_item_no_);
  ELSE
     -- No Order Line Creation for not fully sourced Lines
     created_flag_ := 'FALSE';
  END IF;
END Create_Sourced_Co_Lines;


--@IgnoreMissingSysinit
FUNCTION Get_Send_Change_Msg_For_Supp (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   message_class_          VARCHAR2(30);
   send_change_msg_        VARCHAR2(2);
   edi_setup_              VARCHAR2(30);
   vendor_no_              CUSTOMER_ORDER_LINE_TAB.vendor_no%TYPE;
   supply_code_            VARCHAR2(10);
   purchase_type_          VARCHAR2(50);
   dummy_msg_              VARCHAR2(20);
   comp_line_exist_        BOOLEAN := FALSE;
   send_change_msg_supp_   VARCHAR2(5):='FALSE';

   CURSOR get_purchase_type IS
      SELECT purchase_type
      FROM   customer_order_pur_order_tab
      WHERE  oe_order_no = order_no_
      AND    oe_line_no = line_no_
      AND    oe_rel_no = rel_no_
      AND    oe_line_item_no  = line_item_no_;

   CURSOR component_line_vendor IS
      SELECT DISTINCT vendor_no
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    line_no = line_no_
      AND    rel_no = rel_no_
      AND    line_item_no > 0
      AND    supply_code IN ('IPT', 'PT', 'IPD', 'PD');
BEGIN
   message_class_ := 'ORDCHG';
   send_change_msg_ := 'N';
   supply_code_ := Order_Supply_Type_API.Encode(Get_Supply_Code(order_no_, line_no_, rel_no_, line_item_no_));

   OPEN get_purchase_type;
   FETCH get_purchase_type INTO purchase_type_;
   CLOSE get_purchase_type;

   IF supply_code_ IN ('IPD','IPT', 'PD', 'PT') THEN
      vendor_no_ := Get_Vendor_no(order_no_, line_no_, rel_no_, line_item_no_);
      $IF (Component_Purch_SYS.INSTALLED)$THEN
         send_change_msg_supp_ := Supplier_API.Get_Send_Change_Msg_For_Supp(vendor_no_);
      $END      
      IF ((send_change_msg_supp_ = 'TRUE') AND (purchase_type_ = 'O')) THEN
        RETURN 'TRUE';
      END IF;
   ELSIF supply_code_ = 'PKG' THEN
      FOR comp_line_ IN component_line_vendor LOOP
         edi_setup_ := Supplier_Info_Msg_Setup_API.Get_Default_Media_Code(comp_line_.vendor_no, message_class_);
         $IF (Component_Purch_SYS.INSTALLED)$THEN
            dummy_msg_ := Supplier_API.Get_Send_Change_Message(comp_line_.vendor_no);
         $END
         send_change_msg_ := Gen_Yes_No_API.Encode(dummy_msg_);
         IF (edi_setup_ IS NOT NULL) THEN
            IF (send_change_msg_ != 'Y') THEN
               RETURN 'FALSE';
            END IF;
            comp_line_exist_ := TRUE;
         END IF;
      END LOOP;
      IF comp_line_exist_ THEN
         RETURN 'TRUE';
      END IF;
   END IF;
   RETURN 'FALSE';
END Get_Send_Change_Msg_For_Supp;


--@IgnoreMissingSysinit
FUNCTION Get_Purchase_Order_No (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   po_order_no_          CUSTOMER_ORDER_LINE_TAB.demand_order_ref1%TYPE;

   CURSOR get_rec IS
      SELECT demand_order_ref1
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    line_no = line_no_
      AND    rel_no = rel_no_
      AND    line_item_no = line_item_no_;
BEGIN
   OPEN  get_rec;
   FETCH get_rec INTO po_order_no_;
   CLOSE get_rec;

   RETURN po_order_no_;
END Get_Purchase_Order_No;


--@IgnoreMissingSysinit
FUNCTION Check_Pegged_Component_Exist (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_  NUMBER;

   CURSOR component_lines IS
      SELECT 1
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    line_no = line_no_
      AND    rel_no = rel_no_
      AND    line_item_no > 0
      AND    qty_on_order > 0;
BEGIN
   OPEN component_lines;
   FETCH component_lines INTO temp_;
   CLOSE component_lines;
   IF (temp_ = 1) THEN
      RETURN 'TRUE';
   ELSE
      RETURN 'FALSE';
   END IF;
END Check_Pegged_Component_Exist;


--@IgnoreMissingSysinit
FUNCTION Check_Auto_Pegged_Comp_Exist (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      order_no_     IN VARCHAR2,
      line_no_      IN VARCHAR2,
      rel_no_       IN VARCHAR2,
      line_item_no_ IN NUMBER ) RETURN VARCHAR2
   IS
         temp_  NUMBER;
      
         CURSOR component_lines IS
            SELECT 1
            FROM   CUSTOMER_ORDER_LINE_TAB
            WHERE  order_no = order_no_
            AND    line_no = line_no_
            AND    rel_no = rel_no_
            AND    line_item_no > 0
            AND    qty_on_order > 0
            AND    supply_code IN ('IPD', 'PD', 'IPT', 'PT', 'SO', 'DOP');
      BEGIN
         OPEN component_lines;
         FETCH component_lines INTO temp_;
         CLOSE component_lines;
         IF (temp_ = 1) THEN
            RETURN 'TRUE';
         ELSE
            RETURN 'FALSE';
         END IF;
   END Core;

BEGIN
   RETURN Core(order_no_, line_no_, rel_no_, line_item_no_);
END Check_Auto_Pegged_Comp_Exist;


--@IgnoreMissingSysinit
FUNCTION Check_Ipd_Pd_Comp_Exist (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_  NUMBER;

   CURSOR component_lines IS
      SELECT 1
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    line_no = line_no_
      AND    rel_no = rel_no_
      AND    line_item_no > 0
      AND    qty_on_order > 0
      AND    supply_code IN ('IPD', 'PD');
BEGIN
   OPEN component_lines;
   FETCH component_lines INTO temp_;
   CLOSE component_lines;
   IF (temp_ = 1) THEN
      RETURN 'TRUE';
   ELSE
      RETURN 'FALSE';
   END IF;
END Check_Ipd_Pd_Comp_Exist;


--@IgnoreMissingSysinit
FUNCTION Check_Custord_For_Purord (
   po_order_no_     IN  VARCHAR2,
   po_line_no_      IN  VARCHAR2,
   po_rel_no_       IN  VARCHAR2 ) RETURN VARCHAR2
IS
   dummy_ NUMBER;
   return_ VARCHAR2(5);

   CURSOR get_oerel IS
      SELECT 1
      FROM   CUSTOMER_ORDER_LINE_TAB col, inventory_transaction_hist_pub ith
      WHERE  col.demand_order_ref1 = po_order_no_
      AND    col.demand_order_ref2 = po_line_no_
      AND    col.demand_order_ref3 = po_rel_no_
      AND    ith.source_ref1  = col.order_no
      AND    ith.source_ref2  = col.line_no
      AND    ith.source_ref3  = col.rel_no
      AND    ith.transaction_code IN ('SHIPDIR', 'INTPODIRIM', 'PODIRINTEM', 'OESHIP', 'INTPODIRSH', 'PODIRSH');
BEGIN
   return_ := 'TRUE';
   OPEN get_oerel;
   FETCH get_oerel INTO dummy_;
   IF (get_oerel%NOTFOUND) THEN
      return_ := 'FALSE';
   END IF;
   CLOSE get_oerel;
   RETURN return_;
END Check_Custord_For_Purord;


PROCEDURE Get_Demand_Order_Info (
   demand_order_ref1_ OUT VARCHAR2,
   demand_order_ref2_ OUT VARCHAR2,
   demand_order_ref3_ OUT VARCHAR2,
   demand_order_ref4_ OUT NUMBER,
   order_no_          IN  VARCHAR2,
   line_no_           IN  VARCHAR2,
   rel_no_            IN  VARCHAR2,
   line_item_no_      IN  NUMBER )
IS
   CURSOR get_rec IS
      SELECT demand_order_ref1, demand_order_ref2, demand_order_ref3, demand_order_ref4
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no     = order_no_
      AND    line_no      = line_no_
      AND    rel_no       = rel_no_
      AND    line_item_no = line_item_no_;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Get_Demand_Order_Info');
   OPEN  get_rec;
   FETCH get_rec INTO demand_order_ref1_, demand_order_ref2_, demand_order_ref3_, demand_order_ref4_;
   CLOSE get_rec;
END Get_Demand_Order_Info;


PROCEDURE Modify_Shipment_Connection (
   order_no_          IN VARCHAR2,
   line_no_           IN VARCHAR2,
   rel_no_            IN VARCHAR2,
   line_item_no_      IN NUMBER,
   connect_           IN VARCHAR2,
   open_shipment_qty_ IN NUMBER )
IS
   attr_  VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Shipment_Connection');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('SHIPMENT_CONNECTED_DB', connect_, attr_);
   Client_SYS.Add_To_Attr('OPEN_SHIPMENT_QTY', open_shipment_qty_, attr_);
   Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);
END Modify_Shipment_Connection;


--@IgnoreMissingSysinit
FUNCTION Finite_State_Decode (
   db_state_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   RETURN Finite_State_Decode__(db_state_);
END Finite_State_Decode;


PROCEDURE Modify_Delivery_Data (
   order_no_              IN VARCHAR2,
   line_no_               IN VARCHAR2,
   rel_no_                IN VARCHAR2,
   line_item_no_          IN NUMBER,
   ship_via_code_         IN VARCHAR2,
   route_id_              IN VARCHAR2,
   wanted_delivery_date_  IN DATE,
   planned_delivery_date_ IN DATE,
   planned_ship_date_     IN DATE,
   buy_qty_due_           IN NUMBER,
   forward_agent_id_      IN VARCHAR2,
   delivery_terms_        IN VARCHAR2,
   revised_qty_due_       IN NUMBER )
IS
   attr_                  VARCHAR2(2000);
   oldrec_                CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   changed_               BOOLEAN := FALSE;
   default_               BOOLEAN := TRUE;
   current_info_          VARCHAR2(32000);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Delivery_Data');
   oldrec_ := Get_Object_By_Keys___(order_no_, line_no_, rel_no_, line_item_no_);
   current_info_ := NULL;
   App_Context_SYS.Set_Value('CUSTOMER_ORDER_LINE_API.CURRENT_INFO_',current_info_);

   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('SERVER_DATA_CHANGE', 1, attr_);

   IF (oldrec_.ship_via_code != ship_via_code_) THEN
      Client_SYS.Add_To_Attr('SHIP_VIA_CODE', ship_via_code_, attr_);
      changed_ := TRUE;
      default_ := FALSE;
   END IF;
   IF (NVL(oldrec_.route_id, ' ') != NVL(route_id_, ' ')) THEN
      Client_SYS.Add_To_Attr('ROUTE_ID', route_id_, attr_);
      changed_ := TRUE;
      default_ := FALSE;
   END IF;
   IF (oldrec_.wanted_delivery_date != wanted_delivery_date_) THEN
     Client_SYS.Add_To_Attr('WANTED_DELIVERY_DATE', wanted_delivery_date_, attr_);
     changed_ := TRUE;
   END IF;
   IF (oldrec_.planned_delivery_date != planned_delivery_date_) THEN
     Client_SYS.Add_To_Attr('PLANNED_DELIVERY_DATE', planned_delivery_date_, attr_);
     changed_ := TRUE;
   END IF;
   IF (oldrec_.planned_ship_date != planned_ship_date_) THEN
      Client_SYS.Add_To_Attr('PLANNED_SHIP_DATE', planned_ship_date_, attr_);
      changed_ := TRUE;
   END IF;
   IF (oldrec_.buy_qty_due != buy_qty_due_) THEN
      Client_SYS.Add_To_Attr('BUY_QTY_DUE', buy_qty_due_, attr_);      
      changed_ := TRUE;
   END IF;
   IF (NVL(oldrec_.forward_agent_id, ' ') != NVL(forward_agent_id_, ' ')) THEN
     Client_SYS.Add_To_Attr('FORWARD_AGENT_ID', forward_agent_id_, attr_);
     changed_ := TRUE;
     default_ := FALSE;
   END IF;
   IF (NVL(oldrec_.delivery_terms, ' ') != NVL(delivery_terms_, ' ')) THEN
     Client_SYS.Add_To_Attr('DELIVERY_TERMS', delivery_terms_, attr_);
     changed_ := TRUE;
     default_ := FALSE;
   END IF;
   IF (oldrec_.revised_qty_due != revised_qty_due_) THEN
      Client_SYS.Add_To_Attr('REVISED_QTY_DUE', revised_qty_due_, attr_);
      changed_ := TRUE;
   END IF;

   -- IF any of the delivery data has been changed update the default address flag.
   IF NOT default_ THEN
      Client_SYS.Add_To_Attr('DEFAULT_ADDR_FLAG_DB', 'N', attr_);
   END IF;

   IF changed_ THEN
      Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);
   END IF;

   current_info_ := App_Context_SYS.Find_Value('CUSTOMER_ORDER_LINE_API.CURRENT_INFO_');

   IF (current_info_ IS NOT NULL) THEN
      current_info_ := SUBSTR(current_info_, 6, LENGTH(current_info_));
      current_info_ := RTRIM(current_info_, CHR(30));
      App_Context_SYS.Set_Value('CUSTOMER_ORDER_LINE_API.CURRENT_INFO_',current_info_);
      Client_SYS.Add_Info(lu_name_, SUBSTR(current_info_,1,1024));
      current_info_ := NULL;
   END IF;
END Modify_Delivery_Data;


PROCEDURE Calculate_Cost_And_Progress (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER )
IS
   activity_info_tab_            Public_Declarations_API.PROJ_Project_Conn_Cost_Tab;
   activity_revenue_info_tab_    Public_Declarations_API.PROJ_Project_Conn_Revenue_Tab;
   attributes_                   Public_Declarations_API.PROJ_Project_Conn_Attr_Type;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Calculate_Cost_And_Progress');
   $IF (Component_Proj_SYS.INSTALLED) $THEN
      Refresh_Project_Connection (activity_info_tab_         => activity_info_tab_,
                                  activity_revenue_info_tab_ => activity_revenue_info_tab_,
                                  attributes_                => attributes_,
                                  activity_seq_              => NULL,
                                  keyref1_                   => order_no_,
                                  keyref2_                   => line_no_,
                                  keyref3_                   => rel_no_,
                                  keyref4_                   => line_item_no_,
                                  keyref5_                   => '*',
                                  keyref6_                   => '*',
                                  refresh_old_data_          => 'FALSE',
                                  proj_lu_name_              => 'COLINE');
   $ELSE
       NULL;
   $END
END Calculate_Cost_And_Progress;


--@IgnoreMissingSysinit
FUNCTION Is_Uom_Group_Connected (
   contract_ IN VARCHAR2,
   part_no_  IN VARCHAR2 ) RETURN VARCHAR2
IS
   uom_group_id_ VARCHAR2(30);
   connected_    VARCHAR2(10);
BEGIN
   uom_group_id_ := Inventory_Part_API.Get_Input_Unit_Meas_Group_Id(contract_, part_no_);
   IF uom_group_id_ IS NOT NULL THEN
      connected_ := Input_Unit_meas_Group_API.Is_Usage_Allowed (uom_group_id_,'ORDER');
      RETURN connected_ ;
   ELSE
      RETURN 'FALSE' ;
   END IF;
END Is_Uom_Group_Connected;


PROCEDURE Modify_Activity_Seq (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   activity_seq_ IN NUMBER )
IS
   attr_  VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Activity_Seq');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('ACTIVITY_SEQ', activity_seq_, attr_);
   Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);
END Modify_Activity_Seq;


PROCEDURE Modify_Price_Conv_Factor (
   order_no_          IN VARCHAR2,
   line_no_           IN VARCHAR2,
   rel_no_            IN VARCHAR2,
   line_item_no_      IN NUMBER,
   price_conv_factor_ IN NUMBER )
IS
   attr_   VARCHAR2(2000) := NULL;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Price_Conv_Factor');
   Client_SYS.Add_To_Attr('PRICE_CONV_FACTOR', price_conv_factor_, attr_);
   Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);
END Modify_Price_Conv_Factor;


PROCEDURE Set_Cancel_Reason (
   order_no_      IN VARCHAR2,
   line_no_       IN VARCHAR2,
   rel_no_        IN VARCHAR2,
   line_item_no_  IN NUMBER,
   cancel_reason_ IN VARCHAR2 )
IS
   attr_          VARCHAR2(32000);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Set_Cancel_Reason');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Set_Item_Value('CANCEL_REASON', cancel_reason_, attr_);
   Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);
END Set_Cancel_Reason;


--@IgnoreMissingSysinit
FUNCTION Check_Part_Used (
   contract_ IN VARCHAR2,
   part_no_  IN VARCHAR2 ) RETURN NUMBER
IS
   CURSOR check_exist IS
      SELECT 1
      FROM CUSTOMER_ORDER_TAB
      WHERE order_no IN (SELECT order_no
                         FROM CUSTOMER_ORDER_LINE_TAB
                         WHERE contract = contract_
                           AND part_no = part_no_
                           AND part_no IS NOT NULL
                           AND rowstate NOT IN ('Cancelled', 'Invoiced')
                           AND delivery_confirmed = 'FALSE')
        AND contract = contract_
        AND confirm_deliveries = 'TRUE'
        AND rowstate NOT IN ('Cancelled', 'Invoiced');
   exist_  NUMBER;
BEGIN
   OPEN check_exist;
   FETCH check_exist INTO exist_;
   IF (check_exist%NOTFOUND) THEN
      exist_ := 0;
   END IF;
   CLOSE check_exist;
   RETURN exist_;
END Check_Part_Used;


--@IgnoreMissingSysinit
FUNCTION Calc_Sales_Qty_To_Deliver (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   qty_to_deliver_   NUMBER;

   CURSOR get_qty_to_deliver IS
      SELECT DECODE(part_no, NULL, qty_to_ship, qty_picked) / conv_factor * inverted_conv_factor
        FROM CUSTOMER_ORDER_LINE_TAB
       WHERE order_no     = order_no_
         AND line_no      = line_no_
         AND rel_no       = rel_no_
         AND line_item_no = line_item_no_;
BEGIN
   OPEN  get_qty_to_deliver;
   FETCH get_qty_to_deliver INTO qty_to_deliver_;
   CLOSE get_qty_to_deliver;
   RETURN qty_to_deliver_;
END Calc_Sales_Qty_To_Deliver;


PROCEDURE Unpeg_Line (
   order_no_       IN VARCHAR2,
   line_no_        IN VARCHAR2,
   rel_no_         IN VARCHAR2,
   line_item_no_   IN NUMBER,
   unpeg_ipd_flag_ IN VARCHAR2)
IS
   attr_              VARCHAR2(32000);
   pegged_order_no_   VARCHAR2(12);
   pegged_line_no_    VARCHAR2(4);
   pegged_rel_no_     VARCHAR2(4);
   purchase_type_     VARCHAR2(50);
   so_order_no_       VARCHAR2(12);
   so_release_no_     VARCHAR2(4);
   so_sequence_no_    VARCHAR2(4);
   co_line_rec_       Customer_Order_Line_API.Public_Rec;
   msg_text_          VARCHAR2(200);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Unpeg_Line');
   co_line_rec_ := Get(order_no_, line_no_, rel_no_, line_item_no_);
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Set_Item_Value('QTY_ON_ORDER', 0, attr_);
      
   IF (Inventory_Part_API.Check_Exist(co_line_rec_.contract, co_line_rec_.part_no)) THEN
      IF ((co_line_rec_.supply_code IN ('PT', 'SO', 'PD', 'IPT', 'IPD')) AND (co_line_rec_.activity_seq IS NOT NULL)) THEN
         Client_SYS.Set_Item_Value('SUPPLY_CODE', Order_Supply_Type_API.Decode('PI'), attr_);
      ELSE
         Client_SYS.Set_Item_Value('SUPPLY_CODE', Order_Supply_Type_API.Decode('IO'), attr_);
      END IF;
   ELSE
      IF ((co_line_rec_.supply_code IN ('PD', 'PT', 'IPT', 'IPD')) AND (co_line_rec_.activity_seq IS NOT NULL)) THEN
         Client_SYS.Set_Item_Value('SUPPLY_CODE', Order_Supply_Type_API.Decode('PRJ'), attr_);
      ELSE
         Client_SYS.Set_Item_Value('SUPPLY_CODE', Order_Supply_Type_API.Decode('NO'), attr_);
      END IF;
   END IF;
   Client_SYS.Set_Item_Value('VENDOR_NO', '', attr_);
   Client_SYS.Set_Item_Value('SERVER_DATA_CHANGE', 1, attr_);
   Client_SYS.Set_Item_Value('UNPEG_IPD_FLAG', unpeg_ipd_flag_, attr_);

   Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);

   Customer_Order_Pur_Order_API.Get_Purord_For_Custord(pegged_order_no_, pegged_line_no_, pegged_rel_no_, purchase_type_,
                                                       order_no_, line_no_, rel_no_, line_item_no_);
   IF (pegged_order_no_ IS NOT NULL) THEN
      Customer_Order_Pur_Order_API.Remove(order_no_, line_no_, rel_no_, line_item_no_);
      msg_text_ := Language_SYS.Translate_Constant(lu_name_, 'UNPEGPURREQORD: Unpegged from purchase requisition/order line :P1-:P2-:P3',NULL, pegged_order_no_, pegged_line_no_, pegged_rel_no_);
      Customer_Order_Line_Hist_API.New( order_no_, line_no_, rel_no_, line_item_no_, msg_text_);
   ELSE
      IF (unpeg_ipd_flag_ = 'FALSE') THEN
         Customer_Order_Shop_Order_API.Get_Shop_Order(so_order_no_     => so_order_no_,
                                                      so_release_no_   => so_release_no_,
                                                      so_sequence_no_  => so_sequence_no_,
                                                      oe_order_no_     => order_no_,
                                                      oe_line_no_      => line_no_,
                                                      oe_rel_no_       => rel_no_,
                                                      oe_line_item_no_ => line_item_no_);
         msg_text_ := Language_SYS.Translate_Constant(lu_name_, 'UNPEGSHOPORD: Unpegged from shop order :P1-:P2-:P3',NULL, so_order_no_, so_release_no_, so_sequence_no_);
         Customer_Order_Line_Hist_API.New( order_no_, line_no_, rel_no_, line_item_no_, msg_text_);
      END IF;
   END IF;   
   Customer_Order_Shop_Order_API.Remove_Cancelled_Order(order_no_, line_no_, rel_no_, line_item_no_);
END Unpeg_Line;


PROCEDURE Modify_Sale_Unit_Price (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   new_price_    IN NUMBER )
IS
   CURSOR get_order_line IS
   SELECT colt.contract, cot.currency_code, colt.provisional_price, cot.customer_no, cot.customer_no_pay, cot.currency_rate_type
        FROM customer_order_line_tab colt, customer_order_tab cot
       WHERE colt.order_no      = cot.order_no
         AND colt.order_no      = order_no_
         AND colt.line_no       = line_no_
         AND colt.rel_no        = rel_no_
         AND colt.line_item_no  = line_item_no_
         AND colt.price_freeze  = 'FREE' ;

    contract_                 VARCHAR2(5);
    currency_code_            VARCHAR2(3);
    currency_rate_            NUMBER;
    sale_unit_price_          NUMBER;
    unit_price_incl_tax_      NUMBER;
    base_sale_unit_price_     NUMBER;
    base_unit_price_incl_tax_ NUMBER;
    attr_                     VARCHAR2(2000);
    provisional_price_        VARCHAR2(5);
    customer_no_              CUSTOMER_ORDER_LINE_TAB.customer_no%TYPE;
    customer_no_pay_          CUSTOMER_ORDER_LINE_TAB.customer_no%TYPE;
    currency_rate_type_       VARCHAR2(10);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Sale_Unit_Price');
   OPEN  get_order_line;
   FETCH get_order_line INTO contract_, currency_code_, provisional_price_, customer_no_, customer_no_pay_, currency_rate_type_;
   IF (get_order_line%FOUND) THEN
      CLOSE get_order_line;
      IF Customer_Order_API.Get_Use_Price_Incl_Tax_Db(order_no_) = 'TRUE' THEN
         unit_price_incl_tax_ := new_price_;
         Customer_Order_Pricing_API.Get_Base_Price_In_Currency(base_unit_price_incl_tax_,
                                                               currency_rate_,
                                                               NVL(customer_no_pay_,customer_no_),
                                                               contract_,
                                                               currency_code_,
                                                               unit_price_incl_tax_,
                                                               currency_rate_type_);
      ELSE
         sale_unit_price_ := new_price_;
         Customer_Order_Pricing_API.Get_Base_Price_In_Currency(base_sale_unit_price_,
                                                               currency_rate_,
                                                               NVL(customer_no_pay_,customer_no_),
                                                               contract_,
                                                               currency_code_,
                                                               sale_unit_price_,
                                                               currency_rate_type_);
      END IF;
      Calculate_Prices(sale_unit_price_, unit_price_incl_tax_, base_sale_unit_price_, base_unit_price_incl_tax_,
                       order_no_, line_no_, rel_no_, line_item_no_);
      Client_SYS.Add_to_Attr('SALE_UNIT_PRICE',          sale_unit_price_,          attr_);
      Client_SYS.Add_to_Attr('UNIT_PRICE_INCL_TAX',      unit_price_incl_tax_,      attr_);
      Client_SYS.Add_to_Attr('BASE_SALE_UNIT_PRICE',     base_sale_unit_price_,     attr_);
      Client_SYS.Add_to_Attr('BASE_UNIT_PRICE_INCL_TAX', base_unit_price_incl_tax_, attr_);
      IF (provisional_price_ = 'TRUE') THEN
         Client_SYS.Add_to_Attr('PROVISIONAL_PRICE_DB', 'FALSE',               attr_);
      END IF;
      $IF (Component_Deford_SYS.INSTALLED) $THEN
        IF sale_unit_price_ = 0 AND (Def_Contract_Order_Item_API.CO_Line_On_Defense_Contract(order_no_, line_no_,rel_no_,line_item_no_)) THEN 
         Client_SYS.Add_To_Attr('SERVER_DATA_CHANGE',1, attr_);
        END IF;
      $END
      Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_ );
   ELSE
      CLOSE get_order_line;
   END IF;
END Modify_Sale_Unit_Price;


PROCEDURE Modify_Blocked_For_Invoicing (
   order_no_                 IN VARCHAR2,
   line_no_                  IN VARCHAR2,
   rel_no_                   IN VARCHAR2,
   line_item_no_             IN NUMBER,
   blocked_for_invoicing_db_ IN VARCHAR2 )
IS
   attr_  VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Blocked_For_Invoicing');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_to_Attr('BLOCKED_FOR_INVOICING_DB', blocked_for_invoicing_db_, attr_);
   Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);
END Modify_Blocked_For_Invoicing;


PROCEDURE Modify_Provisional_Price (
   order_no_             IN VARCHAR2,
   line_no_              IN VARCHAR2,
   rel_no_               IN VARCHAR2,
   line_item_no_         IN NUMBER,
   provisional_price_db_ IN VARCHAR2 )
IS
   attr_    VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Provisional_Price');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_to_Attr('PROVISIONAL_PRICE_DB', provisional_price_db_, attr_);
   Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);
END Modify_Provisional_Price;


--@IgnoreMissingSysinit
FUNCTION Get_Total_Tax_Amount_Curr (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   curr_rounding_ IN NUMBER DEFAULT NULL ) RETURN NUMBER
IS
   order_rec_         CUSTOMER_ORDER_API.Public_Rec;
   line_rec_          CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   tax_amount_        NUMBER := 0;
   rounding_          NUMBER;
   company_           VARCHAR2(20);
   tax_paying_party_  VARCHAR2(20);
BEGIN
   line_rec_ := Get_Object_By_Keys___(order_no_, line_no_, rel_no_, line_item_no_);
   company_  := Site_API.Get_Company(line_rec_.contract);
   order_rec_ := Customer_Order_API.Get(order_no_);
   IF curr_rounding_ IS NULL THEN
      rounding_ := Currency_Code_API.Get_Currency_Rounding(company_, order_rec_.currency_Code);
   ELSE
      rounding_ := curr_rounding_;
   END IF;
   tax_paying_party_ := order_rec_.free_of_chg_tax_pay_party;
   
   IF (line_rec_.tax_liability_type = 'EXM') OR (line_rec_.free_of_charge = Fnd_Boolean_API.DB_TRUE AND tax_paying_party_ = Tax_Paying_Party_API.DB_COMPANY) THEN
      -- No tax paid for this order line
      tax_amount_ := 0;
   ELSE
      tax_amount_ := Source_Tax_Item_API.Get_Total_Tax_Curr_Amount(company_, 
                                                                   Tax_Source_API.DB_CUSTOMER_ORDER_LINE,
                                                                   order_no_,
                                                                   line_no_,
                                                                   rel_no_,
                                                                   TO_CHAR(line_item_no_),
                                                                   '*');
   END IF;
   
   tax_amount_ := ROUND(tax_amount_, rounding_);
   RETURN NVL(tax_amount_, 0);
END Get_Total_Tax_Amount_Curr;


--@IgnoreMissingSysinit
FUNCTION Get_Total_Tax_Amount_Base (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   base_rounding_ IN NUMBER DEFAULT NULL) RETURN NUMBER
IS
   line_rec_          CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   tax_amount_        NUMBER := 0;
   rounding_          NUMBER;
   company_           VARCHAR2(20);
   tax_paying_party_  VARCHAR2(20);
   CURSOR get_lines(free_of_charge_ VARCHAR2, company_pay_tax_ VARCHAR2) IS
      SELECT line_no, rel_no, line_item_no, contract
      FROM  CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = order_no_
      AND   line_item_no <= 0
      AND   rowstate != 'Cancelled'
      AND   tax_liability_type != 'EXM'
      AND  (free_of_charge != free_of_charge_ OR tax_paying_party_ != company_pay_tax_);

   PROCEDURE Fetch_Company_And_Rounding___(contract_ VARCHAR2) IS
   BEGIN
      IF company_ IS NULL THEN
         company_ := Site_API.Get_Company(contract_);
      END IF;
      IF base_rounding_ IS NULL THEN
         rounding_ := Currency_Code_API.Get_Currency_Rounding(company_, Company_Finance_API.Get_Currency_Code(company_));
      ELSE
         rounding_ := base_rounding_;
      END IF;
   END Fetch_Company_And_Rounding___;
BEGIN
   tax_paying_party_ := Customer_Order_API.Get_Free_Of_Chg_Tax_Pay_Par_Db(order_no_);   
   IF (line_no_ IS NULL) THEN
      tax_amount_ := 0;
      FOR rec_ IN get_lines(Fnd_Boolean_API.DB_TRUE, Tax_Paying_Party_API.DB_COMPANY) LOOP
         -- Assign correct value for company_ and rounding_
         Fetch_Company_And_Rounding___(rec_.contract);

         tax_amount_ := tax_amount_ +
                        Source_Tax_Item_API.Get_Total_Tax_Dom_Amount(company_, 
                                                                     Tax_Source_API.DB_CUSTOMER_ORDER_LINE,
                                                                     order_no_,
                                                                     rec_.line_no,
                                                                     rec_.rel_no,
                                                                     TO_CHAR(rec_.line_item_no),
                                                                     '*');
      END LOOP;
   ELSE
      line_rec_         := Get_Object_By_Keys___(order_no_, line_no_, rel_no_, line_item_no_);
      company_          := Site_API.Get_Company(line_rec_.contract);
      -- Assign correct value for rounding_
      Fetch_Company_And_Rounding___(line_rec_.contract);      
      
      IF (line_rec_.tax_liability_type = 'EXM') OR (line_rec_.free_of_charge = Fnd_Boolean_API.DB_TRUE AND tax_paying_party_ = Tax_Paying_Party_API.DB_COMPANY) THEN
         -- No tax paid for this order line
         tax_amount_ := 0;
      ELSE
         tax_amount_ := Source_Tax_Item_API.Get_Total_Tax_Dom_Amount(company_, 
                                                                     Tax_Source_API.DB_CUSTOMER_ORDER_LINE,
                                                                     order_no_,
                                                                     line_no_,
                                                                     rel_no_,
                                                                     TO_CHAR(line_item_no_),
                                                                     '*');
      END IF;
   END IF;
   
   tax_amount_ := ROUND(tax_amount_, rounding_);
   RETURN NVL(tax_amount_, 0);
END Get_Total_Tax_Amount_Base;


PROCEDURE Modify_Condition_Code (
   order_no_       IN VARCHAR2,
   line_no_        IN VARCHAR2,
   rel_no_         IN VARCHAR2,
   line_item_no_   IN NUMBER,
   condition_code_ IN VARCHAR2 )
IS
   ord_attr_       VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Condition_Code');
   Client_SYS.Clear_Attr(ord_attr_);
   Client_SYS.Add_To_Attr( 'CONDITION_CODE', condition_code_, ord_attr_);
   Client_SYS.Add_To_Attr( 'SERVER_DATA_CHANGE', 1, ord_attr_);
   Modify_Line___(ord_attr_,order_no_,line_no_,rel_no_,line_item_no_);
END Modify_Condition_Code;


--@IgnoreMissingSysinit
FUNCTION New_Comp_Lines_Allowed (
   order_no_ IN VARCHAR2,
   line_no_  IN VARCHAR2,
   rel_no_   IN VARCHAR2 ) RETURN NUMBER
IS
   pkg_header_status_ CUSTOMER_ORDER_LINE_TAB.rowstate%TYPE;
BEGIN
   pkg_header_status_  := Get_Objstate(order_no_, line_no_, rel_no_, -1);
   IF pkg_header_status_ IN ('Cancelled', 'Delivered', 'Invoiced') THEN
      RETURN 0;
   ELSE
      RETURN 1;
   END IF;
END New_Comp_Lines_Allowed;


--@IgnoreMissingSysinit
FUNCTION Get_Full_Qty_Assigned (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   qty_assigned_ NUMBER := 0;
BEGIN
   IF (line_item_no_ >= 0) THEN
      qty_assigned_ := Customer_Order_Line_API.Get_Qty_Assigned(order_no_, line_no_,
                                                                rel_no_, line_item_no_);
   ELSE
      qty_assigned_ := Reserve_Customer_Order_API.Get_No_Of_Packages_Reserved(order_no_,
                                                                              line_no_,
                                                                              rel_no_);
   END IF;
   RETURN qty_assigned_;
END Get_Full_Qty_Assigned;


--@IgnoreMissingSysinit
PROCEDURE Get_Qty_Shipped_And_State (
   line_status_        OUT VARCHAR2,
   qty_shipped_        OUT NUMBER,
   demand_order_ref1_  IN  VARCHAR2,
   demand_order_ref2_  IN  VARCHAR2,
   demand_order_ref3_  IN  VARCHAR2 )
IS
   CURSOR get_line_info IS
      SELECT rowstate, qty_shipped
      FROM CUSTOMER_ORDER_LINE_TAB
      WHERE demand_order_ref1 = demand_order_ref1_
      AND   demand_order_ref2 = demand_order_ref2_
      AND   demand_order_ref3 = demand_order_ref3_
      AND   demand_code IN ('PO', 'IPT', 'IPD', 'IPT_RO')
      AND   rowstate IN ('PartiallyDelivered', 'Delivered', 'Invoiced')
      ORDER BY NVL(demand_order_ref4, -1);
BEGIN
   OPEN get_line_info;
   FETCH get_line_info INTO line_status_, qty_shipped_;
   CLOSE get_line_info;
END Get_Qty_Shipped_And_State;


--@IgnoreMissingSysinit
FUNCTION Customer_Is_Internal (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   customer_no_ CUSTOMER_ORDER_LINE_TAB.customer_no%TYPE;
   cust_rec_    Cust_Ord_Customer_API.Public_Rec;
BEGIN
   customer_no_ := Get_Customer_No (order_no_, line_no_, rel_no_, line_item_no_);
   cust_rec_ := Cust_Ord_Customer_API.Get(customer_no_);

   IF (cust_rec_.category = 'I') THEN
      RETURN ('TRUE');
   ELSE
      RETURN ('FALSE');
   END IF;
END Customer_Is_Internal;


PROCEDURE Handle_Pre_Posting_Change (
   pre_accounting_id_ IN NUMBER )
IS
   order_no_      CUSTOMER_ORDER_LINE_TAB.order_no%TYPE;
   line_no_       CUSTOMER_ORDER_LINE_TAB.line_no%TYPE;
   release_no_    CUSTOMER_ORDER_LINE_TAB.rel_no%TYPE;
   line_item_no_  CUSTOMER_ORDER_LINE_TAB.line_item_no%TYPE;
   message_text_  VARCHAR2(80);

   CURSOR get_keys IS
      SELECT order_no, line_no, rel_no, line_item_no
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  pre_accounting_id = pre_accounting_id_;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Handle_Pre_Posting_Change');
   OPEN get_keys;
   FETCH get_keys INTO order_no_, line_no_, release_no_, line_item_no_;
   CLOSE get_keys;

   message_text_ := Language_SYS.Translate_Constant(lu_name_, 'PREACCCHG: The preposting has been added/changed.');
   Customer_Order_Line_Hist_API.New(order_no_, line_no_, release_no_, line_item_no_, message_text_);
END Handle_Pre_Posting_Change;


--@IgnoreMissingSysinit
FUNCTION All_Non_Inv_Parts (
   order_no_ IN VARCHAR2,
   line_no_  IN VARCHAR2,
   rel_no_   IN VARCHAR2 ) RETURN BOOLEAN
IS
   exist_        NUMBER;
   all_non_inv_  BOOLEAN := FALSE;

   CURSOR get_components IS
      SELECT 1
      FROM   CUSTOMER_ORDER_LINE_TAB col, SALES_PART_TAB sp
      WHERE  col.order_no     = order_no_
      AND    col.line_no      = line_no_
      AND    col.rel_no       = rel_no_
      AND    col.line_item_no > 0
      AND    col.rowstate    != 'Cancelled'
      AND    col.contract     = sp.contract
      AND    col.catalog_no   = sp.catalog_no
      AND    sp.catalog_type  = 'INV';
BEGIN
   OPEN get_components;
   FETCH get_components INTO exist_;
   IF (get_components%NOTFOUND) THEN
      all_non_inv_ := TRUE;
   END IF;
   CLOSE get_components;

   RETURN all_non_inv_;
END All_Non_Inv_Parts;


--@IgnoreMissingSysinit
FUNCTION All_Components_Supply_Ipd (
   order_no_ IN VARCHAR2,
   line_no_  IN VARCHAR2,
   rel_no_   IN VARCHAR2 ) RETURN BOOLEAN
IS
   exist_   NUMBER;
   CURSOR get_component_supply IS
      SELECT   1
      FROM     CUSTOMER_ORDER_LINE_TAB
      WHERE    order_no = order_no_
      AND      line_no  = line_no_
      AND      rel_no   = rel_no_
      AND      line_item_no > 0
      AND      rowstate    != 'Cancelled'
      AND      supply_code != 'IPD';
BEGIN
   OPEN get_component_supply;
   FETCH get_component_supply INTO exist_;
   IF (get_component_supply%NOTFOUND) THEN
      CLOSE get_component_supply;
      RETURN TRUE;
   END IF;
   CLOSE get_component_supply;
   RETURN FALSE;
END All_Components_Supply_Ipd;


--@IgnoreMissingSysinit
FUNCTION Get_Catch_Qty_Del_On_Delivnote (
   order_no_      IN VARCHAR2,
   line_no_       IN VARCHAR2,
   rel_no_        IN VARCHAR2,
   line_item_no_  IN NUMBER,
   delnote_no_    IN VARCHAR2 ) RETURN NUMBER
IS
   sum_ NUMBER;
   CURSOR get_sum_catch_qty_shipped IS
      SELECT SUM(catch_qty_shipped)
        FROM customer_order_delivery_tab
       WHERE order_no = order_no_
         AND line_no = line_no_
         AND rel_no = rel_no_
         AND line_item_no = line_item_no_
         AND delnote_no = delnote_no_
         AND cancelled_delivery = 'FALSE';
BEGIN
   OPEN get_sum_catch_qty_shipped;
   FETCH get_sum_catch_qty_shipped INTO sum_;
   IF (get_sum_catch_qty_shipped%NOTFOUND) THEN
      sum_ := 0;
   END IF;
   CLOSE get_sum_catch_qty_shipped;
   RETURN NVL(sum_, 0);
END Get_Catch_Qty_Del_On_Delivnote;


--@IgnoreMissingSysinit
FUNCTION Get_Internal_Or_Customer_Po_No (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   order_rec_   CUSTOMER_ORDER_API.Public_Rec;
BEGIN
   order_rec_   := CUSTOMER_ORDER_API.Get(order_no_);

   IF (Get_Demand_Code_Db(order_no_,line_no_,rel_no_,line_item_no_) IN ('IPT', 'IPT_RO')) THEN
      RETURN order_rec_.internal_po_no;
   ELSE
      RETURN order_rec_.customer_po_no;
   END IF;
END Get_Internal_Or_Customer_Po_No;


PROCEDURE Connect_To_Load_List (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   load_id_      IN NUMBER )
IS
   attr_     VARCHAR2(2000);
   msg_text_ VARCHAR2(200);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Connect_To_Load_List');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('LOAD_ID', load_id_, attr_);
   Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);

   msg_text_ := Language_SYS.Translate_Constant(lu_name_, 'CONNLOADLISTID: This line is connected to Load list :P1', NULL, load_id_);
   Customer_Order_Line_Hist_API.New( order_no_,
                                     line_no_,
                                     rel_no_,
                                     line_item_no_,
                                     msg_text_);
END Connect_To_Load_List;


PROCEDURE Disconnect_From_Load_List (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   load_id_      IN NUMBER )
IS
   attr_         VARCHAR2(2000);
   msg_text_     VARCHAR2(200);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Disconnect_From_Load_List');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('LOAD_ID', TO_NUMBER(NULL), attr_);
   Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);
   msg_text_ := Language_SYS.Translate_Constant(lu_name_, 'DISCONLOADLISTID: This line is disconnected from Load list :P1', NULL, load_id_);
   Customer_Order_Line_Hist_API.New( order_no_,
                                     line_no_,
                                     rel_no_,
                                     line_item_no_,
                                     msg_text_);
END Disconnect_From_Load_List;


PROCEDURE Check_Or_Modify_Activity_Seq (
   res_within_activity_exist_ OUT VARCHAR2,
   order_no_                  IN  VARCHAR2,
   project_id_                IN  VARCHAR2,
   demand_ref1_               IN  VARCHAR2,
   demand_ref2_               IN  VARCHAR2,
   demand_ref3_               IN  VARCHAR2,
   new_activity_seq_          IN  NUMBER,
   action_                    IN  VARCHAR2)
IS
   dummy_                NUMBER;
   material_allocation_  VARCHAR2(25);

   CURSOR get_qty_assigned_exist IS
      SELECT 1
      FROM CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = order_no_
      AND demand_code = 'PO'
      AND demand_order_ref1 = demand_ref1_
      AND demand_order_ref2 = demand_ref2_
      AND demand_order_ref3 = demand_ref3_
      AND project_id = project_id_
      AND qty_shipped = 0
      AND qty_assigned > 0;

   CURSOR get_order_lines IS
      SELECT line_no, rel_no, line_item_no, qty_assigned
      FROM CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = order_no_
      AND demand_code = 'PO'
      AND demand_order_ref1 = demand_ref1_
      AND demand_order_ref2 = demand_ref2_
      AND demand_order_ref3 = demand_ref3_
      AND project_id = project_id_;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Check_Or_Modify_Activity_Seq');
   res_within_activity_exist_ := 'FALSE';

   IF (action_ = 'CHECK') THEN
      IF ( project_id_ IS NOT NULL) THEN
         $IF (Component_Proj_SYS.INSTALLED)$THEN
            material_allocation_ := Project_API.Get_Material_Allocation_Db(project_id_);
         $END

         IF (material_allocation_ = 'WITHIN_ACTIVITY') THEN

            OPEN get_qty_assigned_exist;
            FETCH get_qty_assigned_exist INTO dummy_;
            IF (get_qty_assigned_exist%FOUND) THEN
               res_within_activity_exist_ := 'TRUE';
            END IF;
            CLOSE get_qty_assigned_exist;

         END IF;
      END IF;

   ELSIF (action_ = 'MODIFY') THEN

      FOR rec_ IN get_order_lines LOOP
         -- Should pass null before actually changing the activity sequence to reverse previous actions.
         Customer_Order_Line_API.Modify_Activity_Seq(order_no_, rec_.line_no, rec_.rel_no, rec_.line_item_no, NULL);
         Customer_Order_Line_API.Modify_Activity_Seq(order_no_, rec_.line_no, rec_.rel_no, rec_.line_item_no, new_activity_seq_);
      END LOOP;

   END IF;
END Check_Or_Modify_Activity_Seq;


PROCEDURE Recalc_Line_Tot_Net_Weight (
   part_no_             IN VARCHAR2,
   configuration_id_    IN VARCHAR2 )
IS
   objid_             VARCHAR2(2000);
   rowversion_        VARCHAR2(2000);
   line_rec_          CUSTOMER_ORDER_LINE_TAB%ROWTYPE;

   CURSOR get_co_lines IS
      SELECT order_no, line_no, rel_no, line_item_no
        FROM CUSTOMER_ORDER_LINE_TAB
       WHERE configuration_id = configuration_id_
         AND part_no = part_no_
         AND rowstate NOT IN ('Invoiced', 'Cancelled', 'Delivered');
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Recalc_Line_Tot_Net_Weight');
   FOR rec_ IN get_co_lines LOOP
      line_rec_ := Lock_By_Keys___(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no);
      Sales_Weight_Volume_Util_API.Get_Total_Weight_Volume(total_net_weight_      => line_rec_.line_total_weight,
                                                           total_gross_weight_    => line_rec_.line_total_weight_gross,
                                                           total_volume_          => line_rec_.line_total_qty,
                                                           adjusted_net_weight_   => line_rec_.adjusted_weight_net,
                                                           adjusted_gross_weight_ => line_rec_.adjusted_weight_gross,
                                                           adjusted_volume_       => line_rec_.adjusted_volume,
                                                           contract_              => line_rec_.contract,
                                                           catalog_no_            => line_rec_.catalog_no,
                                                           part_no_               => line_rec_.part_no,
                                                           buy_qty_due_           => line_rec_.buy_qty_due,
                                                           configuration_id_      => line_rec_.configuration_id,
                                                           input_unit_meas_       => line_rec_.input_unit_meas,
                                                           input_qty_              => line_rec_.input_qty,
                                                           packing_instruction_id_ => line_rec_.packing_instruction_id);
      Get_Id_Version_By_Keys___(objid_, rowversion_, rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no);
      line_rec_.rowversion := SYSDATE;
      -- This will not clear the info_. This is necessary because this method is used in CFGCHR.
      Update_Line___(objid_, line_rec_);
      IF (line_rec_.load_id IS NOT NULL) THEN
         Cust_Order_Load_List_Line_API.Modify_Line_Weights(load_id_      => line_rec_.load_id,
                                                           pos_          => Cust_Order_Load_List_Line_API.Get_Pos(line_rec_.load_id, rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no),
                                                           weight_net_   => line_rec_.line_total_weight,
                                                           weight_gross_ => line_rec_.line_total_weight_gross);
      END IF;
   END LOOP;
END Recalc_Line_Tot_Net_Weight;


PROCEDURE Modify_Purchase_Part_No (
   order_no_         IN VARCHAR2,
   line_no_          IN VARCHAR2,
   rel_no_           IN VARCHAR2,
   line_item_no_     IN NUMBER,
   purchase_part_no_ IN VARCHAR2 )
IS
   attr_             VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Purchase_Part_No');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('PURCHASE_PART_NO', purchase_part_no_, attr_);
   Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);
END Modify_Purchase_Part_No;


PROCEDURE Modify_Line_Default_Addr_Flag(
   line_rec_          IN     CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   order_no_          IN     VARCHAR2,
   default_addr_flag_ IN     VARCHAR2)
IS
   new_default_addr_flag_ VARCHAR2(1);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Line_Default_Addr_Flag');
   new_default_addr_flag_ := Check_Default_Addr_Flag___(line_rec_, order_no_, default_addr_flag_);
   IF (new_default_addr_flag_ != default_addr_flag_) THEN
      Modify_Default_Addr_Flag__(order_no_, line_rec_.line_no, line_rec_.rel_no, line_rec_.line_item_no, new_default_addr_flag_);
   END IF;
END Modify_Line_Default_Addr_Flag;


--@IgnoreMissingSysinit
FUNCTION Get_Qty_Picked_On_Deliv_Note (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   delnote_no_   IN VARCHAR2 ) RETURN NUMBER
IS
   qty_picked_ NUMBER := 0;

   CURSOR get_sum_qty_picked IS
      SELECT sum(qty_picked)
      FROM   customer_order_reservation_tab
      WHERE  order_no     = order_no_
      AND    line_no      = line_no_
      AND    rel_no       = rel_no_
      AND    line_item_no = line_item_no_
      AND    delnote_no   = delnote_no_;
BEGIN
   OPEN get_sum_qty_picked;
   FETCH get_sum_qty_picked INTO qty_picked_;
   IF (get_sum_qty_picked%NOTFOUND) THEN
      qty_picked_ := 0;
   END IF;
   CLOSE get_sum_qty_picked;
   RETURN qty_picked_;
END Get_Qty_Picked_On_Deliv_Note;


--@IgnoreMissingSysinit
FUNCTION Get_Current_Info RETURN VARCHAR2
IS
   current_info_   VARCHAR2(32000);
BEGIN
   current_info_ :=  App_Context_SYS.Find_Value('CUSTOMER_ORDER_LINE_API.CURRENT_INFO_');
   RETURN current_info_;
END Get_Current_Info;


PROCEDURE Clear_Current_Info
IS
   current_info_  VARCHAR2(32000);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Clear_Current_Info');
   current_info_ := NULL;
   App_Context_SYS.Set_Value('CUSTOMER_ORDER_LINE_API.CURRENT_INFO_',current_info_);
END Clear_Current_Info;


PROCEDURE Get_Calculated_Pkg_Cost (
   pkg_cost_     OUT NUMBER,
   pkg_order_no_ IN  VARCHAR2,
   pkg_line_no_  IN  VARCHAR2,
   pkg_rel_no_   IN  VARCHAR2)
IS
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Get_Calculated_Pkg_Cost');
   Update_Package_Cost___(pkg_cost_, pkg_order_no_, pkg_line_no_, pkg_rel_no_);
END Get_Calculated_Pkg_Cost;


PROCEDURE Update_Freight_Free (
   rec_ IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE )
IS
   charge_amount_ NUMBER;
   attr_          VARCHAR2(2000);
   freight_free_  VARCHAR2(5);

   CURSOR get_rec IS
      SELECT charge_amount
      FROM  customer_order_charge_tab
      WHERE order_no = rec_.order_no
      AND   line_no = rec_.line_no
      AND   rel_no = rec_.rel_no
      AND   line_item_no = rec_.line_item_no
      AND   charge_price_list_no IS NOT NULL;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Update_Freight_Free');
   OPEN get_rec;
   FETCH get_rec INTO charge_amount_;
   CLOSE get_rec;

   Client_SYS.Clear_Attr(attr_);
   IF charge_amount_ = 0 THEN
      Client_SYS.Add_To_Attr('FREIGHT_FREE_DB', 'TRUE', attr_);
      freight_free_ := 'TRUE';
   ELSE
      Client_SYS.Add_To_Attr('FREIGHT_FREE_DB', 'FALSE', attr_);
      freight_free_ := 'FALSE';
   END IF;

   IF (rec_.freight_free != freight_free_) THEN
      Modify_Line___(attr_, rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no);
   END IF;
END Update_Freight_Free;


PROCEDURE Copy_Prepostings_To_Line (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER )
IS
   header_pre_acc_         NUMBER;
   pre_accounting_id_      NUMBER;
   contract_               VARCHAR2(5);
   CURSOR get_line_accounting_id IS
      SELECT pre_accounting_id, contract
        FROM CUSTOMER_ORDER_LINE_TAB
       WHERE order_no = order_no_
         AND line_no = line_no_
         AND rel_no = rel_no_
         AND line_item_no = line_item_no_;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Copy_Prepostings_To_Line');
   header_pre_acc_   := Customer_Order_API.Get_Pre_Accounting_Id(order_no_);

   OPEN get_line_accounting_id;
   FETCH get_line_accounting_id INTO pre_accounting_id_, contract_;
   CLOSE get_line_accounting_id;

   Pre_Accounting_API.Copy_Pre_Accounting(header_pre_acc_, pre_accounting_id_, contract_);
END Copy_Prepostings_To_Line;


PROCEDURE Calculate_Revenue (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER )
IS
   deferred_call_       VARCHAR2(1000) := 'CUSTOMER_ORDER_LINE_API.Calculate_Revenue__';
   posted_jobs_tab_     Transaction_SYS.Arguments_Table;

   attrib_value_        VARCHAR2(2000) := '';
   job_order_no_        CUSTOMER_ORDER_LINE_TAB.order_no%TYPE;
   job_line_no_         CUSTOMER_ORDER_LINE_TAB.line_no%TYPE;
   job_rel_no_          CUSTOMER_ORDER_LINE_TAB.rel_no%TYPE;
   job_line_item_no_    CUSTOMER_ORDER_LINE_TAB.line_item_no%TYPE;

   attr_                VARCHAR2(2000);
   batch_desc_          VARCHAR2(1000);
   posted_job_exists_   BOOLEAN := FALSE;
   
   activity_info_tab_          Public_Declarations_API.PROJ_Project_Conn_Cost_Tab;
   activity_revenue_info_tab_  Public_Declarations_API.PROJ_Project_Conn_Revenue_Tab;
   attributes_                 Public_Declarations_API.PROJ_Project_Conn_Attr_Type;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Calculate_Revenue');
   posted_jobs_tab_ := Transaction_SYS.Get_Posted_Job_Arguments(deferred_call_, NULL);

   IF posted_jobs_tab_.COUNT > 0 THEN
      FOR i_ IN posted_jobs_tab_.FIRST..posted_jobs_tab_.LAST LOOP
         attrib_value_     := posted_jobs_tab_(i_).arguments_string;
         job_order_no_     := Client_SYS.Get_Item_Value('ORDER_NO',attrib_value_);
         job_line_no_      := Client_SYS.Get_Item_Value('LINE_NO',attrib_value_);
         job_rel_no_       := Client_SYS.Get_Item_Value('REL_NO',attrib_value_);
         job_line_item_no_ := Client_SYS.Get_Item_Value('LINE_ITEM_NO',attrib_value_);

         -- Check whether another job for same order line is posted
         IF ( job_order_no_ = order_no_ AND job_line_no_ = line_no_ AND
              job_rel_no_ = rel_no_ AND job_line_item_no_ = line_item_no_ ) THEN
            posted_job_exists_ := TRUE;
            EXIT;
         END IF;
      END LOOP;
   END IF;

   -- Create a new job if no posted job exists for the same order line
   IF ( NOT posted_job_exists_ ) THEN
      --Project connection header created seprately as an online call to avoid connection not created due to posting error in background job
      $IF (Component_Proj_SYS.INSTALLED) $THEN
      Create_Project_Connection___ (order_no_                        => order_no_,
                                    line_no_                         => line_no_,
                                    rel_no_                          => rel_no_,
                                    line_item_no_                    => line_item_no_,
                                    proj_lu_name_                    => 'COLINEREV',
                                    system_ctrl_connection_          => 'TRUE',
                                    activity_info_tab_               => activity_info_tab_,
                                    activity_revenue_info_tab_       => activity_revenue_info_tab_,
                                    attributes_                      => attributes_);
      $END
      Client_SYS.Clear_Attr(attr_);
      Client_SYS.Add_To_Attr('ORDER_NO', order_no_ , attr_);
      Client_SYS.Add_To_Attr('LINE_NO', line_no_ , attr_);
      Client_SYS.Add_To_Attr('REL_NO', rel_no_ , attr_);
      Client_SYS.Add_To_Attr('LINE_ITEM_NO', line_item_no_ , attr_);

      batch_desc_ := Language_SYS.Translate_Constant(lu_name_,'REFRESHPROJREVENUE: Refresh project revenue for Customer Order Line');
      Transaction_SYS.Deferred_Call(deferred_call_, attr_, batch_desc_);
   END IF;
END Calculate_Revenue;


PROCEDURE Refresh_Project_Connection (
   activity_info_tab_         IN OUT NOCOPY Public_Declarations_API.PROJ_Project_Conn_Cost_Tab,
   activity_revenue_info_tab_ IN OUT NOCOPY Public_Declarations_API.PROJ_Project_Conn_Revenue_Tab,
   attributes_                IN OUT NOCOPY Public_Declarations_API.PROJ_Project_Conn_Attr_Type,
   activity_seq_              IN     NUMBER,
   keyref1_                   IN     VARCHAR2,
   keyref2_                   IN     VARCHAR2,
   keyref3_                   IN     VARCHAR2,
   keyref4_                   IN     VARCHAR2,
   keyref5_                   IN     VARCHAR2,
   keyref6_                   IN     VARCHAR2,
   refresh_old_data_          IN     VARCHAR2 DEFAULT 'FALSE',
   proj_lu_name_              IN     VARCHAR2 DEFAULT NULL )
IS
   order_no_                         VARCHAR2(12)  := keyref1_;
   line_no_                          VARCHAR2(4)   := keyref2_;
   rel_no_                           VARCHAR2(4)   := keyref3_;
   line_item_no_                     NUMBER        := TO_NUMBER(keyref4_);
   rec_                              customer_order_line_tab%ROWTYPE;
   object_progress_                  NUMBER;
   committed_cost_elements_          Mpccom_Accounting_API.Project_Cost_Element_Tab;
   used_cost_elements_               Mpccom_Accounting_API.Project_Cost_Element_Tab;
   empty_tab_                        Mpccom_Accounting_API.Project_Cost_Element_Tab;
   planned_cost_elements_            Mpccom_Accounting_API.Project_Cost_Element_Tab;
   inventory_part_                   BOOLEAN;
   base_currency_code_               VARCHAR2(3);
   base_currency_type_               VARCHAR2(10);
   company_                          VARCHAR2(20);
   $IF Component_Proj_SYS.INSTALLED $THEN
   project_id_                       project_tab.project_id%TYPE;
   $END         
   count_                            PLS_INTEGER   := 0;
   countr_                           PLS_INTEGER   := 0;
   child_object_key1_                VARCHAR2(20);
   child_object_key2_                VARCHAR2(20);
   child_object_key3_                VARCHAR2(20);
   child_object_key4_                VARCHAR2(12);
   child_object_value_               VARCHAR2(30);
   progress_qty_                     NUMBER        := 0;
   progress_cost_                    NUMBER;
   progress_cost_tmp_                NUMBER;
   progress_hours_                   NUMBER;
   transaction_currency_code_        VARCHAR2(3);
   transaction_currency_rate_        NUMBER;
   planned_revenue_element_tab_      Order_Proj_Revenue_Manager_API.Project_Revenue_Element_Tab;
   co_currency_code_                 Customer_Order_tab.Currency_Code%TYPE;
   include_in_ev_                    VARCHAR2(10);
   transaction_curr_rate_cost_       NUMBER :=1;

   CURSOR get_project_cost_elements IS
      SELECT project_cost_element   project_cost_element,
             SUM(planned_amount)    planned_amount,
             SUM(planned_hours)     planned_hours,
             SUM(committed_amount)  committed_amount,
             SUM(used_amount)       used_amount
      FROM   project_cost_element_tmp
      GROUP BY project_cost_element;

   CURSOR get_proj_revenue_elements IS
      SELECT project_revenue_element project_revenue_element,
             SUM (amount)            planned_revenue
      FROM   TABLE(planned_revenue_element_tab_)
      GROUP BY project_revenue_element;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Refresh_Project_Connection');
   rec_                       := Get_Object_By_Keys___ (order_no_, line_no_, rel_no_, line_item_no_);
   company_                   := Site_API.Get_Company (rec_.contract);
   co_currency_code_          := Customer_Order_API.Get_Currency_Code (order_no_ => order_no_);
   $IF Component_Proj_SYS.INSTALLED $THEN
   project_id_                := Activity_API.Get_Project_Id (activity_seq_ => rec_.activity_seq);
   base_currency_type_        := Project_API.Get_Currency_Type (project_id_, company_);
   $END         
   base_currency_code_        := Company_Finance_API.Get_Currency_Code (company_);
   transaction_currency_rate_ := 1 / rec_.currency_rate;
   count_                     := activity_info_tab_.COUNT;
   countr_                    := activity_revenue_info_tab_.COUNT;
   -- We need to consider demand codes 'IPT', 'IPD', 'SO', 'IO', 'NO', 'PD', 'DOP' and 'PT' to report EV under COLINE.   
   IF (rec_.supply_code IN ('IPT', 'IPD', 'SO', 'IO', 'PT', 'NO', 'PD', 'DOP')) THEN
      include_in_ev_          := 'TRUE';
   ELSE
      include_in_ev_          := 'FALSE';
   END IF;

   -- Start 'COLINE'
   IF (proj_lu_name_ = 'COLINE') THEN
      IF (( rec_.demand_code = 'WO' ) OR (Is_External_Service_Order___(rec_.demand_code, rec_.demand_order_ref1) = 'TRUE')) THEN
         RETURN;
      END IF;

      IF (Project_Connection_Exist___ (order_no_, line_no_, rel_no_, line_item_no_, rec_.activity_seq, proj_lu_name_) = 'TRUE') THEN

         Get_Activity_Info___ (planned_cost_elements_     => planned_cost_elements_,
                               committed_cost_elements_   => committed_cost_elements_,
                               used_cost_elements_        => used_cost_elements_,
                               object_progress_           => object_progress_,
                               rec_                       => rec_);

         IF (rec_.demand_code = Order_Supply_Type_API.DB_REPLACEMENT_CUSTOMER_ORDER) THEN
            RETURN;
         END IF;

         Invent_Proj_Cost_Manager_API.Fill_Project_Cost_Element_Tmp (planned_amount_tab_           => planned_cost_elements_,
                                                                     planned_committed_amount_tab_ => empty_tab_,
                                                                     committed_amount_tab_         => committed_cost_elements_,
                                                                     used_amount_tab_              => used_cost_elements_);

         -- PT: Purch Order Trans, PD: Purch Order Dir, IPT: Int Purch Trans, IPD: Int Purch Dir
         IF (rec_.supply_code IN ('PT', 'PD', 'IPT', 'IPD')) THEN
            inventory_part_                 := Inventory_Part_API.Check_Exist (contract_ => rec_.contract,
                                                                               part_no_  => rec_.part_no);
            IF (inventory_part_ = FALSE) THEN
               $IF (Component_Purch_SYS.INSTALLED) $THEN
                  transaction_currency_code_   := Purchase_Part_Supplier_API.Get_Currency_Code  (contract_  => rec_.contract,
                                                                                                 part_no_   => rec_.purchase_part_no,
                                                                                                 vendor_no_ => rec_.vendor_no);
               $END                                                                                              
               IF (transaction_currency_code_ IS NOT NULL) THEN
                  Currency_Rate_API.Get_Project_Currency_Rate (transaction_currency_rate_,
                                                               company_,
                                                               transaction_currency_code_,
                                                               base_currency_code_,
                                                               base_currency_type_,
                                                               Site_API.Get_Site_Date(rec_.contract));
                  transaction_curr_rate_cost_:= transaction_currency_rate_;
               END IF;
            END IF;
         END IF;

         -- IO: Invent Order, NO: Non Inventory, PI: Project Inventory
         IF (rec_.supply_code IN ('IO', 'NO', 'PI') AND NVL(rec_.revised_qty_due, 0) != 0) THEN
            progress_qty_                   := (NVL(rec_.qty_shipped, 0) - NVL(rec_.qty_returned, 0)) / rec_.revised_qty_due;
            progress_cost_                  := progress_qty_;
         END IF;

         -- PJD: Project Deliverables
         IF (rec_.supply_code = 'PJD' AND rec_.rowstate = 'Delivered') THEN
            progress_cost_                  := 1;
         END IF;

         -- PT: Purch Order Trans, PD: Purch Order Dir, IPT: Int Purch Trans, IPD: Int Purch Dir
         $IF Component_Purch_SYS.INSTALLED $THEN
            IF (rec_.supply_code IN ('PT', 'PD', 'IPT', 'IPD')) THEN
               Customer_Order_Pur_Order_API.Get_Purord_For_Custord (po_order_no_     => child_object_key1_,  --OUT parameter
                                                                    po_line_no_      => child_object_key2_,  --OUT parameter
                                                                    po_rel_no_       => child_object_key3_,  --OUT parameter
                                                                    purchase_type_   => child_object_value_, --OUT parameter
                                                                    oe_order_no_     => rec_.order_no,
                                                                    oe_line_no_      => rec_.line_no,
                                                                    oe_rel_no_       => rec_.rel_no,
                                                                    oe_line_item_no_ => rec_.line_item_no);

               progress_cost_               := Purchase_Order_Line_API.Get_Proj_Cost_Element_Progress (order_no_         => child_object_key1_,
                                                                                                       line_no_          => child_object_key2_,
                                                                                                       release_no_       => child_object_key3_,
                                                                                                       original_qty_due_ => NULL);
               IF (NVL(progress_cost_, 0) > 1) THEN
                  progress_cost_            := 1;
               END IF;
            END IF;
         $END

         -- SO: Shop Order
         $IF Component_Shpord_SYS.INSTALLED $THEN
            IF (rec_.supply_code = 'SO') THEN
               Customer_Order_Shop_Order_API.Get_Shop_Order (so_order_no_     => child_object_key1_, --OUT parameter
                                                             so_release_no_   => child_object_key2_, --OUT parameter
                                                             so_sequence_no_  => child_object_key3_, --OUT parameter
                                                             oe_order_no_     => rec_.order_no,
                                                             oe_line_no_      => rec_.line_no,
                                                             oe_rel_no_       => rec_.rel_no,
                                                             oe_line_item_no_ => rec_.line_item_no);
            END IF;
         $END

         -- DOP: DOP Order
         $IF Component_Dop_SYS.INSTALLED $THEN
            IF (rec_.supply_code = 'DOP') THEN
               child_object_key4_ := Dop_Demand_Cust_Ord_API.Get_Dop_Id_For_Cust_Ord_Line (order_no_        => rec_.order_no,
                                                                                           line_no_         => rec_.line_no,
                                                                                           rel_no_          => rec_.rel_no,
                                                                                           line_item_no_    => rec_.line_item_no);
            END IF;
         $END

         FOR proj_cost_element_rec_ IN get_project_cost_elements LOOP
            activity_info_tab_(count_).control_category          := proj_cost_element_rec_.project_cost_element;
            activity_info_tab_(count_).planned                   := proj_cost_element_rec_.planned_amount;
            activity_info_tab_(count_).planned_hours             := proj_cost_element_rec_.planned_hours;
            activity_info_tab_(count_).committed                 := proj_cost_element_rec_.committed_amount;
            activity_info_tab_(count_).used                      := proj_cost_element_rec_.used_amount;
            activity_info_tab_(count_).transaction_currency_code := transaction_currency_code_;
            activity_info_tab_(count_).planned_transaction       := activity_info_tab_(count_).planned * transaction_curr_rate_cost_;
            activity_info_tab_(count_).committed_transaction     := activity_info_tab_(count_).committed * transaction_curr_rate_cost_;
            activity_info_tab_(count_).used_transaction          := activity_info_tab_(count_).used * transaction_curr_rate_cost_;
            progress_cost_tmp_                                   := progress_cost_;
            IF (NVL(activity_info_tab_(count_).planned, 0) = 0) THEN
               progress_cost_tmp_                                := 0;
            END IF;
            IF (NVL(activity_info_tab_(count_).planned_hours, 0) = 0) THEN
               progress_hours_                                   := 0;
            END IF;
            -- SO: Shop Order
            $IF Component_Shpord_SYS.INSTALLED $THEN
               IF (rec_.supply_code = 'SO') THEN
                  IF (NVL(activity_info_tab_(count_).planned, 0) <> 0 OR
                      NVL(activity_info_tab_(count_).planned_hours, 0) <> 0) THEN
                     Shop_Order_Project_Cost_API.Get_Proj_Cost_Element_Progress (progress_cost_        => progress_cost_tmp_, --OUT parameter
                                                                                 progress_hours_       => progress_hours_,    --OUT parameter
                                                                                 order_no_             => child_object_key1_,
                                                                                 release_no_           => child_object_key2_,
                                                                                 sequence_no_          => child_object_key3_,
                                                                                 project_cost_element_ => activity_info_tab_(count_).control_category);
                  END IF;
               END IF;
            $END
            -- DOP: DOP Order
            -- Defect DE303 removed condition check for DOP-Connection
            $IF Component_Dop_SYS.INSTALLED $THEN
               IF (rec_.supply_code = 'DOP') THEN
                  IF (NVL(activity_info_tab_(count_).planned, 0) <> 0 OR
                      NVL(activity_info_tab_(count_).planned_hours, 0) <> 0) THEN
                     Dop_Head_API.Get_Proj_Cost_Element_Progress (progress_cost_        => progress_cost_tmp_,  --OUT parameter
                                                                  progress_hours_       => progress_hours_,     --OUT parameter
                                                                  dop_id_               => child_object_key4_,
                                                                  project_cost_element_ => activity_info_tab_(count_).control_category);
                  END IF;
               END IF;
            $END
            -- When CO-Line and child-object both does not report this project-cost-element to project-activity
            -- Only CO-Line is reporting this project-cost-element
            IF (NVL(progress_cost_tmp_, 0) = 0) AND (rec_.rowstate = 'Delivered') THEN
               progress_cost_tmp_                                := 1;
            END IF;
            IF (NVL(progress_hours_, 0) = 0) AND (rec_.rowstate = 'Delivered') THEN
               progress_hours_                                   := 1;
            END IF;
            activity_info_tab_(count_).progress_cost             := progress_cost_tmp_;
            activity_info_tab_(count_).progress_hours            := progress_hours_;
            activity_info_tab_(count_).earned_value_cost         := proj_cost_element_rec_.planned_amount * progress_cost_tmp_;
            activity_info_tab_(count_).earned_value_hours        := proj_cost_element_rec_.planned_hours * progress_hours_;
            count_                                               := count_ + 1;
         END LOOP;

         attributes_.include_in_ev         := include_in_ev_;
         attributes_.last_transaction_date := SYSDATE;

         IF (refresh_old_data_ = 'FALSE') THEN
            $IF Component_Proj_SYS.INSTALLED $THEN
            Project_Connection_Util_API.Refresh_Connection (proj_lu_name_              => proj_lu_name_,
                                                            activity_seq_              => rec_.activity_seq,
                                                            keyref1_                   => rec_.order_no,
                                                            keyref2_                   => rec_.line_no,
                                                            keyref3_                   => rec_.rel_no,
                                                            keyref4_                   => rec_.line_item_no,
                                                            keyref5_                   => '*',
                                                            keyref6_                   => '*',
                                                            object_description_        => lu_name_,
                                                            activity_info_tab_         => activity_info_tab_,
                                                            activity_revenue_info_tab_ => activity_revenue_info_tab_,
                                                            attributes_                => attributes_);
            $ELSE
            NULL;
            $END         
         END IF;
      END IF;

      -- Purchase Component Parts should report their cost and progress back to the Purchase Order Line.
      IF (refresh_old_data_ = 'FALSE') THEN
         -- Purchase Component Parts should report their cost and progress back to the Purchase Order Line.
         $IF (Component_Purch_SYS.INSTALLED) $THEN
            IF (Is_Purch_Comp_Part_Line___(rec_)) THEN
               Purchase_Order_Line_API.Calculate_Cost_And_Progress (rec_.demand_order_ref1, rec_.demand_order_ref2, rec_.demand_order_ref3);
            END IF;
         $ELSE
            NULL;
         $END
      END IF;

   END IF;

   -- Start 'COLINEREV'
   IF (proj_lu_name_ = 'COLINEREV') THEN
      -- skip the revenue calculation for PKG part component lines
      IF (line_item_no_ > 0) THEN
         RETURN;
      END IF;

      planned_revenue_element_tab_ := Order_Proj_Revenue_Manager_API.Get_Planned_Revenue_Elements (rec_,
                                                                                                   refresh_old_data_ );

      FOR proj_revenue_element_rec_ IN get_proj_revenue_elements LOOP
         IF (Project_Cost_Element_API.Get_Element_Type_Db (company_, proj_revenue_element_rec_.project_revenue_element) = 'REVENUE') THEN
            activity_revenue_info_tab_(countr_).control_category          := proj_revenue_element_rec_.project_revenue_element;
            activity_revenue_info_tab_(countr_).planned_revenue           := proj_revenue_element_rec_.planned_revenue;
            activity_revenue_info_tab_(countr_).transaction_currency_code := co_currency_code_;
            activity_revenue_info_tab_(countr_).planned_transaction       := activity_revenue_info_tab_(countr_).planned_revenue * transaction_currency_rate_;
            countr_                                                       := countr_ + 1;
         ELSE
            activity_info_tab_(count_).control_category                   := proj_revenue_element_rec_.project_revenue_element;
            activity_info_tab_(count_).planned                            := -1 * proj_revenue_element_rec_.planned_revenue;
            activity_info_tab_(count_).transaction_currency_code          := co_currency_code_;
            activity_info_tab_(count_).planned_transaction                := activity_info_tab_(count_).planned * transaction_currency_rate_;
            count_                                                        := count_ + 1;
         END IF;
      END LOOP;

      IF (refresh_old_data_ = 'FALSE') THEN
         IF (Project_Connection_Exist___ (order_no_, line_no_, rel_no_, line_item_no_, rec_.activity_seq, proj_lu_name_) = 'FALSE') THEN
            Create_Project_Connection___ (order_no_                        => rec_.order_no,
                                          line_no_                         => rec_.line_no,
                                          rel_no_                          => rec_.rel_no,
                                          line_item_no_                    => rec_.line_item_no,
                                          proj_lu_name_                    => 'COLINEREV',
                                          system_ctrl_connection_          => 'TRUE',
                                          activity_info_tab_               => activity_info_tab_,
                                          activity_revenue_info_tab_       => activity_revenue_info_tab_,
                                          attributes_                      => attributes_);

         ELSE
            $IF Component_Proj_SYS.INSTALLED $THEN
            Project_Connection_Util_API.Refresh_Connection (proj_lu_name_              =>  proj_lu_name_,
                                                            activity_seq_              =>  rec_.activity_seq,
                                                            keyref1_                   =>  rec_.order_no,
                                                            keyref2_                   =>  rec_.line_no,
                                                            keyref3_                   =>  rec_.rel_no,
                                                            keyref4_                   =>  rec_.line_item_no,
                                                            keyref5_                   =>  '*',
                                                            keyref6_                   =>  '*',
                                                            object_description_        =>  lu_name_,
                                                            activity_info_tab_         =>  activity_info_tab_,
                                                            activity_revenue_info_tab_ =>  activity_revenue_info_tab_ );
            $ELSE
            NULL;
            $END         
         END IF;
      END IF;

   END IF;
END Refresh_Project_Connection;


PROCEDURE Modify_Freight_Info (
   order_no_          IN VARCHAR2,
   line_no_           IN VARCHAR2,
   rel_no_            IN VARCHAR2,
   line_item_no_      IN NUMBER,
   freight_map_id_    IN VARCHAR2,
   zone_id_           IN VARCHAR2 )
IS
   freight_price_list_no_  CUSTOMER_ORDER_LINE_TAB.freight_price_list_no%TYPE;
   contract_               CUSTOMER_ORDER_LINE_TAB.contract%TYPE;
   ship_via_code_          CUSTOMER_ORDER_LINE_TAB.ship_via_code%TYPE;
   forward_agent_id_       CUSTOMER_ORDER_LINE_TAB.forward_agent_id%TYPE;
   supply_code_            CUSTOMER_ORDER_LINE_TAB.supply_code%TYPE;
   vendor_no_              CUSTOMER_ORDER_LINE_TAB.vendor_no%TYPE;
   attr_                   VARCHAR2(2000);
   use_price_incl_tax_     CUSTOMER_ORDER_TAB.use_price_incl_tax%TYPE;

   CURSOR get_line IS
      SELECT contract, ship_via_code, forward_agent_id, supply_code, vendor_no
      FROM CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Freight_Info');
   IF (freight_map_id_ IS NOT NULL) AND (zone_id_ IS NOT NULL) THEN
      OPEN get_line;
      FETCH get_line INTO contract_, ship_via_code_, forward_agent_id_, supply_code_, vendor_no_;
      CLOSE get_line;
      use_price_incl_tax_ := CUSTOMER_ORDER_API.Get_Use_Price_Incl_Tax_Db(order_no_);
      IF ((supply_code_ IN ('PD', 'IPD') AND vendor_no_ IS NOT NULL)) THEN
         freight_price_list_no_ := Freight_Price_List_Direct_API.Get_Active_Freight_List_No(contract_, ship_via_code_, freight_map_id_, forward_agent_id_, use_price_incl_tax_, vendor_no_);
      ELSE
         freight_price_list_no_ := Freight_Price_List_API.Get_Active_Freight_List_No(contract_, ship_via_code_, freight_map_id_, forward_agent_id_, use_price_incl_tax_);
      END IF;
   END IF;
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('FREIGHT_MAP_ID', freight_map_id_, attr_);
   Client_SYS.Add_To_Attr('ZONE_ID', zone_id_, attr_);
   Client_SYS.Add_To_Attr('FREIGHT_PRICE_LIST_NO', freight_price_list_no_, attr_);
   Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);
END Modify_Freight_Info;


--@IgnoreMissingSysinit
FUNCTION Check_Exist (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN BOOLEAN
IS
BEGIN
   RETURN Check_Exist___(order_no_, line_no_, rel_no_, line_item_no_);
END Check_Exist;


--@IgnoreMissingSysinit
FUNCTION Is_Comp_Not_Rel_Mtrl_Planned (
   order_no_ IN VARCHAR2,
   line_no_  IN VARCHAR2,
   rel_no_   IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ NUMBER := 0;
   CURSOR check_rel_mtrl_pln IS
      SELECT 1
      FROM CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = order_no_
      AND   line_no  = line_no_
      AND   rel_no   = rel_no_
      AND   line_item_no > 0
      AND   rel_mtrl_planning = 'FALSE';
BEGIN
   OPEN check_rel_mtrl_pln;
   FETCH check_rel_mtrl_pln INTO temp_;

   IF (check_rel_mtrl_pln%FOUND) THEN
      CLOSE check_rel_mtrl_pln;
      RETURN 'TRUE';
   END IF;
   CLOSE check_rel_mtrl_pln;
   RETURN 'FALSE';
END Is_Comp_Not_Rel_Mtrl_Planned;


--@IgnoreMissingSysinit
FUNCTION Get_Possible_Sales_Promo_Deal (
   order_no_                   IN VARCHAR2,
   line_no_                    IN VARCHAR2,
   rel_no_                     IN VARCHAR2,
   line_item_no_               IN NUMBER,
   rowstate_                   IN VARCHAR2,
   price_source_net_price_db_  IN VARCHAR2,
   charged_item_db_            IN VARCHAR2,
   exchange_item_db_           IN VARCHAR2,
   self_billing_db_            IN VARCHAR2,
   part_ownership_db_          IN VARCHAR2,
   rental_db_                  IN VARCHAR2 ) RETURN VARCHAR2
IS
   deal_description_    VARCHAR2(200);
   header_rec_          Customer_Order_API.Public_Rec;
BEGIN
   header_rec_ := Customer_Order_API.Get(order_no_); 
   -- any changes in these conditions could also affect where statements in cursor get_possible_order_lines in methods Sales_Promotion_Util_API.Calculate_Order_Deal_Buy___/Calculate_Order_Deal_Get___
   IF (rowstate_ NOT IN ('Cancelled','Invoiced') AND
       price_source_net_price_db_ = 'FALSE' AND
       charged_item_db_ = 'CHARGED ITEM' AND
       exchange_item_db_ = 'ITEM NOT EXCHANGED' AND
       self_billing_db_ = 'NOT SELF BILLING' AND
       part_ownership_db_ = 'COMPANY OWNED' AND
       NVL(Site_API.Get_Company(Cust_Ord_Customer_API.Get_Acquisition_Site(header_rec_.customer_no)), ' ') != Site_API.Get_Company(header_rec_.contract) AND
       line_item_no_ <= 0 AND
       rental_db_ = Fnd_Boolean_API.DB_FALSE)  THEN
      deal_description_ := Sales_Promotion_Util_API.Get_Possible_Sales_Promo_Deal(order_no_, line_no_, rel_no_, line_item_no_, 'ORDER');
   END IF;

   RETURN deal_description_;
END Get_Possible_Sales_Promo_Deal;


--@IgnoreMissingSysinit
FUNCTION Is_Change_Config_Allowed (
   order_no_      IN VARCHAR2,
   line_no_       IN VARCHAR2,
   rel_no_        IN VARCHAR2,
   line_item_no_  IN NUMBER ) RETURN BOOLEAN
IS
   change_allowed_   BOOLEAN := FALSE;
   part_no_          CUSTOMER_ORDER_LINE_TAB.part_no%TYPE;
   catalog_no_       CUSTOMER_ORDER_LINE_TAB.catalog_no%TYPE;
   rowstate_         CUSTOMER_ORDER_LINE_TAB.rowstate%TYPE;

   CURSOR get_rec IS
      SELECT part_no, catalog_no, rowstate
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no     = order_no_
      AND    line_no      = line_no_
      AND    rel_no       = rel_no_
      AND    line_item_no = line_item_no_;
BEGIN
   OPEN  get_rec;
   FETCH get_rec INTO part_no_, catalog_no_, rowstate_;
   IF (get_rec%FOUND) THEN
      change_allowed_ := ((rowstate_ = 'Released') AND (Part_Catalog_API.Get_Configurable_Db(NVL(part_no_, catalog_no_)) = 'CONFIGURED'));
   END IF;
   CLOSE get_rec;

   RETURN change_allowed_;
END Is_Change_Config_Allowed;


--@IgnoreMissingSysinit
FUNCTION Get_Rental_No (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   rental_no_    NUMBER := NULL;
BEGIN
   IF (Get_Rental_Db(order_no_, line_no_, rel_no_, line_item_no_) = Fnd_Boolean_API.DB_TRUE) THEN
      $IF Component_Rental_SYS.INSTALLED $THEN
         rental_no_ := Rental_Object_API.Get_Rental_No(order_no_,
                                                       line_no_,
                                                       rel_no_,
                                                       line_item_no_,
                                                       Rental_Type_API.DB_CUSTOMER_ORDER);
      $ELSE
         NULL;
      $END
   END IF;
   RETURN rental_no_;
END Get_Rental_No;


PROCEDURE Calculate_Prices (
   sale_unit_price_            IN OUT NOCOPY NUMBER,
   unit_price_incl_tax_        IN OUT NOCOPY NUMBER,
   base_sale_unit_price_       IN OUT NOCOPY NUMBER,
   base_unit_price_incl_tax_   IN OUT NOCOPY NUMBER,
   order_no_                   IN     VARCHAR2,
   line_no_                    IN     VARCHAR2,
   rel_no_                     IN     VARCHAR2,
   line_item_no_               IN     NUMBER )
IS
   line_rec_   Customer_Order_Line_Tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Calculate_Prices');
   line_rec_ := Get_Object_By_Keys___(order_no_, line_no_, rel_no_, line_item_no_);
   
   line_rec_.sale_unit_price := sale_unit_price_;
   line_rec_.unit_price_incl_tax := unit_price_incl_tax_;
   line_rec_.base_sale_unit_price := base_sale_unit_price_;
   line_rec_.base_unit_price_incl_tax := base_unit_price_incl_tax_;
   
   Calculate_Prices(line_rec_);
   
   sale_unit_price_ := line_rec_.sale_unit_price ;
   unit_price_incl_tax_ := line_rec_.unit_price_incl_tax;
   base_sale_unit_price_ := line_rec_.base_sale_unit_price;
   base_unit_price_incl_tax_ := line_rec_.base_unit_price_incl_tax;
END Calculate_Prices;


PROCEDURE Calculate_Prices (
   newrec_ IN OUT NOCOPY Customer_Order_Line_Tab%ROWTYPE )
IS
   multiple_tax_           VARCHAR2(20);
   order_rec_              Customer_Order_API.Public_Rec;   
   tax_liability_type_db_ VARCHAR2(20);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Calculate_Prices');
   order_rec_          := Customer_Order_API.Get(newrec_.order_no);
         
   IF (Order_Supply_Type_API.Encode(newrec_.demand_code) = 'IPD') THEN
      tax_liability_type_db_ := External_Cust_Order_Line_API.Get_Tax_Liability(newrec_.order_no, newrec_.line_no, newrec_.rel_no);
   ELSE
      tax_liability_type_db_ := newrec_.tax_liability_type;
   END IF;
   
   IF (newrec_.base_sale_unit_price = 0 AND newrec_.sale_unit_price = 0 AND newrec_.free_of_charge = Fnd_Boolean_API.DB_TRUE) THEN
      newrec_.base_unit_price_incl_tax := 0 ;
      newrec_.unit_price_incl_tax := 0;
   ELSIF (newrec_.part_ownership NOT IN (Part_Ownership_API.DB_CUSTOMER_OWNED, Part_Ownership_API.DB_SUPPLIER_LOANED )) THEN
      Tax_Handling_Order_Util_API.Get_Prices(newrec_.base_sale_unit_price,
                                             newrec_.base_unit_price_incl_tax,
                                             newrec_.sale_unit_price,
                                             newrec_.unit_price_incl_tax,
                                             multiple_tax_,
                                             newrec_.tax_code,
                                             newrec_.tax_calc_structure_id,
                                             newrec_.tax_class_id,
                                             newrec_.order_no, 
                                             newrec_.line_no, 
                                             newrec_.rel_no, 
                                             newrec_.line_item_no,
                                             '*',
                                             Tax_Source_API.DB_CUSTOMER_ORDER_LINE,
                                             order_rec_.contract,
                                             order_rec_.customer_no,
                                             newrec_.ship_addr_no,
                                             newrec_.planned_ship_date,
                                             order_rec_.supply_country,
                                             NVL(newrec_.delivery_type, '*'),
                                             newrec_.catalog_no,
                                             order_rec_.use_price_incl_tax,
                                             order_rec_.currency_code,
                                             newrec_.currency_rate,
                                             'FALSE',                                          
                                             newrec_.tax_liability,
                                             tax_liability_type_db_,
                                             delivery_country_db_ => NULL,
                                             ifs_curr_rounding_ => 16,
                                             tax_from_diff_source_ => 'FALSE',
                                             attr_ => NULL);
   ELSE
      newrec_.part_price               := 0;
      newrec_.sale_unit_price          := 0;
      newrec_.unit_price_incl_tax      := 0;
      newrec_.base_sale_unit_price     := 0;
      newrec_.base_unit_price_incl_tax := 0;
      newrec_.cost                     := 0;
      newrec_.price_source             := 'UNSPECIFIED';
      newrec_.price_source_id          := NULL;
      IF (newrec_.char_price IS NOT NULL) THEN
         newrec_.char_price := 0;
      END IF;
      IF (newrec_.calc_char_price IS NOT NULL) THEN
         newrec_.calc_char_price := 0;
      END IF;
   END IF;
END Calculate_Prices;


--@IgnoreMissingSysinit
FUNCTION Is_Route_Excp_Date_On_Shipdate (
   contract_               IN VARCHAR2,
   route_id_               IN VARCHAR2,
   exception_date_time_    IN DATE ) RETURN VARCHAR2
IS
   dummy_ NUMBER;
   CURSOR line_exist IS
      SELECT 1
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE contract = contract_
      AND   route_id = route_id_
      AND   TO_CHAR(planned_ship_date, Report_SYS.datetime_format_) = TO_CHAR(exception_date_time_, Report_SYS.datetime_format_)
      AND   rowstate NOT IN ('Invoiced', 'Cancelled', 'Delivered');
BEGIN
   OPEN line_exist;
   FETCH line_exist INTO dummy_;
   IF (line_exist%FOUND) THEN
      CLOSE line_exist;
      RETURN 'TRUE';
   END IF;
   CLOSE line_exist;
   RETURN 'FALSE';
END Is_Route_Excp_Date_On_Shipdate;


PROCEDURE Modify_Open_Shipment_Qty (
   order_no_          IN VARCHAR2,
   line_no_           IN VARCHAR2,
   rel_no_            IN VARCHAR2,
   line_item_no_      IN NUMBER,
   open_shipment_qty_ IN NUMBER )
IS
   attr_ VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Open_Shipment_Qty');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('OPEN_SHIPMENT_QTY', open_shipment_qty_, attr_);
   Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);
END Modify_Open_Shipment_Qty;


--@IgnoreMissingSysinit
PROCEDURE Get_Custord_From_Demand_Info (
   order_no_           OUT VARCHAR2,
   line_no_            OUT VARCHAR2,
   rel_no_             OUT VARCHAR2,
   line_item_no_       OUT NUMBER,
   demand_order_ref1_  IN  VARCHAR2,
   demand_order_ref2_  IN  VARCHAR2,
   demand_order_ref3_  IN  VARCHAR2,
   demand_order_ref4_  IN  NUMBER,
   demand_code_        IN  VARCHAR2 )
IS
   CURSOR get_order_info IS
      SELECT order_no, line_no, rel_no, line_item_no
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  demand_order_ref1 = demand_order_ref1_
      AND    demand_order_ref2 = demand_order_ref2_
      AND    demand_order_ref3 = demand_order_ref3_
      AND    (demand_order_ref4 = demand_order_ref4_ OR demand_order_ref4_ IS NULL)
      AND    demand_code        = demand_code_;
BEGIN
   OPEN get_order_info;
   FETCH get_order_info INTO order_no_, line_no_, rel_no_, line_item_no_;
   CLOSE get_order_info;
END Get_Custord_From_Demand_Info;


--@IgnoreMissingSysinit
PROCEDURE Get_Serials_From_Demand_Info (
   list_serial_no_     OUT CLOB,
   demand_order_ref1_  IN  VARCHAR2,
   demand_order_ref2_  IN  VARCHAR2,
   demand_order_ref3_  IN  VARCHAR2)
IS
   order_no_    VARCHAR2(32);
   line_no_     VARCHAR2(32);
   rel_no_      VARCHAR2(32);
   supply_code_ VARCHAR2(32);
   po_no_       VARCHAR2(32);
   po_line_no_  VARCHAR2(32);
   po_rel_no_   VARCHAR2(32);

  CURSOR get_co_info_ IS
      SELECT col.order_no, col.line_no, col.rel_no, col.supply_code
      FROM   customer_order_line_tab col
      WHERE  col.demand_order_ref1 = po_no_
      AND    col.demand_order_ref2 = po_line_no_
      AND    col.demand_order_ref3 = po_rel_no_;

  CURSOR get_po_info_ is
      SELECT cop.po_order_no, cop.po_line_no, cop.po_rel_no
      FROM   customer_order_pur_order_tab cop
      WHERE  cop.oe_order_no = order_no_
      AND    cop.oe_line_no = line_no_
      AND    cop.oe_rel_no = rel_no_;

  CURSOR get_serials_ IS
      SELECT ith.serial_no serial_no
         FROM   inventory_transaction_hist_pub ith
         WHERE  ith.source_ref1       = order_no_
         AND    ith.source_ref2       = line_no_
         AND    ith.source_ref3       = rel_no_
         AND    ith.transaction_code IN ('SHIPDIR', 'INTPODIRIM', 'PODIRINTEM', 'OESHIP');
BEGIN
   po_no_      := demand_order_ref1_;
   po_line_no_ := demand_order_ref2_;
   po_rel_no_  := demand_order_ref3_;

   LOOP
      OPEN  get_co_info_;
      FETCH get_co_info_ INTO order_no_, line_no_, rel_no_, supply_code_;
      CLOSE get_co_info_;
      EXIT  WHEN order_no_ IS NULL OR supply_code_ !='IPD';

      OPEN  get_po_info_;
      FETCH get_po_info_ INTO po_no_, po_line_no_, po_rel_no_;
      CLOSE get_po_info_;
      EXIT WHEN po_no_ IS NULL;
   END LOOP;

   FOR rec_ IN get_serials_ LOOP
     IF (list_serial_no_ IS NULL) THEN
       list_serial_no_ := ''''|| rec_.serial_no || '''';
     ELSE
        list_serial_no_ := list_serial_no_ || ',' ||  '''' || rec_.serial_no || '''';
     END IF;
   END LOOP;
END Get_Serials_From_Demand_Info;


--@IgnoreMissingSysinit
PROCEDURE Get_Custord_From_Supply_Info (
   ext_order_no_ OUT VARCHAR2,
   order_no_     IN  VARCHAR2 )
IS
   CURSOR get_order_info IS
      SELECT oe_order_no
      FROM  customer_order_line_Tab col, customer_order_pur_order_tab copo
      WHERE demand_code IN ('IPD', 'IPT', 'IPT_RO')
      AND   copo.po_order_no     = col.demand_order_ref1
      AND   copo.po_line_no      = col.demand_order_ref2
      AND   copo.po_rel_no       = col.demand_order_ref3
      AND   copo.purchase_type   = 'O'
      AND   rownum               = 1
      AND   col.order_no         = order_no_;
BEGIN
   OPEN  get_order_info;
   FETCH get_order_info INTO ext_order_no_ ;
   CLOSE get_order_info;
END Get_Custord_From_Supply_Info;


--@IgnoreMissingSysinit
PROCEDURE Get_Parent_Cust_Order (
   parent_order_no_ OUT VARCHAR2,
   order_no_        IN  VARCHAR2 )
IS
   CURSOR get_order_info IS
      SELECT oe_order_no
      FROM   customer_order_line_Tab col, customer_order_pur_order_tab copo
      WHERE  demand_code IN ('IPD', 'IPT')
      AND    copo.po_order_no   = col.demand_order_ref1
      AND    copo.po_line_no    = col.demand_order_ref2
      AND    copo.po_rel_no     = col.demand_order_ref3
      AND    copo.purchase_type = 'O'
      AND    rownum             = 1
      AND    col.order_no       = order_no_;
BEGIN
   OPEN  get_order_info;
   FETCH get_order_info INTO parent_order_no_;
   CLOSE get_order_info;
END Get_Parent_Cust_Order;


--@IgnoreMissingSysinit
PROCEDURE Get_External_Cust_Order(
   ext_order_no_ OUT VARCHAR2,
   order_no_     IN  VARCHAR2 )
IS
   temp_ext_order_no_ VARCHAR2(20);
   parent_order_no_   VARCHAR2(20);
BEGIN
   temp_ext_order_no_ := order_no_;
   LOOP
      Get_Parent_Cust_Order(parent_order_no_, temp_ext_order_no_);
      EXIT WHEN parent_order_no_ IS NULL;
      temp_ext_order_no_ := parent_order_no_;
   END LOOP;
   ext_order_no_ := temp_ext_order_no_;
END Get_External_Cust_Order;


--@IgnoreMissingSysinit
FUNCTION Check_All_Comp_Non_Inv (
   order_no_ IN VARCHAR2,
   line_no_  IN VARCHAR2,
   rel_no_   IN VARCHAR2 ) RETURN BOOLEAN
IS
   all_comp_non_inv_ BOOLEAN := TRUE;
   CURSOR get_comp_part_no IS
      SELECT part_no
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no     = order_no_
      AND    line_no      = line_no_
      AND    rel_no       = rel_no_
      AND    line_item_no > 0;
BEGIN
   FOR comprec_ IN  get_comp_part_no LOOP
      IF (comprec_.part_no IS NOT NULL) THEN
         all_comp_non_inv_ := FALSE;
         EXIT;
      END IF;
   END LOOP;
   RETURN all_comp_non_inv_;
END Check_All_Comp_Non_Inv;


--@IgnoreMissingSysinit
FUNCTION Get_Connectable_Sales_Qty (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   connectable_qty_  NUMBER;

   CURSOR get_connectable_qty IS
      SELECT ((revised_qty_due - qty_shipped - open_shipment_qty + qty_shipdiff) * inverted_conv_factor/conv_factor)
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    line_no = line_no_
      AND    rel_no = rel_no_
      AND    line_item_no = line_item_no_;
BEGIN
   OPEN get_connectable_qty;
   FETCH get_connectable_qty INTO connectable_qty_;
   CLOSE get_connectable_qty;
   RETURN connectable_qty_;
END Get_Connectable_Sales_Qty;


PROCEDURE Set_Rel_Mtrl_Planning (
   order_no_               IN VARCHAR2,
   line_no_                IN VARCHAR2,
   rel_no_                 IN VARCHAR2,
   line_item_no_           IN NUMBER,
   rel_mtrl_planning_      IN VARCHAR2,
   create_connected_order_ IN VARCHAR2 )
IS
   attr_             VARCHAR2(2000);
   col_rec_          Customer_Order_Line_API.Public_Rec;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Set_Rel_Mtrl_Planning');
   Client_SYS.Clear_Attr(attr_);
   col_rec_ := Get(order_no_, line_no_, rel_no_, line_item_no_);
   
   IF ((Site_To_Site_Reserve_Setup_API.Exists(col_rec_.supply_site, col_rec_.contract)) AND
      (Site_To_Site_Reserve_Setup_API.Get_Rel_Mtrl_Planning_Db(col_rec_.supply_site, col_rec_.contract) = Rel_Mtrl_Planning_API.DB_NOT_VIS_PLANNED_RELEASED)) THEN
      
      Client_SYS.Add_To_Attr('REL_MTRL_PLANNING', 'FALSE', attr_);      
   ELSE
      Client_SYS.Add_To_Attr('REL_MTRL_PLANNING', rel_mtrl_planning_, attr_);
   END IF;
   Client_SYS.Add_To_Attr('CREATE_CONNECTED_ORDER', create_connected_order_, attr_);
   Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);
END Set_Rel_Mtrl_Planning;


--@IgnoreMissingSysinit
PROCEDURE Get_Qty_Returned (
   buy_qty_due_  OUT NUMBER,
   qty_returned_ OUT NUMBER,
   order_no_     IN  VARCHAR2,
   ord_ref1_     IN  VARCHAR2,
   ord_ref2_     IN  VARCHAR2,
   ord_ref3_     IN  VARCHAR2 )
IS
   CURSOR get_attr IS
      SELECT buy_qty_due, qty_returned
      FROM  CUSTOMER_ORDER_LINE_TAB
      WHERE order_no             = order_no_
      AND   demand_order_ref1    = ord_ref1_
      AND   demand_order_ref2    = ord_ref2_
      AND   demand_order_ref3    = ord_ref3_;
BEGIN
   OPEN get_attr;
   FETCH get_attr INTO buy_qty_due_,qty_returned_;
   CLOSE get_attr;
END Get_Qty_Returned;


PROCEDURE New_Rental_Replacement_Line (
   new_order_no_      IN  VARCHAR2,
   old_order_no_      IN  VARCHAR2,
   old_line_no_       IN  VARCHAR2,
   old_rel_no_        IN  VARCHAR2,
   old_line_item_no_  IN  NUMBER,
   new_buy_qty_due_   IN  NUMBER,
   rental_attr_       IN  VARCHAR2 )
IS
   ptr_                       NUMBER;
   name_                      VARCHAR2(30);
   value_                     VARCHAR2(4000);
   objid_                     VARCHAR2(2000);
   objversion_                VARCHAR2(2000);
   attr_                      VARCHAR2(32000);
   addr_attr_                 VARCHAR2(4000);
   addr_flag_db_              VARCHAR2(10);
   newrec_                    CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   old_col_rec_               CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   order_rec_                 Customer_Order_API.Public_Rec;
   addr_rec_                  CUST_ORDER_LINE_ADDRESS_TAB%ROWTYPE;
   indrec_                    Indicator_Rec;
   order_objstate_            VARCHAR2(20);
   planned_rental_end_date_   DATE;
   planned_rental_end_time_   DATE;

   CURSOR get_ord_line_addr IS
      SELECT *
      FROM cust_order_line_address_tab
      WHERE order_no = old_order_no_
      AND line_no = old_line_no_
      AND rel_no = old_rel_no_
      AND line_item_no = old_line_item_no_;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'New_Rental_Replacement_Line');
   old_col_rec_ := Get_Object_By_Keys___(old_order_no_, old_line_no_, old_rel_no_, old_line_item_no_);

   IF (new_buy_qty_due_ > (old_col_rec_.qty_shipped / old_col_rec_.conv_factor * old_col_rec_.inverted_conv_factor)) THEN
      Error_SYS.Record_General(lu_name_, 'RCODELIVQTY: Quantity to replace cannot be greater than the delivered quantity.');
   END IF;

   order_rec_ := Customer_Order_API.Get(new_order_no_);

   Client_SYS.Set_Item_Value('ORDER_NO', new_order_no_, attr_);
   Client_SYS.Set_Item_Value('CONTRACT', order_rec_.contract, attr_);
   Client_SYS.Set_Item_Value('WANTED_DELIVERY_DATE', order_rec_.wanted_delivery_date, attr_);
   Client_SYS.Set_Item_Value('RENTAL_DB', Fnd_Boolean_API.DB_TRUE, attr_);
   Client_SYS.Set_Item_Value('DELIVER_TO_CUSTOMER_NO', old_col_rec_.deliver_to_customer_no, attr_);
   Client_SYS.Set_Item_Value('PRICE_CONV_FACTOR', 0, attr_);
   Client_SYS.Set_Item_Value('QTY_ASSIGNED', 0, attr_);

   -- Assign old order line values to attr.
   Copy_Customer_Order_Line(attr_, old_order_no_, old_line_no_, old_rel_no_, old_line_item_no_);

   -- IF the customer order has been released the promised delivery date should also be copied
   order_objstate_ := CUSTOMER_ORDER_API.Get_Objstate(old_order_no_);

   IF (order_objstate_ = 'Planned') THEN
      Client_SYS.Set_Item_Value('PROMISED_DELIVERY_DATE', '', attr_);
   END IF;

   Client_SYS.Set_Item_Value('BUY_QTY_DUE', new_buy_qty_due_, attr_);
   Client_SYS.Set_Item_Value('DESIRED_QTY', new_buy_qty_due_, attr_);
   Client_SYS.Set_Item_Value('DEMAND_CODE_DB', Order_Supply_Type_API.DB_REPLACEMENT_CUSTOMER_ORDER, attr_);
   Client_SYS.Set_Item_Value('SUPPLY_CODE', Sales_Part_API.Get_Default_Supply_Code(old_col_rec_.contract, old_col_rec_.catalog_no, Fnd_Boolean_API.DB_TRUE), attr_);
   Client_SYS.Set_Item_Value('SALES_UNIT_MEAS', old_col_rec_.sales_unit_meas, attr_);
   Client_SYS.Set_Item_Value('BASE_SALE_UNIT_PRICE', old_col_rec_.base_sale_unit_price, attr_);
   Client_SYS.Set_Item_Value('BASE_UNIT_PRICE_INCL_TAX', old_col_rec_.base_unit_price_incl_tax, attr_);
   Client_SYS.Set_Item_Value('CATALOG_TYPE_DB', old_col_rec_.catalog_type, attr_);
   Client_SYS.Set_Item_Value('PART_PRICE', old_col_rec_.part_price, attr_);
   Client_SYS.Set_Item_Value('PRICE_SOURCE_DB', old_col_rec_.price_source, attr_);
   Client_SYS.Set_Item_Value('CURRENCY_RATE', old_col_rec_.currency_rate, attr_);
   Client_SYS.Set_Item_Value('PURCHASE_PART_NO', old_col_rec_.purchase_part_no, attr_);
   Client_SYS.Set_Item_Value('SELF_BILLING_DB', Self_Billing_Type_API.DB_NOT_SELF_BILLING, attr_);
   Client_SYS.Set_Item_Value('REVISED_QTY_DUE', (new_buy_qty_due_ * old_col_rec_.conv_factor / old_col_rec_.inverted_conv_factor), attr_);
   Client_SYS.Set_Item_Value('DEMAND_ORDER_REF1', '', attr_);
   Client_SYS.Set_Item_Value('DEMAND_ORDER_REF2', '', attr_);
   Client_SYS.Set_Item_Value('DEMAND_ORDER_REF3', '', attr_);
   Client_SYS.Set_Item_Value('DEMAND_ORDER_REF4', '', attr_);
   Client_SYS.Set_Item_Value('ORIGINATING_REL_NO', '', attr_);
   Client_SYS.Set_Item_Value('ORIGINATING_LINE_ITEM_NO', '', attr_);
   Client_SYS.Set_Item_Value('ACTIVITY_SEQ', old_col_rec_.activity_seq, attr_);
   Client_SYS.Set_Item_Value('NOTE_TEXT', '', attr_);
   Client_SYS.Set_Item_Value('NOTE_ID', '', attr_);
   Client_SYS.Set_Item_Value('COST', 0, attr_);
   -- Copy the rental attributes to attr_
   ptr_ := NULL;
   WHILE (Client_SYS.Get_Next_From_Attr(rental_attr_, ptr_, name_, value_)) LOOP
      Client_SYS.Set_Item_Value(name_, value_, attr_);
   END LOOP;

   --Start rental date defaults to wanted delivery date.
   Client_SYS.Set_Item_Value('PLANNED_RENTAL_START_DATE', order_rec_.wanted_delivery_date, attr_);
   Client_SYS.Set_Item_Value('PLANNED_RENTAL_START_TIME', order_rec_.wanted_delivery_date, attr_);

   planned_rental_end_date_ := Client_SYS.Attr_Value_To_Date(Client_SYS.Get_Item_Value('PLANNED_RENTAL_END_DATE', rental_attr_));
   planned_rental_end_time_ := Client_SYS.Attr_Value_To_Date(Client_SYS.Get_Item_Value('PLANNED_RENTAL_END_TIME', rental_attr_));
   -- Combine date and timestamps
   planned_rental_end_date_ := planned_rental_end_date_ + (planned_rental_end_time_ - TRUNC(planned_rental_end_time_));
   -- Set end date/time equal to start date/time if earlier than the start date/time.
   IF (planned_rental_end_date_ < order_rec_.wanted_delivery_date) THEN
      Client_SYS.Set_Item_Value('PLANNED_RENTAL_END_DATE', order_rec_.wanted_delivery_date, attr_);
      Client_SYS.Set_Item_Value('PLANNED_RENTAL_END_TIME', order_rec_.wanted_delivery_date, attr_);
   END IF;

   Unpack___(newrec_, indrec_, attr_);
   Check_Insert___(newrec_, indrec_, attr_);
   Insert___(objid_, objversion_, newrec_, attr_);

   --Update the line address if the original line has a custom address.
   addr_flag_db_ := Customer_Order_Line_API.Get_Addr_Flag(old_order_no_, old_line_no_, old_rel_no_, old_line_item_no_);
   IF addr_flag_db_ = Gen_Yes_No_API.DB_YES THEN
      --Copy the original address
      OPEN get_ord_line_addr;
      FETCH get_ord_line_addr INTO addr_rec_;
      CLOSE get_ord_line_addr;
      Client_Sys.Clear_Attr(addr_attr_);
      Client_SYS.Add_To_Attr('ADDR_FLAG_DB', addr_flag_db_, addr_attr_);
      Client_SYS.Add_To_Attr('ADDR_1', addr_rec_.addr_1, addr_attr_);
      Client_SYS.Add_To_Attr('COUNTRY_CODE', addr_rec_.country_code, addr_attr_);
      Client_SYS.Add_To_Attr('ADDRESS1', addr_rec_.address1, addr_attr_);
      Client_SYS.Add_To_Attr('ADDRESS2', addr_rec_.address2, addr_attr_);
      Client_SYS.Add_To_Attr('ZIP_CODE', addr_rec_.zip_code, addr_attr_);
      Client_SYS.Add_To_Attr('CITY', addr_rec_.city, addr_attr_);
      Client_SYS.Add_To_Attr('STATE', addr_rec_.state, addr_attr_);
      Client_SYS.Add_To_Attr('COUNTY', addr_rec_.county, addr_attr_);
      Client_SYS.Add_To_Attr('IN_CITY', addr_rec_.in_city, addr_attr_);
      Client_SYS.Add_To_Attr('COMPANY', addr_rec_.company, addr_attr_);
      Cust_Order_Line_Address_API.Change_Address(addr_attr_,
                                                 newrec_.order_no,
                                                 newrec_.line_no,
                                                 newrec_.rel_no,
                                                 newrec_.line_item_no);
   END IF;
END New_Rental_Replacement_Line;


--@IgnoreMissingSysinit
FUNCTION Get_Primary_Rental_No (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   primary_rental_no_    NUMBER := NULL;
BEGIN
   IF (Get_Rental_Db(order_no_, line_no_, rel_no_, line_item_no_) = Fnd_Boolean_API.DB_TRUE) THEN
      $IF Component_Rental_SYS.INSTALLED $THEN
         primary_rental_no_ := Rental_Object_API.Get_Primary_Rental_No(Rental_Object_API.Get_Rental_No(order_no_,
                                                                                                     line_no_,
                                                                                                     rel_no_,
                                                                                                     line_item_no_,
                                                                                                     Rental_Type_API.DB_CUSTOMER_ORDER));
      $ELSE
         NULL;
      $END
   END IF;
   RETURN primary_rental_no_;
END Get_Primary_Rental_No;


PROCEDURE Set_Rental_Completed (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER)
IS
   attr_       VARCHAR2(32000);
   info_       VARCHAR2(32000);
   rec_        CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Set_Rental_Completed');
   Client_SYS.Clear_Attr(attr_);
   rec_ := Get_Object_By_Keys___(order_no_, line_no_, rel_no_, line_item_no_);
   Get_Id_Version_By_Keys___(objid_, objversion_, order_no_, line_no_, rel_no_, line_item_no_);
   Set_Rental_Completed__(info_, objid_, objversion_, attr_, 'DO');
END Set_Rental_Completed;


PROCEDURE Set_Rental_Reopened (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER)
IS
   attr_       VARCHAR2(32000);
   info_       VARCHAR2(32000);
   rec_        CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Set_Rental_Reopened');
   Client_SYS.Clear_Attr(attr_);
   rec_ := Get_Object_By_Keys___(order_no_, line_no_, rel_no_, line_item_no_);
   Get_Id_Version_By_Keys___(objid_, objversion_, order_no_, line_no_, rel_no_, line_item_no_);
   Set_Rental_Reopened__(info_, objid_, objversion_, attr_, 'DO');
END Set_Rental_Reopened;


PROCEDURE Set_Uninvoiced (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   qty_invoiced_ IN NUMBER )
IS
   attr_             VARCHAR2(32000);
   info_             VARCHAR2(32000);
   rec_              CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   objid_            VARCHAR2(2000);
   objversion_       VARCHAR2(2000);
   invoice_exists_   BOOLEAN := FALSE;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Set_Uninvoiced');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('QTY_INVOICED', qty_invoiced_, attr_);
   rec_ := Get_Object_By_Keys___(order_no_, line_no_, rel_no_, line_item_no_);
   Get_Id_Version_By_Keys___(objid_, objversion_, order_no_, line_no_, rel_no_, line_item_no_);
   IF (rec_.rowstate != 'Cancelled' ) THEN
      IF ((NVL(rec_.qty_invoiced, 0) != 0)) THEN
         invoice_exists_ := TRUE;
      ELSIF (rec_.rental = Fnd_Boolean_API.DB_TRUE) THEN
         $IF (Component_Rental_SYS.INSTALLED) $THEN
            invoice_exists_ := Rental_Transaction_API.Invoiced_Transactions_Exist(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no, Rental_Type_API.DB_CUSTOMER_ORDER);
         $ELSE
            invoice_exists_ := FALSE;
         $END
      END IF;
   END IF;
   
   IF (invoice_exists_ ) THEN
      Set_Uninvoiced__(info_, objid_, objversion_, attr_, 'DO');
   END IF;
   IF (rec_.rowstate != Get_Objstate(order_no_, line_no_, rel_no_, line_item_no_)) THEN
      Customer_Order_Line_Hist_API.New(order_no_, line_no_, rel_no_, line_item_no_);
   END IF;
END Set_Uninvoiced;


PROCEDURE Undo_Delivery (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   deliv_no_     IN NUMBER)
IS
   attr_          VARCHAR2(32000);
   info_          VARCHAR2(32000);
   rec_           CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   objid_         VARCHAR2(2000);
   objversion_    VARCHAR2(2000);
   msg_           VARCHAR2(200);
   new_state_     CUSTOMER_ORDER_LINE_TAB.rowstate%TYPE;
   catalog_type_  SALES_PART_TAB.catalog_type%TYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Undo_Delivery');
   Client_SYS.Clear_Attr(attr_); 
   Client_SYS.Add_To_Attr('DELIV_NO', deliv_no_, attr_);
   
   rec_ := Get_Object_By_Keys___(order_no_, line_no_, rel_no_, line_item_no_);
   Get_Id_Version_By_Keys___(objid_, objversion_, order_no_, line_no_, rel_no_, line_item_no_);
   Undo_Delivery__(info_, objid_, objversion_, attr_, 'DO');
   new_state_ := Get_Objstate(order_no_, line_no_, rel_no_, line_item_no_);   
   catalog_type_ := Sales_Part_API.Get_Catalog_Type_Db(rec_.contract, rec_.catalog_no);
   
   IF (catalog_type_ = 'NON') THEN 
      IF (new_state_ = 'Released' AND (rec_.rowstate IN ('Delivered' , 'PartiallyDelivered'))) THEN
         -- Added message saying 0 delivered.
         msg_ := Language_SYS.Translate_Constant(lu_name_, 'UNDODELIVERY: Undo customer order line delivery :P1', NULL, deliv_no_);
         Customer_Order_Line_Hist_API.New(order_no_, line_no_, rel_no_, line_item_no_, msg_);
      END IF;
   ELSIF ((new_state_ IN ('PartiallyDelivered', 'Picked')) AND (rec_.rowstate IN ('Delivered', 'PartiallyDelivered', 'Invoiced'))) 
         OR (new_state_ = rec_.rowstate AND line_item_no_ > 0) THEN
      IF (line_item_no_ >= 0) THEN
         -- Added message saying 0 delivered.
         msg_ := Language_SYS.Translate_Constant(lu_name_, 'UNDODELIVERY: Undo customer order line delivery :P1', NULL, deliv_no_);
         Customer_Order_Line_Hist_API.New(order_no_, line_no_, rel_no_, line_item_no_, msg_);
         IF line_item_no_ > 0 THEN
            Customer_Order_Line_Hist_API.New(order_no_, line_no_, rel_no_, -1, msg_);
         END IF;
      END IF;
   END IF;
END Undo_Delivery;


--@IgnoreMissingSysinit
FUNCTION Get_Rental_Chargeable_Days (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   rental_db_    IN VARCHAR2 DEFAULT NULL) RETURN NUMBER
IS
   rental_chargeable_days_ NUMBER;
   rental_db_value_        VARCHAR2(20);
BEGIN
   rental_db_value_ := NVL(rental_db_, Get_Rental_Db(order_no_, line_no_, rel_no_, line_item_no_));
   IF ( rental_db_value_ = Fnd_Boolean_API.DB_FALSE) THEN
      rental_chargeable_days_ := 1;
   ELSE
      rental_chargeable_days_ := Get_Rental_Chargeable_Days___(order_no_, line_no_, rel_no_, line_item_no_);
   END IF;
   RETURN NVL(rental_chargeable_days_,1);
END Get_Rental_Chargeable_Days;


--@IgnoreMissingSysinit
FUNCTION Is_Expctr_Connected(
   order_no_         IN VARCHAR2,
   line_no_          IN VARCHAR2,
   rel_no_           IN VARCHAR2,
   line_item_no_     IN NUMBER) RETURN VARCHAR2
IS
   connection_exist_    VARCHAR2(5) := 'FALSE';
   co_line_rec_         Customer_Order_Line_API.Public_Rec;
   licensed_order_type_ VARCHAR2(25);
BEGIN
   $IF Component_Expctr_SYS.INSTALLED $THEN
      IF (Customer_Order_Flow_API.Get_License_Enabled(order_no_, 'INTERACT_CUST_ORD') = 'TRUE') THEN
         co_line_rec_ := Get(order_no_, line_no_, rel_no_, line_item_no_);
         licensed_order_type_ := Customer_Order_Line_API.Get_Expctr_License_Order_Type(co_line_rec_.demand_code, co_line_rec_.demand_order_ref1, co_line_rec_.demand_order_ref2, co_line_rec_.demand_order_ref3);
		 connection_exist_ := Exp_License_Connect_Util_API.Is_Expctr_Connected(order_no_, line_no_, rel_no_, line_item_no_, licensed_order_type_);
      END IF;
   $ELSE
      NULL;
   $END
   RETURN connection_exist_;
END Is_Expctr_Connected;


--@IgnoreMissingSysinit
FUNCTION Rental_Period_Exists (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN BOOLEAN
IS
   rental_period_exists_ BOOLEAN := FALSE;
BEGIN
   IF (Get_Rental_Db(order_no_, line_no_, rel_no_, line_item_no_) = Fnd_Boolean_API.DB_TRUE) THEN
      $IF Component_Rental_SYS.INSTALLED $THEN
         rental_period_exists_ := Rental_Object_Manager_API.Rental_Period_Exists(order_no_,
                                                                                 line_no_,
                                                                                 rel_no_,
                                                                                 line_item_no_,
                                                                                 Rental_Type_API.DB_CUSTOMER_ORDER);
      $ELSE
         NULL;
      $END
   END IF;
   RETURN rental_period_exists_;
END Rental_Period_Exists;


--@IgnoreMissingSysinit
FUNCTION Get_Dop_Id_From_Ext_Cust_Info (
   order_no_           IN  VARCHAR2,
   line_no_            IN  VARCHAR2,
   rel_no_             IN  VARCHAR2,
   line_item_no_       IN  NUMBER) RETURN NUMBER
IS
   po_order_no_          VARCHAR2(12);
   po_line_no_           VARCHAR2(4);
   po_release_no_        VARCHAR2(4);
   purchase_type_        VARCHAR2(30);
   ico_ord_no_           VARCHAR2(12);
   ico_line_no_          VARCHAR2(4);
   ico_rel_no_           VARCHAR2(4);
   ico_line_item_no_     NUMBER;
   demand_code_db_       CUSTOMER_ORDER_LINE_TAB.demand_code%TYPE;
   dop_id_               VARCHAR2(12) := 0;
BEGIN
   Customer_Order_Pur_Order_API.Get_Purord_For_Custord(po_order_no_, po_line_no_, po_release_no_, purchase_type_, order_no_, line_no_, rel_no_, line_item_no_);
   demand_code_db_ := Order_Supply_Type_API.Encode(Get_Supply_Code(order_no_, line_no_, rel_no_, line_item_no_));
   Get_Custord_From_Demand_Info(ico_ord_no_, ico_line_no_, ico_rel_no_, ico_line_item_no_, po_order_no_, po_line_no_, po_release_no_, null, demand_code_db_);
   RETURN dop_id_;
END Get_Dop_Id_From_Ext_Cust_Info;


--@IgnoreMissingSysinit
FUNCTION Get_Order_Line_Contribution (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER    ) RETURN NUMBER
IS
   line_cost_      NUMBER;
   company_        VARCHAR2(20);
   rounding_       NUMBER;
   contribution_   NUMBER;

   CURSOR get_cost IS
      SELECT ROUND((cost * buy_qty_due * conv_factor / inverted_conv_factor), rounding_)
      FROM  CUSTOMER_ORDER_LINE_TAB
      WHERE rowstate != 'Cancelled'
      AND   line_item_no <= 0
      AND   order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;
BEGIN
   company_  := Site_API.Get_Company(Get_Contract(order_no_, line_no_, rel_no_, line_item_no_));
   rounding_ := Currency_Code_API.Get_Currency_Rounding(company_, Company_Finance_API.Get_Currency_Code(company_));

   OPEN get_cost;
   FETCH get_cost INTO line_cost_;
   IF (get_cost%NOTFOUND) THEN
      line_cost_ := 0;
   END IF;
   CLOSE get_cost;

   contribution_ := Get_Base_Sale_Price_Total(order_no_, line_no_, rel_no_, line_item_no_) - line_cost_;
   RETURN contribution_;
END Get_Order_Line_Contribution;


--@IgnoreMissingSysinit
FUNCTION Get_Expctr_License_Order_Type (
   demand_code_     IN VARCHAR2,
   demand_ref1_     IN VARCHAR2,
   demand_ref2_     IN VARCHAR2,
   demand_ref3_     IN VARCHAR2 ) RETURN VARCHAR2
IS
   order_code_         VARCHAR2(3);
   license_order_type_ VARCHAR2(25) := 'CUSTOMER_ORDER';
BEGIN
   $IF (Component_Purch_SYS.INSTALLED)$THEN
      IF (NVL(demand_code_, Database_SYS.string_null_) = 'PO') THEN
         order_code_ := Purchase_Order_Line_Part_API.Get_Order_Code(demand_ref1_, demand_ref2_, demand_ref3_);
         IF order_code_ = 6 THEN 
            license_order_type_ := 'ESO_CUSTOMER_ORDER';
         END IF;
      END IF;
   $END
   RETURN license_order_type_;
END Get_Expctr_License_Order_Type;


--@IgnoreMissingSysinit
FUNCTION Get_Demand_Contract (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN VARCHAR2
IS
   linerec_             CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   customer_contract_   CUSTOMER_ORDER_LINE_TAB.contract%TYPE;
BEGIN
   linerec_           := Get_Object_By_Keys___(order_no_, line_no_, rel_no_, line_item_no_);
   customer_contract_ := Cust_Ord_Customer_API.Get_Acquisition_Site(linerec_.customer_no);
   IF (customer_contract_ IS NOT NULL) THEN
      $IF (Component_Purch_SYS.INSTALLED) $THEN
         customer_contract_ := Purchase_Order_Line_Part_API.Get_Contract(linerec_.demand_order_ref1,
                                                                         linerec_.demand_order_ref2,
                                                                         linerec_.demand_order_ref3);
      $ELSE
         NULL;
      $END
   END IF;
   RETURN customer_contract_;
END Get_Demand_Contract;


--@IgnoreMissingSysinit
FUNCTION Get_Total_Qty_Returned (
   demand_order_ref1_ IN VARCHAR2 ) RETURN NUMBER
IS
   total_qty_returned_ NUMBER;

   CURSOR get_total_qty IS 
      SELECT SUM(qty_returned)
      FROM CUSTOMER_ORDER_LINE_TAB
      WHERE demand_order_ref1 = demand_order_ref1_;
BEGIN
   OPEN get_total_qty;
   FETCH get_total_qty INTO total_qty_returned_;
   CLOSE get_total_qty;
   
   RETURN total_qty_returned_;
END Get_Total_Qty_Returned;


--@IgnoreMissingSysinit
FUNCTION Get_Total_Qty_Shipped (
   demand_order_ref1_ IN VARCHAR2 ) RETURN NUMBER
IS
   total_qty_shipped_ NUMBER;

   CURSOR get_total_qty IS 
      SELECT SUM(qty_shipped)
      FROM CUSTOMER_ORDER_LINE_TAB
      WHERE demand_order_ref1 = demand_order_ref1_;
BEGIN
   OPEN get_total_qty;
   FETCH get_total_qty INTO total_qty_shipped_;
   CLOSE get_total_qty;
   
   RETURN total_qty_shipped_;
END Get_Total_Qty_Shipped;


--@IgnoreMissingSysinit
FUNCTION Rental_Is_Completed  (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN BOOLEAN
IS
   linerec_       CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
BEGIN
   linerec_           := Get_Object_By_Keys___(order_no_, line_no_, rel_no_, line_item_no_);
   RETURN Rental_Is_Completed___(linerec_);
END Rental_Is_Completed;


--@IgnoreMissingSysinit
PROCEDURE Get_Rental_Line_Total (
   net_base_amount_   OUT    NUMBER,
   gross_base_amount_ OUT    NUMBER,
   net_curr_amount_   IN OUT NOCOPY NUMBER,
   gross_curr_amount_ IN OUT NOCOPY NUMBER,   
   order_no_          IN     VARCHAR2,
   line_no_           IN     VARCHAR2,
   rel_no_            IN     VARCHAR2,
   line_item_no_      IN     NUMBER )
IS
   order_rec_              CUSTOMER_ORDER_API.Public_Rec;
   tax_line_param_rec_     Tax_Handling_Order_Util_API.tax_line_param_rec;
   company_                VARCHAR2(20);
   line_tax_dom_amount_    NUMBER;
   line_tax_curr_amount_   NUMBER;
BEGIN
   order_rec_          := Customer_Order_API.Get(order_no_);
   company_            := Site_API.Get_Company(order_rec_.contract);
   tax_line_param_rec_ := Fetch_Tax_Line_Param(company_, order_no_, line_no_, rel_no_, line_item_no_);
          
   Tax_Handling_Order_Util_API.Get_Amounts(line_tax_dom_amount_,
                                           net_base_amount_,
                                           gross_base_amount_,
                                           line_tax_curr_amount_,
                                           net_curr_amount_,
                                           gross_curr_amount_,
                                           tax_line_param_rec_.tax_calc_structure_id,
                                           order_no_,
                                           line_no_,
                                           rel_no_,
                                           line_item_no_,
                                           '*',
                                           Tax_Source_API.DB_CUSTOMER_ORDER_LINE,
                                           tax_line_param_rec_.company,
                                           tax_line_param_rec_.contract,
                                           tax_line_param_rec_.customer_no,
                                           tax_line_param_rec_.ship_addr_no,
                                           tax_line_param_rec_.planned_ship_date,
                                           tax_line_param_rec_.supply_country_db,
                                           tax_line_param_rec_.delivery_type,
                                           tax_line_param_rec_.object_id,
                                           order_rec_.use_price_incl_tax,
                                           tax_line_param_rec_.currency_code,
                                           tax_line_param_rec_.currency_rate,   
                                           'FALSE',   
                                           tax_line_param_rec_.tax_code,
                                           tax_line_param_rec_.tax_liability,
                                           tax_line_param_rec_.tax_liability_type_db,
                                           tax_line_param_rec_.delivery_country_db,   
                                           free_of_charge_tax_basis_ => NULL,
                                           tax_from_diff_source_ => 'FALSE',
										             add_tax_curr_amount_ => 'FALSE',
                                           quantity_ => NULL,
                                           attr_ => NULL);
END Get_Rental_Line_Total;


--@IgnoreMissingSysinit
PROCEDURE Get_Backord_Value_Base_Curr (
   net_amount_   OUT NUMBER,
   gross_amount_ OUT NUMBER,
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER )
IS
BEGIN
   Get_Backord_Value_Base_Curr___(net_amount_, gross_amount_, order_no_, line_no_, rel_no_, line_item_no_ );
END Get_Backord_Value_Base_Curr;


--@IgnoreMissingSysinit
PROCEDURE Get_Backlog_Value_Base_Curr (
   net_amount_   OUT NUMBER,
   gross_amount_ OUT NUMBER,
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER )
IS
BEGIN
   Get_Backlog_Value_Base_Curr___(net_amount_, gross_amount_, order_no_, line_no_, rel_no_, line_item_no_);
END Get_Backlog_Value_Base_Curr;


PROCEDURE Modify_Country_Code (
   order_no_         IN VARCHAR2,
   line_no_          IN VARCHAR2,
   rel_no_           IN VARCHAR2,
   line_item_no_     IN NUMBER,
   country_code_     IN VARCHAR2)
IS
   attr_  VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Country_Code');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('COUNTRY_CODE', country_code_, attr_);
   Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);
END Modify_Country_Code;


--@IgnoreMissingSysinit
PROCEDURE Get_Tax_Info (
   attr_          OUT VARCHAR2,
   order_no_      IN  VARCHAR2,
   line_no_       IN  VARCHAR2,
   rel_no_        IN  VARCHAR2,
   line_item_no_  IN  NUMBER)
IS
   linerec_                CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   tax_liability_type_db_  VARCHAR2(20);
   tax_paying_party_       VARCHAR2(20);
   header_rec_             CUSTOMER_ORDER_API.Public_Rec;
BEGIN
   linerec_  := Get_Object_By_Keys___(order_no_, line_no_, rel_no_, line_item_no_);
   header_rec_ := Customer_Order_API.Get(order_no_);
   
   Client_SYS.Set_Item_Value('TAX_CODE', linerec_.tax_code, attr_);
   Client_SYS.Set_Item_Value('TAX_CLASS_ID', linerec_.tax_class_id, attr_);
   Client_SYS.Set_Item_Value('TAX_LIABILITY', linerec_.tax_liability, attr_);
   IF (Order_Supply_Type_API.Encode(linerec_.demand_code) = 'IPD') THEN
      tax_liability_type_db_ := External_Cust_Order_Line_API.Get_Tax_Liability(order_no_, line_no_, rel_no_);
   ELSE
      tax_liability_type_db_ := linerec_.tax_liability_type;
   END IF;
   Client_SYS.Set_Item_Value('TAX_LIABILITY_TYPE_DB', tax_liability_type_db_, attr_);   
   Client_SYS.Set_Item_Value('IS_TAXABLE_DB', Sales_Part_API.Get_Taxable_Db(linerec_.contract, linerec_.catalog_no), attr_);
   Client_SYS.Set_Item_Value('TAX_LIABILITY_DATE', NVL(linerec_.planned_ship_date, TRUNC(Site_API.Get_Site_Date(linerec_.contract))), attr_);
   Client_SYS.Set_Item_Value('SHIP_ADDR_NO', linerec_.ship_addr_no, attr_);
   Client_SYS.Set_Item_Value('PLANNED_SHIP_DATE', linerec_.planned_ship_date, attr_);
   Client_SYS.Set_Item_Value('SUPPLY_COUNTRY_DB', header_rec_.supply_country, attr_);
   Client_SYS.Set_Item_Value('DELIVERY_TYPE', linerec_.delivery_type, attr_);
   IF order_no_ IS NOT NULL AND line_no_ IS NULL THEN
      Client_SYS.Set_Item_Value('DELIVERY_COUNTRY_DB', Customer_Order_Address_API.Get_Country_Code(order_no_), attr_);
   ELSE
      Client_SYS.Set_Item_Value('DELIVERY_COUNTRY_DB', Cust_Order_Line_Address_API.Get_Country_Code(order_no_, line_no_, rel_no_, line_item_no_), attr_);
   END IF;

   IF (linerec_.free_of_charge = Fnd_Boolean_API.DB_TRUE) THEN
      Client_SYS.Set_Item_Value('FREE_OF_CHARGE', linerec_.free_of_charge, attr_);
      Client_SYS.Set_Item_Value('FREE_OF_CHARGE_TAX_BASIS', linerec_.free_of_charge_tax_basis, attr_);
      tax_paying_party_ := header_rec_.free_of_chg_tax_pay_party;
      Client_SYS.Set_Item_Value('FREE_OF_CHG_TAX_PAY_PARTY', tax_paying_party_, attr_);
   END IF;
END Get_Tax_Info;


--@IgnoreMissingSysinit
PROCEDURE Get_External_Tax_Info (
   attr_          OUT VARCHAR2,
   source_ref1_   IN VARCHAR2,
   source_ref2_   IN VARCHAR2,
   source_ref3_   IN VARCHAR2,
   source_ref4_   IN VARCHAR2,
   company_       IN VARCHAR2)
IS
   linerec_    CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
BEGIN
   linerec_  := Get_Object_By_Keys___(source_ref1_, source_ref2_, source_ref3_, source_ref4_);   
   Client_SYS.Set_Item_Value('QUANTITY', linerec_.buy_qty_due, attr_);

   -- gelr:br_external_tax_integration, begin
   IF Company_Tax_Control_API.Get_External_Tax_Cal_Method_Db(company_) = External_Tax_Calc_Method_API.DB_AVALARA_TAX_BRAZIL THEN
      Client_SYS.Set_Item_Value('SHIP_ADDR_NO',            linerec_.ship_addr_no,           attr_);
      Client_SYS.Set_Item_Value('DOC_ADDR_NO',             Customer_Order_API.Get_Bill_Addr_No(source_ref1_), attr_);
      Client_SYS.Set_Item_Value('DOCUMENT_CODE',           source_ref1_,                    attr_);
      Client_SYS.Set_Item_Value('CATALOG_NO',              linerec_.catalog_no,             attr_);
      Client_SYS.Set_Item_Value('SALE_UNIT_PRICE',         linerec_.sale_unit_price,        attr_);
      --Client_SYS.Set_Item_Value('LINE_TAXED_DISCOUNT',     Cust_Order_Line_Discount_API.Get_Total_Line_Discount__(source_ref1_, source_ref2_, source_ref3_, source_ref4_, linerec_.buy_qty_due, linerec_.price_conv_factor), attr_);
      Client_SYS.Set_Item_Value('EXTERNAL_USE_TYPE',       Acquisition_Reason_API.Get_External_Use_Type_Db(company_, linerec_.acquisition_reason_id),  attr_);
      Client_SYS.Set_Item_Value('BUSINESS_TRANSACTION_ID', Business_Transaction_Id_API.Get_External_Tax_System_Ref(company_, Customer_Order_API.Get_Business_Transaction_Id(source_ref1_)), attr_);
      Client_SYS.Set_Item_Value('ORDER_NO',                linerec_.order_no,               attr_);
      Client_SYS.Set_Item_Value('LINE_NO',                 linerec_.line_no,                attr_);
      Client_SYS.Set_Item_Value('AVALARA_TAX_CODE',        Sales_Part_Ext_Tax_Params_API.Get_Avalara_Tax_Code(linerec_.contract, linerec_.catalog_no), attr_);
      Client_SYS.Set_Item_Value('STATISTICAL_CODE',        linerec_.statistical_code,       attr_);
      Client_SYS.Set_Item_Value('CEST_CODE',               Part_Br_Spec_Attrib_API.Get_Cest_Code(linerec_.part_no), attr_);
      Client_SYS.Set_Item_Value('SALES_UNIT_MEAS',         linerec_.sales_unit_meas,        attr_);
      Client_SYS.Set_Item_Value('ACQUISITION_ORIGIN',      linerec_.acquisition_origin,     attr_);
      Client_SYS.Set_Item_Value('PRODUCT_TYPE_CLASSIF',    Part_Br_Spec_Attrib_API.Get_Product_Type_Classif_Db(linerec_.part_no), attr_);
   END IF;
   -- gelr:br_external_tax_integration, end
END Get_External_Tax_Info;


PROCEDURE Modify_Tax_Info (
   attr_         IN OUT NOCOPY VARCHAR2,
   order_no_     IN     VARCHAR2,
   line_no_      IN     VARCHAR2,
   rel_no_       IN     VARCHAR2,
   line_item_no_ IN     NUMBER )
IS
   objid_            VARCHAR2(2000);
   objversion_       VARCHAR2(2000);
   oldrec_           CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   newrec_           CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   tax_class_id_     VARCHAR2(20);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Tax_Info');
   Get_Id_Version_By_Keys___(objid_, objversion_, order_no_, line_no_, rel_no_, line_item_no_);
   oldrec_ := Lock_By_Id___(objid_, objversion_);
   newrec_ := oldrec_;
   newrec_.tax_code  := Client_Sys.Get_Item_Value('TAX_CODE', attr_);
   Client_SYS.Add_To_Attr('TAX_CODE_CHANGED', 'TRUE', attr_);
   tax_class_id_:= Client_Sys.Get_Item_Value('TAX_CLASS_ID', attr_);    
   IF (oldrec_.tax_code = newrec_.tax_code) AND (newrec_.tax_code IS NOT NULL AND oldrec_.tax_code IS NOT NULL) 
      AND (tax_class_id_ IS NULL) THEN
      --Assign to oldrec_.tax_class_id to prevent overriding when set default tax information.
      newrec_.tax_class_id := oldrec_.tax_class_id;
   ELSE
      newrec_.tax_class_id := tax_class_id_;
   END IF;
   newrec_.tax_calc_structure_id  := Client_Sys.Get_Item_Value('TAX_CALC_STRUCTURE_ID', attr_);
   Update___(objid_, oldrec_, newrec_, attr_, objversion_);
END Modify_Tax_Info;


--@IgnoreMissingSysinit
PROCEDURE Validate_Source_Pkg_Info (
   source_ref1_  IN VARCHAR2,
   source_ref2_  IN VARCHAR2,
   source_ref3_  IN VARCHAR2,
   source_ref4_  IN VARCHAR2,
   attr_         IN VARCHAR2)
IS
   header_rec_              Customer_Order_API.Public_Rec;
   do_additional_validate_  VARCHAR2(5):= 'FALSE';
BEGIN
   IF (Get_Objstate(source_ref1_, source_ref2_, source_ref3_, source_ref4_) IN ('Invoiced', 'Cancelled')) THEN
      Error_SYS.Record_General(lu_name_, 'INVOICED_LINE: Tax lines cannot be altered when the charge line has been Cancelled or Invoiced/Closed.');
   END IF;
   
   do_additional_validate_ := nvl(Client_SYS.Get_Item_Value('DO_ADDITIONAL_VALIDATE', attr_),'TRUE');
   
   IF (do_additional_validate_ = 'TRUE') THEN
      IF Sales_Promotion_Util_API.Check_Promo_Exist_For_Ord_Line(source_ref1_, source_ref2_, source_ref3_, source_ref4_) THEN
         Error_SYS.Record_General(lu_name_, 'NOMODIFYTAXLINESPROMO: You are not allowed to modify the tax information unless sales promotion calculations have been cleared.');
      END IF;
      
      header_rec_ := Customer_Order_API.Get(source_ref1_); 
      IF header_rec_.proposed_prepayment_amount > 0 AND 
         Source_Tax_Item_API.Multiple_Tax_Items_Exist(Site_API.Get_Company(header_rec_.contract),
                                                      Tax_Source_API.DB_CUSTOMER_ORDER_LINE,
                                                      source_ref1_,
                                                      source_ref2_,
                                                      source_ref3_,
                                                      source_ref4_,
                                                      '*') = 'TRUE' THEN
         Error_SYS.Record_General(lu_name_, 'PREPAYINVMULTITAX: Multiple tax codes may not be added when a prepayment based invoice is connected to a customer order.');
      END IF;
   END IF;
END Validate_Source_Pkg_Info;


--@IgnoreMissingSysinit
FUNCTION Fetch_Tax_Line_Param(
   company_                IN VARCHAR2,
   source_ref1_            IN VARCHAR2,
   source_ref2_            IN VARCHAR2,
   source_ref3_            IN VARCHAR2,
   source_ref4_            IN VARCHAR2) RETURN Tax_Handling_Order_Util_API.tax_line_param_rec
IS
   order_rec_           Customer_Order_API.Public_Rec;
   order_line_rec_      Customer_Order_Line_API.Public_Rec;
   tax_line_param_rec_  Tax_Handling_Order_Util_API.tax_line_param_rec;
   tax_liability_type_db_ VARCHAR2(20);
BEGIN
   order_rec_          := Customer_Order_API.Get(source_ref1_);
   order_line_rec_     := Customer_Order_Line_API.Get(source_ref1_, source_ref2_, source_ref3_, source_ref4_);
      
   tax_line_param_rec_.company                  := company_;
   tax_line_param_rec_.contract                 := order_rec_.contract;
   tax_line_param_rec_.customer_no              := order_rec_.customer_no;
   tax_line_param_rec_.ship_addr_no             := order_line_rec_.ship_addr_no;
   tax_line_param_rec_.planned_ship_date        := order_line_rec_.planned_ship_date;
   tax_line_param_rec_.supply_country_db        := order_rec_.supply_country;
   tax_line_param_rec_.delivery_type            := NVL(order_line_rec_.delivery_type, '*');
   tax_line_param_rec_.object_id                := order_line_rec_.catalog_no;
   tax_line_param_rec_.use_price_incl_tax       := order_rec_.use_price_incl_tax;
   tax_line_param_rec_.currency_code            := order_rec_.currency_code;
   tax_line_param_rec_.currency_rate            := order_line_rec_.currency_rate;
   tax_line_param_rec_.free_of_charge_tax_basis := order_line_rec_.free_of_charge_tax_basis;
   tax_line_param_rec_.tax_liability            := order_line_rec_.tax_liability;
   IF (Order_Supply_Type_API.Encode(order_line_rec_.demand_code) = 'IPD') THEN
      tax_liability_type_db_ := External_Cust_Order_Line_API.Get_Tax_Liability(source_ref1_, source_ref2_, source_ref3_);
   ELSE
      tax_liability_type_db_ := order_line_rec_.tax_liability_type;
   END IF;
   tax_line_param_rec_.tax_liability_type_db    := tax_liability_type_db_;
   tax_line_param_rec_.tax_code                 := order_line_rec_.tax_code;
   tax_line_param_rec_.tax_calc_structure_id    := order_line_rec_.tax_calc_structure_id;
   tax_line_param_rec_.tax_class_id             := order_line_rec_.tax_class_id;
   tax_line_param_rec_.taxable                  := Sales_Part_API.Get_Taxable_Db(order_rec_.contract, order_line_rec_.catalog_no);
   
   RETURN tax_line_param_rec_;
END Fetch_Tax_Line_Param;


--@IgnoreMissingSysinit
PROCEDURE Fetch_Gross_Net_Tax_Amounts(
   gross_curr_amount_      OUT NUMBER,
   net_curr_amount_        OUT NUMBER,
   tax_curr_amount_        OUT NUMBER,
   company_                IN VARCHAR2,
   source_ref1_            IN VARCHAR2,
   source_ref2_            IN VARCHAR2,
   source_ref3_            IN VARCHAR2,
   source_ref4_            IN VARCHAR2)
IS
BEGIN
   gross_curr_amount_  := Customer_Order_Line_API.Get_Sale_Price_Incl_Tax_Total(source_ref1_, source_ref2_, source_ref3_, source_ref4_);
   net_curr_amount_  := Customer_Order_Line_API.Get_Sale_Price_Total(source_ref1_, source_ref2_, source_ref3_, source_ref4_);
   tax_curr_amount_  := Customer_Order_Line_API.Get_Total_Tax_Amount_Curr(source_ref1_, source_ref2_, source_ref3_, source_ref4_);
END Fetch_Gross_Net_Tax_Amounts;


--@IgnoreMissingSysinit
FUNCTION Get_Price_Total (
   source_ref1_   IN VARCHAR2,
   source_ref2_   IN VARCHAR2,
   source_ref3_   IN VARCHAR2,
   source_ref4_   IN VARCHAR2) RETURN NUMBER
IS
BEGIN
   RETURN Get_Sale_Price_Total(source_ref1_, source_ref2_, source_ref3_, source_ref4_);
END Get_Price_Total;


--@IgnoreMissingSysinit
FUNCTION Get_Price_Incl_Tax_Total  (
   source_ref1_   IN VARCHAR2,
   source_ref2_   IN VARCHAR2,
   source_ref3_   IN VARCHAR2,
   source_ref4_   IN VARCHAR2) RETURN NUMBER
IS
BEGIN
   RETURN Get_Sale_Price_Incl_Tax_Total (source_ref1_, source_ref2_, source_ref3_, source_ref4_);
END Get_Price_Incl_Tax_Total;


--@IgnoreMissingSysinit
FUNCTION Check_Qty_To_Reserve (
   order_no_           IN VARCHAR2,
   line_no_            IN VARCHAR2,
   rel_no_             IN VARCHAR2,
   line_item_no_       IN VARCHAR2) RETURN VARCHAR2
IS
   qty_reserve_available_   VARCHAR2(5):= 'FALSE';
   dummy_                   NUMBER;
   
   CURSOR get_qty_to_reserve IS
      SELECT 1  
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no     = order_no_
      AND    line_no      = line_no_
      AND    rel_no       = rel_no_
      AND    line_item_no = line_item_no_
      AND    ((revised_qty_due - qty_assigned - qty_to_ship - qty_shipped + qty_shipdiff) > 0);
BEGIN
   OPEN get_qty_to_reserve;
   FETCH get_qty_to_reserve INTO dummy_;
   IF (get_qty_to_reserve%FOUND) THEN
      qty_reserve_available_  := 'TRUE';
   END IF;
   CLOSE get_qty_to_reserve;
   RETURN qty_reserve_available_;
END Check_Qty_To_Reserve;


--@IgnoreMissingSysinit
FUNCTION Get_Comp_Bearing_Tax_Amount (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   line_rec_          CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   tax_amount_        NUMBER := 0;
   rounding_          NUMBER;
   company_           VARCHAR2(20);
   tax_paying_party_  VARCHAR2(20);
BEGIN
   line_rec_         := Get_Object_By_Keys___(order_no_, line_no_, rel_no_, line_item_no_);
   company_          := Site_API.Get_Company(line_rec_.contract);
   rounding_         := Currency_Code_API.Get_Currency_Rounding(company_, Company_Finance_API.Get_Currency_Code(company_));
   tax_paying_party_ := Customer_Order_API.Get_Free_Of_Chg_Tax_Pay_Par_Db(order_no_);
         
   IF (line_rec_.free_of_charge = Fnd_Boolean_API.DB_TRUE AND tax_paying_party_ = Tax_Paying_Party_API.DB_COMPANY) THEN
      IF (line_rec_.tax_liability_type = 'EXM') THEN
         -- No tax paid for this order line
         tax_amount_ := 0;
      ELSE
         tax_amount_ := Source_Tax_Item_API.Get_Total_Tax_Dom_Amount(company_, 
                                                                     Tax_Source_API.DB_CUSTOMER_ORDER_LINE,
                                                                     order_no_,
                                                                     line_no_,
                                                                     rel_no_,
                                                                     TO_CHAR(line_item_no_),
                                                                     '*');         
      END IF;   
      tax_amount_ := ROUND(tax_amount_, rounding_);
   ELSE
      tax_amount_ := NULL;
   END IF;
   RETURN tax_amount_;
END Get_Comp_Bearing_Tax_Amount;


--@IgnoreMissingSysinit
FUNCTION Get_Inv_Qty_To_Ship_Connect (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   inv_qty_to_ship_connect_   NUMBER:=0;
   customer_order_line_rec_   Public_Rec;
BEGIN
   customer_order_line_rec_ := Get(order_no_, line_no_, rel_no_, line_item_no_);
   inv_qty_to_ship_connect_ := (customer_order_line_rec_.revised_qty_due - customer_order_line_rec_.qty_shipped - customer_order_line_rec_.open_shipment_qty + customer_order_line_rec_.qty_shipdiff);
   RETURN NVL(inv_qty_to_ship_connect_, 0);
END Get_Inv_Qty_To_Ship_Connect;


--@IgnoreMissingSysinit
FUNCTION Get_Uncancelled_Pkg_Line_Count (
   order_no_ IN VARCHAR2,
   line_no_  IN VARCHAR2,
   rel_no_   IN VARCHAR2 ) RETURN NUMBER
IS
   count_             NUMBER;

   CURSOR uncancelled IS
      SELECT COUNT(*)
      FROM   customer_order_line_tab
      WHERE  order_no = order_no_
      AND    line_no  = line_no_
      AND    rel_no   = rel_no_
      AND    line_item_no > 0
      AND    rowstate != 'Cancelled';
BEGIN
   OPEN uncancelled;
   FETCH uncancelled INTO count_;
   IF (uncancelled%NOTFOUND) THEN
      count_ := 0;
   END IF;
   CLOSE uncancelled;
   RETURN count_;
END Get_Uncancelled_Pkg_Line_Count;


--@IgnoreMissingSysinit
PROCEDURE Get_Line_Address_Info (
   address1_      OUT VARCHAR2,
   address2_      OUT VARCHAR2,
   country_code_  OUT VARCHAR2,
   city_          OUT VARCHAR2,
   state_         OUT VARCHAR2,
   zip_code_      OUT VARCHAR2,
   county_        OUT VARCHAR2,
   in_city_       OUT VARCHAR2,
   source_ref1_   IN  VARCHAR2,
   source_ref2_   IN  VARCHAR2,
   source_ref3_   IN  VARCHAR2,
   source_ref4_   IN  VARCHAR2,
   company_       IN  VARCHAR2)
IS
   addr_rec_      Cust_Order_Line_Address_API.Co_Line_Addr_Rec;
   co_addr_rec_   Customer_Order_Address_API.Cust_Ord_Addr_Rec;
BEGIN
   IF source_ref1_ IS NOT NULL AND source_ref2_ IS NULL THEN
     co_addr_rec_   := Customer_Order_Address_API.Get_Cust_Ord_Addr(source_ref1_);
     address1_      := co_addr_rec_.address1;
     address2_      := co_addr_rec_.address2;
     country_code_  := co_addr_rec_.country_code;
     city_          := co_addr_rec_.city;
     state_         := co_addr_rec_.state;
     zip_code_      := co_addr_rec_.zip_code;
     county_        := co_addr_rec_.county;
     in_city_       := co_addr_rec_.in_city;
   ELSE
      addr_rec_      := Cust_Order_Line_Address_API.Get_Co_Line_Addr(source_ref1_, source_ref2_, source_ref3_, source_ref4_);
      address1_      := addr_rec_.address1;
      address2_      := addr_rec_.address2;
      country_code_  := addr_rec_.country_code;
      city_          := addr_rec_.city;
      state_         := addr_rec_.state;
      zip_code_      := addr_rec_.zip_code;
      county_        := addr_rec_.county;
      in_city_       := addr_rec_.in_city;
   END IF;
END Get_Line_Address_Info;


PROCEDURE Get_Info_For_Desadv (
   receiver_source_ref1_           OUT VARCHAR2,
   receiver_source_ref2_           OUT VARCHAR2,
   receiver_source_ref3_           OUT VARCHAR2,
   receiver_source_ref_type_       OUT VARCHAR2,
   customer_part_no_               OUT VARCHAR2,
   customer_part_desc_             OUT VARCHAR2,
   customer_contract_              OUT VARCHAR2,
   receiver_uom_                   OUT VARCHAR2,
   shipped_qty_                    OUT NUMBER,
   order_line_rec_                 IN  Public_Rec,
   contract_                       IN  VARCHAR2,
   customer_no_                    IN  VARCHAR2,
   inventory_part_no_              IN  VARCHAR2,
   gtin_no_                        IN  VARCHAR2,
   qty_shipped_                    IN  NUMBER)
IS
   acquisition_site_    VARCHAR2(5); 
   demand_order_ref1_   VARCHAR2(15); 
   demand_order_ref2_   VARCHAR2(10); 
   demand_order_ref3_   VARCHAR2(4); 
   demand_order_ref4_   NUMBER;
   oe_order_no_         VARCHAR2(15); 
   oe_line_no_          VARCHAR2(10); 
   oe_rel_no_           VARCHAR2(4); 
   oe_line_item_no_     NUMBER;
   oe_source_type_      VARCHAR2(25);
   source_rec_          Customer_Order_Line_API.Public_Rec;
   purchase_type_       VARCHAR2(30);
   header_rec_          Customer_Order_API.Public_Rec;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Get_Info_For_Desadv');
   acquisition_site_  := Cust_Ord_Customer_API.Get_Acquisition_Site(customer_no_);
   customer_contract_ := acquisition_site_;   
   
   IF (order_line_rec_.catalog_type = 'INV' AND acquisition_site_ IS NOT NULL ) THEN
      IF (Inventory_Part_API.Part_Exist(acquisition_site_, inventory_part_no_) = 1) THEN
         shipped_qty_ := Inventory_Part_API.Get_Site_Converted_Qty(contract_, inventory_part_no_, qty_shipped_, acquisition_site_, 'REMOVE');
      ELSE
         shipped_qty_             := qty_shipped_ / NVL(order_line_rec_.customer_part_conv_factor, 1) * NVL(order_line_rec_.cust_part_invert_conv_fact, 1);
      END IF;
   ELSE
      shipped_qty_   := qty_shipped_;
   END IF;
   
   receiver_uom_            := order_line_rec_.customer_part_unit_meas; 
   header_rec_ := Customer_Order_API.Get(order_line_rec_.order_no);
   
   IF (order_line_rec_.demand_code IS NULL) THEN
      receiver_source_ref1_ := header_rec_.customer_po_no;
      receiver_source_ref2_ := order_line_rec_.customer_po_line_no;
      receiver_source_ref3_ := order_line_rec_.customer_po_rel_no;
   ELSIF (order_line_rec_.demand_code = 'IPD') THEN 
      Supply_Order_Analysis_API.Find_Source(oe_order_no_,
                                            oe_line_no_,
                                            oe_rel_no_,
                                            oe_line_item_no_,
                                            oe_source_type_,
                                            order_line_rec_.order_no,
                                            order_line_rec_.line_no,
                                            order_line_rec_.rel_no,
                                            order_line_rec_.line_item_no,
                                            Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER,
                                            TRUE);
      IF (oe_source_type_ = Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER ) THEN                                        
         Customer_Order_Pur_Order_API.Get_Purord_For_Custord(receiver_source_ref1_,
                                                             receiver_source_ref2_,
                                                             receiver_source_ref3_,                                                                
                                                             purchase_type_,
                                                             oe_order_no_,
                                                             oe_line_no_,
                                                             oe_rel_no_,
                                                             oe_line_item_no_);  
         source_rec_            := Get(oe_order_no_, oe_line_no_,  oe_rel_no_, oe_line_item_no_);
         -- If the source supply code is 'IPD' then get customer PO number, PO Line and PO Rel as receiver_source_ref1_, receiver_source_ref2_, receiver_source_ref3_
         IF (source_rec_.supply_code = 'IPD') THEN 
            receiver_source_ref1_ := Customer_Order_API.Get_Customer_Po_No(oe_order_no_);
            receiver_source_ref2_ := source_rec_.customer_po_line_no;
            receiver_source_ref3_ := source_rec_.customer_po_rel_no;         
         END IF;
      ELSE
         receiver_source_ref1_ := oe_order_no_;
         receiver_source_ref2_ := oe_line_no_;
         receiver_source_ref3_ := oe_rel_no_;               
      END IF;                                                    
   ELSE
      IF (order_line_rec_.demand_code IN ('IPT', 'DO', 'IPT_RO')) THEN
         Get_Demand_Order_Info(demand_order_ref1_,
                               demand_order_ref2_,
                               demand_order_ref3_,
                               demand_order_ref4_,
                               order_line_rec_.order_no,
                               order_line_rec_.line_no,
                               order_line_rec_.rel_no,
                               order_line_rec_.line_item_no);

         IF (order_line_rec_.demand_code = 'DO') THEN
            $IF (Component_Disord_SYS.INSTALLED) $THEN
               Distribution_Order_API.Get_Purchase_Order_Info(receiver_source_ref1_, receiver_source_ref2_,
                                                              receiver_source_ref3_, demand_order_ref1_);  
            $ELSE
               NULL;   
            $END
         ELSE
            receiver_source_ref1_     := demand_order_ref1_;
            receiver_source_ref2_     := demand_order_ref2_;
            receiver_source_ref3_     := demand_order_ref3_;
         END IF;
      END IF;
   END IF;
   
   IF (receiver_source_ref1_ IS NOT NULL) THEN
      receiver_source_ref_type_ := Logistics_Source_Ref_Type_API.DB_PURCHASE_ORDER;
   END IF;   
   
   IF (order_line_rec_.customer_part_no IS NULL) AND (gtin_no_ IS NULL) THEN
      -- Note: If an internal PO connected to the CO, the assumption is done that the same part no is used on both sites and
      --       the Sales Part No is assigned as the Customer's Part No.
      IF (header_rec_.internal_po_no IS NOT NULL) THEN 
         $IF (Component_Purch_SYS.INSTALLED)$THEN
            customer_part_no_   := Purchase_Order_Line_Part_API.Get_Part_No(receiver_source_ref1_, receiver_source_ref2_, receiver_source_ref3_);
            customer_part_desc_ := Purchase_Order_Line_API.Get_Description(receiver_source_ref1_, receiver_source_ref2_, receiver_source_ref3_);
         $ELSE
            NULL;
         $END
      END IF;
   ELSE
      customer_part_no_   := order_line_rec_.customer_part_no;
      customer_part_desc_ := Sales_Part_Cross_Reference_API.Get_Catalog_Desc(customer_no_, contract_, customer_part_no_);
   END IF;
END Get_Info_For_Desadv;


--@IgnoreMissingSysinit
FUNCTION Uses_Shipment_Inventory(
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   rec_                    Customer_Order_Line_API.Public_Rec;
   pick_inventory_type_    VARCHAR2(7);
BEGIN
   rec_ := Get(order_no_, line_no_, rel_no_, line_item_no_);
   -- Go for header value: When it is not shipment connected, shipment_creation has to be 'Create_pick_List' 
   -- and it has to be before pick list creation
   IF(rec_.shipment_connected = 'TRUE' OR (rec_.shipment_creation = 'PICK_LIST_CREATION' AND rec_.rowstate = 'Reserved')) THEN
      pick_inventory_type_ := Pick_Inventory_Type_API.DB_SHIPMENT_INVENTORY;
   ELSE
      pick_inventory_type_ := Customer_Order_API.Get_Pick_Inventory_Type_Db(order_no_);
   END IF;

   RETURN CASE WHEN pick_inventory_type_ = 'SHIPINV' THEN 1 ELSE 0 END;
END Uses_Shipment_Inventory;


PROCEDURE Recalculate_Prices (
   order_no_      IN VARCHAR2,
   line_no_       IN VARCHAR2,
   rel_no_        IN VARCHAR2,
   line_item_no_  IN NUMBER )
IS
   line_rec_   Customer_Order_Line_Tab%ROWTYPE;
   objid_      VARCHAR2(2000);
   rowversion_ VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Recalculate_Prices');
   line_rec_ := Get_Object_By_Keys___(order_no_, line_no_, rel_no_, line_item_no_);
   Get_Id_Version_By_Keys___(objid_, rowversion_, order_no_, line_no_, rel_no_, line_item_no_);
   
   Calculate_Prices(line_rec_);   
   line_rec_.rowversion := sysdate;
   Update_Line___(objid_, line_rec_);
END Recalculate_Prices;


PROCEDURE Raise_Shipment_Chaged_New
IS
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Raise_Shipment_Chaged_New');
   Client_SYS.Add_Info(lu_name_, 'SHIPMENT_CHANGED_NEW: Shipment Creation of Customer Order Line will be changed to No Automatic Creation.');
END Raise_Shipment_Chaged_New;


PROCEDURE Validate_Prepayment(
  order_no_      IN VARCHAR2,
  line_no_       IN VARCHAR2,
  rel_no_        IN VARCHAR2,
  line_item_no_  IN NUMBER,
  action_        IN VARCHAR2)
IS
   linerec_      CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Validate_Prepayment');
   linerec_ := Get_Object_By_Keys___(order_no_, line_no_, rel_no_, line_item_no_); 
   Validate_Prepayment___(linerec_, action_);
END Validate_Prepayment;


FUNCTION Get_Unit_Contribution_Margin (
   order_no_       IN VARCHAR2,
   line_no_        IN VARCHAR2,
   rel_no_         IN VARCHAR2,
   line_item_no_   IN NUMBER,
   rounding_       IN NUMBER,
   extra_discount_ IN NUMBER) RETURN NUMBER
IS
   line_rec_                 Public_Rec;
   unit_contribution_margin_ NUMBER;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Get_Unit_Contribution_Margin');
   IF (Customer_Order_API.Exists(order_no_)) THEN
      line_rec_ := Get(order_no_, line_no_, rel_no_, line_item_no_);
      unit_contribution_margin_ := line_rec_.price_conv_factor * line_rec_.base_sale_unit_price * (1 - (line_rec_.discount + extra_discount_) / 100) * (1 - (line_rec_.order_discount + Customer_Order_API.Get_Additional_Discount(order_no_)) / 100) 
                                   - line_rec_.cost * line_rec_.conv_factor / line_rec_.inverted_conv_factor; 
      unit_contribution_margin_ := ROUND(unit_contribution_margin_, rounding_);
   END IF;
   RETURN unit_contribution_margin_;
END Get_Unit_Contribution_Margin;


FUNCTION Get_Base_Contribution_Margin (
   order_no_       IN VARCHAR2,
   line_no_        IN VARCHAR2,
   rel_no_         IN VARCHAR2,
   line_item_no_   IN NUMBER,
   rounding_       IN NUMBER,
   extra_discount_ IN NUMBER) RETURN NUMBER
IS
   line_rec_  Public_Rec;
   base_contribution_margin_ NUMBER;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Get_Base_Contribution_Margin');
   IF (Customer_Order_API.Exists(order_no_)) THEN
      line_rec_ := Get(order_no_, line_no_, rel_no_, line_item_no_);
      base_contribution_margin_ := line_rec_.buy_qty_due * line_rec_.price_conv_factor * line_rec_.base_sale_unit_price * (1 - (line_rec_.discount + extra_discount_) / 100) * (1 - (line_rec_.order_discount + Customer_Order_API.Get_Additional_Discount(order_no_)) / 100)
                                   - line_rec_.cost * line_rec_.buy_qty_due * line_rec_.conv_factor / line_rec_.inverted_conv_factor;
      base_contribution_margin_ := ROUND(base_contribution_margin_, rounding_);
   END IF;
   RETURN base_contribution_margin_;
END Get_Base_Contribution_Margin;


FUNCTION Get_No_Of_Sold_Sales_Parts (
   customer_no_ IN VARCHAR2,
   company_     IN VARCHAR2 DEFAULT NULL ) RETURN NUMBER
IS
   no_of_sold_parts_ NUMBER;
   
   CURSOR get_no_of_sold_sales_parts IS
      SELECT COUNT(*)
      FROM (SELECT COUNT(catalog_no)
            FROM customer_order_line
            WHERE customer_no = customer_no_
            AND   company LIKE NVL(company_, '%')
            AND   objstate IN ('PartiallyDelivered', 'Delivered', 'Invoiced')
            GROUP BY customer_no, catalog_no, catalog_desc, contract, company);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Get_No_Of_Sold_Sales_Parts');
   OPEN get_no_of_sold_sales_parts;
   FETCH get_no_of_sold_sales_parts INTO no_of_sold_parts_;
   CLOSE get_no_of_sold_sales_parts;
   
   RETURN NVL(no_of_sold_parts_, 0);
END Get_No_Of_Sold_Sales_Parts;


PROCEDURE Modify_Tax_Id_Validated_Date (
   order_no_          IN VARCHAR2,
   line_no_           IN VARCHAR2,
   rel_no_            IN VARCHAR2,
   line_item_no_      IN NUMBER)
IS
   attr_   VARCHAR2(2000) := NULL;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Tax_Id_Validated_Date');
   Client_SYS.Add_To_Attr('TAX_ID_VALIDATED_DATE', CURRENT_DATE, attr_);
   Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);
END Modify_Tax_Id_Validated_Date;


FUNCTION Get_Packages_Shipped (
   order_no_ IN VARCHAR2,
   line_no_  IN VARCHAR2,
   rel_no_   IN VARCHAR2) RETURN NUMBER
IS
   pkg_shipped_ NUMBER;
   
   CURSOR get_pkg_shipped IS
      SELECT NVL(MIN(TRUNC(qty_shipped * (inverted_conv_factor/conv_factor)/qty_per_assembly)),0) qty_shipped
      FROM   CUSTOMER_ORDER_LINE_TAB c
      WHERE  order_no = order_no_
      AND    line_no  = line_no_
      AND    rel_no   = rel_no_
      AND    line_item_no > 0
      AND    rowstate != 'Cancelled'
      AND    new_comp_after_delivery = 'FALSE';
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Get_Packages_Shipped');
   OPEN get_pkg_shipped;
   FETCH get_pkg_shipped INTO pkg_shipped_;
   CLOSE get_pkg_shipped;
   
   RETURN pkg_shipped_;
END Get_Packages_Shipped;


PROCEDURE Check_And_Add_To_Shipment(
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER)
IS
   line_rec_        CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   header_rowstate_ VARCHAR2(20);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Check_And_Add_To_Shipment');
   line_rec_ := Get_Object_By_Keys___(order_no_, line_no_, rel_no_, line_item_no_);
   header_rowstate_ := Customer_Order_API.Get_Objstate(line_rec_.order_no);
   Check_And_Add_To_Shipment___(line_rec_, header_rowstate_);
END Check_And_Add_To_Shipment;


--@IgnoreMissingSysinit
PROCEDURE Get_Order_Reference_Info (
   source_ref_status_   OUT VARCHAR2,
   condition_code_      OUT VARCHAR2,
   condition_code_desc_ OUT VARCHAR2,
   project_id_          OUT VARCHAR2,
   project_name_        OUT VARCHAR2,
   supply_code_db_      OUT VARCHAR2,
   rental_db_           OUT VARCHAR2,
   part_ownership_db_   OUT VARCHAR2,
   owner_               OUT VARCHAR2,
   owner_name_          OUT VARCHAR2,
   order_no_            IN  VARCHAR2,
   line_no_             IN  VARCHAR2,
   rel_no_              IN  VARCHAR2,
   line_item_no_        IN  VARCHAR2)
IS
   co_line_rec_    Public_Rec;
BEGIN
   co_line_rec_   := Get(order_no_, 
                         line_no_, 
                         rel_no_, 
                         line_item_no_);
                         
   source_ref_status_     := co_line_rec_.rowstate;
   condition_code_        := co_line_rec_.condition_code;                          
   condition_code_desc_   := Condition_Code_API.Get_Description(condition_code_); 
   project_id_            := co_line_rec_.project_id;
   rental_db_             := co_line_rec_.rental;
   supply_code_db_        := co_line_rec_.supply_code; 
   part_ownership_db_     := co_line_rec_.part_ownership;
   owner_                 := Get_Owner_For_Part_Ownership(order_no_, 
                                                          line_no_, 
                                                          rel_no_, 
                                                          line_item_no_, 
                                                          part_ownership_db_);
   owner_name_            := Cust_Ord_Customer_API.Get_Name(co_line_rec_.owning_customer_no); 
   $IF Component_Proj_SYS.INSTALLED $THEN
      project_name_       := Project_API.Get_Name(co_line_rec_.project_id);
   $END
END Get_Order_Reference_Info;


PROCEDURE Validate_Cust_Ord_Lin_Defaults(
   catalog_no_          IN OUT NOCOPY VARCHAR2 ,
   catalog_desc_        IN OUT NOCOPY VARCHAR2 ,   
   supply_code_         IN OUT NOCOPY VARCHAR2,
   vendor_no_           IN OUT NOCOPY VARCHAR2,
   supply_site_         IN OUT NOCOPY VARCHAR2,
   condition_code_      IN OUT NOCOPY VARCHAR2,    
   supply_code_client_  IN OUT NOCOPY VARCHAR2,
   contract_            IN VARCHAR2,
   language_code_       IN VARCHAR2,
   customer_no_         IN VARCHAR2, 
   demand_code_         IN VARCHAR2,
   purchase_part_no_    IN VARCHAR2,
   configurable_        IN VARCHAR2,
   part_no_             IN VARCHAR2,
   sourcing_option_     IN VARCHAR2,
   created_by_server_   IN BOOLEAN DEFAULT FALSE,
   rental_db_           IN VARCHAR2 DEFAULT 'FALSE')
IS
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Validate_Cust_Ord_Lin_Defaults');
   IF catalog_desc_ IS NULL THEN
     catalog_desc_ := Get_Catalog_Description___(contract_, catalog_no_, language_code_, customer_no_);
   END IF;
   
   IF (part_no_ IS NOT NULL) THEN
      Get_Condition_Code___(condition_code_, part_no_);
   END IF;
   
   Get_Supply_Code___(supply_code_, supply_code_client_, contract_, configurable_, catalog_no_, rental_db_,
                      sourcing_option_, demand_code_, purchase_part_no_, created_by_server_);
   
   vendor_no_ := Get_vendor_No___(supply_code_, rental_db_, contract_, purchase_part_no_);
   
   supply_site_ := Get_Supply_Site___(supply_code_, vendor_no_, rental_db_);
END Validate_Cust_Ord_Lin_Defaults;


--@IgnoreMissingSysinit
FUNCTION Get_Tax_Id_Type (
   order_no_      IN VARCHAR2,
   line_no_       IN VARCHAR2,
   rel_no_        IN VARCHAR2,
   line_item_no_  IN NUMBER) RETURN VARCHAR2
IS
   tax_id_type_         VARCHAR2(10);
   company_             VARCHAR2(20);
   delivery_country_    VARCHAR2(2);
   header_rec_          Customer_Order_API.Public_Rec;
BEGIN
   header_rec_       := Customer_Order_API.Get(order_no_);
   company_          := Site_API.Get_Company(header_rec_.contract);
   delivery_country_ := Cust_Order_Line_Address_API.Get_Country_Code(order_no_, line_no_, rel_no_, line_item_no_);
   tax_id_type_      := Tax_Handling_Order_Util_API.Fetch_And_Validate_Tax_Id(header_rec_.customer_no, header_rec_.bill_addr_no, company_, header_rec_.supply_country, delivery_country_);
   
   RETURN tax_id_type_;
END Get_Tax_Id_Type;


PROCEDURE Handle_Replacement_Part (
   catalog_no_     IN OUT NOCOPY VARCHAR2,
   org_catalog_no_ IN OUT NOCOPY VARCHAR2,
   contract_       IN     VARCHAR2,
   by_info_        IN     BOOLEAN )
IS
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Handle_Replacement_Part');
   Handle_Replacement_Part___(catalog_no_, org_catalog_no_, contract_, by_info_);
END Handle_Replacement_Part;


--@IgnoreMissingSysinit
FUNCTION Get_Planned_Rental_Start_Dt___ (
   attr_        IN  VARCHAR2,
   newrec_      IN  CUSTOMER_ORDER_LINE_TAB%ROWTYPE) RETURN DATE
IS
   planned_rental_start_date_ DATE := NULL;
BEGIN
   $IF Component_Rental_SYS.INSTALLED $THEN
      planned_rental_start_date_ := Rental_Object_API.Get_Planned_Rental_Start_Dt(newrec_.order_no,
                                                                                  newrec_.line_no,
                                                                                  newrec_.rel_no,
                                                                                  newrec_.line_item_no,
                                                                                  Rental_Type_API.DB_CUSTOMER_ORDER,
                                                                                  attr_);
   $END
   RETURN planned_rental_start_date_;
END Get_Planned_Rental_Start_Dt___;


FUNCTION Get_Catalog_Description___(
   contract_         IN VARCHAR2,
   catalog_no_       IN VARCHAR2,
   language_code_    IN VARCHAR2,
   customer_no_      IN VARCHAR2 ) RETURN VARCHAR2
IS
   customer_part_no_           Customer_Order_Line_Tab.customer_part_no%TYPE;      
   catalog_desc_               Customer_Order_Line_Tab.catalog_desc%TYPE;
BEGIN
   customer_part_no_ := Sales_Part_Cross_Reference_API.Get_Customer_Part_No(customer_no_, contract_, catalog_no_);
   IF customer_part_no_ IS NOT NULL THEN
      catalog_desc_  := Sales_Part_Cross_Reference_API.Get_Catalog_Desc(customer_no_, contract_, customer_part_no_);         
   END IF;
   
   IF catalog_desc_ IS NULL  THEN
      catalog_desc_ := Sales_Part_Language_Desc_API.Get_Catalog_Desc(contract_, catalog_no_, language_code_);   
   END IF;
   
   IF catalog_desc_ IS NULL THEN
      catalog_desc_ := Sales_Part_API.Get_Catalog_Desc(contract_, catalog_no_, language_code_);
   END IF;
   RETURN catalog_desc_;
END Get_Catalog_Description___;


PROCEDURE Get_Condition_Code___(
   condition_code_ IN OUT NOCOPY VARCHAR2,
   part_no_        IN     VARCHAR2   )
IS
BEGIN
   IF (Part_Catalog_API.Get_Condition_Code_Usage_Db(part_no_) = 'ALLOW_COND_CODE') THEN
      IF (condition_code_ IS NULL) THEN
         condition_code_ := Condition_Code_API.Get_Default_Condition_Code;
      END IF;
   END IF;
END Get_Condition_Code___;


PROCEDURE Get_Supply_Code___(
   supply_code_        IN OUT NOCOPY VARCHAR2,
   supply_code_client_ IN OUT NOCOPY VARCHAR2,
   contract_           IN VARCHAR2,
   configurable_       IN VARCHAR2,
   catalog_no_         IN VARCHAR2,
   rental_db_          IN VARCHAR2, 
   sourcing_option_    IN VARCHAR2,
   demand_code_        IN VARCHAR2,
   purchase_part_no_   IN VARCHAR2,
   created_by_server_  IN BOOLEAN )
IS
BEGIN
   IF ( supply_code_client_ IS NOT NULL AND supply_code_ IS NULL ) THEN
      supply_code_ := Order_Supply_Type_API.Encode(supply_code_client_);
   END IF;        
   
   IF (supply_code_ IS NULL) THEN
      supply_code_client_ := Sales_Part_API.Get_Default_Supply_Code(contract_, catalog_no_, rental_db_);
      supply_code_        := Order_Supply_Type_API.Encode(supply_code_client_);
   
      -- if no supply code was "found" - i.e. sourcing option PRIMARYSUPP... is used and primary supplier is not connect to the part.
      IF (supply_code_ IS NULL) AND (sourcing_option_ IN ('PRIMARYSUPPTRANSIT', 'PRIMARYSUPPDIRECT')) THEN
         IF created_by_server_ THEN
            Error_SYS.Record_General(lu_name_, 'NO_PRIMARY_SUPP: No primary supplier exists for purchase part :P1.', purchase_part_no_);
         ELSE
            Client_SYS.Add_Info(lu_name_, 'NO_PRIMARY_SUPP: No primary supplier exists for purchase part :P1.', purchase_part_no_);
         END IF;
      END IF;
      IF (supply_code_ = 'DOP') AND (sourcing_option_ = 'INVENTORYORDER') THEN
         supply_code_        := 'IO';
      END IF;
   ELSE
      -- if supply code is 'Invent Order' and the part is configured - set supply code to 'Not Decided'
      IF (supply_code_ = 'IO') AND (configurable_ = 'CONFIGURED') AND (NVL(demand_code_, Database_SYS.string_null_) != 'CQ') THEN
         supply_code_ := 'ND';
      END IF;
   END IF;
   
   IF supply_code_ IS NOT NULL THEN
      supply_code_client_ := Order_Supply_Type_API.Decode(supply_code_);
   END IF;
END Get_Supply_Code___;


FUNCTION Get_Vendor_No___(
   supply_code_ IN VARCHAR2,
   rental_db_   IN VARCHAR2,
   contract_    IN VARCHAR2,
   purchase_part_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   vendor_no_ Customer_Order_Line_Tab.vendor_no%TYPE;
BEGIN
   -- Get Primary Supplier No for the part_no, contract
   IF (supply_code_ IN ('IPT', 'IPD', 'PT', 'PD')) THEN
      $IF (Component_Purch_SYS.INSTALLED) $THEN
         IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
            vendor_no_ := Purchase_Part_Supplier_API.Get_Active_Primary_Supplier_No(contract_,
                                                                                purchase_part_no_);
         ELSE
            vendor_no_ := Purchase_Part_Supplier_API.Get_Active_Rental_Primary_Supp(contract_,
                                                                                    purchase_part_no_);

         END IF;
         $ELSE
            NULL;
         $END
      END IF;
   RETURN vendor_no_;
END Get_Vendor_No___;


FUNCTION Get_Supply_Site___(
      supply_code_ IN VARCHAR2,
      vendor_no_   IN VARCHAR2,
      rental_db_   IN VARCHAR2 ) RETURN VARCHAR2
IS
   
   FUNCTION Core(
         supply_code_ IN VARCHAR2,
         vendor_no_   IN VARCHAR2,
         rental_db_   IN VARCHAR2 ) RETURN VARCHAR2
      IS
         supply_site_  Customer_Order_Line_Tab.supply_site%TYPE;
      BEGIN
         IF (supply_code_ IN ('IPT', 'IPD')) THEN
         -- get default supply_site_reserve_type_
         -- check if the inventory part exists on the supply_site (is the supply_site in the same database)
         supply_site_ := Get_Vendor_Contract__(vendor_no_, NULL, NULL, NULL, rental_db_);
      END IF;
      RETURN supply_site_;   
   END Core;

BEGIN
   RETURN Core(supply_code_, vendor_no_, rental_db_);
END Get_Supply_Site___;

-----------------------------------------------------------------------------
-------------------- FINITE STATE MACHINE -----------------------------------
-----------------------------------------------------------------------------

PROCEDURE Finite_State_Init_ (
   rec_  IN OUT NOCOPY customer_order_line_tab%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Finite_State_Init_', server_only_ => TRUE);
   Finite_State_Init___(rec_, attr_);
END Finite_State_Init_;


--@IgnoreMissingSysinit
FUNCTION Finite_State_Decode__ (
   db_state_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   RETURN(Domain_SYS.Decode_(Domain_SYS.Get_Translated_Values(lu_name_), Get_Db_Values___, db_state_));
END Finite_State_Decode__;


--@IgnoreMissingSysinit
FUNCTION Finite_State_Encode__ (
   client_state_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   RETURN(Domain_SYS.Encode_(Domain_SYS.Get_Translated_Values(lu_name_), Get_Db_Values___, client_state_));
END Finite_State_Encode__;


--@IgnoreMissingSysinit
PROCEDURE Enumerate_States__ (
   client_values_ OUT VARCHAR2 )
IS
BEGIN
   client_values_ := Domain_SYS.Enumerate_(Domain_SYS.Get_Translated_Values(lu_name_));
END Enumerate_States__;


--@IgnoreMissingSysinit
PROCEDURE Enumerate_States_Db__ (
   db_values_ OUT VARCHAR2 )
IS
BEGIN
   db_values_ := Domain_SYS.Enumerate_(Get_Db_Values___);
END Enumerate_States_Db__;


--@IgnoreMissingSysinit
FUNCTION Finite_State_Events__ (
   db_state_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (db_state_ IS NULL) THEN
      RETURN NULL;
   ELSIF (db_state_ = 'Cancelled') THEN
      RETURN NULL;
   ELSIF (db_state_ = 'Delivered') THEN
      RETURN 'UndoDelivery^SetQtyAssigned^SetQtyConfirmeddiff^SetQtyInvoiced^SetQtyPicked^SetQtyShipdiff^SetRentalCompleted^SetQtyShipped^SetUninvoiced^';
   ELSIF (db_state_ = 'Invoiced') THEN
      RETURN 'SetQtyAssigned^SetQtyPicked^SetQtyShipdiff^SetRentalReopened^SetUninvoiced^UndoDelivery^SetQtyShipped^';
   ELSIF (db_state_ = 'PartiallyDelivered') THEN
      RETURN 'SetQtyAssigned^SetQtyConfirmeddiff^SetQtyInvoiced^SetQtyPicked^SetQtyShipdiff^SetQtyShipped^UndoDelivery^SetUninvoiced^';
   ELSIF (db_state_ = 'Picked') THEN
      RETURN 'SetQtyAssigned^SetQtyInvoiced^SetQtyPicked^SetQtyShipdiff^SetQtyShipped^SetUninvoiced^';
   ELSIF (db_state_ = 'Released') THEN
      RETURN 'SetCancelled^SetQtyAssigned^SetQtyInvoiced^SetQtyShipdiff^SetQtyShipped^SetUninvoiced^';
   ELSIF (db_state_ = 'Reserved') THEN
      RETURN 'SetQtyAssigned^SetQtyInvoiced^SetQtyPicked^SetQtyShipdiff^SetQtyShipped^SetUninvoiced^';
   ELSE
      RETURN NULL;
   END IF;
END Finite_State_Events__;


--@IgnoreMissingSysinit
PROCEDURE Enumerate_Events__ (
   db_events_ OUT VARCHAR2 )
IS
BEGIN
   db_events_ := 'SetCancelled^SetQtyAssigned^SetQtyConfirmeddiff^SetQtyInvoiced^SetQtyPicked^SetQtyShipdiff^SetQtyShipped^SetRentalCompleted^SetRentalReopened^SetUninvoiced^UndoDelivery^';
END Enumerate_Events__;


PROCEDURE Set_Cancelled__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   rec_ customer_order_line_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Set_Cancelled__');
   IF (action_ = 'CHECK') THEN
      NULL;
   ELSIF (action_ = 'DO') THEN
      rec_ := Lock_By_Id___(objid_, objversion_);
      Finite_State_Machine___(rec_, 'SetCancelled', attr_);
      objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
      Finite_State_Add_To_Attr___(rec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Set_Cancelled__;


PROCEDURE Set_Qty_Assigned__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   rec_ customer_order_line_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Set_Qty_Assigned__');
   IF (action_ = 'CHECK') THEN
      NULL;
   ELSIF (action_ = 'DO') THEN
      rec_ := Lock_By_Id___(objid_, objversion_);
      Finite_State_Machine___(rec_, 'SetQtyAssigned', attr_);
      objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
      Finite_State_Add_To_Attr___(rec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Set_Qty_Assigned__;


PROCEDURE Set_Qty_Confirmeddiff__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   rec_ customer_order_line_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Set_Qty_Confirmeddiff__');
   IF (action_ = 'CHECK') THEN
      NULL;
   ELSIF (action_ = 'DO') THEN
      rec_ := Lock_By_Id___(objid_, objversion_);
      Finite_State_Machine___(rec_, 'SetQtyConfirmeddiff', attr_);
      objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
      Finite_State_Add_To_Attr___(rec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Set_Qty_Confirmeddiff__;


PROCEDURE Set_Qty_Invoiced__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   rec_ customer_order_line_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Set_Qty_Invoiced__');
   IF (action_ = 'CHECK') THEN
      NULL;
   ELSIF (action_ = 'DO') THEN
      rec_ := Lock_By_Id___(objid_, objversion_);
      Finite_State_Machine___(rec_, 'SetQtyInvoiced', attr_);
      objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
      Finite_State_Add_To_Attr___(rec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Set_Qty_Invoiced__;


PROCEDURE Set_Qty_Picked__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   rec_ customer_order_line_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Set_Qty_Picked__');
   IF (action_ = 'CHECK') THEN
      NULL;
   ELSIF (action_ = 'DO') THEN
      rec_ := Lock_By_Id___(objid_, objversion_);
      Finite_State_Machine___(rec_, 'SetQtyPicked', attr_);
      objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
      Finite_State_Add_To_Attr___(rec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Set_Qty_Picked__;


PROCEDURE Set_Qty_Shipdiff__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   rec_ customer_order_line_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Set_Qty_Shipdiff__');
   IF (action_ = 'CHECK') THEN
      NULL;
   ELSIF (action_ = 'DO') THEN
      rec_ := Lock_By_Id___(objid_, objversion_);
      Finite_State_Machine___(rec_, 'SetQtyShipdiff', attr_);
      objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
      Finite_State_Add_To_Attr___(rec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Set_Qty_Shipdiff__;


PROCEDURE Set_Qty_Shipped__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   rec_ customer_order_line_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Set_Qty_Shipped__');
   IF (action_ = 'CHECK') THEN
      NULL;
   ELSIF (action_ = 'DO') THEN
      rec_ := Lock_By_Id___(objid_, objversion_);
      Finite_State_Machine___(rec_, 'SetQtyShipped', attr_);
      objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
      Finite_State_Add_To_Attr___(rec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Set_Qty_Shipped__;


PROCEDURE Set_Rental_Completed__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   rec_ customer_order_line_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Set_Rental_Completed__');
   IF (action_ = 'CHECK') THEN
      NULL;
   ELSIF (action_ = 'DO') THEN
      rec_ := Lock_By_Id___(objid_, objversion_);
      Finite_State_Machine___(rec_, 'SetRentalCompleted', attr_);
      objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
      Finite_State_Add_To_Attr___(rec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Set_Rental_Completed__;


PROCEDURE Set_Rental_Reopened__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   rec_ customer_order_line_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Set_Rental_Reopened__');
   IF (action_ = 'CHECK') THEN
      NULL;
   ELSIF (action_ = 'DO') THEN
      rec_ := Lock_By_Id___(objid_, objversion_);
      Finite_State_Machine___(rec_, 'SetRentalReopened', attr_);
      objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
      Finite_State_Add_To_Attr___(rec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Set_Rental_Reopened__;


PROCEDURE Set_Uninvoiced__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   rec_ customer_order_line_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Set_Uninvoiced__');
   IF (action_ = 'CHECK') THEN
      NULL;
   ELSIF (action_ = 'DO') THEN
      rec_ := Lock_By_Id___(objid_, objversion_);
      Finite_State_Machine___(rec_, 'SetUninvoiced', attr_);
      objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
      Finite_State_Add_To_Attr___(rec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Set_Uninvoiced__;


PROCEDURE Undo_Delivery__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   rec_ customer_order_line_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Undo_Delivery__');
   IF (action_ = 'CHECK') THEN
      NULL;
   ELSIF (action_ = 'DO') THEN
      rec_ := Lock_By_Id___(objid_, objversion_);
      Finite_State_Machine___(rec_, 'UndoDelivery', attr_);
      objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
      Finite_State_Add_To_Attr___(rec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Undo_Delivery__;


FUNCTION Get_Db_Values___ RETURN VARCHAR2 DETERMINISTIC
IS
BEGIN
   RETURN('Released^Reserved^Picked^Delivered^PartiallyDelivered^Cancelled^Invoiced^');
END Get_Db_Values___;


FUNCTION Get_Client_Values___ RETURN VARCHAR2 DETERMINISTIC
IS
BEGIN
   RETURN('Released^Reserved^Picked^Delivered^Partially Delivered^Cancelled^Invoiced/Closed^');
END Get_Client_Values___;


PROCEDURE Finite_State_Machine___ (
   rec_   IN OUT NOCOPY customer_order_line_tab%ROWTYPE,
   event_ IN     VARCHAR2,
   attr_  IN OUT NOCOPY VARCHAR2 )
IS
   state_ customer_order_line_tab.rowstate%TYPE;
BEGIN
   state_ := rec_.rowstate;
   IF (state_ IS NULL) THEN
      IF (event_ IS NULL) THEN
         Finite_State_Set___(rec_, 'Released');
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSE
         Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
      END IF;
   ELSIF (state_ = 'Cancelled') THEN
      Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
   ELSIF (state_ = 'Delivered') THEN
      IF (event_ IS NULL) THEN
         IF (NOT Line_Is_Fully_Delivered___(rec_)) THEN
            Finite_State_Set___(rec_, 'PartiallyDelivered');
            Finite_State_Machine___(rec_, NULL, attr_);
         ELSIF (Line_Is_Fully_Invoiced___(rec_)) THEN
            Finite_State_Set___(rec_, 'Invoiced');
            Finite_State_Machine___(rec_, NULL, attr_);
         END IF;
      ELSIF (event_ = 'SetQtyAssigned') THEN
         Do_Set_Qty_Assigned___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetQtyConfirmeddiff') THEN
         Do_Set_Qty_Confirmeddiff___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetQtyInvoiced') THEN
         Do_Set_Qty_Invoiced___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetQtyPicked') THEN
         Do_Set_Qty_Picked___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetQtyShipdiff') THEN
         Do_Set_Qty_Shipdiff___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetQtyShipped') THEN
         Do_Set_Qty_Shipped___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetRentalCompleted') THEN
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetUninvoiced') THEN
         Do_Uninvoice_Pkg_Component___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
         Do_Set_Qty_Invoiced___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'UndoDelivery') THEN
         Do_Undo_Delivery___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSE
         Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
      END IF;
   ELSIF (state_ = 'Invoiced') THEN
      IF (event_ IS NULL) THEN
         Do_Nothing___(rec_, attr_);
      ELSIF (event_ = 'SetQtyAssigned') THEN
         Do_Set_Qty_Assigned___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetQtyPicked') THEN
         Do_Set_Qty_Picked___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetQtyShipdiff') THEN
         Do_Set_Qty_Shipdiff___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetQtyShipped') THEN
         Do_Set_Qty_Shipped___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetRentalReopened') THEN
         IF (NOT Rental_Is_Completed___(rec_)) THEN
            Finite_State_Set___(rec_, 'Delivered');
            Finite_State_Machine___(rec_, NULL, attr_);
         END IF;
      ELSIF (event_ = 'SetUninvoiced') THEN
         Do_Uninvoice_Pkg_Component___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
         Do_Set_Qty_Invoiced___(rec_, attr_);
         Finite_State_Set___(rec_, 'Delivered');
         Finite_State_Machine___(rec_, NULL, attr_);
         Do_Uninvoice_Pkg_Head_State___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'UndoDelivery') THEN
         Do_Undo_Delivery___(rec_, attr_);
         Finite_State_Set___(rec_, 'Delivered');
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSE
         Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
      END IF;
   ELSIF (state_ = 'PartiallyDelivered') THEN
      IF (event_ IS NULL) THEN
         IF (Line_Is_Fully_Delivered___(rec_)) THEN
            Check_Delivery_Confirmed___(rec_, attr_);
            Finite_State_Set___(rec_, 'Delivered');
            Finite_State_Machine___(rec_, NULL, attr_);
         ELSIF (NOT Is_Any_Delivery_Exist___(rec_)) THEN
            Finite_State_Set___(rec_, 'Picked');
            Finite_State_Machine___(rec_, NULL, attr_);
         END IF;
      ELSIF (event_ = 'SetQtyAssigned') THEN
         Do_Set_Qty_Assigned___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetQtyConfirmeddiff') THEN
         Do_Set_Qty_Confirmeddiff___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetQtyInvoiced') THEN
         Do_Set_Qty_Invoiced___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetQtyPicked') THEN
         Do_Set_Qty_Picked___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetQtyShipdiff') THEN
         Do_Set_Qty_Shipdiff___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetQtyShipped') THEN
         Do_Set_Qty_Shipped___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
         Do_Set_Pkg_Header_State___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetUninvoiced') THEN
         Do_Uninvoice_Pkg_Component___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
         Do_Set_Qty_Invoiced___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'UndoDelivery') THEN
         Do_Undo_Delivery___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSE
         Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
      END IF;
   ELSIF (state_ = 'Picked') THEN
      IF (event_ IS NULL) THEN
         IF (NOT Line_Is_Picked___(rec_)) THEN
            Finite_State_Set___(rec_, 'Reserved');
            Finite_State_Machine___(rec_, NULL, attr_);
         END IF;
      ELSIF (event_ = 'SetQtyAssigned') THEN
         Do_Set_Qty_Assigned___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetQtyInvoiced') THEN
         Do_Set_Qty_Invoiced___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetQtyPicked') THEN
         Do_Set_Qty_Picked___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetQtyShipdiff') THEN
         Do_Set_Qty_Shipdiff___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetQtyShipped') THEN
         Do_Set_Qty_Shipped___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
         IF (Is_Any_Delivery_Exist___(rec_)) THEN
            Finite_State_Set___(rec_, 'PartiallyDelivered');
            Finite_State_Machine___(rec_, NULL, attr_);
         END IF;
         Do_Set_Pkg_Header_State___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetUninvoiced') THEN
         Do_Uninvoice_Pkg_Component___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
         Do_Set_Qty_Invoiced___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSE
         Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
      END IF;
   ELSIF (state_ = 'Released') THEN
      IF (event_ IS NULL) THEN
         IF (Line_Is_Fully_Invoiced___(rec_)) THEN
            Finite_State_Set___(rec_, 'Invoiced');
            Finite_State_Machine___(rec_, NULL, attr_);
         END IF;
      ELSIF (event_ = 'SetCancelled') THEN
         Check_Delete_Exp_License___(rec_, attr_);
         Finite_State_Set___(rec_, 'Cancelled');
      ELSIF (event_ = 'SetQtyAssigned') THEN
         Do_Set_Qty_Assigned___(rec_, attr_);
         Finite_State_Set___(rec_, 'Reserved');
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetQtyInvoiced') THEN
         Do_Set_Qty_Invoiced___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetQtyShipdiff') THEN
         Do_Set_Qty_Shipdiff___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetQtyShipped') THEN
         Do_Set_Qty_Shipped___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
         IF (Is_Any_Delivery_Exist___(rec_)) THEN
            Finite_State_Set___(rec_, 'PartiallyDelivered');
            Finite_State_Machine___(rec_, NULL, attr_);
         END IF;
         Do_Set_Pkg_Header_State___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetUninvoiced') THEN
         Do_Uninvoice_Pkg_Component___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
         Do_Set_Qty_Invoiced___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSE
         Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
      END IF;
   ELSIF (state_ = 'Reserved') THEN
      IF (event_ IS NULL) THEN
         IF (NOT Line_Is_Reserved___(rec_)) THEN
            Finite_State_Set___(rec_, 'Released');
            Finite_State_Machine___(rec_, NULL, attr_);
         END IF;
      ELSIF (event_ = 'SetQtyAssigned') THEN
         Do_Set_Qty_Assigned___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetQtyInvoiced') THEN
         Do_Set_Qty_Invoiced___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetQtyPicked') THEN
         Do_Set_Qty_Picked___(rec_, attr_);
         Finite_State_Set___(rec_, 'Picked');
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetQtyShipdiff') THEN
         Do_Set_Qty_Shipdiff___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetQtyShipped') THEN
         Do_Set_Qty_Shipped___(rec_, attr_);
         Finite_State_Set___(rec_, 'PartiallyDelivered');
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetUninvoiced') THEN
         Do_Uninvoice_Pkg_Component___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
         Do_Set_Qty_Invoiced___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSE
         Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
      END IF;
   ELSE
      Error_SYS.State_Not_Exist(lu_name_, Finite_State_Decode__(state_));
   END IF;
END Finite_State_Machine___;


PROCEDURE Finite_State_Add_To_Attr___ (
   rec_  IN     customer_order_line_tab%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   state_ customer_order_line_tab.rowstate%TYPE;
BEGIN
   state_ := rec_.rowstate;
   Client_SYS.Add_To_Attr('__OBJSTATE', state_, attr_);
   Client_SYS.Add_To_Attr('__OBJEVENTS', Finite_State_Events__(state_), attr_);
   Client_SYS.Add_To_Attr('STATE', Finite_State_Decode__(state_), attr_);
END Finite_State_Add_To_Attr___;


PROCEDURE Finite_State_Init___ (
   rec_  IN OUT NOCOPY customer_order_line_tab%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
BEGIN
   Finite_State_Machine___(rec_, NULL, attr_);
   Finite_State_Add_To_Attr___(rec_, attr_);
END Finite_State_Init___;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PRIVATE METHODS ----------------------------
-----------------------------------------------------------------------------

PROCEDURE New__ (
   info_       OUT    VARCHAR2,
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   
   PROCEDURE Base (
      info_       OUT    VARCHAR2,
      objid_      OUT    VARCHAR2,
      objversion_ OUT    VARCHAR2,
      attr_       IN OUT NOCOPY VARCHAR2,
      action_     IN     VARCHAR2 )
   IS
      newrec_   customer_order_line_tab%ROWTYPE;
      indrec_   Indicator_Rec;
   BEGIN
      IF (action_ = 'PREPARE') THEN
         Prepare_Insert___(attr_);
      ELSIF (action_ = 'CHECK') THEN
         Unpack___(newrec_, indrec_, attr_);
         Check_Insert___(newrec_, indrec_, attr_);
      ELSIF (action_ = 'DO') THEN
         Unpack___(newrec_, indrec_, attr_);
         Check_Insert___(newrec_, indrec_, attr_);
         Insert___(objid_, objversion_, newrec_, attr_);
      END IF;
      info_ := Client_SYS.Get_All_Info;
   END Base;

   PROCEDURE Core (
      info_       OUT    VARCHAR2,
      objid_      OUT    VARCHAR2,
      objversion_ OUT    VARCHAR2,
      attr_       IN OUT NOCOPY VARCHAR2,
      action_     IN     VARCHAR2 )
   IS
      insert_package_mode_ VARCHAR2(5);
      current_info_        VARCHAR2(32000);
      invalid_calendar_info_ VARCHAR2(4000);
   BEGIN
   
      -- Clear all info if user fails to save, the first time and a message will be
      -- printed afterwards
      Client_SYS.Clear_Info;
      current_info_ := NULL;
      App_Context_SYS.Set_Value('CUSTOMER_ORDER_LINE_API.CURRENT_INFO_',current_info_);
   
      -- Adding dummy attribute to pass INSERT_PACKAGE_MODE_ information.
      insert_package_mode_ := 'FALSE';
      Client_SYS.Add_To_Attr('INSERT_PACKAGE_MODE_', insert_package_mode_, attr_);
      IF (action_ = 'DO') THEN
         Client_SYS.Add_To_Attr('ADD_INFO', 'TRUE', attr_);
      END IF;
   
      Base(info_, objid_, objversion_, attr_, action_);
      insert_package_mode_ := NVL(Client_SYS.Get_Item_Value('INSERT_PACKAGE_MODE_', attr_), 'FALSE');
      -- only set the info if we are not in the insert package loop, in those cases
      -- we skip the info messages for the components
      IF (insert_package_mode_ = 'FALSE') THEN
         current_info_ := App_Context_SYS.Find_Value('CUSTOMER_ORDER_LINE_API.CURRENT_INFO_');
         current_info_ := SUBSTR(current_info_ || info_, 1, 2000);
         App_Context_SYS.Set_Value('CUSTOMER_ORDER_LINE_API.CURRENT_INFO_', current_info_);
         -- Show  App_Context_SYS value stored in key 'CUST_ORD_DATE_CALCULATION_API.INVALID_CALENDAR_INFO_' as info message if available
         Cust_Ord_Date_Calculation_API.Show_Invalid_Calendar_Info(invalid_calendar_info_, 'FALSE');
         IF (LENGTH(current_info_|| invalid_calendar_info_)< 32000) THEN
            current_info_ := NVL(current_info_, 'INFO' || Client_SYS.field_separator_) || invalid_calendar_info_;
         END IF;
      END IF;
      info_ := current_info_;
   END Core;

BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'New__');
   Core(info_, objid_, objversion_, attr_, action_);
END New__;


PROCEDURE Modify__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   
   PROCEDURE Base (
      info_       OUT    VARCHAR2,
      objid_      IN     VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      attr_       IN OUT NOCOPY VARCHAR2,
      action_     IN     VARCHAR2 )
   IS
      oldrec_   customer_order_line_tab%ROWTYPE;
      newrec_   customer_order_line_tab%ROWTYPE;
      indrec_   Indicator_Rec;
   BEGIN
      IF (action_ = 'CHECK') THEN
         oldrec_ := Get_Object_By_Id___(objid_);
         newrec_ := oldrec_;
         Unpack___(newrec_, indrec_, attr_);
         Check_Update___(oldrec_, newrec_, indrec_, attr_);
      ELSIF (action_ = 'DO') THEN
         oldrec_ := Lock_By_Id___(objid_, objversion_);
         newrec_ := oldrec_;
         Unpack___(newrec_, indrec_, attr_);
         Check_Update___(oldrec_, newrec_, indrec_, attr_);
         Update___(objid_, oldrec_, newrec_, attr_, objversion_);
      END IF;
      info_ := Client_SYS.Get_All_Info;
   END Base;

   PROCEDURE Core (
      info_       OUT    VARCHAR2,
      objid_      IN     VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      attr_       IN OUT NOCOPY VARCHAR2,
      action_     IN     VARCHAR2 )
   IS
      newrec_               CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
      insert_package_mode_  VARCHAR2(5);
      current_info_         VARCHAR2(32000);
      temp_action_check_    VARCHAR2(5);
      dummy_attr_           VARCHAR2(32000);
      invalid_calendar_info_ VARCHAR2(4000);
   BEGIN
      dummy_attr_          := attr_;
      current_info_        := NULL;
      temp_action_check_   := action_;
      App_Context_SYS.Set_Value('CUSTOMER_ORDER_LINE_API.CURRENT_INFO_',current_info_);
      insert_package_mode_ := 'FALSE';
      Client_SYS.Add_To_Attr('INSERT_PACKAGE_MODE_', insert_package_mode_, attr_);
      newrec_              := Get_Object_By_Id___(objid_);
   
      IF (action_ = 'DO') THEN
         Client_SYS.Add_To_Attr('ADD_INFO',         'TRUE', attr_);
         Client_SYS.Add_To_Attr( 'DEFAULT_CHARGES', 'TRUE', attr_);
         IF (newrec_.supply_code = 'SEO') THEN
            Validate_Update_Service_Con___(dummy_attr_, newrec_.demand_code);
         END IF;
      END IF;
   
      IF (temp_action_check_ = 'CHECK') THEN
         IF (newrec_.rowstate IN ('Invoiced', 'Cancelled')) THEN
            Error_SYS.Record_General(lu_name_, 'WRONG_STATE: No changes may be made when the order state is Invoiced/Closed or Cancelled.');
         END IF;
      END IF;
   
      Base(info_, objid_, objversion_, attr_, action_);
      current_info_ :=  App_Context_SYS.Find_Value('CUSTOMER_ORDER_LINE_API.CURRENT_INFO_');
      -- Show  App_Context_SYS value stored in key 'CUST_ORD_DATE_CALCULATION_API.INVALID_CALENDAR_INFO_' as info message if available
      Cust_Ord_Date_Calculation_API.Show_Invalid_Calendar_Info(invalid_calendar_info_, 'FALSE');
      IF (LENGTH(current_info_|| invalid_calendar_info_)< 32000) THEN
         current_info_ := NVL(current_info_, 'INFO' || Client_SYS.field_separator_) || invalid_calendar_info_;
      END IF;
      
      info_ := current_info_ || info_;
   END Core;

BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify__');
   Core(info_, objid_, objversion_, attr_, action_);
END Modify__;


PROCEDURE Remove__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2,
   action_     IN  VARCHAR2 )
IS
   
   PROCEDURE Base (
      info_       OUT VARCHAR2,
      objid_      IN  VARCHAR2,
      objversion_ IN  VARCHAR2,
      action_     IN  VARCHAR2 )
   IS
      remrec_ customer_order_line_tab%ROWTYPE;
   BEGIN
      IF (action_ = 'CHECK') THEN
         remrec_ := Get_Object_By_Id___(objid_);
         Check_Delete___(remrec_);
      ELSIF (action_ = 'DO') THEN
         remrec_ := Lock_By_Id___(objid_, objversion_);
         Check_Delete___(remrec_);
         Delete___(objid_, remrec_);
      END IF;
      info_ := Client_SYS.Get_All_Info;
   END Base;

   PROCEDURE Core (
      info_       OUT VARCHAR2,
      objid_      IN  VARCHAR2,
      objversion_ IN  VARCHAR2,
      action_     IN  VARCHAR2 )
   IS
      remrec_     CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
      company_    VARCHAR2(20);
   BEGIN
      IF (action_ = 'DO') THEN
         remrec_ := Get_Object_By_Id___(objid_);
      END IF;
      Base(info_, objid_, objversion_, action_);
      
      company_ := Site_API.Get_Company(remrec_.contract);
      Source_Tax_Item_Order_API.Remove_Tax_Items(company_,
                                                 Tax_Source_API.DB_CUSTOMER_ORDER_LINE,
                                                 remrec_.order_no,
                                                 remrec_.line_no,
                                                 remrec_.rel_no,
                                                 TO_CHAR(remrec_.line_item_no),
                                                 '*');
      Customer_Order_Charge_Util_API.Recalc_Percentage_Charge_Taxes(remrec_.order_no, remrec_.line_no, TRUE);
      info_ := Client_SYS.Append_Info(info_);
   END Core;

BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Remove__');
   Core(info_, objid_, objversion_, action_);
END Remove__;


--@IgnoreMissingSysinit
FUNCTION Get_Sum_Invoiced_Base_Curr__ (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   CURSOR get_curr_rate IS
      SELECT currency_rate
      FROM  CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;

   curr_rate_     NUMBER;
   base_rounding_ NUMBER;
   company_       VARCHAR2(20);
BEGIN
   company_       := Site_API.Get_Company(CUSTOMER_ORDER_API.Get_Contract(order_no_));
   base_rounding_ := Currency_Code_API.Get_Currency_Rounding(company_, Company_Finance_API.Get_Currency_Code(company_));

   OPEN get_curr_rate;
   FETCH get_curr_rate INTO curr_rate_;
   CLOSE get_curr_rate;

   RETURN ROUND( Get_Sum_Invoiced_Order_Curr__(order_no_, line_no_, rel_no_, line_item_no_)*curr_rate_, base_rounding_);
END Get_Sum_Invoiced_Base_Curr__;


--@IgnoreMissingSysinit
FUNCTION Get_Sum_Invoiced_Order_Curr__ (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   sum_           NUMBER;   
   rounding_      NUMBER;

   CURSOR get_line_data IS
      SELECT qty_invoiced, price_conv_factor, sale_unit_price, unit_price_incl_tax,
             order_discount, additional_discount
      FROM  CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;

   line_discount_      NUMBER;
   rec_line_           get_line_data%ROWTYPE;
   line_disc_no_tax_   NUMBER;
   total_disc_no_tax_  NUMBER;
   tax_percentage_     NUMBER;
   total_gross_amt_    NUMBER;
   company_            VARCHAR2(20);
   header_rec_         Customer_Order_API.Public_Rec;
BEGIN
   header_rec_ := Customer_Order_API.Get(order_no_); 
   company_    := Site_API.Get_Company(header_rec_.contract);
   rounding_   := Currency_Code_API.Get_Currency_Rounding(company_, header_rec_.currency_code);  

   OPEN get_line_data;
   FETCH get_line_data INTO rec_line_;
   CLOSE get_line_data;
   line_discount_   := Cust_Order_Line_Discount_API.Get_Total_Line_Discount(order_no_, line_no_, rel_no_, line_item_no_,
                                                                            rec_line_.qty_invoiced, rec_line_.price_conv_factor, rounding_);

   IF (header_rec_.use_price_incl_tax  = 'TRUE') THEN
      tax_percentage_     := Source_Tax_Item_API.Get_Total_Tax_Percentage(company_, Tax_Source_API.DB_CUSTOMER_ORDER_LINE, 
                                                                          order_no_, line_no_, rel_no_, TO_CHAR(line_item_no_), '*');
      line_disc_no_tax_   := Cust_Order_Line_Discount_API.Get_Total_Line_Discount(order_no_, line_no_, rel_no_, line_item_no_,
                                                                                  rec_line_.qty_invoiced, rec_line_.price_conv_factor,  rounding_, tax_percentage_ => NVL(tax_percentage_, 0));
      total_gross_amt_    := rec_line_.qty_invoiced * rec_line_.price_conv_factor * rec_line_.unit_price_incl_tax;

      total_disc_no_tax_  := line_disc_no_tax_;
      total_disc_no_tax_  := total_disc_no_tax_ + ROUND (ROUND((total_gross_amt_ - line_discount_) * rec_line_.order_discount, rounding_)/(1+ (tax_percentage_/100)), rounding_); -- Calculating Order discount
      total_disc_no_tax_  := total_disc_no_tax_ + ROUND (ROUND((total_gross_amt_ - line_discount_) * rec_line_.additional_discount, rounding_)/(1+ (tax_percentage_/100)), rounding_); -- Calculating Additional discount

      sum_ := ROUND( total_gross_amt_ /(1+ (tax_percentage_/100)),rounding_ ) - total_disc_no_tax_;

   ELSE
      sum_ := ROUND(((rec_line_.qty_invoiced * rec_line_.price_conv_factor * rec_line_.sale_unit_price) - line_discount_)
                   * (1 - (rec_line_.order_discount + rec_line_.additional_discount) / 100), rounding_) ;
   END IF;
   sum_ := NVL(sum_, 0);

   RETURN sum_;
END Get_Sum_Invoiced_Order_Curr__;


PROCEDURE Recalc_Package_Structure__ (
   order_no_ IN VARCHAR2,
   line_no_  IN VARCHAR2,
   rel_no_   IN VARCHAR2 )
IS
   linerec_               CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   rowid_                 VARCHAR2(2000);
   rowversion_            VARCHAR2(2000);
   insert_package_mode_   VARCHAR2(5);
   block_component_info_  VARCHAR2(5);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Recalc_Package_Structure__');
   insert_package_mode_   := 'FALSE';
   block_component_info_  := 'FALSE';
   linerec_ := Get_Object_By_Keys___(order_no_, line_no_, rel_no_, -1);
   -- Modify cost for the order line
   Update_Package_Cost___(linerec_.cost, order_no_, line_no_, rel_no_);
   Change_Package_Structure___(linerec_.promised_delivery_date, linerec_.planned_delivery_date,
                               linerec_.planned_ship_date, linerec_.planned_due_date, linerec_, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, insert_package_mode_, block_component_info_, NULL);

   linerec_.qty_assigned :=  Reserve_Customer_Order_API.Get_No_Of_Packages_Reserved(order_no_, line_no_, rel_no_);

   Get_Id_Version_By_Keys___(rowid_, rowversion_, order_no_, line_no_, rel_no_, -1);
   linerec_.rowversion := sysdate;

   Update_Line___(rowid_, linerec_);
END Recalc_Package_Structure__;


PROCEDURE Get_Cust_Part_No_Defaults__ (
   info_             OUT    VARCHAR2,
   attr_             IN OUT NOCOPY VARCHAR2,
   order_no_         IN     VARCHAR2,
   customer_part_no_ IN     VARCHAR2 )
IS
   customer_unit_meas_ CUSTOMER_ORDER_LINE_TAB.sales_unit_meas%TYPE;
   cross_rec_          SALES_PART_CROSS_REFERENCE_API.Public_Rec;
   header_rec_         CUSTOMER_ORDER_API.Public_Rec;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Get_Cust_Part_No_Defaults__');
   header_rec_ := Customer_Order_API.Get(order_no_);
   Sales_Part_Cross_Reference_API.Exist(header_rec_.customer_no, header_rec_.contract, customer_part_no_);
   cross_rec_   := Sales_Part_Cross_Reference_API.Get(header_rec_.customer_no, header_rec_.contract, customer_part_no_);
   Get_Line_Defaults___(attr_, cross_rec_.catalog_no, order_no_, 1);

   IF (cross_rec_.catalog_desc IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('CATALOG_DESC', cross_rec_.catalog_desc, attr_);
   END IF;

   Client_SYS.Add_To_Attr('CATALOG_NO', cross_rec_.catalog_no, attr_);
   customer_unit_meas_ := NVL(cross_rec_.customer_unit_meas, Client_SYS.Get_Item_Value('SALES_UNIT_MEAS', attr_));
   Client_SYS.Add_To_Attr('CUSTOMER_PART_UNIT_MEAS', customer_unit_meas_, attr_);
   -- Conv Factor may not be less than 0
   Client_SYS.Add_To_Attr('CUSTOMER_PART_CONV_FACTOR', GREATEST(NVL(cross_rec_.conv_factor, 1), 0), attr_);
   Client_SYS.Add_To_Attr('CUST_PART_INVERT_CONV_FACT', cross_rec_.inverted_conv_factor, attr_);
   info_ := Client_SYS.Get_All_Info;
END Get_Cust_Part_No_Defaults__;


PROCEDURE Modify_Qty_Shipped__ (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   qty_shipped_  IN NUMBER )
IS
   attr_ VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Qty_Shipped__');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('QTY_SHIPPED', qty_shipped_, attr_);
   Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);
END Modify_Qty_Shipped__;


PROCEDURE Modify_Qty_To_Ship__ (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   qty_to_ship_  IN NUMBER )
IS
   attr_                VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Qty_To_Ship__');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('QTY_TO_SHIP', qty_to_ship_, attr_);
   Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);
END Modify_Qty_To_Ship__;


PROCEDURE Modify_Qty_Assigned__ (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   qty_assigned_ IN NUMBER )
IS
   attr_ VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Qty_Assigned__');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('QTY_ASSIGNED', qty_assigned_, attr_);
   Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);
END Modify_Qty_Assigned__;


PROCEDURE Modify_Qty_Confirmeddiff__ (
   order_no_          IN VARCHAR2,
   line_no_           IN VARCHAR2,
   rel_no_            IN VARCHAR2,
   line_item_no_      IN NUMBER,
   qty_confirmeddiff_ IN NUMBER )
IS
   attr_ VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Qty_Confirmeddiff__');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('QTY_CONFIRMEDDIFF', qty_confirmeddiff_, attr_);
   Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);
END Modify_Qty_Confirmeddiff__;


PROCEDURE Modify_Qty_Shipdiff__ (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   qty_shipdiff_ IN NUMBER )
IS
   attr_ VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Qty_Shipdiff__');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('QTY_SHIPDIFF', qty_shipdiff_, attr_);
   Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);
END Modify_Qty_Shipdiff__;


PROCEDURE Modify_Qty_Invoiced__ (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   qty_invoiced_ IN NUMBER )
IS
   attr_ VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Qty_Invoiced__');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('QTY_INVOICED', qty_invoiced_, attr_);
   Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);
END Modify_Qty_Invoiced__;


PROCEDURE Get_Line_Defaults__ (
   info_       OUT    VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   catalog_no_ IN OUT NOCOPY VARCHAR2,
   order_no_   IN     VARCHAR2 )
IS
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Get_Line_Defaults__');
   Get_Line_Defaults___(attr_, catalog_no_, order_no_, 1);
   info_ := Client_SYS.Get_All_Info;
END Get_Line_Defaults__;


PROCEDURE Modify_Qty_Picked__ (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   qty_picked_   IN NUMBER )
IS
   attr_   VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Qty_Picked__');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('QTY_PICKED', qty_picked_, attr_);
   Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);
END Modify_Qty_Picked__;


PROCEDURE Modify_Planned_Due_Date__ (
   order_no_         IN VARCHAR2,
   line_no_          IN VARCHAR2,
   rel_no_           IN VARCHAR2,
   line_item_no_     IN NUMBER,
   planned_due_date_ IN DATE )
IS
   attr_   VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Planned_Due_Date__');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('PLANNED_DUE_DATE', planned_due_date_, attr_);
   Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);
END Modify_Planned_Due_Date__;


PROCEDURE Modify_Tax_Id_No_Details__ (
   order_no_               IN VARCHAR2,
   line_no_                IN VARCHAR2,
   rel_no_                 IN VARCHAR2,
   line_item_no_           IN NUMBER,
   tax_id_no               IN VARCHAR2,
   tax_id_validated_date_  IN DATE )
IS
   attr_   VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Tax_Id_No_Details__');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('tax_id_no', tax_id_no, attr_);
   Client_SYS.Add_To_Attr('TAX_ID_VALIDATED_DATE', tax_id_validated_date_, attr_);
   Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);
END Modify_Tax_Id_No_Details__;


--@IgnoreMissingSysinit
FUNCTION Get_Backlog_Value_Base_Curr__ (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   net_amount_    NUMBER;
   gross_amount_  NUMBER;
BEGIN
   Get_Backlog_Value_Base_Curr___(net_amount_, gross_amount_, order_no_, line_no_, rel_no_, line_item_no_);
   RETURN net_amount_;
END Get_Backlog_Value_Base_Curr__;


--@IgnoreMissingSysinit
FUNCTION Get_Backlog_Value_Order_Curr__ (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   net_amount_   NUMBER;
   gross_amount_ NUMBER;
BEGIN
   Get_Backlog_Value_Ord_Curr___(net_amount_, gross_amount_, order_no_, line_no_, rel_no_, line_item_no_ );
   RETURN net_amount_;
END Get_Backlog_Value_Order_Curr__;


--@IgnoreMissingSysinit
FUNCTION Get_Backord_Value_Base_Curr__ (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   gross_amount_  NUMBER;
   net_amount_    NUMBER;
BEGIN
   Get_Backord_Value_Base_Curr___(net_amount_, gross_amount_, order_no_, line_no_, rel_no_, line_item_no_ );
   RETURN net_amount_;
END Get_Backord_Value_Base_Curr__;


PROCEDURE Make_Service_Deliverable__ (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   shipment_id_  IN NUMBER )
IS
   ship_deliverable_qty_  NUMBER; 
   order_deliverable_qty_ NUMBER; 
   order_qty_to_ship_     NUMBER;
   order_revised_qty_due_ NUMBER;   
   shipment_line_rec_        Shipment_Line_API.Public_Rec; 
   customer_order_line_rec_  Customer_Order_Line_API.Public_Rec;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Make_Service_Deliverable__');
   customer_order_line_rec_ := Customer_Order_Line_API.Get(order_no_, line_no_, rel_no_, line_item_no_);      
   IF (shipment_id_ != 0) THEN      
      shipment_line_rec_ := Shipment_Line_API.Get_By_Source(shipment_id_, order_no_, line_no_, rel_no_, line_item_no_, Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER);
      ship_deliverable_qty_ := shipment_line_rec_.inventory_qty - shipment_line_rec_.qty_to_ship; 
      order_revised_qty_due_ := customer_order_line_rec_.revised_qty_due;
      order_qty_to_ship_ := customer_order_line_rec_.qty_to_ship;       
      order_deliverable_qty_ := order_revised_qty_due_ - order_qty_to_ship_;      
      IF (order_deliverable_qty_ > 0) THEN           
         Modify_Qty_To_Ship__(order_no_, line_no_, rel_no_, line_item_no_, (ship_deliverable_qty_ + order_qty_to_ship_ ));
      END IF;  
   ELSE
      ship_deliverable_qty_ := customer_order_line_rec_.revised_qty_due - customer_order_line_rec_.qty_shipped - customer_order_line_rec_.qty_on_order;     
      Modify_Qty_To_Ship__(order_no_, line_no_, rel_no_, line_item_no_, ship_deliverable_qty_); 
   END IF;    
   
   IF (Get_Shipment_Connected_Db(order_no_, line_no_, rel_no_, line_item_no_) = 'TRUE') THEN       
     Shipment_Handling_Utility_API.Modify_Shipment_Qty_To_Ship(order_no_, line_no_, rel_no_, line_item_no_, 'CUSTOMER_ORDER',shipment_id_);
   END IF;
END Make_Service_Deliverable__;


PROCEDURE Check_Statutory_Fee__ (
   key_list_ IN VARCHAR2 )
IS
   company_  VARCHAR2(20);
   tax_code_ CUSTOMER_ORDER_LINE_TAB.tax_code%TYPE;
   found_    NUMBER;

   CURSOR exist_control IS
      SELECT 1
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  Site_API.Get_Company(contract) = company_
      AND    tax_code = tax_code_;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Check_Statutory_Fee__');
   company_  := substr(key_list_, 1, instr(key_list_, '^') - 1);
   tax_code_ := substr(key_list_, instr(key_list_, '^') + 1, instr(key_list_, '^' , 1, 2) - (instr(key_list_, '^') + 1));

   OPEN exist_control;
   FETCH exist_control INTO found_;
   IF (exist_control%NOTFOUND) THEN
      found_ := 0;
   END IF;
   CLOSE exist_control;
   IF (found_ = 1) THEN
      Error_SYS.Record_General(lu_name_, 'NO_FEE_CODE: Tax Code :P1 exists on one or several Customer Order(s)', tax_code_);
   END IF;
END Check_Statutory_Fee__;


PROCEDURE Check_Ship_Via_Code__ (
   key_list_ IN VARCHAR2 )
IS
   language_code_ CUSTOMER_ORDER_TAB.language_code%TYPE;
   ship_via_code_ CUSTOMER_ORDER_LINE_TAB.ship_via_code%TYPE;
   found_         NUMBER;

   CURSOR exist_control IS
      SELECT 1
      FROM   CUSTOMER_ORDER_LINE_TAB col, CUSTOMER_ORDER_TAB co
      WHERE  (col.ship_via_code = ship_via_code_ OR col.supplier_ship_via_transit = ship_via_code_)
      AND    co.order_no = col.order_no;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Check_Ship_Via_Code__');
   ship_via_code_ := SUBSTR(key_list_, 1, INSTR(key_list_, '^') - 1);
   ship_via_code_ := SUBSTR(key_list_, 1, INSTR(key_list_, '^') - 1);

   OPEN exist_control;
   FETCH exist_control INTO found_;
   IF (exist_control%NOTFOUND) THEN
      found_ := 0;
   END IF;
   CLOSE exist_control;
   IF (found_ = 1) THEN
      Error_SYS.Record_General(lu_name_, 'NO_SHIP_VIA: Ship Via Code :P1 for Language :P2 is used on one or several Customer Order(s)', ship_via_code_, language_code_);
   END IF;
END Check_Ship_Via_Code__;


PROCEDURE Check_Delivery_Terms__ (
   key_list_ IN VARCHAR2 )
IS
   language_code_  CUSTOMER_ORDER_TAB.language_code%TYPE;
   delivery_terms_ CUSTOMER_ORDER_LINE_TAB.delivery_terms%TYPE;
   found_          NUMBER;

   CURSOR exist_control IS
      SELECT 1
      FROM   CUSTOMER_ORDER_LINE_TAB col, CUSTOMER_ORDER_TAB co
      WHERE  co.language_code = language_code_
      AND    col.delivery_terms = delivery_terms_
      AND    co.order_no = col.order_no;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Check_Delivery_Terms__');
   language_code_  := substr(key_list_, 1, instr(key_list_, '^') - 1);
   delivery_terms_ := substr(key_list_, instr(key_list_, '^') + 1, instr(key_list_, '^' , 1, 2) - (instr(key_list_, '^') + 1));

   OPEN exist_control;
   FETCH exist_control INTO found_;
   IF (exist_control%NOTFOUND) THEN
      found_ := 0;
   END IF;
   CLOSE exist_control;
   IF (found_ = 1) THEN
      Error_SYS.Record_General(lu_name_, 'NO_DEL_TERM: Delivery Term ID :P1 for Language :P2 is used on one or several Customer Order(s)', delivery_terms_, language_code_);
   END IF;
END Check_Delivery_Terms__;


PROCEDURE Modify_Order_Defaults__ (
   order_no_                  IN VARCHAR2,
   refresh_vat_free_vat_code_ IN VARCHAR2,
   update_tax_                IN BOOLEAN DEFAULT TRUE)
IS
   oldrec_                    CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   newrec_                    CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   order_rec_                 CUSTOMER_ORDER_API.Public_Rec;
   head_attr_                 VARCHAR2(2000);
   attr_                      VARCHAR2(2000);
   info_added_                BOOLEAN := FALSE;
   line_date_changed_         BOOLEAN := FALSE;
   vat_free_vat_code_fetched_ BOOLEAN := FALSE;
   line_due_date_changed_     BOOLEAN := FALSE;
   indrec_                    Indicator_Rec;
   changed_default_addr_flag_ BOOLEAN := TRUE;

   CURSOR get_order_lines IS
      SELECT rowid objid, ltrim(lpad(to_char(rowversion,'YYYYMMDDHH24MISS'),2000)) objversion, rowstate objstate, price_source, price_source_id             
      FROM CUSTOMER_ORDER_LINE_TAB
      WHERE line_item_no <= 0
      AND order_no = order_no_;

   site_date_              DATE;
   customer_agreement_     VARCHAR2(10);
   header_sing_occ_addr_   Customer_Order_Address_API.Cust_Ord_Addr_Rec;
   line_sing_occ_addr_     Cust_Order_Line_Address_API.Co_Line_Addr_Rec;
   attr1_                  VARCHAR2(2000);
   default_addr_flag_      CUSTOMER_ORDER_LINE_TAB.default_addr_flag%TYPE;
   tax_liability_type_db_  TAX_LIABILITY_TAB.tax_liability_type%TYPE;
   vat_free_vat_code_      VARCHAR2(20);
   --packing_instruction_id_ VARCHAR2(25) := NULL;
 --  order_state_            customer_order_tab.rowstate%TYPE;
   insert_package_mode_    VARCHAR2(5);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Order_Defaults__');
   order_rec_           := CUSTOMER_ORDER_API.Get(order_no_);
   --order_state_         := Customer_Order_API.Get_Objstate(order_no_ );
   insert_package_mode_ := 'FALSE';
   tax_liability_type_db_ := Customer_Order_API.Get_Tax_Liability_Type_Db(order_no_);   
   
   IF (tax_liability_type_db_ = 'EXM') THEN
      vat_free_vat_code_         := Customer_Order_Address_API.Get_Vat_Free_Vat_Code(order_no_);
      vat_free_vat_code_fetched_ := TRUE;
   END IF;

   FOR linerec_ IN get_order_lines LOOP
      Client_SYS.Clear_Attr(head_attr_);
      oldrec_ := Lock_By_Id___(linerec_.objid, linerec_.objversion);
      newrec_ := oldrec_;
      
      Build_Attr_For_Modfy_Ord_Def__ (oldrec_,
                                      order_rec_,
                                      vat_free_vat_code_fetched_,
                                      refresh_vat_free_vat_code_,
                                      vat_free_vat_code_,
                                      head_attr_);
       
      Client_SYS.Clear_Attr(attr_);
      -- Only uncheck the default flag if already delivered
      IF (linerec_.objstate IN ('Delivered', 'Invoiced', 'Cancelled')) THEN
         IF (oldrec_.default_addr_flag = 'Y' AND linerec_.objstate != 'Cancelled') THEN         
            IF (Validate_SYS.Is_Changed(oldrec_.region_code, order_rec_.region_code)) THEN          
               Client_SYS.Add_To_Attr('REGION_CODE', order_rec_.region_code, attr_);
               changed_default_addr_flag_ := FALSE;
            END IF;         
            IF (Validate_SYS.Is_Changed(oldrec_.district_code, order_rec_.district_code)) THEN
               Client_SYS.Add_To_Attr('DISTRICT_CODE', order_rec_.district_code, attr_);
               changed_default_addr_flag_ := FALSE;
            END IF;            
            IF (linerec_.objstate != 'Invoiced' AND Validate_SYS.Is_Changed(oldrec_.tax_liability, order_rec_.tax_liability)) THEN
               Client_SYS.Add_To_Attr('TAX_LIABILITY', order_rec_.tax_liability, attr_);
               changed_default_addr_flag_ := FALSE;
            END IF;
         END IF;
         
         IF (changed_default_addr_flag_) THEN
            Client_SYS.Add_To_Attr('DEFAULT_ADDR_FLAG_DB', 'N', attr_);
         END IF;   
      ELSE
         IF (oldrec_.default_addr_flag = 'Y') AND (order_rec_.addr_flag = 'Y') AND (vat_free_vat_code_fetched_)THEN
            IF (Sales_Part_API.Get_Taxable_Db(oldrec_.contract, oldrec_.catalog_no)= Fnd_Boolean_API.DB_TRUE) THEN
               Client_SYS.Set_Item_Value('TAX_CODE', vat_free_vat_code_, head_attr_);
            ELSE
               Client_SYS.Set_Item_Value('TAX_CODE', oldrec_.tax_code, head_attr_);
            END IF;
            Client_SYS.Set_Item_Value('TAX_CLASS_ID', '', head_attr_);
         END IF;
         attr_ := head_attr_;
      END IF;

      site_date_ := Site_API.Get_Site_Date(oldrec_.contract);

      IF (linerec_.price_source = 'AGREEMENT') THEN
         customer_agreement_ := newrec_.price_source_id;
      ELSE
         customer_agreement_ := NULL;
      END IF;
      
      default_addr_flag_ := oldrec_.default_addr_flag;
      IF (default_addr_flag_ = 'N' AND (oldrec_.tax_liability != order_rec_.tax_liability AND linerec_.objstate NOT IN ('Invoiced' , 'Cancelled' )))
         OR (linerec_.objstate = 'Delivered' AND oldrec_.tax_liability != order_rec_.tax_liability AND oldrec_.default_addr_flag = 'Y')THEN          
          Client_SYS.Add_To_Attr('TAX_LIABILITY', order_rec_.tax_liability, attr_);
      END IF;
      
      Client_SYS.Add_To_Attr('INSERT_PACKAGE_MODE_', insert_package_mode_, attr_);
      
      IF NOT update_tax_ THEN
         Client_SYS.Set_Item_Value('UPDATE_TAX', 'FALSE', attr_);
      END IF;
      
      IF (customer_agreement_ IS NOT NULL) THEN
         Client_SYS.Clear_Attr(attr1_);
         Client_SYS.Add_To_Attr('INSERT_PACKAGE_MODE_', insert_package_mode_, attr1_);
         IF (((customer_agreement_ = order_rec_.agreement_id) OR (customer_agreement_ <> order_rec_.agreement_id) OR (order_rec_.agreement_id IS NULL)) AND (default_addr_flag_='N')) THEN
            default_addr_flag_ := 'Y';
            IF ((nvl(order_rec_.route_id, ' ') != nvl(oldrec_.route_id, ' ')) OR
               (nvl(order_rec_.cust_ref, ' ') != nvl(oldrec_.contact, ' ')) OR
               (nvl(order_rec_.forward_agent_id, ' ') != nvl(oldrec_.forward_agent_id, ' ')) OR
               (nvl(order_rec_.ship_via_code, ' ') != nvl(oldrec_.ship_via_code, ' ')) OR
               (nvl(order_rec_.cust_calendar_id, Database_Sys.string_null_) != nvl(oldrec_.cust_calendar_id, Database_Sys.string_null_)) OR
               (nvl(order_rec_.ext_transport_calendar_id, Database_Sys.string_null_) != nvl(oldrec_.ext_transport_calendar_id, Database_Sys.string_null_)) OR
               (order_rec_.delivery_terms != oldrec_.delivery_terms) OR
               (nvl(order_rec_.del_terms_location, ' ') != nvl(oldrec_.del_terms_location, ' ')) OR
               (order_rec_.delivery_leadtime != oldrec_.delivery_leadtime) OR
                (order_rec_.picking_leadtime != oldrec_.picking_leadtime) OR
                (order_rec_.shipment_type!= oldrec_.shipment_type) OR
                (order_rec_.shipment_creation!= oldrec_.shipment_creation) OR
               (nvl(order_rec_.district_code, ' ') != nvl(oldrec_.district_code, ' ')) OR
               (nvl(order_rec_.region_code, ' ') != nvl(oldrec_.region_code, ' ')) OR
               (tax_liability_type_db_ != oldrec_.tax_liability_type) OR
               (order_rec_.intrastat_exempt != oldrec_.intrastat_exempt)) THEN
               default_addr_flag_ := 'N';
            END IF;
             IF (default_addr_flag_ = 'Y') THEN
                IF (oldrec_.addr_flag = 'Y') AND (order_rec_.addr_flag = 'Y') THEN
                   header_sing_occ_addr_ := Customer_Order_Address_API.Get_Cust_Ord_Addr(oldrec_.order_no);
                   line_sing_occ_addr_ := Cust_Order_Line_Address_API.Get_Co_Line_Addr(oldrec_.order_no,oldrec_.line_no,oldrec_.rel_no,oldrec_.line_item_no);
                   IF (nvl(header_sing_occ_addr_.addr_1,' ') != nvl(line_sing_occ_addr_.addr_1,' ')) OR (nvl(header_sing_occ_addr_.addr_2,' ') != nvl(line_sing_occ_addr_.addr_2,' ')) OR (nvl(header_sing_occ_addr_.addr_3,' ') != nvl(line_sing_occ_addr_.addr_3,' ')) OR
                      (nvl(header_sing_occ_addr_.addr_4,' ') != nvl(line_sing_occ_addr_.addr_4,' ')) OR (nvl(header_sing_occ_addr_.addr_5,' ') != nvl(line_sing_occ_addr_.addr_5,' ')) OR (nvl(header_sing_occ_addr_.addr_6,' ') != nvl(line_sing_occ_addr_.addr_6,' ')) OR
                      (nvl(header_sing_occ_addr_.country_code,' ') != nvl(line_sing_occ_addr_.country_code,' ')) OR (nvl(header_sing_occ_addr_.address1,' ') != nvl(line_sing_occ_addr_.address1,' ')) OR (nvl(header_sing_occ_addr_.address2,' ') != nvl(line_sing_occ_addr_.address2,' ')) OR
                      (nvl(header_sing_occ_addr_.zip_code,' ') != nvl(line_sing_occ_addr_.zip_code,' ')) OR (nvl(header_sing_occ_addr_.city,' ') != nvl(line_sing_occ_addr_.city,' ')) OR (nvl(header_sing_occ_addr_.state,' ') != nvl(line_sing_occ_addr_.state,' ')) OR
                      (nvl(header_sing_occ_addr_.county,' ') != nvl(line_sing_occ_addr_.county,' ')) THEN
                      default_addr_flag_ := 'N';
                   END IF;
                ELSIF (oldrec_.addr_flag = 'N' AND order_rec_.addr_flag='N') THEN
                   IF (nvl(oldrec_.ship_addr_no, ' ') != nvl(order_rec_.ship_addr_no, ' ')) THEN
                      default_addr_flag_ := 'N';
                   END IF;
                ELSE
                   default_addr_flag_ := 'N';
                END IF;
             END IF;
             IF (oldrec_.default_addr_flag <> default_addr_flag_) THEN
               Client_SYS.Add_To_Attr('DEFAULT_ADDR_FLAG_DB', default_addr_flag_, attr1_);

               Unpack___(newrec_, indrec_, attr1_);
               Check_Update___(oldrec_, newrec_, indrec_, attr1_);
               Update___(linerec_.objid, oldrec_, newrec_, attr1_, linerec_.objversion);
             END IF;        
             IF (default_addr_flag_ = 'N' AND (oldrec_.tax_liability != order_rec_.tax_liability AND linerec_.objstate NOT IN ('Invoiced' , 'Cancelled' ))) THEN 
               Unpack___(newrec_, indrec_, attr_);
               Check_Update___(oldrec_, newrec_, indrec_, attr_);
               Update___(linerec_.objid, oldrec_, newrec_, attr_, linerec_.objversion);
             END IF;     
         ELSIF (default_addr_flag_='Y') THEN
            Unpack___(newrec_, indrec_, attr_);
            Check_Update___(oldrec_, newrec_, indrec_, attr_);
            Update___(linerec_.objid, oldrec_, newrec_, attr_, linerec_.objversion);
         END IF;
      ELSIF (default_addr_flag_ = 'Y') THEN          
          Unpack___(newrec_, indrec_, attr_);
          Check_Update___(oldrec_, newrec_, indrec_, attr_);
          Update___(linerec_.objid, oldrec_, newrec_, attr_, linerec_.objversion);
      END IF;

      IF NOT info_added_ THEN
         IF (linerec_.objstate IN ('Picked', 'PartiallyDelivered', 'Delivered')) THEN
            -- Check if any attributes that is used on a delivery note has been updated.
            IF (NVL(oldrec_.route_id, ' ') != NVL(order_rec_.route_id, ' ') OR
                NVL(oldrec_.contact, ' ') != NVL(order_rec_.cust_ref, ' ') OR
                NVL(oldrec_.forward_agent_id, ' ') != NVL(order_rec_.forward_agent_id, ' ') OR
                NVL(oldrec_.ship_via_code, ' ') != NVL(order_rec_.ship_via_code, ' ') OR
                NVL(oldrec_.ship_addr_no, ' ') != NVL(order_rec_.ship_addr_no, ' ') OR
                oldrec_.addr_flag != order_rec_.addr_flag) THEN
               info_added_ := TRUE;
            END IF;
         END IF;
      END IF;

      IF (default_addr_flag_ = 'Y') THEN
         IF ((oldrec_.planned_delivery_date != newrec_.planned_delivery_date) OR
             (oldrec_.planned_ship_date != newrec_.planned_ship_date)) THEN
            line_date_changed_ := TRUE;
         END IF;
         IF (trunc(newrec_.planned_due_date) < trunc(site_date_)) THEN
            line_due_date_changed_ := TRUE;
         END IF;
      END IF;
   END LOOP;

   IF info_added_ THEN
      Raise_Delnote_Info_Message___;
   END IF;

   IF (line_date_changed_) THEN
      Client_SYS.Add_Info(lu_name_, 'LINEDATESCHANGED: Planned Delivery Date/Planned Ship Date has been changed on applicable order lines.');
   END IF;

   IF (line_due_date_changed_) THEN
      Client_SYS.Add_Info(lu_name_, 'EARLYLINEDUEDATE: The planned due date is earlier than today''s date in some order lines.');
   END IF;
END Modify_Order_Defaults__;


PROCEDURE Build_Attr_For_Modfy_Ord_Def__ (
   oldrec_                       IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   order_rec_                    IN CUSTOMER_ORDER_API.Public_Rec,
   vat_free_vat_code_fetched_    IN BOOLEAN,
   refresh_vat_free_vat_code_    IN VARCHAR2,
   vat_free_vat_code_            IN VARCHAR2,
   head_attr_                    IN OUT NOCOPY VARCHAR2 )
IS
   packing_instruction_id_ VARCHAR2(50) := NULL;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Build_Attr_For_Modfy_Ord_Def__');
   IF (NVL(oldrec_.addr_flag, ' ') != NVL(order_rec_.addr_flag, ' ')) THEN
         IF (oldrec_.default_addr_flag = 'Y') THEN 
            Client_SYS.Set_Item_Value('ADDR_FLAG_DB', order_rec_.addr_flag, head_attr_);
         ELSE
            Client_SYS.Set_Item_Value('ADDR_FLAG_DB', oldrec_.addr_flag, head_attr_);
         END IF;
         IF (oldrec_.shipment_type IS NOT NULL) THEN
            IF (order_rec_.addr_flag = 'Y' AND oldrec_.addr_flag = 'N') THEN
               packing_instruction_id_ := Def_Pack_Instruct_Shipment_API.Get_Packing_Instruction_Id(order_rec_.contract, oldrec_.catalog_no, order_rec_.customer_no, NULL);
            ELSE
               IF (order_rec_.addr_flag = 'N' AND oldrec_.addr_flag = 'Y') THEN
                  packing_instruction_id_ := Def_Pack_Instruct_Shipment_API.Get_Packing_Instruction_Id(order_rec_.contract, oldrec_.catalog_no, order_rec_.customer_no, order_rec_.ship_addr_no);
               END IF;
            END IF;
            Client_SYS.Set_Item_Value('PACKING_INSTRUCTION_ID', packing_instruction_id_, head_attr_);
         END IF;
      END IF;

      IF (NVL(oldrec_.ship_addr_no, ' ') != NVL(order_rec_.ship_addr_no, ' ')) THEN
         Client_SYS.Set_Item_Value('SHIP_ADDR_NO', order_rec_.ship_addr_no, head_attr_);
      END IF;

      IF (NVL(oldrec_.contact, ' ') != NVL(order_rec_.cust_ref, ' ')) THEN
         Client_SYS.Set_Item_Value('CONTACT', order_rec_.cust_ref, head_attr_);
      END IF;

      IF (NVL(oldrec_.route_id, ' ') != NVL(order_rec_.route_id, ' ')) THEN
         Client_SYS.Set_Item_Value('ROUTE_ID', order_rec_.route_id, head_attr_);
      END IF;

      IF (NVL(oldrec_.forward_agent_id, ' ') != NVL(order_rec_.forward_agent_id, ' ') ) THEN
         Client_SYS.Set_Item_Value('FORWARD_AGENT_ID', order_rec_.forward_agent_id, head_attr_);
      END IF;

      IF (NVL(oldrec_.ship_via_code, ' ') != NVL(order_rec_.ship_via_code, ' ')) THEN
         Client_SYS.Set_Item_Value('SHIP_VIA_CODE', order_rec_.ship_via_code, head_attr_);
      END IF;

      IF (NVL(oldrec_.cust_calendar_id, Database_Sys.string_null_) != NVL(order_rec_.cust_calendar_id, Database_Sys.string_null_)) THEN
         Client_SYS.Set_Item_Value('CUST_CALENDAR_ID', order_rec_.cust_calendar_id, head_attr_);
      END IF;

      IF (NVL(oldrec_.ext_transport_calendar_id, Database_Sys.string_null_) != NVL(order_rec_.ext_transport_calendar_id, Database_Sys.string_null_)) THEN
         Client_SYS.Set_Item_Value('EXT_TRANSPORT_CALENDAR_ID', order_rec_.ext_transport_calendar_id, head_attr_);
      END IF;

      IF (oldrec_.delivery_terms != order_rec_.delivery_terms) THEN
         Client_SYS.Set_Item_Value('DELIVERY_TERMS', order_rec_.delivery_terms, head_attr_);
      END IF;

      IF (NVL(oldrec_.del_terms_location, ' ') != NVL(order_rec_.del_terms_location, ' ')) THEN
         Client_SYS.Set_Item_Value('DEL_TERMS_LOCATION', order_rec_.del_terms_location, head_attr_);
      END IF;

      IF (oldrec_.delivery_leadtime != order_rec_.delivery_leadtime) THEN
         Client_SYS.Set_Item_Value('DELIVERY_LEADTIME', order_rec_.delivery_leadtime, head_attr_);
      END IF;

      IF (NVL(oldrec_.district_code, ' ') != NVL(order_rec_.district_code, ' ')) THEN
         Client_SYS.Set_Item_Value('DISTRICT_CODE', order_rec_.district_code, head_attr_);
      END IF;

      IF (NVL(oldrec_.region_code, ' ') != NVL(order_rec_.region_code, ' ')) THEN
         Client_SYS.Set_Item_Value('REGION_CODE', order_rec_.region_code, head_attr_);
      END IF;

      IF (oldrec_.tax_liability != order_rec_.tax_liability) THEN
         Client_SYS.Set_Item_Value('TAX_LIABILITY', order_rec_.tax_liability, head_attr_);
         IF (Customer_Order_API.Get_Tax_Liability_Type_Db(oldrec_.order_no) = 'EXM' AND refresh_vat_free_vat_code_ = 'FALSE' AND (NOT vat_free_vat_code_fetched_)) THEN
            Client_SYS.Set_Item_Value('TAX_CODE', '', head_attr_);
         END IF;
      END IF;

      IF (oldrec_.intrastat_exempt != order_rec_.intrastat_exempt) THEN
         Client_SYS.Set_Item_Value('INTRASTAT_EXEMPT_DB', order_rec_.intrastat_exempt, head_attr_);
      END IF;

      IF (oldrec_.shipment_creation != order_rec_.shipment_creation) THEN
--         IF( NOT (order_rec_.shipment_creation = 'ORDER_RELEASE' AND order_state_ != 'Planned')) THEN
         IF( NOT (order_rec_.shipment_creation = 'ORDER_RELEASE' AND order_rec_.rowstate != 'Planned')) THEN
            Client_SYS.Set_Item_Value('SHIPMENT_CREATION_DB', order_rec_.shipment_creation, head_attr_);
         END IF;
      END IF;

      IF (NVL(oldrec_.freight_map_id, ' ') != NVL(order_rec_.freight_map_id, ' ')) THEN
         Client_SYS.Set_Item_Value('FREIGHT_MAP_ID', order_rec_.freight_map_id, head_attr_);
      END IF;

      IF (NVL(oldrec_.zone_id, ' ') != NVL(order_rec_.zone_id, ' ')) THEN
         Client_SYS.Set_Item_Value('ZONE_ID', order_rec_.zone_id, head_attr_);
      END IF;

      IF (NVL(oldrec_.freight_price_list_no, ' ') != NVL(order_rec_.freight_price_list_no, ' ')) THEN
         Client_SYS.Set_Item_Value('FREIGHT_PRICE_LIST_NO', order_rec_.freight_price_list_no, head_attr_);
      END IF;
      
      IF (refresh_vat_free_vat_code_ = 'TRUE')  THEN
         IF vat_free_vat_code_fetched_ THEN
            Client_SYS.Set_Item_Value('TAX_CODE', vat_free_vat_code_, head_attr_);
         END IF;
         Client_SYS.Set_Item_Value('SUPPLY_COUNTRY_CHANGED', 'TRUE', head_attr_);
      END IF;         

      IF ((oldrec_.picking_leadtime != order_rec_.picking_leadtime) AND (oldrec_.rowstate NOT IN('Picked', 'Delivered', 'Invoiced', 'Cancelled'))) THEN
         Client_SYS.Set_Item_Value('PICKING_LEADTIME', order_rec_.picking_leadtime, head_attr_);
      END IF;

      IF (NVL(oldrec_.shipment_type, ' ') != NVL(order_rec_.shipment_type, ' ')) THEN
         Client_SYS.Set_Item_Value('SHIPMENT_TYPE', order_rec_.shipment_type, head_attr_);
--         IF (order_rec_.shipment_type IS NULL AND newrec_.shipment_connected = 'FALSE') THEN
         IF (order_rec_.shipment_type IS NULL AND oldrec_.shipment_connected = 'FALSE') THEN
            packing_instruction_id_ := NULL;
            Client_SYS.Set_Item_Value('PACKING_INSTRUCTION_ID', packing_instruction_id_, head_attr_);
         END IF;
      END IF;
END Build_Attr_For_Modfy_Ord_Def__;


PROCEDURE Modify_Discount__ (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   discount_     IN NUMBER,
   update_tax_   IN VARCHAR2 DEFAULT 'TRUE' )
IS
   discount_temp_  NUMBER;
   attr_           VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Discount__');
   Client_SYS.Clear_Attr(attr_);

   IF (discount_ IS NULL) THEN
      discount_temp_ := 0;
   ELSE
      discount_temp_ := discount_;
   END IF;
   Client_SYS.Add_To_Attr('DISCOUNT', discount_temp_, attr_);
   -- gelr:disc_price_rounded, begin
   IF (Customer_Order_API.Get_Discounted_Price_Rounded(order_no_)) THEN
      discount_temp_ := Cust_Order_Line_Discount_API.Calculate_Original_Discount__(order_no_, line_no_, rel_no_, line_item_no_);
      Client_SYS.Add_To_Attr('ORIGINAL_DISCOUNT', NVL(discount_temp_, 0), attr_);
   END IF;  
   -- gelr:disc_price_rounded, end
   Client_SYS.Add_To_Attr('SERVER_DATA_CHANGE', 1, attr_);
   Client_SYS.Add_To_Attr('UPDATE_TAX', update_tax_, attr_);
   Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);
END Modify_Discount__;


PROCEDURE Modify_Wanted_Delivery_Date__ (
   planned_delivery_date_    IN OUT NOCOPY DATE,
   order_no_                 IN     VARCHAR2,
   line_no_                  IN     VARCHAR2,
   rel_no_                   IN     VARCHAR2,
   line_item_no_             IN     NUMBER,
   wanted_delivery_date_     IN     DATE,
   replicate_changes_        IN     VARCHAR2,
   change_request_           IN     VARCHAR2,
   dop_changed_              IN     VARCHAR2,
   price_effec_date_changed_ IN     VARCHAR2,
   disconnect_exp_license_   IN     VARCHAR2,
   changed_attrib_not_in_pol_ IN VARCHAR2)
IS
   attr_    VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Wanted_Delivery_Date__');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('WANTED_DELIVERY_DATE', wanted_delivery_date_, attr_);
   Client_SYS.Add_To_Attr('PLANNED_DELIVERY_DATE', planned_delivery_date_, attr_);
   Client_SYS.Add_To_Attr('REPLICATE_CHANGES', replicate_changes_, attr_);
   Client_SYS.Add_To_Attr('CHANGE_REQUEST', change_request_, attr_);
   Client_SYS.Add_To_Attr('DOP_NEW_QTY_DEMAND', dop_changed_, attr_);
   Client_SYS.Add_To_Attr('UPDATE_PRICE_EFFECTIVE_DATE', price_effec_date_changed_, attr_);
   Client_SYS.Add_To_Attr('DISCONNECT_EXP_LICENSE', disconnect_exp_license_, attr_);
   Client_SYS.Add_To_Attr('CHANGED_ATTRIB_NOT_IN_POL', changed_attrib_not_in_pol_, attr_);
   Client_SYS.Set_Item_Value('SERVER_DATA_CHANGE', 1, attr_);
   Client_SYS.Set_Item_Value('MODIFIED_FROM_HEADER', 1, attr_);
   Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);
   planned_delivery_date_ := Client_SYS.Attr_Value_To_Date(Client_SYS.Get_Item_Value('PLANNED_DELIVERY_DATE', attr_));
END Modify_Wanted_Delivery_Date__;


PROCEDURE Modify_Delivery_Address__ (
   message_attr_           IN OUT NOCOPY VARCHAR2,
   order_no_               IN     VARCHAR2,
   line_no_                IN     VARCHAR2,
   rel_no_                 IN     VARCHAR2,
   line_item_no_           IN     NUMBER,
   addr_flag_              IN     VARCHAR2,
   ship_addr_changed_      IN     BOOLEAN,
   refresh_tax_code_       IN     BOOLEAN,
   supply_country_changed_ IN     BOOLEAN,
   update_tax_             IN     BOOLEAN DEFAULT TRUE)
IS
   objid_                     VARCHAR2(2000);
   objversion_                VARCHAR2(2000);
   oldrec_                    CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   newrec_                    CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   insert_package_mode_       VARCHAR2(5) := 'FALSE';
   attr_                      VARCHAR2(2000);
   indrec_                    Indicator_Rec;
   order_rec_                 CUSTOMER_ORDER_API.Public_Rec;
   vat_free_vat_code_         VARCHAR2(20);
   vat_free_vat_code_fetched_ BOOLEAN := FALSE;
   pegged_obj_                VARCHAR2(5); 
   po_order_no_               VARCHAR2(20);
   po_line_no_                VARCHAR2(20);
   po_rel_no_                 VARCHAR2(20);
   purchase_type_db_          VARCHAR2(20);  
   create_poco_auto_          VARCHAR2(5) := 'FALSE';
   tax_liability_type_db_     TAX_LIABILITY_TAB.tax_liability_type%TYPE;
   sales_part_taxable_        SALES_PART_TAB.taxable%TYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Delivery_Address__');
   order_rec_           := CUSTOMER_ORDER_API.Get(order_no_);
   Get_Id_Version_By_Keys___(objid_, objversion_, order_no_, line_no_, rel_no_, line_item_no_);
   oldrec_              := Lock_By_Id___(objid_, objversion_);
   newrec_              := oldrec_;
   
   IF ship_addr_changed_ THEN
      Client_SYS.Set_Item_Value('SHIP_ADDR_NO', order_rec_.ship_addr_no, attr_);
   END IF ;
   
   IF addr_flag_ IS NOT NULL THEN
      Client_SYS.Set_Item_Value('ADDR_FLAG_DB', addr_flag_, attr_);
   END IF ;   
   tax_liability_type_db_ := Customer_Order_API.Get_Tax_Liability_Type_Db(order_no_);  
   sales_part_taxable_ :=  Sales_Part_API.Get_Taxable_Db(oldrec_.contract, oldrec_.catalog_no);  
   IF (refresh_tax_code_ AND tax_liability_type_db_ = 'EXM' AND 
       sales_part_taxable_ = Fnd_Boolean_API.DB_TRUE) AND
       order_rec_.addr_flag = 'Y' THEN
         vat_free_vat_code_ := Customer_Order_Address_API.Get_Vat_Free_Vat_Code(order_no_);
         Client_SYS.Set_Item_Value('TAX_CODE', vat_free_vat_code_, attr_);
         Client_SYS.Set_Item_Value('TAX_CLASS_ID', '', attr_);
         vat_free_vat_code_fetched_ := TRUE;
   END IF;
   
   IF (oldrec_.tax_liability != order_rec_.tax_liability) THEN
      Client_SYS.Set_Item_Value('TAX_LIABILITY', order_rec_.tax_liability, attr_);
      IF (tax_liability_type_db_ = 'EXM' AND 
          sales_part_taxable_ = Fnd_Boolean_API.DB_TRUE AND 
          NOT vat_free_vat_code_fetched_) THEN
         Client_SYS.Set_Item_Value('TAX_CODE', '', attr_);
      END IF;
   END IF;
   IF (supply_country_changed_ = TRUE) THEN
         Client_SYS.Set_Item_Value('SUPPLY_COUNTRY_CHANGED', 'TRUE', attr_);
   END IF;      
  
   Client_SYS.Set_Item_Value('EVALUATE_DEFAULT_INFO', 'TRUE', attr_);
   Client_SYS.Add_To_Attr('INSERT_PACKAGE_MODE_', insert_package_mode_, attr_);
   Client_SYS.Set_Item_Value('COPY_ADDR_TO_LINE', 'TRUE', attr_);
   IF Client_SYS.Get_Item_Value('NON_DEFAULT_ADDR_CHANGE', message_attr_) = 'TRUE' THEN
      Client_SYS.Set_Item_Value('NON_DEFAULT_ADDR_CHANGE', 'TRUE', attr_);
   END IF;

   pegged_obj_ := Check_Address_Replication__(order_no_ ,line_no_ ,rel_no_ ,line_item_no_ );
   IF pegged_obj_ = 'TRUE' THEN 
      Client_SYS.Add_To_Attr('CHANGED_ATTRIB_NOT_IN_POL', 'FALSE', attr_);
      IF (Fnd_Session_API.Is_Odp_Session) THEN
         Client_SYS.Add_To_Attr('REPLICATE_CHANGES', Client_SYS.Get_Item_Value('REPLICATE_CHANGES', attr_), message_attr_);
         Client_SYS.Add_To_Attr('CHANGE_REQUEST', Client_SYS.Get_Item_Value('CHANGE_REQUEST', attr_), message_attr_);
      ELSE
         Client_SYS.Add_To_Attr('REPLICATE_CHANGES', 'TRUE', attr_);
         Client_SYS.Add_To_Attr('CHANGE_REQUEST', 'TRUE', attr_);
      END IF;

      IF Client_SYS.Get_Item_Value('POCO_AUTO', message_attr_) = 'FALSE' THEN
         Customer_Order_Pur_Order_API.Fetch_Po_Info(po_order_no_, po_line_no_, po_rel_no_, purchase_type_db_, create_poco_auto_, order_no_, line_no_, rel_no_, line_item_no_);      
         IF create_poco_auto_ = 'TRUE' THEN
            Client_SYS.Set_Item_Value('POCO_AUTO','TRUE', message_attr_);
         END IF ; 
      END IF;
   END IF ;
   
   IF NOT update_tax_ THEN 
      Client_SYS.Set_Item_Value('UPDATE_TAX', 'FALSE', attr_);
   END IF;

   Unpack___(newrec_, indrec_, attr_);
   Check_Update___(oldrec_, newrec_, indrec_, attr_);
   Update___(objid_, oldrec_, newrec_, attr_, objversion_);
   
   IF Client_SYS.Get_Item_Value('INFO_ADDED', message_attr_) = 'FALSE' THEN
      IF (oldrec_.rowstate IN ('Picked', 'PartiallyDelivered', 'Delivered')) THEN
         -- Check if any attributes that is used on a delivery note has been updated.
         IF (NVL(oldrec_.route_id, ' ') != NVL(order_rec_.route_id, ' ') OR
             NVL(oldrec_.contact, ' ') != NVL(order_rec_.cust_ref, ' ') OR
             NVL(oldrec_.forward_agent_id, ' ') != NVL(order_rec_.forward_agent_id, ' ') OR
             NVL(oldrec_.ship_via_code, ' ') != NVL(order_rec_.ship_via_code, ' ') OR
             NVL(oldrec_.ship_addr_no, ' ') != NVL(order_rec_.ship_addr_no, ' ') OR
             oldrec_.addr_flag != order_rec_.addr_flag) THEN
            Client_SYS.Set_Item_Value('INFO_ADDED','TRUE', message_attr_);
         END IF;
      END IF;
   END IF;

   IF ((oldrec_.planned_delivery_date != newrec_.planned_delivery_date) OR
       (oldrec_.planned_ship_date != newrec_.planned_ship_date)) THEN
         Client_SYS.Set_Item_Value('LINE_DATE_CHANGED','TRUE', message_attr_);
   END IF;
   
   IF (trunc(newrec_.planned_due_date) < trunc(Site_API.Get_Site_Date(oldrec_.contract))) THEN
         Client_SYS.Set_Item_Value('LINE_DUE_DATE_CHANGED','TRUE', message_attr_);
   END IF;
END Modify_Delivery_Address__;


FUNCTION Check_Address_Replication__ (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN VARCHAR2) RETURN VARCHAR2
IS
   dummy_ NUMBER;
   
   CURSOR get_address_replication IS
      SELECT 1   
        FROM CUSTOMER_ORDER_LINE_TAB 
       WHERE rowstate NOT IN ('Delivered', 'Invoiced', 'Cancelled')
         AND order_no = order_no_
         AND line_no      = line_no_
         AND rel_no       = rel_no_
         AND line_item_no = line_item_no_
         AND supply_code IN ('IPD', 'PD')
         AND qty_on_order > 0
         AND EXISTS (SELECT 1
                      FROM CUSTOMER_ORDER_PUR_ORDER_TAB
                       WHERE oe_order_no   = order_no
                       AND oe_line_no      = line_no
                       AND oe_rel_no       = rel_no
                       AND oe_line_item_no = line_item_no
                       AND purchase_type   = 'O' );
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Check_Address_Replication__');
   OPEN get_address_replication;
   FETCH get_address_replication INTO dummy_;
   IF (get_address_replication%FOUND) THEN
      CLOSE get_address_replication;
      RETURN 'TRUE';
   END IF;
   CLOSE get_address_replication;
   RETURN 'FALSE';
END Check_Address_Replication__;


PROCEDURE Check_Base_Part_Config__ (
   rec_ IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE )
IS
   pkg_part_   CUSTOMER_ORDER_LINE_TAB.catalog_no%TYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Check_Base_Part_Config__');
   IF (Part_Catalog_API.Get_Configurable_Db(nvl(rec_.part_no, rec_.catalog_no)) = 'CONFIGURED') THEN
      IF (CUSTOMER_ORDER_API.Get_Objstate(rec_.order_no) NOT IN ('Planned')) THEN
         IF (Order_Config_Util_API.Is_Base_Part_Config_Valid(nvl(rec_.part_no, rec_.catalog_no), rec_.configuration_id) = 0) THEN
            -- if the item is not a header item, we look for it
            IF rec_.line_item_no > 0 THEN
               pkg_part_ := Get_Catalog_No(rec_.order_no, rec_.line_no, rec_.rel_no, -1);
               Error_SYS.Record_General(lu_name_, 'MISSINGCONFIG1: A complete configuration should be defined for the configurable part :P1 in package :P2 as the order is not in Planned state.', rec_.part_no, pkg_part_);
            ELSE
               Error_SYS.Record_General(lu_name_, 'MISSINGCONFIG2: A complete configuration should be defined for the configurable part :P1 as the order is not in Planned state.', rec_.part_no);
            END IF;
         END IF;
      END IF;
   END IF;
END Check_Base_Part_Config__;


PROCEDURE Modify_Acquisition_Type__ (
   order_no_       IN VARCHAR2,
   line_no_        IN VARCHAR2,
   rel_no_         IN VARCHAR2,
   line_item_no_   IN NUMBER,
   supply_code_db_ IN VARCHAR2 )
IS
   objid_           VARCHAR2(2000);
   rowversion_      VARCHAR2(2000);
   rec_             CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Acquisition_Type__');
   rec_ := Lock_By_Keys___(order_no_, line_no_, rel_no_, line_item_no_);
   rec_.supply_code := supply_code_db_;
   Get_Id_Version_By_Keys___(objid_, rowversion_, order_no_, line_no_, rel_no_, line_item_no_);
   rec_.rowversion := sysdate;

   Update_Line___(objid_, rec_);
END Modify_Acquisition_Type__;


--@IgnoreMissingSysinit
FUNCTION Get_Vendor_Contract__ (
   vendor_no_   IN VARCHAR2,
   contract_    IN VARCHAR2,
   part_no_     IN VARCHAR2,
   supply_code_ IN VARCHAR2,
   rental_db_   IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_vendor_no_      CUSTOMER_ORDER_LINE_TAB.vendor_no%TYPE;
   vendor_contract_     CUSTOMER_ORDER_LINE_TAB.contract%TYPE := NULL;
BEGIN
   IF (vendor_no_ IS NULL) THEN
      temp_vendor_no_ := Retrieve_Default_Vendor__(contract_, part_no_, supply_code_, rental_db_);
   ELSE
      temp_vendor_no_ := vendor_no_;
   END IF;
   $IF (Component_Purch_SYS.INSTALLED)$THEN
      vendor_contract_ := Supplier_API.Get_Acquisition_Site(temp_vendor_no_);
   $END
   RETURN vendor_contract_;
END Get_Vendor_Contract__;


PROCEDURE Modify_Additional_Discount__ (
   order_no_            IN VARCHAR2,
   additional_discount_ IN NUMBER )
IS
   attr_                       VARCHAR2(2000);
  rental_period_exists_       BOOLEAN := FALSE;
  tax_method_                 VARCHAR2(50);
  fetch_tax_on_line_update_   BOOLEAN := TRUE;
  company_                    VARCHAR2(50);
 
  CURSOR get_order_lines IS
     SELECT line_no,rel_no,line_item_no, supply_code, rental, demand_code, additional_discount
     FROM   CUSTOMER_ORDER_LINE_TAB
     WHERE  order_no = order_no_
     AND    rowstate NOT IN ('Invoiced', 'Cancelled')
     AND    qty_invoiced = 0;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Additional_Discount__');
   company_    := Site_API.Get_Company(Customer_Order_API.Get_Contract(order_no_));
    tax_method_ := Company_Tax_Control_API.Get_External_Tax_Cal_Method_Db(company_);

    -- gelr:br_external_tax_integration, Modified condition to include Avalara Brazil
    IF tax_method_ IN (External_Tax_Calc_Method_API.DB_AVALARA_SALES_TAX, External_Tax_Calc_Method_API.DB_AVALARA_TAX_BRAZIL) THEN
      fetch_tax_on_line_update_ := FALSE;
    END IF;  
          
    Client_SYS.Clear_Attr(attr_);
    FOR  order_line_ IN get_order_lines LOOP
       IF (order_line_.supply_code = 'SEO') THEN
         IF (order_line_.demand_code != 'FSM') THEN
            Raise_No_Update_Error___();
         ELSE
            Raise_No_Update_Fsm_Error___();
         END IF;   
       END IF;
       IF (order_line_.rental = Fnd_Boolean_API.DB_TRUE) THEN
          rental_period_exists_ := Rental_Period_Exists(order_no_,
                                                                                     order_line_.line_no,
                                                                                     order_line_.rel_no,
                                                        order_line_.line_item_no);
          -- If rental period exists go to the next order line,
          -- additional discount is not updated for the current line.
          CONTINUE WHEN rental_period_exists_;
       END IF;
       Client_SYS.Clear_Attr(attr_);
       Client_SYS.Add_To_Attr('ADDITIONAL_DISCOUNT', additional_discount_, attr_);
       
       IF NOT fetch_tax_on_line_update_ THEN
         Client_SYS.Add_To_Attr('UPDATE_TAX', 'FALSE', attr_);
       END IF; 
       
       Modify_Line___(attr_, order_no_, order_line_.line_no, order_line_.rel_no, order_line_.line_item_no);
    END LOOP;
    
    IF NOT fetch_tax_on_line_update_ THEN
       Customer_Order_API.Fetch_External_Tax(order_no_, 'FALSE', 'FALSE' );
    END IF;
END Modify_Additional_Discount__;


PROCEDURE Get_Def_Supplier_Ship_Via__ (
   supplier_ship_via_transit_ OUT VARCHAR2,
   vendor_no_                 IN  VARCHAR2,
   contract_                  IN  VARCHAR2,
   part_no_                   IN  VARCHAR2,
   supply_code_db_            IN  VARCHAR2,
   rental_db_                 IN  VARCHAR2 )
IS
   supply_site_  VARCHAR2(5);
   dummy_        VARCHAR2(35);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Get_Def_Supplier_Ship_Via__');
   supply_site_ := Get_Vendor_Contract__(vendor_no_, NULL, NULL, NULL, rental_db_);

   Get_Def_Supplier_Ship_Via___(supplier_ship_via_transit_, dummy_,
      vendor_no_, contract_, supply_site_, part_no_, supply_code_db_, NULL);
END Get_Def_Supplier_Ship_Via__;


PROCEDURE Validate_Delivery_Conf__ (
   order_no_                      IN VARCHAR2,
   confirm_deliveries_db_         IN VARCHAR2,
   check_sales_grp_deliv_conf_db_ IN VARCHAR2 )
IS
   CURSOR get_record IS
      SELECT *
      FROM CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = order_no_
      AND rowstate NOT IN ('Cancelled');

   catalog_group_     VARCHAR2(10);
   pkg_catalog_group_ VARCHAR2(10);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Validate_Delivery_Conf__');
   IF ((confirm_deliveries_db_ = 'TRUE') OR (check_sales_grp_deliv_conf_db_ = 'TRUE')) THEN
      FOR rec_ IN get_record LOOP
         catalog_group_ := Sales_Part_API.Get_Catalog_Group(rec_.contract, rec_.catalog_no);
         -- only send package sales group for component lines
         IF (rec_.line_item_no > 0) THEN
            pkg_catalog_group_ := Sales_Part_API.Get_Catalog_Group(rec_.contract, Get_Catalog_No(rec_.order_no, rec_.line_no, rec_.rel_no, -1));
         ELSE
            pkg_catalog_group_ := NULL;
         END IF;
         Validate_Delivery_Conf___(rec_, FALSE, catalog_group_, pkg_catalog_group_,
            confirm_deliveries_db_, check_sales_grp_deliv_conf_db_, TRUE);
         -- store sales group to next order line - i.e. the package component(s)!
         IF (rec_.line_item_no = -1) THEN
            pkg_catalog_group_ := catalog_group_;
         END IF;
         Check_Demand_Code___(rec_.demand_code, confirm_deliveries_db_, rec_.consignment_stock);
      END LOOP;
   END IF;
END Validate_Delivery_Conf__;


PROCEDURE Unpeg__ (
   info_         OUT VARCHAR2,
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER )
IS
   pegged_order_no_   VARCHAR2(12);
   pegged_line_no_    VARCHAR2(4);
   pegged_rel_no_     VARCHAR2(4);
   purchase_type_     VARCHAR2(50);
   stmt_              VARCHAR2(2000);
   supply_code_db_    VARCHAR2(3);
   current_info_      VARCHAR2(32000);

   CURSOR get_so_rec IS
      SELECT so_order_no, so_release_no, so_sequence_no
      FROM   customer_order_shop_order_tab
      WHERE  oe_order_no = order_no_
      AND    oe_line_no = line_no_
      AND    oe_rel_no = rel_no_
      AND    oe_line_item_no = line_item_no_ ;

   CURSOR get_supply_code IS
      SELECT supply_code
      FROM CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = order_no_
      AND line_no = line_no_
      AND rel_no = rel_no_
      AND line_item_no = line_item_no_;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Unpeg__');
   Customer_Order_Pur_Order_API.Get_Purord_For_Custord(pegged_order_no_, pegged_line_no_, pegged_rel_no_, purchase_type_,
                                                       order_no_, line_no_, rel_no_, line_item_no_);

   IF (pegged_order_no_ IS NOT NULL) THEN
      $IF (Component_Purch_SYS.INSTALLED)$THEN
         Purchase_Order_Line_Part_API.Unpeg_Order(pegged_order_no_, pegged_line_no_, pegged_rel_no_, purchase_type_);
      $ELSE
         NULL;
      $END
   ELSE
      FOR rec_ IN get_so_rec LOOP
         stmt_ := '
                   DECLARE
                      dummy_str_ VARCHAR2(12) := NULL;
                      dummy_no_  NUMBER := NULL;
                   BEGIN
                      Shop_Ord_Util_API.Modify_Cust_Ord_Details(  :so_order_no_,
                                                                  :so_release_no_,
                                                                  :so_sequence_no_,
                                                                  dummy_str_,
                                                                  dummy_str_,
                                                                  dummy_str_,
                                                                  dummy_no_,
                                                                  dummy_str_,
                                                                  :demand_code,
                                                                  :qty_on_order );
                   END;';
         --@ApproveDynamicStatement(2010-01-14,kayolk)
         EXECUTE IMMEDIATE stmt_ USING
               IN  rec_.so_order_no,
               IN  rec_.so_release_no,
               IN  rec_.so_sequence_no,
               IN  Order_Supply_Type_API.Decode('IO'),
               IN  0;
      END LOOP;
   END IF;

   -- The call to method Unpeg_Line modifies the supply_code of the CO line to IO or NO.
   -- Therefore the old supply_code should be fetched beforehand.
   OPEN get_supply_code;
   FETCH get_supply_code INTO supply_code_db_;
   CLOSE get_supply_code;
   
   Unpeg_Line(order_no_, line_no_, rel_no_, line_item_no_, 'FALSE');

   -- The demand information of the connected PO/PR should only be updated for transit deliveries,
   -- not for direct deliveries, becuase there's a possibility that in a PD or IPD order, a delivery
   -- has already been made. However, for a PD line, where only a PR is created so far, it is not needed
   -- to keep the demand info, thus, in such cases, the demand info would be updated.
   IF ((supply_code_db_ IN ('PT', 'IPT')) OR ((supply_code_db_ = 'PD') AND (Purchase_Type_API.Encode(purchase_type_) = 'R'))) THEN
      Client_SYS.Add_Info(lu_name_, 'CON_POPR_UPDATED: Demand Code on the connected Purchase Order and/or Purchase Requisition has been updated. You may want to check the address related information on Purchase Order/Purchase Requisition :P1.', pegged_order_no_);
   ELSIF (supply_code_db_ IN ('PD', 'IPD')) THEN
      Client_SYS.Add_Info(lu_name_, 'CON_POPR_NOT_UPDATED: This refers to a direct delivery where the connected Purchase Order/Purchase Requisition :P1 will not be updated automatically.', pegged_order_no_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
   current_info_  := App_Context_SYS.Find_Value('CUSTOMER_ORDER_LINE_API.CURRENT_INFO_');
   current_info_  := SUBSTR(current_info_, (INSTR(current_info_, CHR(31))+1), LENGTH(current_info_));
   info_ := info_ || current_info_;
END Unpeg__;


PROCEDURE Modify_Default_Addr_Flag__ (
   order_no_          IN VARCHAR2,
   line_no_           IN VARCHAR2,
   rel_no_            IN VARCHAR2,
   line_item_no_      IN NUMBER,
   default_addr_flag_ IN VARCHAR2 )
IS
   attr_   VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Modify_Default_Addr_Flag__');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('DEFAULT_ADDR_FLAG_DB', default_addr_flag_, attr_);
   Modify_Line___(attr_, order_no_, line_no_, rel_no_, line_item_no_);
END Modify_Default_Addr_Flag__;


--@IgnoreMissingSysinit
FUNCTION Retrieve_Default_Vendor__ (
   contract_    IN  VARCHAR2,
   part_no_     IN  VARCHAR2,
   supply_code_ IN  VARCHAR2,
   rental_db_   IN  VARCHAR2 ) RETURN VARCHAR2
IS
   default_vendor_no_ CUSTOMER_ORDER_LINE_TAB.vendor_no%TYPE := NULL;
   vendor_no_         CUSTOMER_ORDER_LINE_TAB.vendor_no%TYPE := NULL;
   category_          VARCHAR2(200) := NULL;
BEGIN
   $IF (Component_Purch_SYS.INSTALLED)$THEN
      -- replaced Get_Primary_Rental_Supplier_No() with Get_Active_Rental_Primary_Supp()
      IF rental_db_ = Fnd_Boolean_API.DB_FALSE THEN
         default_vendor_no_ := Purchase_Part_Supplier_API.Get_Active_Primary_Supplier_No(contract_, part_no_);
      ELSE
         default_vendor_no_ := Purchase_Part_Supplier_API.Get_Active_Rental_Primary_Supp(contract_, part_no_);
      END IF;
      category_ := Supplier_Category_API.Encode(Supplier_API.Get_Category(default_vendor_no_));
      IF (default_vendor_no_ IS NOT NULL) THEN
         -- Check the supplier category
         IF (((category_ = 'I') AND (supply_code_ IN ('IPT', 'IPD'))) OR
             ((category_ = 'E') AND (supply_code_ IN ('PD', 'PT')))) THEN
            vendor_no_ := default_vendor_no_;
         END IF;
      END IF;
   $END
   RETURN vendor_no_;
END Retrieve_Default_Vendor__;


PROCEDURE Check_Delivery_Type__ (
   key_list_ IN VARCHAR2 )
IS
   company_       VARCHAR2(20);
   delivery_type_ CUSTOMER_ORDER_LINE_TAB.delivery_type%TYPE;
   found_         NUMBER;

   CURSOR exist_control IS
      SELECT 1
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  Site_API.Get_Company(contract) = company_
      AND    delivery_type = delivery_type_;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Check_Delivery_Type__');
   company_       := substr(key_list_, 1, instr(key_list_, '^') - 1);
   delivery_type_ := substr(key_list_, instr(key_list_, '^') + 1, instr(key_list_, '^' , 1, 2) - (instr(key_list_, '^') + 1));

   OPEN exist_control;
   FETCH exist_control INTO found_;
   IF (exist_control%NOTFOUND) THEN
      found_ := 0;
   END IF;
   CLOSE exist_control;
   IF found_ = 1 THEN
      Error_SYS.Record_General(lu_name_, 'NO_DEL_TYPE: Delivery Type :P1 exists on one or several Customer Order Line(s)', delivery_type_ );
   END IF;
END Check_Delivery_Type__;


FUNCTION Get_Gross_Amnt_Ratio_Per_Tax__ (
   order_no_      IN VARCHAR2,
   tax_code_      IN VARCHAR2 ) RETURN NUMBER
IS
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Get_Gross_Amnt_Ratio_Per_Tax__');
   -- gelr:delivery_types_in_pbi, Moved the existing logic to Get_Amt_Ratio_Per_Tax_Deliv___
   RETURN Get_Amt_Ratio_Per_Tax_Deliv___(order_no_, tax_code_, NULL);
END Get_Gross_Amnt_Ratio_Per_Tax__;


FUNCTION Get_Amt_Ratio_Per_Tax_Deliv__ (
   order_no_      IN VARCHAR2,
   tax_code_      IN VARCHAR2,
   delivery_type_ IN VARCHAR2 DEFAULT NULL) RETURN NUMBER
IS
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Get_Amt_Ratio_Per_Tax_Deliv__');
   RETURN Get_Amt_Ratio_Per_Tax_Deliv___(order_no_, tax_code_, delivery_type_);
END Get_Amt_Ratio_Per_Tax_Deliv__;


PROCEDURE Validate_Vendor_No__ (
   vendor_no_   IN VARCHAR2,
   supply_code_ IN VARCHAR2 )
IS
   category_    VARCHAR2(200) := NULL;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Validate_Vendor_No__');
   $IF (Component_Purch_SYS.INSTALLED)$THEN
      IF (vendor_no_ IS NOT NULL) THEN
         category_ := Supplier_Category_API.Encode(Supplier_API.Get_Category(vendor_no_));
      END IF;
   $END
   Validate_Vendor_No___(vendor_no_, supply_code_, category_);
END Validate_Vendor_No__;


--@IgnoreMissingSysinit
FUNCTION Valid_Project_Customer__ (
   activity_seq_   IN NUMBER,
   customer_no_    IN VARCHAR2,
   demand_code_db_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   proj_customer_id_  VARCHAR2(20);
   return_value_      VARCHAR2(5) := 'TRUE';
BEGIN
   $IF (Component_Proj_SYS.INSTALLED) $THEN
      proj_customer_id_ := Project_API.Get_Customer_Id(Activity_API.Get_Project_Id(activity_seq_));
      -- Check if the customer is external or internal
      IF (Cust_Ord_Customer_API.Get_Category(customer_no_) = Cust_Ord_Customer_Category_API.Decode('E')) AND (NVL(demand_code_db_, Database_SYS.string_null_) != 'PO') THEN
         IF (NVL(proj_customer_id_, '*') != customer_no_) THEN
            return_value_ := 'FALSE';
         END IF;
      END IF;
   $END

   RETURN return_value_;
END Valid_Project_Customer__;


PROCEDURE Check_Released_Activity__ (
   order_no_ IN VARCHAR2 )
IS
   activity_state_   VARCHAR2(30);

   CURSOR get_lines(order_no_ VARCHAR2) IS
      SELECT *
        FROM CUSTOMER_ORDER_LINE_TAB
       WHERE order_no = order_no_
         AND rowstate != 'Cancelled'
         AND line_item_no <= 0;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Check_Released_Activity__');
   FOR linerec_ IN get_lines(order_no_) LOOP
      -- Configuration is mandatory for configurable parts when the order is no more in Planned state
      Check_Base_Part_Config__(linerec_);

      IF (linerec_.activity_seq IS NOT NULL AND linerec_.project_id IS NOT NULL AND linerec_.rowstate IN ('Released', 'Reserved')) THEN
         $IF (Component_Proj_SYS.INSTALLED)$THEN
            activity_state_:= Activity_API.Get_Objstate(linerec_.activity_seq);
            IF (activity_state_ = 'Planned') THEN
               Error_SYS.Record_General(lu_name_, 'PLANNEDACT: Activity :P1 Connected to Line No :P2, Release No :P3 must be released before releasing the Customer Order.', linerec_.activity_seq, linerec_.line_no, linerec_.rel_no);
            END IF;
         $ELSE
            NULL;
         $END
      END IF;
   END LOOP;
END Check_Released_Activity__;


PROCEDURE Set_Released__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   rec_ CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Set_Released__');
   IF (action_ = 'CHECK') THEN
      NULL;
   ELSIF (action_ = 'DO') THEN
      rec_ := Lock_By_Id___(objid_, objversion_);
      Finite_State_Machine___(rec_, 'SetReleased', attr_);
      objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
      Finite_State_Add_To_Attr___(rec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Set_Released__;


PROCEDURE Update_Pegged_Orders__ (
   order_no_      IN VARCHAR2,
   line_no_       IN VARCHAR2,
   rel_no_        IN VARCHAR2,
   line_item_no_  IN NUMBER )
IS
   CURSOR po_connections IS
      SELECT po_order_no, po_line_no, po_rel_no, purchase_type, qty_on_order
      FROM   customer_order_pur_order_tab
      WHERE  oe_order_no = order_no_
      AND    oe_line_no = line_no_
      AND    oe_rel_no = rel_no_
      AND    oe_line_item_no  = line_item_no_
      AND    qty_on_order > 0;

   CURSOR so_connections IS
      SELECT so_order_no, so_release_no, so_sequence_no, qty_on_order
      FROM   customer_order_shop_order_tab
      WHERE  oe_order_no = order_no_
      AND    oe_line_no = line_no_
      AND    oe_rel_no = rel_no_
      AND    oe_line_item_no  = line_item_no_
      AND    qty_on_order > 0;

   attr_                VARCHAR2(2000);
   state_               VARCHAR2(20);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Update_Pegged_Orders__');
   state_ := Get_Objstate(order_no_, line_no_, rel_no_, line_item_no_);
   IF state_ = 'Delivered' THEN
      FOR pur_rec_ IN po_connections LOOP
         Client_SYS.Clear_Attr(attr_);
         Client_SYS.Add_To_Attr('QTY_ON_ORDER', 0, attr_);
         Customer_Order_Pur_Order_API.Modify(order_no_, line_no_, rel_no_, line_item_no_, pur_rec_.po_order_no, pur_rec_.po_line_no, pur_rec_.po_rel_no, attr_);
         $IF (Component_Purch_SYS.INSTALLED)$THEN
            IF (pur_rec_.purchase_type = 'R') THEN
               DECLARE
                  old_pegged_qty_   NUMBER;
               BEGIN
                  old_pegged_qty_ := Purchase_Req_Line_Part_API.Get_Qty_On_Order(pur_rec_.po_order_no, pur_rec_.po_line_no, pur_rec_.po_rel_no);
                  IF (old_pegged_qty_ > 0) THEN
                     Purchase_Req_Line_Part_API.Set_Qty_On_Order(pur_rec_.po_order_no, pur_rec_.po_line_no, pur_rec_.po_rel_no, old_pegged_qty_ - pur_rec_.qty_on_order);
                  END IF;
               END;
            ELSE
               DECLARE
                  old_pegged_qty_   NUMBER;
               BEGIN
                  old_pegged_qty_ := Purchase_Order_Line_Part_API.Get_Qty_On_Order(pur_rec_.po_order_no, pur_rec_.po_line_no, pur_rec_.po_rel_no);
                  IF (old_pegged_qty_ > 0) THEN
                     Purchase_Order_Line_Part_API.Modify_Qty_On_Order(pur_rec_.po_order_no, pur_rec_.po_line_no, pur_rec_.po_rel_no, old_pegged_qty_ - pur_rec_.qty_on_order);
                  END IF;
               END;
            END IF;
         $END
      END LOOP;
      FOR so_rec_ IN so_connections LOOP
         Client_SYS.Clear_Attr(attr_);
         Client_SYS.Add_To_Attr('QTY_ON_ORDER', 0, attr_);
         Customer_Order_Shop_Order_API.Modify(order_no_, line_no_, rel_no_, line_item_no_, so_rec_.so_order_no, so_rec_.so_release_no, so_rec_.so_sequence_no, attr_);
         Client_SYS.Clear_Attr(attr_);
         $IF (Component_Shpord_SYS.INSTALLED)$THEN
            DECLARE
               pegged_qty_   NUMBER;
            BEGIN
               pegged_qty_ := Shop_Ord_API.Get_Qty_On_Order_By_Keys(so_rec_.so_order_no, so_rec_.so_release_no, so_rec_.so_sequence_no);
               IF (pegged_qty_ > 0) THEN
                  Client_SYS.Add_To_Attr( 'QTY_ON_ORDER', pegged_qty_ - so_rec_.qty_on_order, attr_);
                  Client_SYS.Add_To_Attr( 'DEMAND_CODE_DB', 'IO', attr_);
                  Shop_Ord_API.Modify(so_rec_.so_order_no, so_rec_.so_release_no, so_rec_.so_sequence_no, attr_);
               END IF;
            END;
         $END
      END LOOP;
      Modify_Qty_On_Order(order_no_, line_no_, rel_no_, line_item_no_, 0);
   END IF;
END Update_Pegged_Orders__;


PROCEDURE Calculate_Revenue__ (
   attr_ IN VARCHAR2 )
IS
   order_no_      CUSTOMER_ORDER_LINE_TAB.order_no%TYPE;
   line_no_       CUSTOMER_ORDER_LINE_TAB.line_no%TYPE;
   rel_no_        CUSTOMER_ORDER_LINE_TAB.rel_no%TYPE;
   line_item_no_  CUSTOMER_ORDER_LINE_TAB.line_item_no%TYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Calculate_Revenue__');
   order_no_     := Client_SYS.Get_Item_Value('ORDER_NO', attr_);
   line_no_      := Client_SYS.Get_Item_Value('LINE_NO', attr_);
   rel_no_       := Client_SYS.Get_Item_Value('REL_NO', attr_);
   line_item_no_ := Client_SYS.Get_Item_Value('LINE_ITEM_NO', attr_);

   Calculate_Revenue___(order_no_, line_no_, rel_no_, line_item_no_);
END Calculate_Revenue__;


PROCEDURE Update_License_Connect_Head__ (
   newrec_ IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   oldrec_ IN     CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   attr_   IN     VARCHAR2 )
IS
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Update_License_Connect_Head__');
   $IF Component_Expctr_SYS.INSTALLED $THEN
      IF(Customer_Order_Flow_API.Get_License_Enabled(newrec_.order_no, 'INTERACT_CUST_ORD') = 'TRUE') THEN
         DECLARE
            connect_head_id_      NUMBER;
            disconnect_           VARCHAR2(5);
            connect_status_       VARCHAR2(30);
            server_data_change_   NUMBER;
            licensed_order_type_  VARCHAR2(25);
         BEGIN
            licensed_order_type_ := Get_Expctr_License_Order_Type(newrec_.demand_code, newrec_.demand_order_ref1, newrec_.demand_order_ref2, newrec_.demand_order_ref3);
            connect_head_id_ := Exp_License_Connect_Head_API.Get_Connect_Id_From_Ref(licensed_order_type_, newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
            IF connect_head_id_ IS NOT NULL THEN
               disconnect_         := Client_SYS.Get_Item_Value('DISCONNECT_EXP_LICENSE', attr_);
               server_data_change_ := Client_SYS.Get_Item_Value('SERVER_DATA_CHANGE', attr_);
               connect_status_     := Exp_license_Connect_Head_API.Get_Objstate(connect_head_id_);
               
               -- Need to check both disconnect_ and connect_status_ since disconnect_ will be null when the status is Unconnected and Planned.
               -- server_data_change_ becomes 1 when the update originates from the pegged PO or SO.
               -- Update the license date in export license connect header if the plan ship date has been changed.
               IF (oldrec_.planned_ship_date != newrec_.planned_ship_date) AND ((disconnect_ = 'TRUE') OR
                   (connect_status_ IN ('Unconnected', 'Planned')) OR (server_data_change_ = 1)) THEN
                  Exp_License_Connect_Head_API.Set_License_Date(connect_head_id_, newrec_.planned_ship_date);
               END IF;
               -- Update the license quantity in export license connect header if the revised_qty_due has been changed.
               IF (oldrec_.revised_qty_due != newrec_.revised_qty_due) THEN
                  -- Cannot update the attributes when an export license is (partly) connected.
                  Exp_License_Connect_Util_API.Check_Allow_Update(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, licensed_order_type_);
                  Exp_License_Connect_Head_API.Set_License_Qty(connect_head_id_, newrec_.revised_qty_due);
               END IF;
               -- Update the supplier id in export license connect header if the vendor number has been changed.
               IF (NVL(oldrec_.vendor_no, ' ') != newrec_.vendor_no) THEN
                  -- Cannot update the attributes when an export license is (partly) connected.
                  Exp_License_Connect_Util_API.Check_Allow_Update(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, licensed_order_type_);
                  Exp_License_Connect_Head_API.Set_Supplier_Info(connect_head_id_, newrec_.vendor_no);
               END IF;
               IF (NVL(newrec_.forward_agent_id, CHR(2)) != NVL(oldrec_.forward_agent_id, CHR(2))) THEN
                  Exp_License_Connect_Util_API.Check_Allow_Update(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, licensed_order_type_);
                  Exp_License_Connect_Head_API.Set_Forwarder_Info(connect_head_id_, newrec_.forward_agent_id);
               END IF;
               IF(NVL(newrec_.configuration_id, CHR(2)) != NVL(oldrec_.configuration_id, CHR(2))) THEN
                  Exp_License_Connect_Util_API.Check_Allow_Update(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, licensed_order_type_);
                  -- This is does not need to update in Export License Connect Head since configuration id doesn't store there. But this will lead to change the structure
                  -- of the configured part due to different kind of parts can be used for the different configurations. 
               END IF;
               IF(newrec_.sale_unit_price != oldrec_.sale_unit_price) THEN
                  Exp_License_Connect_Util_API.Check_Allow_Update(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, licensed_order_type_);                                          
               END IF;
            END IF;
         END;
      END IF;
   $ELSE
      NULL;
   $END
END Update_License_Connect_Head__;


--@IgnoreMissingSysinit
PROCEDURE Validate_Jinsui_Constraints__(
   newrec_                 IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   company_max_jinsui_amt_ IN NUMBER,
   co_header_validation_   IN BOOLEAN )
IS
   company_                 VARCHAR2(20);
   company_maximum_amt_     NUMBER := 0;
   gross_charge_amount_     NUMBER := 0;
   gross_total_incl_charge_ NUMBER := 0;
   net_amount_curr_         NUMBER := 0;
   total_tax_curr_          NUMBER := 0;
   gross_total_base_curr_   NUMBER := 0;
BEGIN
   IF newrec_.self_billing = 'SELF BILLING' THEN
      Error_SYS.Record_General(lu_name_, 'SBNOTALLOWEED: Self billing is not allowed for a jinsui order.');
   END IF;

   company_maximum_amt_ := company_max_jinsui_amt_;
   company_             := Site_API.Get_Company(newrec_.contract);
   IF (company_maximum_amt_ = 0) THEN
      $IF Component_Jinsui_SYS.INSTALLED $THEN
         company_maximum_amt_ := Js_Company_Info_API.Get_Virtual_Inv_Max_Amount(company_);
      $ELSE
         company_maximum_amt_ := 0;
      $END
   END IF;

   gross_charge_amount_   := Customer_Order_Charge_API.Get_Gross_Amount_For_Col(newrec_.order_no,
                                                                                newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
   net_amount_curr_       := Get_Sale_Price_Total(newrec_.order_no,
                                                  newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
   total_tax_curr_        := Get_Total_Tax_Amount_Curr(newrec_.order_no,
                                                       newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
   gross_total_base_curr_ := net_amount_curr_+ total_tax_curr_;
   IF (newrec_.qty_picked > newrec_.revised_qty_due) THEN
      -- The line has been overpicked, the check should be made agains the total amount picked rather than what was ordered
      gross_total_base_curr_ := (newrec_.qty_picked / newrec_.revised_qty_due) * gross_total_base_curr_;
   END IF;
   gross_total_incl_charge_ := gross_total_base_curr_ + gross_charge_amount_;

   IF (gross_total_base_curr_ > company_maximum_amt_) THEN
      IF (co_header_validation_) THEN
         Error_SYS.Record_General(lu_name_, 'COLIAMTEXCEEDED: The total line amount of customer order line :P1 cannot be greater than the maximum amount for Jinsui invoice :P2 for the company :P3.', newrec_.order_no||'-'||newrec_.line_no||'-'||newrec_.rel_no, company_maximum_amt_,company_);
      ELSE
         Error_SYS.Record_General(lu_name_, 'AMTEXCEEDED: The total line amount cannot be greater than the maximum amount for Jinsui invoice :P1 for the company :P2.',company_maximum_amt_,company_);
      END IF;
   ELSIF (gross_total_incl_charge_ > company_maximum_amt_ ) THEN
      IF (co_header_validation_) THEN
         Error_SYS.Record_General(lu_name_, 'COAMTLINECHEXCEED: The total line and the connected charge amount of customer order line :P1 cannot be greater than the maximum amount for Jinsui invoice :P2 for the company :P3.', newrec_.order_no||'-'||newrec_.line_no||'-'||newrec_.rel_no, company_maximum_amt_,company_);
      ELSE
         Error_SYS.Record_General(lu_name_, 'AMTLINECHEXCEED: The total line and the connected charge amount cannot be greater than the maximum amount for Jinsui invoice :P1 for the company :P2.',company_maximum_amt_,company_);
      END IF;
   END IF;
END Validate_Jinsui_Constraints__;


--@IgnoreMissingSysinit
PROCEDURE Get_Internal_Co_Qty__ (
   qty_shipped_  OUT NUMBER,
   qty_assigned_ OUT NUMBER,
   order_no_     IN  VARCHAR2,
   line_no_      IN  VARCHAR2,
   rel_no_       IN  VARCHAR2,
   line_item_no_ IN  NUMBER )
IS
   int_order_no_     VARCHAR2(12);
   int_line_no_      VARCHAR2(4);
   int_rel_no_       VARCHAR2(4);
   int_line_item_no_ NUMBER;
   co_line_status_   VARCHAR2(20);
   po_order_no_      VARCHAR2(12);
   po_line_no_       VARCHAR2(4);
   po_rel_no_        VARCHAR2(4);
   supply_site_      VARCHAR2(5);
   demand_code_      VARCHAR2(20);
   supply_code_      VARCHAR2(20);
   purchase_type_    VARCHAR2(20);

   CURSOR get_internal_co_info(po_order_no_ IN VARCHAR2, po_line_no_ IN VARCHAR2, po_rel_no_ IN VARCHAR2) IS
      SELECT order_no, line_no, rel_no, line_item_no, rowstate,
             contract, qty_shipped, qty_assigned, demand_code, supply_code
      FROM CUSTOMER_ORDER_LINE_TAB
      WHERE demand_order_ref1 = po_order_no_
      AND   demand_order_ref2 = po_line_no_
      AND   demand_order_ref3 = po_rel_no_;
BEGIN
   IF Customer_Order_Transfer_API.Is_Multi_Tier_Ordchg_Enabled(order_no_, line_no_, rel_no_, line_item_no_) = 'FALSE' THEN
      int_order_no_     := order_no_;
      int_line_no_      := line_no_;
      int_rel_no_       := rel_no_;
      int_line_item_no_ := line_item_no_;

      LOOP
         Customer_Order_Pur_Order_API.Get_Purord_For_Custord(po_order_no_,
                                                             po_line_no_,
                                                             po_rel_no_,
                                                             purchase_type_,
                                                             int_order_no_,
                                                             int_line_no_,
                                                             int_rel_no_,
                                                             int_line_item_no_);
         IF (po_order_no_ IS NULL) THEN
            -- Assign NULL for qty_shipped_ and qty_assigned_ to skip the warning message.
            qty_shipped_  := NULL;
            qty_assigned_ := NULL;
         ELSE
            OPEN  get_internal_co_info(po_order_no_, po_line_no_, po_rel_no_);
            FETCH get_internal_co_info INTO int_order_no_, int_line_no_, int_rel_no_, int_line_item_no_, co_line_status_,
                                            supply_site_, qty_shipped_, qty_assigned_, demand_code_, supply_code_;
            CLOSE get_internal_co_info;

            IF (supply_code_ NOT IN ('IPD','IPT') AND co_line_status_ IN ('Released', 'Cancelled')) THEN
               -- Assign NULL for qty_shipped_ and qty_assigned_ to skip the warning message.
               qty_shipped_  := NULL;
               qty_assigned_ := NULL;
            END IF;
         END IF;
         EXIT WHEN ((qty_shipped_ IS NULL) OR (supply_code_ IS NOT NULL AND supply_code_ NOT IN ('IPD','IPT'))) ;
      END LOOP;
   ELSE
      -- Assign NULL for qty_shipped_ and qty_assigned_ to skip the warning message.
      qty_shipped_  := NULL;
      qty_assigned_ := NULL;
   END IF;
END Get_Internal_Co_Qty__;


--@IgnoreMissingSysinit
FUNCTION Qty_On_Order_Exist__ (
   order_no_ IN VARCHAR2,
   line_no_  IN VARCHAR2,
   rel_no_   IN VARCHAR2 ) RETURN NUMBER
IS
   dummy_ NUMBER;
   CURSOR exist_control IS
      SELECT 1
      FROM CUSTOMER_ORDER_LINE_TAB
      WHERE order_no     = order_no_
      AND   line_no      = line_no_
      AND   rel_no       = rel_no_
      AND   qty_on_order > 0;
BEGIN
   OPEN exist_control;
   FETCH exist_control INTO dummy_;
   IF (exist_control%FOUND) THEN
      CLOSE exist_control;
      RETURN (1);
   END IF;
   CLOSE exist_control;
   RETURN (0);
END Qty_On_Order_Exist__;


PROCEDURE Update_Line__ (
   info_                      OUT    VARCHAR2,
   attr_                      IN OUT NOCOPY VARCHAR2,
   order_no_                  IN     VARCHAR2,
   changed_attrib_not_in_pol_ IN     VARCHAR2,
   replicate_changes_         IN     VARCHAR2,
   address_changed_           IN     VARCHAR2 DEFAULT 'FALSE' )
IS
   po_order_no_         VARCHAR2(12);
   i_                   NUMBER;
   found_               BOOLEAN := FALSE;
   change_request_      VARCHAR2(5) := 'FALSE';
   dop_new_qty_demand_  VARCHAR2(100);
   no_of_dop_conns_     NUMBER;
   no_of_dop_conns_pkg_ NUMBER;
   msg_                 VARCHAR2(32000);
   dummy_               VARCHAR2(2000);
   ipd_exist_           VARCHAR2(5);
   ipt_exist_           VARCHAR2(5);
   shpmnt_info_         VARCHAR2(2000); 
   
   CURSOR get_lines IS 
      SELECT line_no, rel_no, line_item_no, rowid objid, to_char(rowversion,'YYYYMMDDHH24MISS') objversion, supply_code
      FROM customer_order_line_tab
      WHERE order_no      = order_no_
      AND   line_item_no != -1;
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Update_Line__');
   IF (replicate_changes_ = 'TRUE') THEN
      Customer_Order_API.Check_Ipd_Ipt_Exist__(dummy_, 
                                               ipd_exist_, 
                                               ipt_exist_, 
                                               dummy_, 
                                               dummy_, 
                                               dummy_, 
                                               order_no_, 
                                               'FALSE');
                                               
      FOR rec_ IN get_lines LOOP
         po_order_no_ := Customer_Order_Pur_Order_API.Get_Po_Order_No_For_Custord__(order_no_,
                                                                                    rec_.line_no,
                                                                                    rec_.rel_no,
                                                                                    rec_.line_item_no);
         IF (po_order_no_ IS NOT NULL) THEN
            IF (purchase_order_no_tab_.COUNT > 0) THEN
               IF ((address_changed_ = 'TRUE') AND (ipd_exist_ = 'TRUE') AND (ipt_exist_ = 'TRUE')) THEN
                  -- If the address has been changed and the lines are a mix of IPD and IPT, then check the supply code
                  FOR j_ IN purchase_order_no_tab_.FIRST .. purchase_order_no_tab_.LAST LOOP
                     IF ((purchase_order_no_tab_(j_).po_order_no = po_order_no_) AND (purchase_order_no_tab_(j_).supply_code = rec_.supply_code)) THEN
                        found_ := TRUE;
                        EXIT;
                     END IF;
                  END LOOP;
               ELSE
                  FOR j_ IN purchase_order_no_tab_.FIRST .. purchase_order_no_tab_.LAST LOOP
                     IF (purchase_order_no_tab_(j_).po_order_no = po_order_no_) THEN
                        found_ := TRUE;
                        EXIT;
                     END IF;         
                  END LOOP;
               END IF;
            END IF;

            IF (NOT found_) THEN -- add po_order_no and line key
               i_ := purchase_order_no_tab_.COUNT + 1;
               purchase_order_no_tab_(i_).po_order_no  := po_order_no_;
               purchase_order_no_tab_(i_).order_no     := order_no_;
               purchase_order_no_tab_(i_).line_no      := rec_.line_no;
               purchase_order_no_tab_(i_).rel_no       := rec_.rel_no;
               purchase_order_no_tab_(i_).line_item_no := rec_.line_item_no;
               purchase_order_no_tab_(i_).supply_code  := rec_.supply_code;
            ELSE -- if the po_order_no is the same, update the line keys to set the last line so change_request is set to 'TRUE' on the last line
               i_ := purchase_order_no_tab_.COUNT;
               purchase_order_no_tab_(i_).order_no     := order_no_;
               purchase_order_no_tab_(i_).line_no      := rec_.line_no;
               purchase_order_no_tab_(i_).rel_no       := rec_.rel_no;
               purchase_order_no_tab_(i_).line_item_no := rec_.line_item_no;
               purchase_order_no_tab_(i_).supply_code  := rec_.supply_code;
               found_ := FALSE;
            END IF;
         END IF;
      END LOOP;
   END IF;
   
   FOR rec_ IN get_lines LOOP
      attr_ := NULL;
      
      IF (replicate_changes_ = 'TRUE') THEN
         Client_SYS.Add_To_Attr('REPLICATE_CHANGES', replicate_changes_, attr_);
         Client_SYS.Add_To_Attr('UPDATE_PEGGED_ORDERS', 'TRUE', attr_);
         Client_SYS.Add_To_Attr('CHANGED_ATTRIB_NOT_IN_POL', changed_attrib_not_in_pol_, attr_);

         IF (purchase_order_no_tab_.COUNT > 0) THEN
            IF ((address_changed_ = 'TRUE') AND (ipd_exist_ = 'TRUE') AND (ipt_exist_ = 'TRUE')) THEN
               -- If the address has been changed and the lines are a mix of IPD and IPT, then check the supply code
               FOR k_ IN purchase_order_no_tab_.FIRST..purchase_order_no_tab_.LAST LOOP
                  IF ((purchase_order_no_tab_(k_).order_no = order_no_) AND (purchase_order_no_tab_(k_).line_no = rec_.line_no) AND 
                      (purchase_order_no_tab_(k_).rel_no = rec_.rel_no) AND (purchase_order_no_tab_(k_).line_item_no = rec_.line_item_no) AND 
                      (purchase_order_no_tab_(k_).supply_code = rec_.supply_code)) THEN
                     change_request_ := 'TRUE';
                     EXIT;
                  ELSE
                     change_request_ := 'FALSE';
                  END IF;
               END LOOP;
            ELSE
               FOR k_ IN purchase_order_no_tab_.FIRST..purchase_order_no_tab_.LAST LOOP
                  IF ((purchase_order_no_tab_(k_).order_no = order_no_) AND (purchase_order_no_tab_(k_).line_no = rec_.line_no) AND 
                      (purchase_order_no_tab_(k_).rel_no = rec_.rel_no) AND (purchase_order_no_tab_(k_).line_item_no = rec_.line_item_no)) THEN
                     change_request_ := 'TRUE';
                     EXIT;
                  ELSE
                     change_request_ := 'FALSE';
                  END IF;
               END LOOP;
            END IF;
         END IF;

         Client_SYS.Add_To_Attr('CHANGE_REQUEST', change_request_, attr_); 

         IF ((rec_.supply_code = 'DOP') OR (rec_.supply_code = 'PKG')) THEN
            dop_new_qty_demand_ := Client_SYS.Get_Item_Value('DOP_NEW_QTY_DEMAND', attr_);
            $IF Component_Dop_SYS.INSTALLED $THEN
               no_of_dop_conns_     := Dop_Demand_Cust_Ord_API.Get_No_Of_All_Dop_Headers(order_no_, 
                                                                                         rec_.line_no, 
                                                                                         rec_.rel_no, 
                                                                                         rec_.line_item_no);
               no_of_dop_conns_pkg_ := Dop_Demand_Cust_Ord_API.Get_No_Of_All_Dop_Headers(order_no_, 
                                                                                         rec_.line_no, 
                                                                                         rec_.rel_no, 
                                                                                         rec_.line_item_no,
                                                                                         'TRUE');
               IF (((no_of_dop_conns_ > 0) OR ((rec_.supply_code = 'PKG') AND (no_of_dop_conns_pkg_ > 0))) AND (dop_new_qty_demand_ IS NULL)) THEN 
                  Message_SYS.Add_Attribute(msg_, 'FROM_CO_LINE_CLIENT', 'TRUE');
                  Message_SYS.Add_Attribute(msg_, 'FROM_CO_HEAD_CLIENT', 'TRUE');
                  Client_SYS.Add_To_Attr('DOP_NEW_QTY_DEMAND', msg_, attr_);
               END IF;
            $ELSE
               NULL;
            $END
         END IF;
      ELSE
         Client_SYS.Add_To_Attr('REPLICATE_CHANGES', 'FALSE', attr_);
         Client_SYS.Add_To_Attr('UPDATE_PEGGED_ORDERS', 'FALSE', attr_);
         Client_SYS.Add_To_Attr('CHANGED_ATTRIB_NOT_IN_POL', changed_attrib_not_in_pol_, attr_);
         Client_SYS.Add_To_Attr('CHANGE_REQUEST', 'FALSE', attr_); 
      END IF;
      
      IF ((address_changed_ = 'TRUE') AND (rec_.supply_code != 'IPT')) THEN
         Cust_Order_Line_Address_API.Modify_Connected_Addr_Line__(order_no_          => order_no_, 
                                                                  line_no_           => rec_.line_no, 
                                                                  rel_no_            => rec_.rel_no, 
                                                                  line_item_no_      => rec_.line_item_no, 
                                                                  replicate_changes_ => replicate_changes_,
                                                                  change_request_    => change_request_, 
                                                                  co_status_         => Customer_Order_API.Get_Objstate(order_no_),
                                                                  supply_code_       => rec_.supply_code);
         IF(rec_.supply_code IN ('IPD', 'IPT')) THEN
            shpmnt_info_ := App_Context_SYS.Find_Value('CUSTOMER_ORDER_LINE_API.SHPMNT_INFO_');
            IF (shpmnt_info_ IS NOT NULL) THEN               
               Client_SYS.Add_Info(lu_name_, shpmnt_info_);   
            END IF; 
            info_ := info_ || Client_SYS.Get_All_Info;
         END IF;
      ELSE
         Modify__(info_, rec_.objid, rec_.objversion, attr_, 'DO');
      END IF;
   END LOOP;
END Update_Line__;


FUNCTION Get_Displayed_Discount__ (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER) RETURN NUMBER
IS
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Get_Displayed_Discount__');
   IF (Customer_Order_API.Get_Discounted_Price_Rounded(order_no_)) THEN
      RETURN Get_Original_Discount(order_no_, line_no_, rel_no_, line_item_no_);
   ELSE
      RETURN Get_Discount(order_no_, line_no_, rel_no_, line_item_no_);
   END IF;
END Get_Displayed_Discount__;


PROCEDURE Check_Cancel_Reason_Ref___ (
   newrec_ IN OUT NOCOPY customer_order_line_tab%ROWTYPE )
IS
BEGIN
   Order_Cancel_Reason_Api.Exist( newrec_.cancel_reason, Reason_Used_By_Api.DB_CUSTOMER_ORDER );
END Check_Cancel_Reason_Ref___;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC IMPLEMENTATION METHODS ---------------------
-----------------------------------------------------------------------------

PROCEDURE Unpack___ (
   newrec_   IN OUT NOCOPY customer_order_line_tab%ROWTYPE,
   indrec_   IN OUT NOCOPY Indicator_Rec,
   attr_     IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      newrec_   IN OUT NOCOPY customer_order_line_tab%ROWTYPE,
      indrec_   IN OUT NOCOPY Indicator_Rec,
      attr_     IN OUT NOCOPY VARCHAR2 )
   IS
      ptr_   NUMBER;
      name_  VARCHAR2(30);
      value_ VARCHAR2(32000);
      msg_   VARCHAR2(32000);
   BEGIN
      Reset_Indicator_Rec___(indrec_);
      Client_SYS.Clear_Attr(msg_);
      ptr_ := NULL;
      WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
         CASE name_
         WHEN ('ORDER_NO') THEN
            newrec_.order_no := value_;
            indrec_.order_no := TRUE;
         WHEN ('LINE_NO') THEN
            newrec_.line_no := value_;
            indrec_.line_no := TRUE;
         WHEN ('REL_NO') THEN
            newrec_.rel_no := value_;
            indrec_.rel_no := TRUE;
         WHEN ('LINE_ITEM_NO') THEN
            newrec_.line_item_no := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.line_item_no := TRUE;
         WHEN ('CONTRACT') THEN
            newrec_.contract := value_;
            indrec_.contract := TRUE;
         WHEN ('CATALOG_NO') THEN
            newrec_.catalog_no := value_;
            indrec_.catalog_no := TRUE;
         WHEN ('NOTE_ID') THEN
            newrec_.note_id := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.note_id := TRUE;
         WHEN ('ORDER_CODE') THEN
            newrec_.order_code := value_;
            indrec_.order_code := TRUE;
         WHEN ('PART_NO') THEN
            newrec_.part_no := value_;
            indrec_.part_no := TRUE;
         WHEN ('PRE_ACCOUNTING_ID') THEN
            newrec_.pre_accounting_id := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.pre_accounting_id := TRUE;
         WHEN ('SALES_UNIT_MEAS') THEN
            newrec_.sales_unit_meas := value_;
            indrec_.sales_unit_meas := TRUE;
         WHEN ('BASE_SALE_UNIT_PRICE') THEN
            newrec_.base_sale_unit_price := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.base_sale_unit_price := TRUE;
         WHEN ('BASE_UNIT_PRICE_INCL_TAX') THEN
            newrec_.base_unit_price_incl_tax := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.base_unit_price_incl_tax := TRUE;
         WHEN ('BUY_QTY_DUE') THEN
            newrec_.buy_qty_due := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.buy_qty_due := TRUE;
         WHEN ('CATALOG_DESC') THEN
            newrec_.catalog_desc := value_;
            indrec_.catalog_desc := TRUE;
         WHEN ('CATALOG_TYPE') THEN
            newrec_.catalog_type := Sales_Part_Type_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.catalog_type IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.catalog_type := TRUE;
         WHEN ('CATALOG_TYPE_DB') THEN
            newrec_.catalog_type := value_;
            indrec_.catalog_type := TRUE;
         WHEN ('CONV_FACTOR') THEN
            newrec_.conv_factor := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.conv_factor := TRUE;
         WHEN ('COST') THEN
            newrec_.cost := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.cost := TRUE;
         WHEN ('CURRENCY_RATE') THEN
            newrec_.currency_rate := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.currency_rate := TRUE;
         WHEN ('DATE_ENTERED') THEN
            newrec_.date_entered := Client_SYS.Attr_Value_To_Date(value_);
            indrec_.date_entered := TRUE;
         WHEN ('DISCOUNT') THEN
            newrec_.discount := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.discount := TRUE;
         WHEN ('LINE_TOTAL_QTY') THEN
            newrec_.line_total_qty := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.line_total_qty := TRUE;
         WHEN ('LINE_TOTAL_WEIGHT') THEN
            newrec_.line_total_weight := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.line_total_weight := TRUE;
         WHEN ('NOTE_TEXT') THEN
            newrec_.note_text := value_;
            indrec_.note_text := TRUE;
         WHEN ('ORDER_DISCOUNT') THEN
            newrec_.order_discount := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.order_discount := TRUE;
         WHEN ('PLANNED_DELIVERY_DATE') THEN
            newrec_.planned_delivery_date := Client_SYS.Attr_Value_To_Date(value_);
            indrec_.planned_delivery_date := TRUE;
         WHEN ('PLANNED_DUE_DATE') THEN
            newrec_.planned_due_date := Client_SYS.Attr_Value_To_Date(value_);
            indrec_.planned_due_date := TRUE;
         WHEN ('SUPPLY_SITE_DUE_DATE') THEN
            newrec_.supply_site_due_date := Client_SYS.Attr_Value_To_Date(value_);
            indrec_.supply_site_due_date := TRUE;
         WHEN ('PRICE_CONV_FACTOR') THEN
            newrec_.price_conv_factor := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.price_conv_factor := TRUE;
         WHEN ('PROMISED_DELIVERY_DATE') THEN
            newrec_.promised_delivery_date := Client_SYS.Attr_Value_To_Date(value_);
            indrec_.promised_delivery_date := TRUE;
         WHEN ('QTY_ASSIGNED') THEN
            newrec_.qty_assigned := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.qty_assigned := TRUE;
         WHEN ('QTY_INVOICED') THEN
            newrec_.qty_invoiced := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.qty_invoiced := TRUE;
         WHEN ('QTY_ON_ORDER') THEN
            newrec_.qty_on_order := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.qty_on_order := TRUE;
         WHEN ('QTY_PICKED') THEN
            newrec_.qty_picked := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.qty_picked := TRUE;
         WHEN ('QTY_RETURNED') THEN
            newrec_.qty_returned := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.qty_returned := TRUE;
         WHEN ('QTY_SHIPDIFF') THEN
            newrec_.qty_shipdiff := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.qty_shipdiff := TRUE;
         WHEN ('QTY_SHIPPED') THEN
            newrec_.qty_shipped := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.qty_shipped := TRUE;
         WHEN ('QTY_TO_SHIP') THEN
            newrec_.qty_to_ship := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.qty_to_ship := TRUE;
         WHEN ('QTY_SHORT') THEN
            newrec_.qty_short := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.qty_short := TRUE;
         WHEN ('REAL_SHIP_DATE') THEN
            newrec_.real_ship_date := Client_SYS.Attr_Value_To_Date(value_);
            indrec_.real_ship_date := TRUE;
         WHEN ('REVISED_QTY_DUE') THEN
            newrec_.revised_qty_due := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.revised_qty_due := TRUE;
         WHEN ('SALE_UNIT_PRICE') THEN
            newrec_.sale_unit_price := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.sale_unit_price := TRUE;
         WHEN ('UNIT_PRICE_INCL_TAX') THEN
            newrec_.unit_price_incl_tax := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.unit_price_incl_tax := TRUE;
         WHEN ('SUPPLY_CODE') THEN
            newrec_.supply_code := Order_Supply_Type_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.supply_code IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.supply_code := TRUE;
         WHEN ('SUPPLY_CODE_DB') THEN
            newrec_.supply_code := value_;
            indrec_.supply_code := TRUE;
         WHEN ('WANTED_DELIVERY_DATE') THEN
            newrec_.wanted_delivery_date := Client_SYS.Attr_Value_To_Date(value_);
            indrec_.wanted_delivery_date := TRUE;
         WHEN ('DELIVERY_TYPE') THEN
            newrec_.delivery_type := value_;
            indrec_.delivery_type := TRUE;
         WHEN ('VENDOR_NO') THEN
            newrec_.vendor_no := value_;
            indrec_.vendor_no := TRUE;
         WHEN ('TAX_CODE') THEN
            newrec_.tax_code := value_;
            indrec_.tax_code := TRUE;
         WHEN ('TAX_CLASS_ID') THEN
            newrec_.tax_class_id := value_;
            indrec_.tax_class_id := TRUE;
         WHEN ('CUSTOMER_PART_NO') THEN
            newrec_.customer_part_no := value_;
            indrec_.customer_part_no := TRUE;
         WHEN ('CUSTOMER_PART_CONV_FACTOR') THEN
            newrec_.customer_part_conv_factor := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.customer_part_conv_factor := TRUE;
         WHEN ('CUSTOMER_PART_UNIT_MEAS') THEN
            newrec_.customer_part_unit_meas := value_;
            indrec_.customer_part_unit_meas := TRUE;
         WHEN ('CUSTOMER_PART_BUY_QTY') THEN
            newrec_.customer_part_buy_qty := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.customer_part_buy_qty := TRUE;
         WHEN ('PLANNED_SHIP_DATE') THEN
            newrec_.planned_ship_date := Client_SYS.Attr_Value_To_Date(value_);
            indrec_.planned_ship_date := TRUE;
         WHEN ('PLANNED_SHIP_PERIOD') THEN
            newrec_.planned_ship_period := value_;
            indrec_.planned_ship_period := TRUE;
         WHEN ('CUSTOMER_NO') THEN
            newrec_.customer_no := value_;
            indrec_.customer_no := TRUE;
         WHEN ('CONSIGNMENT_STOCK') THEN
            newrec_.consignment_stock := Consignment_Stock_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.consignment_stock IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.consignment_stock := TRUE;
         WHEN ('CONSIGNMENT_STOCK_DB') THEN
            newrec_.consignment_stock := value_;
            indrec_.consignment_stock := TRUE;
         WHEN ('CLOSE_TOLERANCE') THEN
            newrec_.close_tolerance := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.close_tolerance := TRUE;
         WHEN ('PRICE_LIST_NO') THEN
            newrec_.price_list_no := value_;
            indrec_.price_list_no := TRUE;
         WHEN ('CHARGED_ITEM') THEN
            newrec_.charged_item := Charged_Item_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.charged_item IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.charged_item := TRUE;
         WHEN ('CHARGED_ITEM_DB') THEN
            newrec_.charged_item := value_;
            indrec_.charged_item := TRUE;
         WHEN ('DEMAND_ORDER_REF1') THEN
            newrec_.demand_order_ref1 := value_;
            indrec_.demand_order_ref1 := TRUE;
         WHEN ('DEMAND_ORDER_REF2') THEN
            newrec_.demand_order_ref2 := value_;
            indrec_.demand_order_ref2 := TRUE;
         WHEN ('DEMAND_ORDER_REF3') THEN
            newrec_.demand_order_ref3 := value_;
            indrec_.demand_order_ref3 := TRUE;
         WHEN ('DEMAND_ORDER_REF4') THEN
            newrec_.demand_order_ref4 := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.demand_order_ref4 := TRUE;
         WHEN ('DEMAND_CODE') THEN
            newrec_.demand_code := Order_Supply_Type_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.demand_code IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.demand_code := TRUE;
         WHEN ('DEMAND_CODE_DB') THEN
            newrec_.demand_code := value_;
            indrec_.demand_code := TRUE;
         WHEN ('DOP_CONNECTION') THEN
            newrec_.dop_connection := Dop_Connection_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.dop_connection IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.dop_connection := TRUE;
         WHEN ('DOP_CONNECTION_DB') THEN
            newrec_.dop_connection := value_;
            indrec_.dop_connection := TRUE;
         WHEN ('CREATE_SM_OBJECT_OPTION') THEN
            newrec_.create_sm_object_option := Create_Sm_Object_Option_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.create_sm_object_option IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.create_sm_object_option := TRUE;
         WHEN ('CREATE_SM_OBJECT_OPTION_DB') THEN
            newrec_.create_sm_object_option := value_;
            indrec_.create_sm_object_option := TRUE;
         WHEN ('DEFAULT_ADDR_FLAG') THEN
            newrec_.default_addr_flag := Gen_Yes_No_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.default_addr_flag IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.default_addr_flag := TRUE;
         WHEN ('DEFAULT_ADDR_FLAG_DB') THEN
            newrec_.default_addr_flag := value_;
            indrec_.default_addr_flag := TRUE;
         WHEN ('ADDR_FLAG') THEN
            newrec_.addr_flag := Gen_Yes_No_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.addr_flag IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.addr_flag := TRUE;
         WHEN ('ADDR_FLAG_DB') THEN
            newrec_.addr_flag := value_;
            indrec_.addr_flag := TRUE;
         WHEN ('SHIP_ADDR_NO') THEN
            newrec_.ship_addr_no := value_;
            indrec_.ship_addr_no := TRUE;
         WHEN ('ROUTE_ID') THEN
            newrec_.route_id := value_;
            indrec_.route_id := TRUE;
         WHEN ('FORWARD_AGENT_ID') THEN
            newrec_.forward_agent_id := value_;
            indrec_.forward_agent_id := TRUE;
         WHEN ('SHIP_VIA_CODE') THEN
            newrec_.ship_via_code := value_;
            indrec_.ship_via_code := TRUE;
         WHEN ('DELIVERY_TERMS') THEN
            newrec_.delivery_terms := value_;
            indrec_.delivery_terms := TRUE;
         WHEN ('DELIVERY_LEADTIME') THEN
            newrec_.delivery_leadtime := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.delivery_leadtime := TRUE;
         WHEN ('DISTRICT_CODE') THEN
            newrec_.district_code := value_;
            indrec_.district_code := TRUE;
         WHEN ('REGION_CODE') THEN
            newrec_.region_code := value_;
            indrec_.region_code := TRUE;
         WHEN ('DESIRED_QTY') THEN
            newrec_.desired_qty := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.desired_qty := TRUE;
         WHEN ('PURCHASE_PART_NO') THEN
            newrec_.purchase_part_no := value_;
            indrec_.purchase_part_no := TRUE;
         WHEN ('STAGED_BILLING') THEN
            newrec_.staged_billing := Staged_Billing_Type_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.staged_billing IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.staged_billing := TRUE;
         WHEN ('STAGED_BILLING_DB') THEN
            newrec_.staged_billing := value_;
            indrec_.staged_billing := TRUE;
         WHEN ('TAX_LIABILITY') THEN
            newrec_.tax_liability := value_;
            indrec_.tax_liability := TRUE;
         WHEN ('ORIGINAL_PART_NO') THEN
            newrec_.original_part_no := value_;
            indrec_.original_part_no := TRUE;
         WHEN ('EQUIPMENT_OBJECT_SEQ') THEN
            newrec_.equipment_object_seq := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.equipment_object_seq := TRUE;
         WHEN ('SUP_SM_CONTRACT') THEN
            newrec_.sup_sm_contract := value_;
            indrec_.sup_sm_contract := TRUE;
         WHEN ('SUP_SM_OBJECT') THEN
            newrec_.sup_sm_object := value_;
            indrec_.sup_sm_object := TRUE;
         WHEN ('SM_CONNECTION') THEN
            newrec_.sm_connection := Service_Management_Connect_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.sm_connection IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.sm_connection := TRUE;
         WHEN ('SM_CONNECTION_DB') THEN
            newrec_.sm_connection := value_;
            indrec_.sm_connection := TRUE;
         WHEN ('PART_PRICE') THEN
            newrec_.part_price := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.part_price := TRUE;
         WHEN ('CALC_CHAR_PRICE') THEN
            newrec_.calc_char_price := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.calc_char_price := TRUE;
         WHEN ('CHAR_PRICE') THEN
            newrec_.char_price := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.char_price := TRUE;
         WHEN ('PRICE_SOURCE') THEN
            newrec_.price_source := Pricing_Source_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.price_source IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.price_source := TRUE;
         WHEN ('PRICE_SOURCE_DB') THEN
            newrec_.price_source := value_;
            indrec_.price_source := TRUE;
         WHEN ('PRICE_FREEZE') THEN
            newrec_.price_freeze := Freeze_Flag_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.price_freeze IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.price_freeze := TRUE;
         WHEN ('PRICE_FREEZE_DB') THEN
            newrec_.price_freeze := value_;
            indrec_.price_freeze := TRUE;
         WHEN ('DOCK_CODE') THEN
            newrec_.dock_code := value_;
            indrec_.dock_code := TRUE;
         WHEN ('SUB_DOCK_CODE') THEN
            newrec_.sub_dock_code := value_;
            indrec_.sub_dock_code := TRUE;
         WHEN ('REF_ID') THEN
            newrec_.ref_id := value_;
            indrec_.ref_id := TRUE;
         WHEN ('LOCATION_NO') THEN
            newrec_.location_no := value_;
            indrec_.location_no := TRUE;
         WHEN ('CONFIGURATION_ID') THEN
            newrec_.configuration_id := value_;
            indrec_.configuration_id := TRUE;
         WHEN ('PRICE_EFFECTIVITY_DATE') THEN
            newrec_.price_effectivity_date := Client_SYS.Attr_Value_To_Date(value_);
            indrec_.price_effectivity_date := TRUE;
         WHEN ('CONFIGURED_LINE_PRICE_ID') THEN
            newrec_.configured_line_price_id := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.configured_line_price_id := TRUE;
         WHEN ('LATEST_RELEASE_DATE') THEN
            newrec_.latest_release_date := Client_SYS.Attr_Value_To_Date(value_);
            indrec_.latest_release_date := TRUE;
         WHEN ('CTP_PLANNED') THEN
            newrec_.ctp_planned := Gen_Yes_No_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.ctp_planned IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.ctp_planned := TRUE;
         WHEN ('CTP_PLANNED_DB') THEN
            newrec_.ctp_planned := value_;
            indrec_.ctp_planned := TRUE;
         WHEN ('JOB_ID') THEN
            newrec_.job_id := value_;
            indrec_.job_id := TRUE;
         WHEN ('CUST_WARRANTY_ID') THEN
            newrec_.cust_warranty_id := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.cust_warranty_id := TRUE;
         WHEN ('PRICE_SOURCE_ID') THEN
            newrec_.price_source_id := value_;
            indrec_.price_source_id := TRUE;
         WHEN ('INTRASTAT_EXEMPT') THEN
            newrec_.intrastat_exempt := Intrastat_Exempt_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.intrastat_exempt IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.intrastat_exempt := TRUE;
         WHEN ('INTRASTAT_EXEMPT_DB') THEN
            newrec_.intrastat_exempt := value_;
            indrec_.intrastat_exempt := TRUE;
         WHEN ('PRICE_UNIT_MEAS') THEN
            newrec_.price_unit_meas := value_;
            indrec_.price_unit_meas := TRUE;
         WHEN ('CONDITION_CODE') THEN
            newrec_.condition_code := value_;
            indrec_.condition_code := TRUE;
         WHEN ('ADDITIONAL_DISCOUNT') THEN
            newrec_.additional_discount := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.additional_discount := TRUE;
         WHEN ('PART_OWNERSHIP') THEN
            newrec_.part_ownership := Part_Ownership_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.part_ownership IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.part_ownership := TRUE;
         WHEN ('PART_OWNERSHIP_DB') THEN
            newrec_.part_ownership := value_;
            indrec_.part_ownership := TRUE;
         WHEN ('OWNING_CUSTOMER_NO') THEN
            newrec_.owning_customer_no := value_;
            indrec_.owning_customer_no := TRUE;
         WHEN ('EXCHANGE_ITEM') THEN
            newrec_.exchange_item := Exchange_Item_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.exchange_item IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.exchange_item := TRUE;
         WHEN ('EXCHANGE_ITEM_DB') THEN
            newrec_.exchange_item := value_;
            indrec_.exchange_item := TRUE;
         WHEN ('SUPPLY_SITE_RESERVE_TYPE') THEN
            newrec_.supply_site_reserve_type := Supply_Site_Reserve_Type_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.supply_site_reserve_type IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.supply_site_reserve_type := TRUE;
         WHEN ('SUPPLY_SITE_RESERVE_TYPE_DB') THEN
            newrec_.supply_site_reserve_type := value_;
            indrec_.supply_site_reserve_type := TRUE;
         WHEN ('ORIGINATING_REL_NO') THEN
            newrec_.originating_rel_no := value_;
            indrec_.originating_rel_no := TRUE;
         WHEN ('ORIGINATING_LINE_ITEM_NO') THEN
            newrec_.originating_line_item_no := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.originating_line_item_no := TRUE;
         WHEN ('RELEASE_PLANNING') THEN
            newrec_.release_planning := Release_Planning_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.release_planning IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.release_planning := TRUE;
         WHEN ('RELEASE_PLANNING_DB') THEN
            newrec_.release_planning := value_;
            indrec_.release_planning := TRUE;
         WHEN ('SUPPLIER_SHIP_VIA_TRANSIT') THEN
            newrec_.supplier_ship_via_transit := value_;
            indrec_.supplier_ship_via_transit := TRUE;
         WHEN ('SUPPLIER_SHIP_VIA_TRANSIT_DESC') THEN
            newrec_.supplier_ship_via_transit_desc := value_;
            indrec_.supplier_ship_via_transit_desc := TRUE;
         WHEN ('SUPPLY_SITE') THEN
            newrec_.supply_site := value_;
            indrec_.supply_site := TRUE;
         WHEN ('SHIPMENT_CONNECTED') THEN
            newrec_.shipment_connected := Fnd_Boolean_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.shipment_connected IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.shipment_connected := TRUE;
         WHEN ('SHIPMENT_CONNECTED_DB') THEN
            newrec_.shipment_connected := value_;
            indrec_.shipment_connected := TRUE;
         WHEN ('SELF_BILLING') THEN
            newrec_.self_billing := Self_Billing_Type_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.self_billing IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.self_billing := TRUE;
         WHEN ('SELF_BILLING_DB') THEN
            newrec_.self_billing := value_;
            indrec_.self_billing := TRUE;
         WHEN ('ACTIVITY_SEQ') THEN
            newrec_.activity_seq := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.activity_seq := TRUE;
         WHEN ('PROJECT_ID') THEN
            newrec_.project_id := value_;
            indrec_.project_id := TRUE;
         WHEN ('DELIVER_TO_CUSTOMER_NO') THEN
            newrec_.deliver_to_customer_no := value_;
            indrec_.deliver_to_customer_no := TRUE;
         WHEN ('CONTACT') THEN
            newrec_.contact := value_;
            indrec_.contact := TRUE;
         WHEN ('INPUT_QTY') THEN
            newrec_.input_qty := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.input_qty := TRUE;
         WHEN ('INPUT_UNIT_MEAS') THEN
            newrec_.input_unit_meas := value_;
            indrec_.input_unit_meas := TRUE;
         WHEN ('INPUT_CONV_FACTOR') THEN
            newrec_.input_conv_factor := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.input_conv_factor := TRUE;
         WHEN ('INPUT_VARIABLE_VALUES') THEN
            newrec_.input_variable_values := value_;
            indrec_.input_variable_values := TRUE;
         WHEN ('SHIPMENT_CREATION') THEN
            newrec_.shipment_creation := Shipment_Creation_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.shipment_creation IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.shipment_creation := TRUE;
         WHEN ('SHIPMENT_CREATION_DB') THEN
            newrec_.shipment_creation := value_;
            indrec_.shipment_creation := TRUE;
         WHEN ('MANUFACTURING_DEPARTMENT') THEN
            newrec_.manufacturing_department := value_;
            indrec_.manufacturing_department := TRUE;
         WHEN ('DELIVERY_SEQUENCE') THEN
            newrec_.delivery_sequence := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.delivery_sequence := TRUE;
         WHEN ('CANCEL_REASON') THEN
            newrec_.cancel_reason := value_;
            indrec_.cancel_reason := TRUE;
         WHEN ('DELIVERY_CONFIRMED') THEN
            newrec_.delivery_confirmed := Fnd_Boolean_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.delivery_confirmed IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.delivery_confirmed := TRUE;
         WHEN ('DELIVERY_CONFIRMED_DB') THEN
            newrec_.delivery_confirmed := value_;
            indrec_.delivery_confirmed := TRUE;
         WHEN ('CUSTOMER_PO_LINE_NO') THEN
            newrec_.customer_po_line_no := value_;
            indrec_.customer_po_line_no := TRUE;
         WHEN ('CUSTOMER_PO_REL_NO') THEN
            newrec_.customer_po_rel_no := value_;
            indrec_.customer_po_rel_no := TRUE;
         WHEN ('QTY_CONFIRMEDDIFF') THEN
            newrec_.qty_confirmeddiff := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.qty_confirmeddiff := TRUE;
         WHEN ('BLOCKED_FOR_INVOICING') THEN
            newrec_.blocked_for_invoicing := Fnd_Boolean_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.blocked_for_invoicing IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.blocked_for_invoicing := TRUE;
         WHEN ('BLOCKED_FOR_INVOICING_DB') THEN
            newrec_.blocked_for_invoicing := value_;
            indrec_.blocked_for_invoicing := TRUE;
         WHEN ('PROVISIONAL_PRICE') THEN
            newrec_.provisional_price := Fnd_Boolean_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.provisional_price IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.provisional_price := TRUE;
         WHEN ('PROVISIONAL_PRICE_DB') THEN
            newrec_.provisional_price := value_;
            indrec_.provisional_price := TRUE;
         WHEN ('RECEIVING_ADVICE_TYPE') THEN
            newrec_.receiving_advice_type := Receiving_Advice_Type_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.receiving_advice_type IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.receiving_advice_type := TRUE;
         WHEN ('RECEIVING_ADVICE_TYPE_DB') THEN
            newrec_.receiving_advice_type := value_;
            indrec_.receiving_advice_type := TRUE;
         WHEN ('FIRST_ACTUAL_SHIP_DATE') THEN
            newrec_.first_actual_ship_date := Client_SYS.Attr_Value_To_Date(value_);
            indrec_.first_actual_ship_date := TRUE;
         WHEN ('TAX_ID_NO') THEN
            newrec_.tax_id_no := value_;
            indrec_.tax_id_no := TRUE;
         WHEN ('TAX_ID_VALIDATED_DATE') THEN
            newrec_.tax_id_validated_date := Client_SYS.Attr_Value_To_Date(value_);
            indrec_.tax_id_validated_date := TRUE;
         WHEN ('PRICE_SOURCE_NET_PRICE') THEN
            newrec_.price_source_net_price := Fnd_Boolean_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.price_source_net_price IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.price_source_net_price := TRUE;
         WHEN ('PRICE_SOURCE_NET_PRICE_DB') THEN
            newrec_.price_source_net_price := value_;
            indrec_.price_source_net_price := TRUE;
         WHEN ('TARGET_DATE') THEN
            newrec_.target_date := Client_SYS.Attr_Value_To_Date(value_);
            indrec_.target_date := TRUE;
         WHEN ('ALLOCATION_ID') THEN
            newrec_.allocation_id := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.allocation_id := TRUE;
         WHEN ('DEL_TERMS_LOCATION') THEN
            newrec_.del_terms_location := value_;
            indrec_.del_terms_location := TRUE;
         WHEN ('CLASSIFICATION_PART_NO') THEN
            newrec_.classification_part_no := value_;
            indrec_.classification_part_no := TRUE;
         WHEN ('CLASSIFICATION_UNIT_MEAS') THEN
            newrec_.classification_unit_meas := value_;
            indrec_.classification_unit_meas := TRUE;
         WHEN ('CLASSIFICATION_STANDARD') THEN
            newrec_.classification_standard := value_;
            indrec_.classification_standard := TRUE;
         WHEN ('REBATE_BUILDER') THEN
            newrec_.rebate_builder := Fnd_Boolean_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.rebate_builder IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.rebate_builder := TRUE;
         WHEN ('REBATE_BUILDER_DB') THEN
            newrec_.rebate_builder := value_;
            indrec_.rebate_builder := TRUE;
         WHEN ('LINE_TOTAL_WEIGHT_GROSS') THEN
            newrec_.line_total_weight_gross := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.line_total_weight_gross := TRUE;
         WHEN ('FREIGHT_MAP_ID') THEN
            newrec_.freight_map_id := value_;
            indrec_.freight_map_id := TRUE;
         WHEN ('ZONE_ID') THEN
            newrec_.zone_id := value_;
            indrec_.zone_id := TRUE;
         WHEN ('FREIGHT_PRICE_LIST_NO') THEN
            newrec_.freight_price_list_no := value_;
            indrec_.freight_price_list_no := TRUE;
         WHEN ('ADJUSTED_WEIGHT_NET') THEN
            newrec_.adjusted_weight_net := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.adjusted_weight_net := TRUE;
         WHEN ('ADJUSTED_WEIGHT_GROSS') THEN
            newrec_.adjusted_weight_gross := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.adjusted_weight_gross := TRUE;
         WHEN ('ADJUSTED_VOLUME') THEN
            newrec_.adjusted_volume := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.adjusted_volume := TRUE;
         WHEN ('FREIGHT_FREE') THEN
            newrec_.freight_free := Fnd_Boolean_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.freight_free IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.freight_free := TRUE;
         WHEN ('FREIGHT_FREE_DB') THEN
            newrec_.freight_free := value_;
            indrec_.freight_free := TRUE;
         WHEN ('PART_LEVEL') THEN
            newrec_.part_level := Price_Discount_Part_Level_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.part_level IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.part_level := TRUE;
         WHEN ('PART_LEVEL_DB') THEN
            newrec_.part_level := value_;
            indrec_.part_level := TRUE;
         WHEN ('PART_LEVEL_ID') THEN
            newrec_.part_level_id := value_;
            indrec_.part_level_id := TRUE;
         WHEN ('CUSTOMER_LEVEL') THEN
            newrec_.customer_level := Price_Discount_Cust_Level_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.customer_level IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.customer_level := TRUE;
         WHEN ('CUSTOMER_LEVEL_DB') THEN
            newrec_.customer_level := value_;
            indrec_.customer_level := TRUE;
         WHEN ('CUSTOMER_LEVEL_ID') THEN
            newrec_.customer_level_id := value_;
            indrec_.customer_level_id := TRUE;
         WHEN ('LOAD_ID') THEN
            newrec_.load_id := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.load_id := TRUE;
         WHEN ('CUSTOMS_VALUE') THEN
            newrec_.customs_value := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.customs_value := TRUE;
         WHEN ('ABNORMAL_DEMAND') THEN
            newrec_.abnormal_demand := Fnd_Boolean_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.abnormal_demand IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.abnormal_demand := TRUE;
         WHEN ('ABNORMAL_DEMAND_DB') THEN
            newrec_.abnormal_demand := value_;
            indrec_.abnormal_demand := TRUE;
         WHEN ('CUST_CALENDAR_ID') THEN
            newrec_.cust_calendar_id := value_;
            indrec_.cust_calendar_id := TRUE;
         WHEN ('EXT_TRANSPORT_CALENDAR_ID') THEN
            newrec_.ext_transport_calendar_id := value_;
            indrec_.ext_transport_calendar_id := TRUE;
         WHEN ('REL_MTRL_PLANNING') THEN
            newrec_.rel_mtrl_planning := value_;
            indrec_.rel_mtrl_planning := TRUE;
         WHEN ('QTY_PER_ASSEMBLY') THEN
            newrec_.qty_per_assembly := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.qty_per_assembly := TRUE;
         WHEN ('NEW_COMP_AFTER_DELIVERY') THEN
            newrec_.new_comp_after_delivery := value_;
            indrec_.new_comp_after_delivery := TRUE;
         WHEN ('INVERTED_CONV_FACTOR') THEN
            newrec_.inverted_conv_factor := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.inverted_conv_factor := TRUE;
         WHEN ('RENTAL') THEN
            newrec_.rental := Fnd_Boolean_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.rental IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.rental := TRUE;
         WHEN ('RENTAL_DB') THEN
            newrec_.rental := value_;
            indrec_.rental := TRUE;
         WHEN ('END_CUSTOMER_ID') THEN
            newrec_.end_customer_id := value_;
            indrec_.end_customer_id := TRUE;
         WHEN ('PICKING_LEADTIME') THEN
            newrec_.picking_leadtime := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.picking_leadtime := TRUE;
         WHEN ('SHIPMENT_TYPE') THEN
            newrec_.shipment_type := value_;
            indrec_.shipment_type := TRUE;
         WHEN ('OPEN_SHIPMENT_QTY') THEN
            newrec_.open_shipment_qty := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.open_shipment_qty := TRUE;
         WHEN ('PACKING_INSTRUCTION_ID') THEN
            newrec_.packing_instruction_id := value_;
            indrec_.packing_instruction_id := TRUE;
         WHEN ('ORIGINATING_CO_LANG_CODE') THEN
            newrec_.originating_co_lang_code := value_;
            indrec_.originating_co_lang_code := TRUE;
         WHEN ('CUST_PART_INVERT_CONV_FACT') THEN
            newrec_.cust_part_invert_conv_fact := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.cust_part_invert_conv_fact := TRUE;
         WHEN ('COUNTRY_CODE') THEN
            newrec_.country_code := value_;
            indrec_.country_code := TRUE;
         WHEN ('TAX_LIABILITY_TYPE') THEN
            newrec_.tax_liability_type := Tax_Liability_Type_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.tax_liability_type IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.tax_liability_type := TRUE;
         WHEN ('TAX_LIABILITY_TYPE_DB') THEN
            newrec_.tax_liability_type := value_;
            indrec_.tax_liability_type := TRUE;
         WHEN ('FREE_OF_CHARGE') THEN
            newrec_.free_of_charge := Fnd_Boolean_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.free_of_charge IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.free_of_charge := TRUE;
         WHEN ('FREE_OF_CHARGE_DB') THEN
            newrec_.free_of_charge := value_;
            indrec_.free_of_charge := TRUE;
         WHEN ('FREE_OF_CHARGE_TAX_BASIS') THEN
            newrec_.free_of_charge_tax_basis := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.free_of_charge_tax_basis := TRUE;
         WHEN ('TAX_CALC_STRUCTURE_ID') THEN
            newrec_.tax_calc_structure_id := value_;
            indrec_.tax_calc_structure_id := TRUE;
         WHEN ('CUSTOMER_TAX_USAGE_TYPE') THEN
            newrec_.customer_tax_usage_type := value_;
            indrec_.customer_tax_usage_type := TRUE;
         WHEN ('SUPPLY_SITE_PART_NO') THEN
            newrec_.supply_site_part_no := value_;
            indrec_.supply_site_part_no := TRUE;
         WHEN ('ACQUISITION_ORIGIN') THEN
            newrec_.acquisition_origin := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.acquisition_origin := TRUE;
         WHEN ('STATISTICAL_CODE') THEN
            newrec_.statistical_code := value_;
            indrec_.statistical_code := TRUE;
         WHEN ('ORIGINAL_DISCOUNT') THEN
            newrec_.original_discount := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.original_discount := TRUE;
         WHEN ('ORIGINAL_ADD_DISCOUNT') THEN
            newrec_.original_add_discount := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.original_add_discount := TRUE;
         WHEN ('ORIGINAL_ORDER_DISCOUNT') THEN
            newrec_.original_order_discount := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.original_order_discount := TRUE;
         WHEN ('ACQUISITION_REASON_ID') THEN
            newrec_.acquisition_reason_id := value_;
            indrec_.acquisition_reason_id := TRUE;
         ELSE
            Client_SYS.Add_To_Attr(name_, value_, msg_);
         END CASE;
      END LOOP;
      attr_ := msg_;
   EXCEPTION
      WHEN value_error THEN
         Raise_Item_Format___(name_, value_);
   END Base;

   PROCEDURE Core (
      newrec_   IN OUT NOCOPY customer_order_line_tab%ROWTYPE,
      indrec_   IN OUT NOCOPY Indicator_Rec,
      attr_     IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      IF (newrec_.rowstate IS NULL) THEN
         Pre_Unpack_Insert___(attr_, newrec_);
      ELSE
         Pre_Unpack_Update___(attr_, newrec_);
      END IF;
      --Add pre-processing code here
      Base(newrec_, indrec_, attr_);
      --Add post-processing code here
   END Core;

BEGIN
   Core(newrec_, indrec_, attr_);
END Unpack___;


PROCEDURE Check_Catalog_No_Ref___ (
   newrec_ IN OUT NOCOPY customer_order_line_tab%ROWTYPE )
IS
   usage_   VARCHAR2(20);
BEGIN
   IF (newrec_.rental = Fnd_Boolean_API.DB_TRUE) THEN
      usage_ := Sales_Type_API.DB_RENTAL_ONLY;
   ELSE
      usage_ := Sales_Type_API.DB_SALES_ONLY;
   END IF;
   Sales_Part_API.Exist(newrec_.contract, newrec_.catalog_no, usage_);
END Check_Catalog_No_Ref___;


PROCEDURE Check_Ship_Addr_No_Ref___ (
   newrec_ IN OUT NOCOPY customer_order_line_tab%ROWTYPE )
IS
BEGIN
   IF (newrec_.ship_addr_no IS NOT NULL) THEN
      IF (newrec_.demand_code = 'IPD' AND newrec_.addr_flag = 'N') THEN
         Cust_Ord_Customer_Address_API.Exist(newrec_.deliver_to_customer_no, newrec_.ship_addr_no);
      END IF;
   END IF;
END Check_Ship_Addr_No_Ref___;


PROCEDURE Check_Configuration_Id_Ref___ (
   newrec_ IN OUT NOCOPY customer_order_line_tab%ROWTYPE )
IS
BEGIN
   $IF (Component_Cfgchr_SYS.INSTALLED) $THEN
      IF (newrec_.configuration_id != '*')THEN
         Configuration_Spec_API.Exist(NVL(newrec_.part_no, newrec_.catalog_no), newrec_.configuration_id);
      END IF;
   $ELSE
      NULL;            
   $END
END Check_Configuration_Id_Ref___;


PROCEDURE Check_Cust_Warranty_Id_Ref___ (
   newrec_ IN OUT NOCOPY customer_order_line_tab%ROWTYPE )
IS
BEGIN
   IF ((newrec_.rowstate IS NULL) AND (NVL(newrec_.demand_code, ' ') != 'CQ')) THEN
      Error_SYS.Item_Insert(lu_name_, 'CUST_WARRANTY_ID');
   END IF;
   IF (newrec_.cust_warranty_id IS NOT NULL) THEN
      Cust_Warranty_API.Exist(newrec_.cust_warranty_id);
   END IF;
END Check_Cust_Warranty_Id_Ref___;


PROCEDURE Check_Tax_Calc_Struct_Ref___ (
   newrec_ IN OUT NOCOPY customer_order_line_tab%ROWTYPE )
IS
   company_    VARCHAR2(20);
BEGIN
   company_ := Site_API.Get_Company(newrec_.contract);
   Tax_Calc_Structure_API.Validate_Tax_Structure_State(company_, newrec_.tax_calc_structure_id);
END Check_Tax_Calc_Struct_Ref___;


PROCEDURE Check_Common___ (
   oldrec_ IN     customer_order_line_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY customer_order_line_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      oldrec_ IN     customer_order_line_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY customer_order_line_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      IF (newrec_.original_part_no IS NOT NULL
          AND indrec_.original_part_no
          AND Validate_SYS.Is_Changed(oldrec_.original_part_no, newrec_.original_part_no)) THEN
         Error_SYS.Check_Upper(lu_name_, 'ORIGINAL_PART_NO', newrec_.original_part_no);
      END IF;
      IF (newrec_.sup_sm_contract IS NOT NULL
          AND indrec_.sup_sm_contract
          AND Validate_SYS.Is_Changed(oldrec_.sup_sm_contract, newrec_.sup_sm_contract)) THEN
         Error_SYS.Check_Upper(lu_name_, 'SUP_SM_CONTRACT', newrec_.sup_sm_contract);
      END IF;
      IF (newrec_.sup_sm_object IS NOT NULL
          AND indrec_.sup_sm_object
          AND Validate_SYS.Is_Changed(oldrec_.sup_sm_object, newrec_.sup_sm_object)) THEN
         Error_SYS.Check_Upper(lu_name_, 'SUP_SM_OBJECT', newrec_.sup_sm_object);
      END IF;
      IF (newrec_.supply_site IS NOT NULL
          AND indrec_.supply_site
          AND Validate_SYS.Is_Changed(oldrec_.supply_site, newrec_.supply_site)) THEN
         Error_SYS.Check_Upper(lu_name_, 'SUPPLY_SITE', newrec_.supply_site);
      END IF;
      IF (newrec_.project_id IS NOT NULL
          AND indrec_.project_id
          AND Validate_SYS.Is_Changed(oldrec_.project_id, newrec_.project_id)) THEN
         Error_SYS.Check_Upper(lu_name_, 'PROJECT_ID', newrec_.project_id);
      END IF;
      IF (newrec_.tax_id_no IS NOT NULL
          AND indrec_.tax_id_no
          AND Validate_SYS.Is_Changed(oldrec_.tax_id_no, newrec_.tax_id_no)) THEN
         Error_SYS.Check_Upper(lu_name_, 'TAX_ID_NO', newrec_.tax_id_no);
      END IF;
      IF (newrec_.end_customer_id IS NOT NULL
          AND indrec_.end_customer_id
          AND Validate_SYS.Is_Changed(oldrec_.end_customer_id, newrec_.end_customer_id)) THEN
         Error_SYS.Check_Upper(lu_name_, 'END_CUSTOMER_ID', newrec_.end_customer_id);
      END IF;
      IF (newrec_.supply_site_part_no IS NOT NULL
          AND indrec_.supply_site_part_no
          AND Validate_SYS.Is_Changed(oldrec_.supply_site_part_no, newrec_.supply_site_part_no)) THEN
         Error_SYS.Check_Upper(lu_name_, 'SUPPLY_SITE_PART_NO', newrec_.supply_site_part_no);
      END IF;
      IF (newrec_.catalog_type IS NOT NULL)
      AND (indrec_.catalog_type)
      AND (Validate_SYS.Is_Changed(oldrec_.catalog_type, newrec_.catalog_type)) THEN
         Sales_Part_Type_API.Exist_Db(newrec_.catalog_type);
      END IF;
      IF (newrec_.supply_code IS NOT NULL)
      AND (indrec_.supply_code)
      AND (Validate_SYS.Is_Changed(oldrec_.supply_code, newrec_.supply_code)) THEN
         Order_Supply_Type_API.Exist_Db(newrec_.supply_code);
      END IF;
      IF (newrec_.consignment_stock IS NOT NULL)
      AND (indrec_.consignment_stock)
      AND (Validate_SYS.Is_Changed(oldrec_.consignment_stock, newrec_.consignment_stock)) THEN
         Consignment_Stock_API.Exist_Db(newrec_.consignment_stock);
      END IF;
      IF (newrec_.charged_item IS NOT NULL)
      AND (indrec_.charged_item)
      AND (Validate_SYS.Is_Changed(oldrec_.charged_item, newrec_.charged_item)) THEN
         Charged_Item_API.Exist_Db(newrec_.charged_item);
      END IF;
      IF (newrec_.demand_code IS NOT NULL)
      AND (indrec_.demand_code)
      AND (Validate_SYS.Is_Changed(oldrec_.demand_code, newrec_.demand_code)) THEN
         Order_Supply_Type_API.Exist_Db(newrec_.demand_code);
      END IF;
      IF (newrec_.dop_connection IS NOT NULL)
      AND (indrec_.dop_connection)
      AND (Validate_SYS.Is_Changed(oldrec_.dop_connection, newrec_.dop_connection)) THEN
         Dop_Connection_API.Exist_Db(newrec_.dop_connection);
      END IF;
      IF (newrec_.create_sm_object_option IS NOT NULL)
      AND (indrec_.create_sm_object_option)
      AND (Validate_SYS.Is_Changed(oldrec_.create_sm_object_option, newrec_.create_sm_object_option)) THEN
         Create_Sm_Object_Option_API.Exist_Db(newrec_.create_sm_object_option);
      END IF;
      IF (newrec_.default_addr_flag IS NOT NULL)
      AND (indrec_.default_addr_flag)
      AND (Validate_SYS.Is_Changed(oldrec_.default_addr_flag, newrec_.default_addr_flag)) THEN
         Gen_Yes_No_API.Exist_Db(newrec_.default_addr_flag);
      END IF;
      IF (newrec_.addr_flag IS NOT NULL)
      AND (indrec_.addr_flag)
      AND (Validate_SYS.Is_Changed(oldrec_.addr_flag, newrec_.addr_flag)) THEN
         Gen_Yes_No_API.Exist_Db(newrec_.addr_flag);
      END IF;
      IF (newrec_.staged_billing IS NOT NULL)
      AND (indrec_.staged_billing)
      AND (Validate_SYS.Is_Changed(oldrec_.staged_billing, newrec_.staged_billing)) THEN
         Staged_Billing_Type_API.Exist_Db(newrec_.staged_billing);
      END IF;
      IF (newrec_.sm_connection IS NOT NULL)
      AND (indrec_.sm_connection)
      AND (Validate_SYS.Is_Changed(oldrec_.sm_connection, newrec_.sm_connection)) THEN
         Service_Management_Connect_API.Exist_Db(newrec_.sm_connection);
      END IF;
      IF (newrec_.price_source IS NOT NULL)
      AND (indrec_.price_source)
      AND (Validate_SYS.Is_Changed(oldrec_.price_source, newrec_.price_source)) THEN
         Pricing_Source_API.Exist_Db(newrec_.price_source);
      END IF;
      IF (newrec_.price_freeze IS NOT NULL)
      AND (indrec_.price_freeze)
      AND (Validate_SYS.Is_Changed(oldrec_.price_freeze, newrec_.price_freeze)) THEN
         Freeze_Flag_API.Exist_Db(newrec_.price_freeze);
      END IF;
      IF (newrec_.ctp_planned IS NOT NULL)
      AND (indrec_.ctp_planned)
      AND (Validate_SYS.Is_Changed(oldrec_.ctp_planned, newrec_.ctp_planned)) THEN
         Gen_Yes_No_API.Exist_Db(newrec_.ctp_planned);
      END IF;
      IF (newrec_.intrastat_exempt IS NOT NULL)
      AND (indrec_.intrastat_exempt)
      AND (Validate_SYS.Is_Changed(oldrec_.intrastat_exempt, newrec_.intrastat_exempt)) THEN
         Intrastat_Exempt_API.Exist_Db(newrec_.intrastat_exempt);
      END IF;
      IF (newrec_.part_ownership IS NOT NULL)
      AND (indrec_.part_ownership)
      AND (Validate_SYS.Is_Changed(oldrec_.part_ownership, newrec_.part_ownership)) THEN
         Part_Ownership_API.Exist_Db(newrec_.part_ownership);
      END IF;
      IF (newrec_.exchange_item IS NOT NULL)
      AND (indrec_.exchange_item)
      AND (Validate_SYS.Is_Changed(oldrec_.exchange_item, newrec_.exchange_item)) THEN
         Exchange_Item_API.Exist_Db(newrec_.exchange_item);
      END IF;
      IF (newrec_.supply_site_reserve_type IS NOT NULL)
      AND (indrec_.supply_site_reserve_type)
      AND (Validate_SYS.Is_Changed(oldrec_.supply_site_reserve_type, newrec_.supply_site_reserve_type)) THEN
         Supply_Site_Reserve_Type_API.Exist_Db(newrec_.supply_site_reserve_type);
      END IF;
      IF (newrec_.release_planning IS NOT NULL)
      AND (indrec_.release_planning)
      AND (Validate_SYS.Is_Changed(oldrec_.release_planning, newrec_.release_planning)) THEN
         Release_Planning_API.Exist_Db(newrec_.release_planning);
      END IF;
      IF (newrec_.shipment_connected IS NOT NULL)
      AND (indrec_.shipment_connected)
      AND (Validate_SYS.Is_Changed(oldrec_.shipment_connected, newrec_.shipment_connected)) THEN
         Fnd_Boolean_API.Exist_Db(newrec_.shipment_connected);
      END IF;
      IF (newrec_.self_billing IS NOT NULL)
      AND (indrec_.self_billing)
      AND (Validate_SYS.Is_Changed(oldrec_.self_billing, newrec_.self_billing)) THEN
         Self_Billing_Type_API.Exist_Db(newrec_.self_billing);
      END IF;
      IF (newrec_.shipment_creation IS NOT NULL)
      AND (indrec_.shipment_creation)
      AND (Validate_SYS.Is_Changed(oldrec_.shipment_creation, newrec_.shipment_creation)) THEN
         Shipment_Creation_API.Exist_Customer_Order_Db(newrec_.shipment_creation);
      END IF;
      IF (newrec_.delivery_confirmed IS NOT NULL)
      AND (indrec_.delivery_confirmed)
      AND (Validate_SYS.Is_Changed(oldrec_.delivery_confirmed, newrec_.delivery_confirmed)) THEN
         Fnd_Boolean_API.Exist_Db(newrec_.delivery_confirmed);
      END IF;
      IF (newrec_.blocked_for_invoicing IS NOT NULL)
      AND (indrec_.blocked_for_invoicing)
      AND (Validate_SYS.Is_Changed(oldrec_.blocked_for_invoicing, newrec_.blocked_for_invoicing)) THEN
         Fnd_Boolean_API.Exist_Db(newrec_.blocked_for_invoicing);
      END IF;
      IF (newrec_.provisional_price IS NOT NULL)
      AND (indrec_.provisional_price)
      AND (Validate_SYS.Is_Changed(oldrec_.provisional_price, newrec_.provisional_price)) THEN
         Fnd_Boolean_API.Exist_Db(newrec_.provisional_price);
      END IF;
      IF (newrec_.receiving_advice_type IS NOT NULL)
      AND (indrec_.receiving_advice_type)
      AND (Validate_SYS.Is_Changed(oldrec_.receiving_advice_type, newrec_.receiving_advice_type)) THEN
         Receiving_Advice_Type_API.Exist_Db(newrec_.receiving_advice_type);
      END IF;
      IF (newrec_.price_source_net_price IS NOT NULL)
      AND (indrec_.price_source_net_price)
      AND (Validate_SYS.Is_Changed(oldrec_.price_source_net_price, newrec_.price_source_net_price)) THEN
         Fnd_Boolean_API.Exist_Db(newrec_.price_source_net_price);
      END IF;
      IF (newrec_.rebate_builder IS NOT NULL)
      AND (indrec_.rebate_builder)
      AND (Validate_SYS.Is_Changed(oldrec_.rebate_builder, newrec_.rebate_builder)) THEN
         Fnd_Boolean_API.Exist_Db(newrec_.rebate_builder);
      END IF;
      IF (newrec_.freight_free IS NOT NULL)
      AND (indrec_.freight_free)
      AND (Validate_SYS.Is_Changed(oldrec_.freight_free, newrec_.freight_free)) THEN
         Fnd_Boolean_API.Exist_Db(newrec_.freight_free);
      END IF;
      IF (newrec_.part_level IS NOT NULL)
      AND (indrec_.part_level)
      AND (Validate_SYS.Is_Changed(oldrec_.part_level, newrec_.part_level)) THEN
         Price_Discount_Part_Level_API.Exist_Db(newrec_.part_level);
      END IF;
      IF (newrec_.customer_level IS NOT NULL)
      AND (indrec_.customer_level)
      AND (Validate_SYS.Is_Changed(oldrec_.customer_level, newrec_.customer_level)) THEN
         Price_Discount_Cust_Level_API.Exist_Db(newrec_.customer_level);
      END IF;
      IF (newrec_.abnormal_demand IS NOT NULL)
      AND (indrec_.abnormal_demand)
      AND (Validate_SYS.Is_Changed(oldrec_.abnormal_demand, newrec_.abnormal_demand)) THEN
         Fnd_Boolean_API.Exist_Db(newrec_.abnormal_demand);
      END IF;
      IF (newrec_.rental IS NOT NULL)
      AND (indrec_.rental)
      AND (Validate_SYS.Is_Changed(oldrec_.rental, newrec_.rental)) THEN
         Fnd_Boolean_API.Exist_Db(newrec_.rental);
      END IF;
      IF (newrec_.tax_liability_type IS NOT NULL)
      AND (indrec_.tax_liability_type)
      AND (Validate_SYS.Is_Changed(oldrec_.tax_liability_type, newrec_.tax_liability_type)) THEN
         Tax_Liability_Type_API.Exist_Db(newrec_.tax_liability_type);
      END IF;
      IF (newrec_.free_of_charge IS NOT NULL)
      AND (indrec_.free_of_charge)
      AND (Validate_SYS.Is_Changed(oldrec_.free_of_charge, newrec_.free_of_charge)) THEN
         Fnd_Boolean_API.Exist_Db(newrec_.free_of_charge);
      END IF;
      IF (newrec_.order_no IS NOT NULL)
      AND (indrec_.order_no)
      AND (Validate_SYS.Is_Changed(oldrec_.order_no, newrec_.order_no)) THEN
         Customer_Order_API.Exist(newrec_.order_no);
      END IF;
      IF (newrec_.contract IS NOT NULL)
      AND (indrec_.contract)
      AND (Validate_SYS.Is_Changed(oldrec_.contract, newrec_.contract)) THEN
         Site_API.Exist(newrec_.contract);
      END IF;
      IF (newrec_.contract IS NOT NULL AND newrec_.catalog_no IS NOT NULL)
      AND (indrec_.contract OR indrec_.catalog_no)
      AND (Validate_SYS.Is_Changed(oldrec_.contract, newrec_.contract)
        OR Validate_SYS.Is_Changed(oldrec_.catalog_no, newrec_.catalog_no)) THEN
         Check_Catalog_No_Ref___(newrec_);
      END IF;
      IF (newrec_.order_code IS NOT NULL)
      AND (indrec_.order_code)
      AND (Validate_SYS.Is_Changed(oldrec_.order_code, newrec_.order_code)) THEN
         Customer_Order_Code_API.Exist(newrec_.order_code);
      END IF;
      IF (newrec_.contract IS NOT NULL AND newrec_.part_no IS NOT NULL)
      AND (indrec_.contract OR indrec_.part_no)
      AND (Validate_SYS.Is_Changed(oldrec_.contract, newrec_.contract)
        OR Validate_SYS.Is_Changed(oldrec_.part_no, newrec_.part_no)) THEN
         Inventory_Part_API.Exist(newrec_.contract, newrec_.part_no);
      END IF;
      IF (newrec_.sales_unit_meas IS NOT NULL)
      AND (indrec_.sales_unit_meas)
      AND (Validate_SYS.Is_Changed(oldrec_.sales_unit_meas, newrec_.sales_unit_meas)) THEN
         Iso_Unit_API.Exist(newrec_.sales_unit_meas);
      END IF;
      IF (Site_API.Get_Company(newrec_.contract) IS NOT NULL AND newrec_.delivery_type IS NOT NULL)
      AND (indrec_.contract OR indrec_.delivery_type)
      AND (Validate_SYS.Is_Changed(Site_API.Get_Company(oldrec_.contract), Site_API.Get_Company(newrec_.contract))
        OR Validate_SYS.Is_Changed(oldrec_.delivery_type, newrec_.delivery_type)) THEN
         Delivery_Type_API.Exist(Site_API.Get_Company(newrec_.contract), newrec_.delivery_type);
      END IF;
      IF (Site_API.Get_Company(newrec_.contract) IS NOT NULL AND newrec_.tax_code IS NOT NULL)
      AND (indrec_.contract OR indrec_.tax_code)
      AND (Validate_SYS.Is_Changed(Site_API.Get_Company(oldrec_.contract), Site_API.Get_Company(newrec_.contract))
        OR Validate_SYS.Is_Changed(oldrec_.tax_code, newrec_.tax_code)) THEN
         Statutory_Fee_API.Exist(Site_API.Get_Company(newrec_.contract), newrec_.tax_code);
      END IF;
      IF (Site_API.Get_Company(newrec_.contract) IS NOT NULL AND newrec_.tax_class_id IS NOT NULL)
      AND (indrec_.contract OR indrec_.tax_class_id)
      AND (Validate_SYS.Is_Changed(Site_API.Get_Company(oldrec_.contract), Site_API.Get_Company(newrec_.contract))
        OR Validate_SYS.Is_Changed(oldrec_.tax_class_id, newrec_.tax_class_id)) THEN
         Tax_Class_API.Exist(Site_API.Get_Company(newrec_.contract), newrec_.tax_class_id);
      END IF;
      IF (newrec_.planned_ship_period IS NOT NULL)
      AND (indrec_.planned_ship_period)
      AND (Validate_SYS.Is_Changed(oldrec_.planned_ship_period, newrec_.planned_ship_period)) THEN
         Work_Time_Period_API.Exist(newrec_.planned_ship_period);
      END IF;
      IF (newrec_.customer_no IS NOT NULL)
      AND (indrec_.customer_no)
      AND (Validate_SYS.Is_Changed(oldrec_.customer_no, newrec_.customer_no)) THEN
         Cust_Ord_Customer_API.Exist(newrec_.customer_no);
      END IF;
      IF (newrec_.price_list_no IS NOT NULL)
      AND (indrec_.price_list_no)
      AND (Validate_SYS.Is_Changed(oldrec_.price_list_no, newrec_.price_list_no)) THEN
         Sales_Price_List_API.Exist(newrec_.price_list_no);
      END IF;
      IF (newrec_.deliver_to_customer_no IS NOT NULL AND newrec_.ship_addr_no IS NOT NULL)
      AND (indrec_.deliver_to_customer_no OR indrec_.ship_addr_no)
      AND (Validate_SYS.Is_Changed(oldrec_.deliver_to_customer_no, newrec_.deliver_to_customer_no)
        OR Validate_SYS.Is_Changed(oldrec_.ship_addr_no, newrec_.ship_addr_no)) THEN
         Check_Ship_Addr_No_Ref___(newrec_);
      END IF;
      IF (newrec_.route_id IS NOT NULL)
      AND (indrec_.route_id)
      AND (Validate_SYS.Is_Changed(oldrec_.route_id, newrec_.route_id)) THEN
         Delivery_Route_API.Exist(newrec_.route_id);
      END IF;
      IF (newrec_.forward_agent_id IS NOT NULL)
      AND (indrec_.forward_agent_id)
      AND (Validate_SYS.Is_Changed(oldrec_.forward_agent_id, newrec_.forward_agent_id)) THEN
         Forwarder_Info_API.Exist(newrec_.forward_agent_id);
      END IF;
      IF (newrec_.ship_via_code IS NOT NULL)
      AND (indrec_.ship_via_code)
      AND (Validate_SYS.Is_Changed(oldrec_.ship_via_code, newrec_.ship_via_code)) THEN
         Mpccom_Ship_Via_API.Exist(newrec_.ship_via_code);
      END IF;
      IF (newrec_.delivery_terms IS NOT NULL)
      AND (indrec_.delivery_terms)
      AND (Validate_SYS.Is_Changed(oldrec_.delivery_terms, newrec_.delivery_terms)) THEN
         Order_Delivery_Term_API.Exist(newrec_.delivery_terms);
      END IF;
      IF (newrec_.district_code IS NOT NULL)
      AND (indrec_.district_code)
      AND (Validate_SYS.Is_Changed(oldrec_.district_code, newrec_.district_code)) THEN
         Sales_District_API.Exist(newrec_.district_code);
      END IF;
      IF (newrec_.region_code IS NOT NULL)
      AND (indrec_.region_code)
      AND (Validate_SYS.Is_Changed(oldrec_.region_code, newrec_.region_code)) THEN
         Sales_Region_API.Exist(newrec_.region_code);
      END IF;
   $IF Component_EQUIP_SYS.INSTALLED $THEN
      IF (newrec_.equipment_object_seq IS NOT NULL)
      AND (indrec_.equipment_object_seq)
      AND (Validate_SYS.Is_Changed(oldrec_.equipment_object_seq, newrec_.equipment_object_seq)) THEN
         Equipment_Object_API.Exist(newrec_.equipment_object_seq);
      END IF;
   $END
   $IF Component_CFGCHR_SYS.INSTALLED $THEN
      IF (newrec_.part_no IS NOT NULL AND newrec_.configuration_id IS NOT NULL)
      AND (indrec_.part_no OR indrec_.configuration_id)
      AND (Validate_SYS.Is_Changed(oldrec_.part_no, newrec_.part_no)
        OR Validate_SYS.Is_Changed(oldrec_.configuration_id, newrec_.configuration_id)) THEN
         Check_Configuration_Id_Ref___(newrec_);
      END IF;
   $END
      IF (newrec_.configured_line_price_id IS NOT NULL)
      AND (indrec_.configured_line_price_id)
      AND (Validate_SYS.Is_Changed(oldrec_.configured_line_price_id, newrec_.configured_line_price_id)) THEN
         Configured_Line_Price_API.Exist(newrec_.configured_line_price_id);
      END IF;
   $IF Component_GENLED_SYS.INSTALLED $THEN
      IF (Site_API.Get_Company(newrec_.contract) IS NOT NULL AND newrec_.job_id IS NOT NULL)
      AND (indrec_.contract OR indrec_.job_id)
      AND (Validate_SYS.Is_Changed(Site_API.Get_Company(oldrec_.contract), Site_API.Get_Company(newrec_.contract))
        OR Validate_SYS.Is_Changed(oldrec_.job_id, newrec_.job_id)) THEN
         Accounting_Project_API.Exist(Site_API.Get_Company(newrec_.contract), newrec_.job_id);
      END IF;
   $END
      IF (newrec_.cust_warranty_id IS NOT NULL)
      AND (indrec_.cust_warranty_id)
      AND (Validate_SYS.Is_Changed(oldrec_.cust_warranty_id, newrec_.cust_warranty_id)) THEN
         Check_Cust_Warranty_Id_Ref___(newrec_);
      END IF;
      IF (newrec_.price_unit_meas IS NOT NULL)
      AND (indrec_.price_unit_meas)
      AND (Validate_SYS.Is_Changed(oldrec_.price_unit_meas, newrec_.price_unit_meas)) THEN
         Iso_Unit_API.Exist(newrec_.price_unit_meas);
      END IF;
      IF (newrec_.owning_customer_no IS NOT NULL)
      AND (indrec_.owning_customer_no)
      AND (Validate_SYS.Is_Changed(oldrec_.owning_customer_no, newrec_.owning_customer_no)) THEN
         Cust_Ord_Customer_API.Exist(newrec_.owning_customer_no);
      END IF;
      IF (newrec_.supplier_ship_via_transit IS NOT NULL)
      AND (indrec_.supplier_ship_via_transit)
      AND (Validate_SYS.Is_Changed(oldrec_.supplier_ship_via_transit, newrec_.supplier_ship_via_transit)) THEN
         Mpccom_Ship_Via_API.Exist(newrec_.supplier_ship_via_transit);
      END IF;
   $IF Component_PROJ_SYS.INSTALLED $THEN
      IF (newrec_.activity_seq IS NOT NULL)
      AND (indrec_.activity_seq)
      AND (Validate_SYS.Is_Changed(oldrec_.activity_seq, newrec_.activity_seq)) THEN
         Activity_API.Exist(newrec_.activity_seq);
      END IF;
   $END
      IF (newrec_.deliver_to_customer_no IS NOT NULL)
      AND (indrec_.deliver_to_customer_no)
      AND (Validate_SYS.Is_Changed(oldrec_.deliver_to_customer_no, newrec_.deliver_to_customer_no)) THEN
         Cust_Ord_Customer_API.Exist(newrec_.deliver_to_customer_no);
      END IF;
      IF (newrec_.cancel_reason IS NOT NULL)
      AND (indrec_.cancel_reason)
      AND (Validate_SYS.Is_Changed(oldrec_.cancel_reason, newrec_.cancel_reason)) THEN
         Check_Cancel_Reason_Ref___(newrec_);
      END IF;
      IF (newrec_.allocation_id IS NOT NULL)
      AND (indrec_.allocation_id)
      AND (Validate_SYS.Is_Changed(oldrec_.allocation_id, newrec_.allocation_id)) THEN
         Period_Allocation_Rule_API.Exist(newrec_.allocation_id);
      END IF;
      IF (newrec_.classification_standard IS NOT NULL)
      AND (indrec_.classification_standard)
      AND (Validate_SYS.Is_Changed(oldrec_.classification_standard, newrec_.classification_standard)) THEN
         Classification_Standard_API.Exist(newrec_.classification_standard);
      END IF;
      IF (newrec_.freight_map_id IS NOT NULL)
      AND (indrec_.freight_map_id)
      AND (Validate_SYS.Is_Changed(oldrec_.freight_map_id, newrec_.freight_map_id)) THEN
         Freight_Map_API.Exist(newrec_.freight_map_id);
      END IF;
      IF (newrec_.freight_map_id IS NOT NULL AND newrec_.zone_id IS NOT NULL)
      AND (indrec_.freight_map_id OR indrec_.zone_id)
      AND (Validate_SYS.Is_Changed(oldrec_.freight_map_id, newrec_.freight_map_id)
        OR Validate_SYS.Is_Changed(oldrec_.zone_id, newrec_.zone_id)) THEN
         Freight_Zone_API.Exist(newrec_.freight_map_id, newrec_.zone_id);
      END IF;
      IF (newrec_.freight_price_list_no IS NOT NULL)
      AND (indrec_.freight_price_list_no)
      AND (Validate_SYS.Is_Changed(oldrec_.freight_price_list_no, newrec_.freight_price_list_no)) THEN
         Freight_Price_List_Base_API.Exist(newrec_.freight_price_list_no);
      END IF;
      IF (newrec_.cust_calendar_id IS NOT NULL)
      AND (indrec_.cust_calendar_id)
      AND (Validate_SYS.Is_Changed(oldrec_.cust_calendar_id, newrec_.cust_calendar_id)) THEN
         Work_Time_Calendar_API.Exist(newrec_.cust_calendar_id);
      END IF;
      IF (newrec_.ext_transport_calendar_id IS NOT NULL)
      AND (indrec_.ext_transport_calendar_id)
      AND (Validate_SYS.Is_Changed(oldrec_.ext_transport_calendar_id, newrec_.ext_transport_calendar_id)) THEN
         Work_Time_Calendar_API.Exist(newrec_.ext_transport_calendar_id);
      END IF;
      IF (newrec_.shipment_type IS NOT NULL)
      AND (indrec_.shipment_type)
      AND (Validate_SYS.Is_Changed(oldrec_.shipment_type, newrec_.shipment_type)) THEN
         Shipment_Type_API.Exist(newrec_.shipment_type);
      END IF;
      IF (newrec_.packing_instruction_id IS NOT NULL)
      AND (indrec_.packing_instruction_id)
      AND (Validate_SYS.Is_Changed(oldrec_.packing_instruction_id, newrec_.packing_instruction_id)) THEN
         Packing_Instruction_API.Exist(newrec_.packing_instruction_id);
      END IF;
      IF (newrec_.country_code IS NOT NULL)
      AND (indrec_.country_code)
      AND (Validate_SYS.Is_Changed(oldrec_.country_code, newrec_.country_code)) THEN
         Iso_Country_API.Exist(newrec_.country_code);
      END IF;
      IF (Site_API.Get_Company(newrec_.contract) IS NOT NULL AND newrec_.tax_calc_structure_id IS NOT NULL)
      AND (indrec_.contract OR indrec_.tax_calc_structure_id)
      AND (Validate_SYS.Is_Changed(Site_API.Get_Company(oldrec_.contract), Site_API.Get_Company(newrec_.contract))
        OR Validate_SYS.Is_Changed(oldrec_.tax_calc_structure_id, newrec_.tax_calc_structure_id)) THEN
         Check_Tax_Calc_Struct_Ref___(newrec_);
      END IF;
      IF (newrec_.customer_tax_usage_type IS NOT NULL)
      AND (indrec_.customer_tax_usage_type)
      AND (Validate_SYS.Is_Changed(oldrec_.customer_tax_usage_type, newrec_.customer_tax_usage_type)) THEN
         Customer_Tax_Usage_Type_API.Exist(newrec_.customer_tax_usage_type);
      END IF;
      IF (Site_API.Get_Company(newrec_.contract) IS NOT NULL AND newrec_.acquisition_origin IS NOT NULL)
      AND (indrec_.contract OR indrec_.acquisition_origin)
      AND (Validate_SYS.Is_Changed(Site_API.Get_Company(oldrec_.contract), Site_API.Get_Company(newrec_.contract))
        OR Validate_SYS.Is_Changed(oldrec_.acquisition_origin, newrec_.acquisition_origin)) THEN
         Acquisition_Origin_API.Exist(Site_API.Get_Company(newrec_.contract), newrec_.acquisition_origin);
      END IF;
      IF (Site_API.Get_Company(newrec_.contract) IS NOT NULL AND newrec_.statistical_code IS NOT NULL)
      AND (indrec_.contract OR indrec_.statistical_code)
      AND (Validate_SYS.Is_Changed(Site_API.Get_Company(oldrec_.contract), Site_API.Get_Company(newrec_.contract))
        OR Validate_SYS.Is_Changed(oldrec_.statistical_code, newrec_.statistical_code)) THEN
         Statistical_Code_API.Exist(Site_API.Get_Company(newrec_.contract), newrec_.statistical_code);
      END IF;
      Error_SYS.Check_Not_Null(lu_name_, 'ORDER_NO', newrec_.order_no);
      Error_SYS.Check_Not_Null(lu_name_, 'LINE_NO', newrec_.line_no);
      Error_SYS.Check_Not_Null(lu_name_, 'REL_NO', newrec_.rel_no);
      Error_SYS.Check_Not_Null(lu_name_, 'LINE_ITEM_NO', newrec_.line_item_no);
      Error_SYS.Check_Not_Null(lu_name_, 'CONTRACT', newrec_.contract);
      Error_SYS.Check_Not_Null(lu_name_, 'CATALOG_NO', newrec_.catalog_no);
      Error_SYS.Check_Not_Null(lu_name_, 'ORDER_CODE', newrec_.order_code);
      Error_SYS.Check_Not_Null(lu_name_, 'SALES_UNIT_MEAS', newrec_.sales_unit_meas);
      Error_SYS.Check_Not_Null(lu_name_, 'BASE_SALE_UNIT_PRICE', newrec_.base_sale_unit_price);
      Error_SYS.Check_Not_Null(lu_name_, 'BASE_UNIT_PRICE_INCL_TAX', newrec_.base_unit_price_incl_tax);
      Error_SYS.Check_Not_Null(lu_name_, 'BUY_QTY_DUE', newrec_.buy_qty_due);
      Error_SYS.Check_Not_Null(lu_name_, 'CATALOG_TYPE', newrec_.catalog_type);
      Error_SYS.Check_Not_Null(lu_name_, 'CONV_FACTOR', newrec_.conv_factor);
      Error_SYS.Check_Not_Null(lu_name_, 'COST', newrec_.cost);
      Error_SYS.Check_Not_Null(lu_name_, 'DISCOUNT', newrec_.discount);
      Error_SYS.Check_Not_Null(lu_name_, 'ORDER_DISCOUNT', newrec_.order_discount);
      Error_SYS.Check_Not_Null(lu_name_, 'PLANNED_DELIVERY_DATE', newrec_.planned_delivery_date);
      Error_SYS.Check_Not_Null(lu_name_, 'PLANNED_DUE_DATE', newrec_.planned_due_date);
      Error_SYS.Check_Not_Null(lu_name_, 'PRICE_CONV_FACTOR', newrec_.price_conv_factor);
      Error_SYS.Check_Not_Null(lu_name_, 'PROMISED_DELIVERY_DATE', newrec_.promised_delivery_date);
      Error_SYS.Check_Not_Null(lu_name_, 'QTY_ASSIGNED', newrec_.qty_assigned);
      Error_SYS.Check_Not_Null(lu_name_, 'QTY_INVOICED', newrec_.qty_invoiced);
      Error_SYS.Check_Not_Null(lu_name_, 'QTY_ON_ORDER', newrec_.qty_on_order);
      Error_SYS.Check_Not_Null(lu_name_, 'QTY_PICKED', newrec_.qty_picked);
      Error_SYS.Check_Not_Null(lu_name_, 'QTY_RETURNED', newrec_.qty_returned);
      Error_SYS.Check_Not_Null(lu_name_, 'QTY_SHIPDIFF', newrec_.qty_shipdiff);
      Error_SYS.Check_Not_Null(lu_name_, 'QTY_SHIPPED', newrec_.qty_shipped);
      Error_SYS.Check_Not_Null(lu_name_, 'QTY_TO_SHIP', newrec_.qty_to_ship);
      Error_SYS.Check_Not_Null(lu_name_, 'QTY_SHORT', newrec_.qty_short);
      Error_SYS.Check_Not_Null(lu_name_, 'REVISED_QTY_DUE', newrec_.revised_qty_due);
      Error_SYS.Check_Not_Null(lu_name_, 'SALE_UNIT_PRICE', newrec_.sale_unit_price);
      Error_SYS.Check_Not_Null(lu_name_, 'UNIT_PRICE_INCL_TAX', newrec_.unit_price_incl_tax);
      Error_SYS.Check_Not_Null(lu_name_, 'SUPPLY_CODE', newrec_.supply_code);
      Error_SYS.Check_Not_Null(lu_name_, 'WANTED_DELIVERY_DATE', newrec_.wanted_delivery_date);
      Error_SYS.Check_Not_Null(lu_name_, 'CUSTOMER_NO', newrec_.customer_no);
      Error_SYS.Check_Not_Null(lu_name_, 'CONSIGNMENT_STOCK', newrec_.consignment_stock);
      Error_SYS.Check_Not_Null(lu_name_, 'CLOSE_TOLERANCE', newrec_.close_tolerance);
      Error_SYS.Check_Not_Null(lu_name_, 'CHARGED_ITEM', newrec_.charged_item);
      Error_SYS.Check_Not_Null(lu_name_, 'CREATE_SM_OBJECT_OPTION', newrec_.create_sm_object_option);
      Error_SYS.Check_Not_Null(lu_name_, 'DEFAULT_ADDR_FLAG', newrec_.default_addr_flag);
      Error_SYS.Check_Not_Null(lu_name_, 'ADDR_FLAG', newrec_.addr_flag);
      Error_SYS.Check_Not_Null(lu_name_, 'SHIP_ADDR_NO', newrec_.ship_addr_no);
      Error_SYS.Check_Not_Null(lu_name_, 'SHIP_VIA_CODE', newrec_.ship_via_code);
      Error_SYS.Check_Not_Null(lu_name_, 'DELIVERY_TERMS', newrec_.delivery_terms);
      Error_SYS.Check_Not_Null(lu_name_, 'DELIVERY_LEADTIME', newrec_.delivery_leadtime);
      Error_SYS.Check_Not_Null(lu_name_, 'DESIRED_QTY', newrec_.desired_qty);
      Error_SYS.Check_Not_Null(lu_name_, 'STAGED_BILLING', newrec_.staged_billing);
      Error_SYS.Check_Not_Null(lu_name_, 'TAX_LIABILITY', newrec_.tax_liability);
      Error_SYS.Check_Not_Null(lu_name_, 'SM_CONNECTION', newrec_.sm_connection);
      Error_SYS.Check_Not_Null(lu_name_, 'PART_PRICE', newrec_.part_price);
      Error_SYS.Check_Not_Null(lu_name_, 'PRICE_SOURCE', newrec_.price_source);
      Error_SYS.Check_Not_Null(lu_name_, 'PRICE_FREEZE', newrec_.price_freeze);
      Error_SYS.Check_Not_Null(lu_name_, 'CONFIGURATION_ID', newrec_.configuration_id);
      Error_SYS.Check_Not_Null(lu_name_, 'CTP_PLANNED', newrec_.ctp_planned);
      Error_SYS.Check_Not_Null(lu_name_, 'INTRASTAT_EXEMPT', newrec_.intrastat_exempt);
      Error_SYS.Check_Not_Null(lu_name_, 'PART_OWNERSHIP', newrec_.part_ownership);
      Error_SYS.Check_Not_Null(lu_name_, 'EXCHANGE_ITEM', newrec_.exchange_item);
      Error_SYS.Check_Not_Null(lu_name_, 'SUPPLY_SITE_RESERVE_TYPE', newrec_.supply_site_reserve_type);
      Error_SYS.Check_Not_Null(lu_name_, 'RELEASE_PLANNING', newrec_.release_planning);
      Error_SYS.Check_Not_Null(lu_name_, 'DELIVER_TO_CUSTOMER_NO', newrec_.deliver_to_customer_no);
      Error_SYS.Check_Not_Null(lu_name_, 'SHIPMENT_CREATION', newrec_.shipment_creation);
      Error_SYS.Check_Not_Null(lu_name_, 'DELIVERY_CONFIRMED', newrec_.delivery_confirmed);
      Error_SYS.Check_Not_Null(lu_name_, 'QTY_CONFIRMEDDIFF', newrec_.qty_confirmeddiff);
      Error_SYS.Check_Not_Null(lu_name_, 'BLOCKED_FOR_INVOICING', newrec_.blocked_for_invoicing);
      Error_SYS.Check_Not_Null(lu_name_, 'PROVISIONAL_PRICE', newrec_.provisional_price);
      Error_SYS.Check_Not_Null(lu_name_, 'RECEIVING_ADVICE_TYPE', newrec_.receiving_advice_type);
      Error_SYS.Check_Not_Null(lu_name_, 'PRICE_SOURCE_NET_PRICE', newrec_.price_source_net_price);
      Error_SYS.Check_Not_Null(lu_name_, 'TARGET_DATE', newrec_.target_date);
      Error_SYS.Check_Not_Null(lu_name_, 'REBATE_BUILDER', newrec_.rebate_builder);
      Error_SYS.Check_Not_Null(lu_name_, 'FREIGHT_FREE', newrec_.freight_free);
      Error_SYS.Check_Not_Null(lu_name_, 'ABNORMAL_DEMAND', newrec_.abnormal_demand);
      Error_SYS.Check_Not_Null(lu_name_, 'REL_MTRL_PLANNING', newrec_.rel_mtrl_planning);
      Error_SYS.Check_Not_Null(lu_name_, 'INVERTED_CONV_FACTOR', newrec_.inverted_conv_factor);
      Error_SYS.Check_Not_Null(lu_name_, 'RENTAL', newrec_.rental);
      Error_SYS.Check_Not_Null(lu_name_, 'PICKING_LEADTIME', newrec_.picking_leadtime);
      Error_SYS.Check_Not_Null(lu_name_, 'SHIPMENT_TYPE', newrec_.shipment_type);
      Error_SYS.Check_Not_Null(lu_name_, 'OPEN_SHIPMENT_QTY', newrec_.open_shipment_qty);
      Error_SYS.Check_Not_Null(lu_name_, 'COUNTRY_CODE', newrec_.country_code);
      Error_SYS.Check_Not_Null(lu_name_, 'TAX_LIABILITY_TYPE', newrec_.tax_liability_type);
      Error_SYS.Check_Not_Null(lu_name_, 'FREE_OF_CHARGE', newrec_.free_of_charge);
   END Base;

   PROCEDURE Core (
      oldrec_ IN     customer_order_line_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY customer_order_line_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
        
      IF indrec_.buy_qty_due = TRUE THEN
         IF ((newrec_.revised_qty_due <> FLOOR(newrec_.revised_qty_due)) AND (Part_Catalog_API.Get_Rcpt_Issue_Serial_Track_Db(newrec_.part_no) = Fnd_Boolean_API.DB_TRUE)) THEN
            Error_SYS.Appl_General(lu_name_, 'BUYQTYDUEINT: Sales quantity must be a multiple of the inverted conversion factor when the part is serialized.');
         END IF;
      END IF;
      
      IF (newrec_.free_of_charge IS NULL) THEN
         newrec_.free_of_charge := Fnd_Boolean_API.DB_FALSE;
      END IF;
      IF (newrec_.free_of_charge = Fnd_Boolean_API.DB_TRUE) THEN
         newrec_.rebate_builder := Fnd_Boolean_API.DB_FALSE;
         IF (indrec_.sale_unit_price AND newrec_.sale_unit_price <> 0) OR 
            (indrec_.base_sale_unit_price AND newrec_.base_sale_unit_price <> 0) OR 
            (indrec_.discount AND newrec_.discount <> 0) THEN
            Error_SYS.Record_General(lu_name_, 'CANTCHGPRICE: Price information cannot be modified for free of charge lines.');
         END IF;       
      END IF;
      
      IF (indrec_.tax_liability) THEN
         IF NOT (newrec_.tax_liability = 'TAX' OR newrec_.tax_liability = 'EXEMPT') THEN
            Tax_Handling_Order_Util_API.Validate_Tax_Liability(newrec_.tax_liability, newrec_.country_code);
         END IF;
      END IF;
    
      Base(oldrec_, newrec_, indrec_, attr_);  
      
   END Core;

BEGIN
   Core(oldrec_, newrec_, indrec_, attr_);
END Check_Common___;


PROCEDURE Prepare_Insert___ (
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      attr_ IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Client_SYS.Clear_Attr(attr_);
   END Base;

   PROCEDURE Core (
      attr_ IN OUT NOCOPY VARCHAR2 )
   IS
      order_rec_              CUSTOMER_ORDER_API.Public_Rec;
      site_date_              DATE;
      receiving_advice_type_  VARCHAR2(4000);
      site_discom_info_rec_   Site_Discom_Info_API.Public_Rec;
      rental_db_              CUSTOMER_ORDER_LINE_TAB.rental%TYPE;
      deliver_to_customer_no_ CUSTOMER_ORDER_LINE_TAB.deliver_to_customer_no%TYPE;
   BEGIN
      -- Fetch attributes already set in client by function DataRecordGetDefaults
      order_rec_              := CUSTOMER_ORDER_API.Get(Client_SYS.Get_Item_Value('ORDER_NO', attr_));
      site_date_              := Site_API.Get_Site_Date(order_rec_.contract);
      site_discom_info_rec_   := Site_Discom_Info_API.Get(order_rec_.contract);
      receiving_advice_type_  := Cust_Ord_Customer_API.Get_Receiving_Advice_Type(order_rec_.customer_no);
      rental_db_              := NVL(Client_SYS.Get_Item_Value('RENTAL_DB', attr_), Fnd_Boolean_API.DB_FALSE);
      deliver_to_customer_no_ := NVL(Client_SYS.Get_Item_Value('DELIVER_TO_CUSTOMER_NO', attr_),order_rec_.customer_no);
   
      Base(attr_);
      Client_SYS.Add_To_Attr('ORDER_NO', order_rec_.order_no, attr_);
      Client_SYS.Add_To_Attr('RENTAL_DB', rental_db_, attr_);
      Client_SYS.Add_To_Attr('CONTRACT', order_rec_.contract, attr_);
      Client_SYS.Add_To_Attr('CUSTOMER_NO', order_rec_.customer_no, attr_);
      Client_SYS.Add_To_Attr('COMPANY', Site_API.Get_Company(order_rec_.contract), attr_);
      Client_SYS.Add_To_Attr('WANTED_DELIVERY_DATE', order_rec_.wanted_delivery_date, attr_);
      Client_SYS.Add_To_Attr('TARGET_DATE', order_rec_.wanted_delivery_date, attr_);
      Client_SYS.Add_To_Attr('PLANNED_DELIVERY_DATE', order_rec_.wanted_delivery_date, attr_);
      Client_SYS.Add_To_Attr('COST', 0, attr_);
      Client_SYS.Add_To_Attr('CONV_FACTOR', 1, attr_);
      Client_SYS.Add_To_Attr('PRICE_CONV_FACTOR', 0, attr_);
      Client_SYS.Add_To_Attr('DISCOUNT', 0, attr_);
      Client_SYS.Add_To_Attr('ORDER_DISCOUNT', 0, attr_);
      Client_SYS.Add_To_Attr('QTY_ASSIGNED', 0, attr_);
      Client_SYS.Add_To_Attr('QTY_SHIPPED', 0, attr_);
      Client_SYS.Add_To_Attr('REVISED_QTY_DUE', 0, attr_);
      Client_SYS.Add_To_Attr('QTY_SHORT', 0, attr_);
      Client_SYS.Add_To_Attr('CONSIGNMENT_STOCK_DB', 'NO CONSIGNMENT STOCK', attr_);
      Client_SYS.Add_To_Attr('CHARGED_ITEM_DB', 'CHARGED ITEM', attr_);
      Client_SYS.Add_To_Attr('CREATE_SM_OBJECT_OPTION_DB', 'DONOTCREATESMOBJECT', attr_);
      Client_SYS.Add_To_Attr('DEFAULT_ADDR_FLAG_DB', 'Y', attr_);
      Client_SYS.Add_To_Attr('ADDR_FLAG_DB', order_rec_.addr_flag, attr_);
      Client_SYS.Add_To_Attr('SHIP_ADDR_NO', order_rec_.ship_addr_no, attr_);
      Client_SYS.Add_To_Attr('END_CUSTOMER_ID', Customer_Info_Address_API.Get_End_Customer_Id(deliver_to_customer_no_, order_rec_.ship_addr_no), attr_);
      Client_SYS.Add_To_Attr('STAGED_BILLING_DB', 'NOT STAGED BILLING', attr_);
      Client_SYS.Add_To_Attr('TAX_LIABILITY', order_rec_.tax_liability, attr_);
      Client_SYS.Add_To_Attr('SM_CONNECTION_DB', 'NOT CONNECTED', attr_);
      Client_SYS.Add_To_Attr('PRICE_FREEZE_DB', 'FREE', attr_);
      Client_SYS.Add_To_Attr('CONFIGURATION_ID', '*', attr_);
      Client_SYS.Add_To_Attr('CTP_PLANNED_DB', 'N', attr_);
      IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
         Client_SYS.Add_To_Attr('PART_OWNERSHIP', Part_Ownership_API.Decode(Part_Ownership_API.DB_COMPANY_OWNED), attr_);
      END IF;
      Client_SYS.Add_To_Attr('EXCHANGE_ITEM_DB', 'ITEM NOT EXCHANGED', attr_);
      Client_SYS.Add_To_Attr('INTRASTAT_EXEMPT_DB', 'INCLUDE', attr_);
      Client_SYS.Add_To_Attr('CLASSIFICATION_STANDARD', order_rec_.classification_standard, attr_);
      Client_SYS.Add_To_Attr('ABNORMAL_DEMAND_DB', 'FALSE', attr_);
      Client_SYS.Add_To_Attr('CUST_CALENDAR_ID', order_rec_.cust_calendar_id, attr_);
      Client_SYS.Add_To_Attr('EXT_TRANSPORT_CALENDAR_ID', order_rec_.ext_transport_calendar_id, attr_);
      IF ((order_rec_.rowstate = 'Blocked') AND (order_rec_.blocked_type = 'MANUAL_BLOCKED') AND
          (Block_Reasons_API.Get_Exclude_Mtrl_Planning_Db(order_rec_.blocked_reason) = 'TRUE')) THEN
         Client_SYS.Add_To_Attr('REL_MTRL_PLANNING', 'FALSE', attr_);
      ELSE
         Client_SYS.Add_To_Attr('REL_MTRL_PLANNING', 'TRUE', attr_);
      END IF;
      Client_SYS.Add_To_Attr('INVERTED_CONV_FACTOR', 1, attr_);
      -- Pricing Method. The default value for price effectivity date on a new order line will be determined on Site level.
      IF (site_discom_info_rec_.cust_order_pricing_method = 'ORDER_DATE') THEN
         Client_SYS.Add_To_Attr('PRICE_EFFECTIVITY_DATE', site_date_, attr_);
      ELSIF (site_discom_info_rec_.cust_order_pricing_method = 'DELIVERY_DATE') THEN
         Client_SYS.Add_To_Attr('PRICE_EFFECTIVITY_DATE', order_rec_.wanted_delivery_date, attr_);
      END IF;
      Client_SYS.Set_Item_Value('SUPPLY_SITE_RESERVE_TYPE_DB', 'NOTALLOWED', attr_);
      Client_SYS.Set_Item_Value('SUPPLY_SITE_RESERVE_TYPE', Supply_Site_Reserve_Type_API.Decode('NOTALLOWED'), attr_);
      Client_SYS.Set_Item_Value('RELEASE_PLANNING_DB', 'NOTRELEASED', attr_);
      Client_SYS.Set_Item_Value('SHIPMENT_CONNECTED_DB', 'FALSE', attr_);
      Client_SYS.Set_Item_Value('DELIVERY_CONFIRMED_DB', 'FALSE', attr_);
      Client_SYS.Set_Item_Value('BLOCKED_FOR_INVOICING_DB', 'FALSE', attr_);
      Client_SYS.Set_Item_Value('PROVISIONAL_PRICE_DB', 'FALSE', attr_);
      Client_SYS.Set_Item_Value('RECEIVING_ADVICE_TYPE', receiving_advice_type_, attr_);
      Client_SYS.Set_Item_Value('PRICE_SOURCE_NET_PRICE_DB', 'FALSE', attr_);
      Client_SYS.Set_Item_Value('REBATE_BUILDER_DB', 'TRUE', attr_);
      Client_SYS.Set_Item_Value('FREIGHT_FREE_DB', 'FALSE', attr_);
      Client_SYS.Set_Item_Value('FREE_OF_CHARGE_DB', Fnd_Boolean_API.DB_FALSE, attr_);
   
      IF (Fnd_Session_API.Is_Odp_Session) THEN   
         Client_SYS.Add_To_Attr('TAX_LIABILITY_TYPE_DB', Customer_Order_API.Get_Tax_Liability_Type_Db(order_rec_.order_no), attr_);
      END IF;
      
      Client_SYS.Add_To_Attr('CUSTOMER_TAX_USAGE_TYPE', order_rec_.customer_tax_usage_type, attr_);
      
      -- gelr:disc_price_rounded, begin
      IF (order_rec_.disc_price_round = Fnd_Boolean_API.DB_TRUE AND order_rec_.use_price_incl_tax = Fnd_Boolean_API.DB_FALSE) THEN
         Client_SYS.Add_To_Attr('ORIGINAL_DISCOUNT', 0, attr_);
         Client_SYS.Add_To_Attr('ORIGINAL_ORDER_DISCOUNT', 0, attr_);
      END IF;
      -- gelr:disc_price_rounded, end
      
      -- gelr:brazilian_specific_attributes, begin
      IF (order_rec_.business_transaction_id IS NOT NULL) THEN
         Client_SYS.Set_Item_Value('ACQUISITION_REASON_ID', Business_Transaction_Id_API.Get_Acquisition_Reason_Id(Site_API.Get_Company(order_rec_.contract), order_rec_.business_transaction_id), attr_);
      END IF;
      -- gelr:brazilian_specific_attributes, end
      
      IF (rental_db_ = Fnd_Boolean_API.DB_TRUE) THEN
         Prepare_Rental___(attr_);
      END IF;
   END Core;

BEGIN
   Core(attr_);
END Prepare_Insert___;


PROCEDURE Check_Insert___ (
   newrec_ IN OUT NOCOPY customer_order_line_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      newrec_ IN OUT NOCOPY customer_order_line_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
      oldrec_ customer_order_line_tab%ROWTYPE;
   BEGIN
      Validate_SYS.Item_Insert(lu_name_, 'DATE_ENTERED', indrec_.date_entered);
      Validate_SYS.Item_Insert(lu_name_, 'PLANNED_SHIP_PERIOD', indrec_.planned_ship_period);
      Validate_SYS.Item_Insert(lu_name_, 'PROJECT_ID', indrec_.project_id);
      Check_Common___(oldrec_, newrec_, indrec_, attr_);
   END Base;

   PROCEDURE Core (
      newrec_ IN OUT NOCOPY customer_order_line_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
      name_                         VARCHAR2(30);
      value_                        VARCHAR2(4000);
      order_rec_                    CUSTOMER_ORDER_API.Public_Rec;
      partca_rec_                   PART_CATALOG_API.Public_Rec;
      company_                      VARCHAR2(20);
      header_rowstate_              CUSTOMER_ORDER_TAB.rowstate%TYPE;
      created_by_server_            BOOLEAN;
      is_config_edited_             BOOLEAN := FALSE;
      site_date_                    DATE;
      customer_agreement_           VARCHAR2(10);
      server_data_change_           NUMBER;
      capability_check_source_flag_ VARCHAR2(5) := 'FALSE';
      assortment_id_                ASSORTMENT_STRUCTURE_TAB.assortment_id%TYPE;
      original_demand_code_         CUSTOMER_ORDER_LINE_TAB.demand_code%TYPE;
      original_supply_code_         CUSTOMER_ORDER_LINE_TAB.supply_code%TYPE;
      new_pkg_component_line_       BOOLEAN := FALSE;
      zone_info_exist_              VARCHAR2(5) := 'FALSE';
      addr_rec_                     Customer_Order_Address_API.Cust_Ord_Addr_Rec;
      shipment_creation_sent_       BOOLEAN := FALSE;
      packed_ship_cre_in_init_      BOOLEAN := FALSE;
      shipment_type_sent_           BOOLEAN := FALSE;
      shipment_type_                CUSTOMER_ORDER_LINE_TAB.shipment_type%TYPE;
      inv_part_cost_level_db_       VARCHAR2(50);
      current_info_                 VARCHAR2(32000);
      external_service_order_       VARCHAR2(5) := Fnd_Boolean_API.DB_FALSE;
      tax_liability_type_db_        VARCHAR2(20);
      calc_revise_qty_due_          NUMBER;
      std_planned_item_po_comp_     VARCHAR2(5) := 'TRUE';
   BEGIN
      order_rec_ := Customer_Order_API.Get(newrec_.order_no);
      -- Note :
      -- newrec_.planned_delivery_date - Delivery date has time included - copied from order header and might have been modified by user
      -- newrec_.wanted_delivery_date -  Delivery date has time included - copied from order header and might have been modified by user
      IF (newrec_.line_no IS NOT NULL) THEN
         IF NOT(Is_Number___(newrec_.line_no)) THEN
            Error_SYS.Record_General(lu_name_, 'NOTANUMBER: Line No and/or Delivery No must have numeric values.');
         END IF;
         newrec_.line_no := FLOOR(newrec_.line_no);
      END IF;
   
      IF (newrec_.rel_no IS NOT NULL) THEN
         IF NOT(Is_Number___(newrec_.rel_no)) THEN
            Error_SYS.Record_General(lu_name_, 'NOTANUMBER: Line No and/or Delivery No must have numeric values.');
         END IF;
         newrec_.rel_no := FLOOR(newrec_.rel_no);
      END IF;
   
      Validate_Price___(newrec_);
   
      IF (newrec_.rel_no IS NULL) THEN
         CUSTOMER_ORDER_API.Get_Next_Line_No(newrec_.rel_no, newrec_.line_item_no, newrec_.line_no, newrec_.order_no,
                                             newrec_.contract, newrec_.catalog_no, Order_Supply_Type_API.Decode(newrec_.supply_code),
                                             newrec_.demand_code, newrec_.rental);
      ELSIF (newrec_.line_item_no <= 0) THEN
         IF (newrec_.supply_code = 'PKG') THEN
            newrec_.line_item_no := -1;
         ELSE
            newrec_.line_item_no := 0;
         END IF;
      END IF;
   
      created_by_server_ := (NVL(Client_SYS.Get_Item_Value('CREATED_BY_SERVER', attr_), '0') = '1');
      IF (indrec_.planned_ship_date) THEN
         IF (NOT created_by_server_) THEN
            Error_SYS.Item_Insert(lu_name_, 'PLANNED_SHIP_DATE');
         END IF;
      END IF;
   
      calc_revise_qty_due_ := newrec_.buy_qty_due * newrec_.conv_factor / newrec_.inverted_conv_factor;
      -- calculated value for calc_revise_qty_due_ could exceed 38 decimal points sometimes. Therefor it is
      -- rounded for 38 because maximum guaranteed precision for Oracle numbers is 38.
      IF ((length(calc_revise_qty_due_)-INSTR(calc_revise_qty_due_,'.')) > 38) THEN
         calc_revise_qty_due_ := ROUND(calc_revise_qty_due_, 38);
      END IF;
      newrec_.revised_qty_due := calc_revise_qty_due_;
      
      IF (newrec_.vendor_no IS NOT NULL) THEN
         Exist_Vendor_No___(newrec_.vendor_no, newrec_.contract, newrec_.purchase_part_no, newrec_.rental);
      END IF;
   
      IF(Client_SYS.Get_Item_Value('SHIPMENT_CREATION_SENT', attr_) = 'TRUE') THEN
         shipment_creation_sent_ := TRUE;
      END IF;
      IF(Client_SYS.Get_Item_Value('SHIPMENT_TYPE_SENT', attr_) = 'TRUE') THEN
         shipment_type_sent_ := TRUE;
      END IF;
      IF(Client_SYS.Get_Item_Value('PACKED_SHIP_CRE_IN_INIT', attr_) = 'TRUE') THEN
         packed_ship_cre_in_init_ := TRUE;
      END IF;
   
      company_         := Site_API.Get_Company(newrec_.contract);
      header_rowstate_ := order_rec_.rowstate;
      site_date_       := Site_API.Get_Site_Date(newrec_.contract);
      -- fetch demand code to use with CUST_WARRANTY_ID check...
   
      IF (newrec_.rel_mtrl_planning IS NULL) THEN
         newrec_.rel_mtrl_planning := 'TRUE';
      END IF;
      
      IF (newrec_.supply_code = 'PKG') AND (newrec_.rel_mtrl_planning = 'FALSE') THEN
         Error_SYS.Record_General(lu_name_, 'RELMTRLPKGTUPDATE: The Release for Mtrl Planning check box cannot be updated for package parts. Please use the package part structure window to set it for component lines.');
      END IF;
   
      IF (newrec_.blocked_for_invoicing IS NULL) THEN
         newrec_.blocked_for_invoicing := 'FALSE';
      END IF;
   
      IF (newrec_.price_source_net_price IS NULL) THEN
         newrec_.price_source_net_price := 'FALSE';
      END IF;
   
      IF (newrec_.abnormal_demand IS NULL) THEN
         newrec_.abnormal_demand := 'FALSE';
      END IF;
   
      IF (newrec_.supply_code IN ('PT', 'PD', 'IPT', 'IPD')) THEN
         IF created_by_server_ AND (newrec_.vendor_no IS NULL) THEN
            -- check if non-inventory sales part uses a purchase part
            newrec_.vendor_no := Retrieve_Default_Vendor__(newrec_.contract, newrec_.purchase_part_no, newrec_.supply_code, newrec_.rental);
            Validate_Vendor_No__(newrec_.vendor_no, newrec_.supply_code);
         ELSE
            -- Validate the category for the specified vendor
            Validate_Vendor_Category___(newrec_.vendor_no, newrec_.supply_code);
         END IF;
      ELSE
         newrec_.vendor_no   := NULL;
         newrec_.supply_site := NULL;
         newrec_.supply_site_reserve_type := 'NOTALLOWED';
      END IF;
   
      Check_Purch_Supply_Code___ (newrec_);
   
     -- prevent setting target date earlier than wanted delivery date
      IF (newrec_.target_date IS NULL OR (newrec_.target_date < newrec_.wanted_delivery_date )) THEN
         newrec_.target_date := newrec_.wanted_delivery_date;
      END IF;
   
      IF (newrec_.supply_code != 'DOP') THEN
         newrec_.dop_connection := NULL;
      ELSE
         IF (newrec_.dop_connection IS NULL) THEN
            newrec_.dop_connection := Dop_Connection_API.Encode(Inventory_Part_API.Get_Dop_Connection(newrec_.contract, newrec_.part_no));
         END IF;
      END IF;
      
      -- Validate supply code so that it has the correct value depending on different data
      Check_Supply_Code___(newrec_);
   
      shipment_type_ := newrec_.shipment_type;
      IF (newrec_.supply_code = 'SRC') THEN
         std_planned_item_po_comp_ := NVL(Client_SYS.Get_Item_Value('SRC_STD_PLANNED_ITEM', attr_), 'TRUE');
         IF (std_planned_item_po_comp_ = 'FALSE') THEN
            std_planned_item_po_comp_ := 'FALSE';
         END IF;
         
         -- Replaced with the deliver_to_customer_no
         -- Automatic sourcing, all supply chain parameters are returned by the sourcing method
         Source_Order_Lines_API.Source_Automatically__(newrec_.route_id, newrec_.forward_agent_id,
                                                       newrec_.supply_code, newrec_.vendor_no,
                                                       newrec_.ship_via_code,
                                                       newrec_.delivery_terms,
                                                       newrec_.del_terms_location,
                                                       newrec_.supplier_ship_via_transit,
                                                       newrec_.delivery_leadtime,
                                                       newrec_.ext_transport_calendar_id,
                                                       newrec_.default_addr_flag,
                                                       newrec_.picking_leadtime, newrec_.shipment_type,
                                                       newrec_.order_no, newrec_.line_no,
                                                       newrec_.rel_no, newrec_.line_item_no,
                                                       newrec_.contract, newrec_.catalog_no,
                                                       newrec_.part_no, newrec_.purchase_part_no,
                                                       newrec_.revised_qty_due, newrec_.deliver_to_customer_no,
                                                       newrec_.ship_addr_no, newrec_.addr_flag,
                                                       newrec_.wanted_delivery_date,
                                                       newrec_.demand_code);
   
         IF (newrec_.supplier_ship_via_transit IS NOT NULL) THEN
            newrec_.supplier_ship_via_transit_desc := Mpccom_Ship_Via_API.Get_Description(newrec_.supplier_ship_via_transit, order_rec_.language_code);
         ELSE
            newrec_.supplier_ship_via_transit_desc := NULL;
         END IF;
      ELSE
         -- Retrive default values for supply chain parameters
         IF (NVL(Client_SYS.Get_Item_Value('FETCH_SUPPLY_CHAIN_DEFAULTS', attr_), 'TRUE') = 'TRUE') THEN
            Get_Supply_Chain_Defaults___(newrec_, indrec_);
         END IF;
      END IF;
   
      IF (shipment_type_sent_) THEN
         newrec_.shipment_type := shipment_type_;
      END IF;
      IF (newrec_.shipment_type IS NULL) THEN
         newrec_.shipment_type := order_rec_.shipment_type;
      ELSE
         IF (newrec_.default_addr_flag = 'Y' AND (newrec_.shipment_type != order_rec_.shipment_type)) THEN
            newrec_.default_addr_flag := 'N';
         END IF;
      END IF;
      IF (NOT shipment_creation_sent_) OR ((packed_ship_cre_in_init_) AND (order_rec_.shipment_type != newrec_.shipment_type))THEN
         newrec_.shipment_creation := Shipment_Creation_API.Encode(Shipment_Type_API.Get_Shipment_Creation_Co(newrec_.shipment_type));
      END IF;
   
      IF (newrec_.part_ownership IS NULL) THEN
         IF (newrec_.rental = Fnd_Boolean_API.DB_FALSE) THEN
            newrec_.part_ownership := Part_Ownership_API.DB_COMPANY_OWNED;
         ELSE
            newrec_.part_ownership := Part_Ownership_API.DB_COMPANY_RENTAL_ASSET;
         END IF;
      ELSIF newrec_.part_ownership IN (Part_Ownership_API.DB_CUSTOMER_OWNED, Part_Ownership_API.DB_SUPPLIER_LOANED) THEN
         newrec_.part_price               := 0;
         newrec_.sale_unit_price          := 0;
         newrec_.unit_price_incl_tax      := 0;
         newrec_.base_sale_unit_price     := 0;
         newrec_.base_unit_price_incl_tax := 0;
         newrec_.cost                     := 0;
         newrec_.price_source             := 'UNSPECIFIED';
         newrec_.price_source_id          := NULL;
         IF newrec_.char_price IS NOT NULL THEN
            newrec_.char_price := 0;
         END IF;
         IF newrec_.calc_char_price IS NOT NULL THEN
            newrec_.calc_char_price := 0;
         END IF;
      ELSIF (newrec_.part_ownership = Part_Ownership_API.DB_COMPANY_RENTAL_ASSET) THEN
           newrec_.cost  := 0;
      END IF;
       
      -- set release_planning flag according to supply_code
      IF (newrec_.supply_code IN ('IPT', 'IPD')) THEN
         newrec_.release_planning := 'RELEASED' ;
         -- fetching the supply site part no when inserting.
         newrec_.supply_site_part_no := Sales_Part_API.Get_Supply_Site_Part_No__(newrec_.supply_site, newrec_.contract, newrec_.catalog_no, newrec_.vendor_no );
         Assign_Rel_Mtrl_Planning___(newrec_, header_rowstate_);
      END IF;
   
      -- do not calculate the order dates if this line have just been created from a capability checked sourced order line
      -- becuase we have already done forward date calculation that we do not want recalculated now
      capability_check_source_flag_ := NVL(Client_SYS.Get_Item_Value('CAPABILITY_CHK_SOURCE_FLAG', attr_), 'FALSE');
      IF (capability_check_source_flag_ = 'FALSE') THEN
         -- Calculate all the dates on the new order line
         Calculate_Order_Line_Dates___(newrec_, NULL, NULL);
      END IF;
   
      IF (newrec_.exchange_item IS NULL) THEN
         newrec_.exchange_item := 'ITEM NOT EXCHANGED';
      END IF;
   
      IF (newrec_.provisional_price IS NULL) THEN
         newrec_.provisional_price := 'FALSE';
      END IF;
   
      IF (newrec_.receiving_advice_type IS NULL) THEN
         newrec_.receiving_advice_type := Sales_Part_Cross_Reference_API.Get_Receiving_Advice_Type_Db(order_rec_.customer_no, order_rec_.contract, newrec_.customer_part_no);
         IF (newrec_.receiving_advice_type IS NULL) OR (newrec_.receiving_advice_type = 'USE_CUSTOMER_DEFAULT') THEN
            newrec_.receiving_advice_type := Cust_Ord_Customer_API.Get_Receiving_Advice_Type_Db(order_rec_.customer_no);
         END IF;
         newrec_.receiving_advice_type := NVL(newrec_.receiving_advice_type, 'DO_NOT_USE');
      ELSIF (newrec_.receiving_advice_type = 'USE_CUSTOMER_DEFAULT') THEN
         Error_SYS.Record_General(lu_name_, 'INVALIDRECADVTYPE: Receiving advice type ":P1" can not be used in customer order line.', Receiving_Advice_Type_API.Decode(newrec_.receiving_advice_type));
      END IF;
   
      IF ((newrec_.rental = Fnd_Boolean_API.DB_FALSE) AND newrec_.line_item_no <= 0 AND (order_rec_.limit_sales_to_assortments = 'TRUE') AND ((newrec_.demand_code IS NULL) OR (newrec_.demand_code IN ('CQ', 'BO')))) THEN
         Sales_Part_API.Check_Limit_Sales_To_Assort(newrec_.contract, newrec_.catalog_no, newrec_.customer_no);
      END IF;
      
      Base(newrec_, indrec_, attr_);
   
      IF ((newrec_.part_ownership = 'SUPPLIER LOANED') AND
          (NVL(Get_Owner_For_Part_Ownership(newrec_.order_no,
                                           newrec_.line_no,
                                           newrec_.rel_no,
                                           newrec_.line_item_no,
                                           newrec_.part_ownership), Database_SYS.string_null_) = Database_SYS.string_null_)) THEN
          Error_SYS.Record_General(lu_name_, 'NULLOWNERFORSUPLOANED: The customer must be connected to a supplier in order to return :P1 stock', Part_Ownership_API.Decode(newrec_.part_ownership));
      END IF;
   
      IF (newrec_.blocked_for_invoicing = 'TRUE') THEN
         Validate_Block_For_Invoic___(newrec_);
      END IF;
   
      IF ((order_rec_.internal_po_no IS NOT NULL) AND (order_rec_.internal_po_no = NVL(newrec_.demand_order_ref1, ' ')) AND (newrec_.discount < 0)) THEN
         Error_SYS.Record_General(lu_name_, 'IPO_NEG_DISC: Negative discount cannot be handled when the customer order originates from an internal purchase order. Check valid price list(s) and/or Customer Agreement(s).');
      END IF;
   
      IF (newrec_.price_unit_meas IS NULL) THEN
         newrec_.price_unit_meas := Sales_Part_API.Get_Price_Unit_Meas(newrec_.contract, newrec_.catalog_no);
      END IF;
   
      Iso_Unit_API.Exist(newrec_.price_unit_meas);
   
      IF (newrec_.cust_calendar_id IS NOT NULL) THEN
         IF (newrec_.cust_calendar_id != NVL(order_rec_.cust_calendar_id, Database_Sys.string_null_)) THEN
            IF newrec_.demand_code != 'IPD' THEN
               Cust_Ord_Customer_API.Validate_Customer_Calendar(newrec_.customer_no, newrec_.cust_calendar_id, TRUE);
            ELSE
               Cust_Ord_Customer_API.Validate_Customer_Calendar(newrec_.customer_no, newrec_.cust_calendar_id, FALSE);
            END IF;
         END IF;
      END IF;
   
      IF (newrec_.customer_part_no IS NOT NULL) THEN
         IF (Sales_Part_Cross_Reference_API.Get_Self_Billing_Db(newrec_.customer_no, newrec_.contract, newrec_.customer_part_no) = 'NOT SELF BILLING' AND (newrec_.self_billing = 'SELF BILLING'))THEN
            Error_SYS.Record_General(lu_name_, 'EDITNOTALLOWEDSB: Cannot use self-billing on customer order line when there is no sales part cross reference record allowing self-billing for Sales part :P1 and Customer :P2 on site :P3 .',
                                     newrec_.catalog_no, newrec_.customer_no, newrec_.contract);
         END IF;
      ELSE
         IF (newrec_.self_billing = 'SELF BILLING') THEN
            Error_SYS.Record_General(lu_name_, 'EDITNOTALLOWEDSB: Cannot use self-billing on customer order line when there is no sales part cross reference record allowing self-billing for Sales part :P1 and Customer :P2 on site :P3 .',
                                     newrec_.catalog_no, newrec_.customer_no, newrec_.contract);
         END IF;
      END IF;
   
      -- Check for prepayment exists before self billing is entered for a Customer Order.
      IF (order_rec_.proposed_prepayment_amount > 0 AND newrec_.self_billing = 'SELF BILLING') THEN
         Error_SYS.Record_General(lu_name_, 'PREPAY_EXISTSELF: The Required Prepayment amount exists. Cannot enable this customer order for self billing.');
      END IF;
   
      IF (newrec_.input_unit_meas IS NOT NULL) AND (newrec_.input_qty IS NULL) THEN
         Error_SYS.Record_General(lu_name_, 'INPUTQTYNEEDED: Input quantity must be entered when Input UoM has a value');
      END IF;
   
      server_data_change_ := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('SERVER_DATA_CHANGE', attr_));
      IF (Order_Supply_Type_API.Encode(Get_Demand_Code(newrec_.order_no,1,1,0)) = 'DO' AND server_data_change_ IS NULL) THEN
         Error_SYS.Record_General(lu_name_, 'NOORDERLINEWHENDO: Customer Order Lines cannot be created when Customer Order is created from Distribution Order');
      END IF;
   
      -- When the customer order originates from an internal purchase order, co lines can not be added manually
      IF ((order_rec_.internal_po_no IS NOT NULL) AND (order_rec_.internal_po_no != NVL(newrec_.demand_order_ref1, ' ')) AND (newrec_.line_item_no <= 0) AND (NVL(newrec_.demand_code, ' ') != 'DO')) THEN
         Error_SYS.Record_General(lu_name_, 'CHANGENOTALLOWED: It is not allowed to add or remove order lines when the customer order originates from an internal purchase order.');
      END IF;
   
      -- do not allow automatic sourcing if the part is not COMPANY OWNED
      IF (newrec_.supply_code = 'SRC' AND newrec_.part_ownership != 'COMPANY OWNED') THEN
         Error_SYS.Record_General(lu_name_, 'COMPANYOWNAUTOSRC: Only Company Owned parts can be used with Supply Code :P1',Order_Supply_Type_API.Decode('SRC'));
      END IF;
   
      IF ((newrec_.freight_map_id IS NULL AND newrec_.zone_id IS NULL) OR (newrec_.default_addr_flag = 'Y' AND newrec_.addr_flag = 'Y' AND order_rec_.freight_map_id IS NOT NULL)) THEN
         addr_rec_ := Customer_Order_Address_API.Get_Cust_Ord_Addr(newrec_.order_no);
         Freight_Zone_Util_API.Fetch_Zone_For_Addr_Details(newrec_.freight_map_id,
                                                           newrec_.zone_id,
                                                           zone_info_exist_,
                                                           newrec_.contract,
                                                           newrec_.ship_via_code,
                                                           addr_rec_.zip_code,
                                                           addr_rec_.city,
                                                           addr_rec_.county,
                                                           addr_rec_.state,
                                                           addr_rec_.country_code);
      END IF;
      IF (newrec_.freight_map_id IS NOT NULL) THEN
         IF ((newrec_.supply_code IN ('PD', 'IPD') AND newrec_.vendor_no IS NOT NULL)) THEN
            newrec_.freight_price_list_no := Freight_Price_List_Direct_API.Get_Active_Freight_List_No(newrec_.contract, newrec_.ship_via_code, newrec_.freight_map_id, newrec_.forward_agent_id,  order_rec_.use_price_incl_tax, newrec_.vendor_no);
         ELSE
            newrec_.freight_price_list_no := Freight_Price_List_API.Get_Active_Freight_List_No(newrec_.contract, newrec_.ship_via_code, newrec_.freight_map_id, newrec_.forward_agent_id, order_rec_.use_price_incl_tax);
         END IF;
      ELSE
         newrec_.freight_price_list_no := NULL;
      END IF;
   
      IF (newrec_.supply_code IN ('IPT', 'IPD')) THEN
         -- Initialize the supply site attribute for internal suppliers
         newrec_.supply_site := Get_Vendor_Contract__(newrec_.vendor_no, NULL, NULL, NULL, newrec_.rental);
   
         IF (newrec_.supply_site_reserve_type = 'NOTALLOWED') THEN
              -- get default supply_site_reserve_type_
              -- check if the inventory part exists on the supply_site (is the supply_site in the same database)
            IF (Inventory_Part_API.Part_Exist(newrec_.supply_site, NVL(newrec_.part_no,newrec_.purchase_part_no)) = 1) THEN
               -- check if a security connection exists between the CO/PO Site (Demand site) and the Supply Site
               IF (Site_To_Site_Reserve_Setup_API.Connection_Allowed(newrec_.supply_site, newrec_.contract) = 1) THEN
                  newrec_.supply_site_reserve_type := Site_To_Site_Reserve_Setup_API.Get_Supply_Site_Reserve_Db(newrec_.supply_site, newrec_.contract);
               END IF;
            END IF;
         ELSIF (Site_To_Site_Reserve_Setup_API.Connection_Allowed(newrec_.supply_site, newrec_.contract) = 0) OR
               (Site_To_Site_Reserve_Setup_API.Get_Supply_Site_Reserve_Db(newrec_.supply_site, newrec_.contract) = Supply_Site_Reserve_Type_API.DB_NOT_ALLOWED)THEN
            Error_Sys.Record_General(lu_name_, 'CONN_NOT_ALLOWED: No Site to Site Reservation allowed between demand site :P1 and supply site :P2',newrec_.contract,newrec_.supply_site);
         END IF;
      ELSE
         -- Clear supply site if not internal supply
         newrec_.supply_site := NULL;
      END IF;
   
      IF (newrec_.rental = Fnd_Boolean_API.DB_FALSE) AND NOT ((newrec_.part_ownership = Part_Ownership_API.DB_COMPANY_OWNED ) OR (newrec_.part_ownership = Part_Ownership_API.DB_CUSTOMER_OWNED AND newrec_.owning_customer_no = order_rec_.customer_no)) THEN
         IF (order_rec_.project_id IS NOT NULL) THEN
            -- PROJ_NEW error should not be raised for CO line is created from external service order 
            $IF Component_Purch_SYS.INSTALLED $THEN
               IF ((NVL(newrec_.demand_code, Database_SYS.string_null_) = 'PO') AND (newrec_.demand_order_ref1 IS NOT NULL)) THEN
                  IF (Purchase_Order_API.Get_Order_Code(newrec_.demand_order_ref1) = 6) THEN
                     external_service_order_ := Fnd_Boolean_API.DB_TRUE;
                  END IF;
               END IF;
            $END
            IF (external_service_order_ = Fnd_Boolean_API.DB_FALSE) THEN    
               Error_SYS.Record_General(lu_name_, 'PROJ_NEW: Can not add a new customer order line that has a different ownership other than company owned or customer owned by the customer :P1.',order_rec_.customer_no);
            END IF;
         END IF;
      END IF;
   
      Customer_Agreement_API.Get_Agreement_For_Part(customer_agreement_,
                                                    order_rec_.customer_no,
                                                    order_rec_.contract,
                                                    order_rec_.currency_code,
                                                    newrec_.catalog_no,
                                                    site_date_);
     
      -- Forced re-evaluating default_addr_flag for DO as it can have shipment_type values different from order header due to exception for site to site                                               
      -- Forced re-evaluating default_addr_flag for IPT too as it can have shipment_type values different from order header due to exception for site to site                                        
      IF (customer_agreement_ IS NOT NULL OR (newrec_.demand_code IN ('IPT', 'DO'))) THEN     
         IF newrec_.default_addr_flag = 'Y' THEN
            IF ((NVL(order_rec_.route_id, ' ') != NVL(newrec_.route_id, ' ')) OR
                (NVL(order_rec_.forward_agent_id, ' ') != NVL(newrec_.forward_agent_id, ' ')) OR
                (NVL(order_rec_.cust_ref, ' ') != NVL(newrec_.contact, ' ')) OR
                (NVL(order_rec_.ship_via_code, ' ') != NVL(newrec_.ship_via_code, ' ')) OR
                (NVL(order_rec_.cust_calendar_id, Database_Sys.string_null_) != NVL(newrec_.cust_calendar_id, Database_Sys.string_null_)) OR
                (NVL(order_rec_.ext_transport_calendar_id, Database_Sys.string_null_) != NVL(newrec_.ext_transport_calendar_id, Database_Sys.string_null_)) OR
                (order_rec_.delivery_terms != newrec_.delivery_terms) OR
                (NVL(order_rec_.del_terms_location, ' ') != NVL(newrec_.del_terms_location, ' ')) OR
                (order_rec_.delivery_leadtime != newrec_.delivery_leadtime) OR
                (order_rec_.picking_leadtime != newrec_.picking_leadtime) OR
                (order_rec_.shipment_type != newrec_.shipment_type) OR
                (order_rec_.shipment_creation != newrec_.shipment_creation) OR
                (NVL(order_rec_.district_code, ' ') != NVL(newrec_.district_code, ' ')) OR
                (NVL(order_rec_.region_code, ' ') != NVL(newrec_.region_code, ' ')) OR
                (Customer_Order_API.Get_Tax_Liability_Type_Db(newrec_.order_no) != newrec_.tax_liability_type) OR
                (order_rec_.intrastat_exempt != newrec_.intrastat_exempt) OR
                (NVL(order_rec_.ship_addr_no, ' ') != NVL(newrec_.ship_addr_no, ' '))) THEN
               newrec_.default_addr_flag := 'N';
            END IF;
         END IF;
      END IF;
   
      IF (newrec_.activity_seq IS NOT NULL) THEN
         original_demand_code_ := newrec_.demand_code;
         original_supply_code_ := newrec_.supply_code;
         IF newrec_.line_item_no > 0 THEN
            new_pkg_component_line_ := TRUE;
         END IF;
   
         Validate_Proj_Connect___(newrec_.project_id,
                                  newrec_.demand_code,
                                  newrec_.supply_code,
                                  newrec_.order_no,
                                  newrec_.contract,
                                  newrec_.rowstate,
                                  newrec_.consignment_stock,
                                  newrec_.qty_on_order,
                                  newrec_.activity_seq,
                                  NULL,
                                  newrec_.planned_ship_date,
                                  newrec_.catalog_no,
                                  new_pkg_component_line_,
                                  newrec_.catalog_type );
         IF (original_demand_code_ = 'PO' AND std_planned_item_po_comp_ = 'TRUE') THEN
            newrec_.supply_code := original_supply_code_;
         END IF;
      END IF;
   
      IF (newrec_.provisional_price = 'TRUE' AND newrec_.price_freeze = 'FROZEN') THEN
         Error_SYS.Record_General(lu_name_, 'SALES_PRICE_TYPE: It is not allowed to select provisional price and price freeze together.');
      END IF;
   
      IF (newrec_.qty_assigned < 0) THEN
         Error_SYS.Record_General(lu_name_,'COASSQTYNOTNEG: The quantity reserved may not be negative.');
      END IF;
   
      IF (newrec_.classification_standard IS NOT NULL) THEN
         assortment_id_ := Assortment_Structure_API.Get_Assort_For_Classification(newrec_.classification_standard);
         IF (Customer_Assortment_Struct_API.Get_Classification_Standard(newrec_.customer_no, assortment_id_) IS NULL) THEN
            Error_SYS.Record_General(lu_name_, 'INVALID_CLASSIF: The classification standard :P1 is not connected to the customer :P2.',newrec_.classification_standard, order_rec_.customer_no);
         END IF;
         IF (newrec_.classification_part_no IS NULL) THEN
            Assortment_Node_API.Get_Classification_Defaults(newrec_.classification_unit_meas,
                                                            newrec_.catalog_no,
                                                            newrec_.classification_part_no,
                                                            newrec_.classification_standard,
                                                            'TRUE');  
         END IF;
      END IF;
   
      Check_Demand_Code___(newrec_.demand_code, order_rec_.confirm_deliveries, newrec_.consignment_stock);
   
      IF (newrec_.rental = Fnd_Boolean_API.DB_FALSE AND NVL(newrec_.demand_code, Database_SYS.string_null_) = Order_Supply_Type_API.DB_REPLACEMENT_CUSTOMER_ORDER) THEN
         Error_SYS.Record_General(lu_name_, 'NONRENTALREPLACEMENT: The demand code :P1 cannot be used for a non-rental customer order line.');
      END IF;
   
      IF (newrec_.picking_leadtime != trunc(newrec_.picking_leadtime)) OR (newrec_.picking_leadtime < 0) THEN
         Error_SYS.Item_General(lu_name_, 'PICKING_LEADTIME', 'PICKVALUEINTEGER: [:NAME] must be an integer. Negative values not allowed.');
      END IF;
   
      tax_liability_type_db_ := newrec_.tax_liability_type; 
      
      IF (newrec_.demand_code = 'IPD' AND Get_Ship_Addr_No( newrec_.order_No, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no) != newrec_.ship_addr_no) THEN
         Client_SYS.Add_Info(lu_name_, 'NOTAXUPDATE: The tax information will not be updated automatically. Consider reviewing the information.');
      END IF;
      
      partca_rec_ := Part_Catalog_API.Get(newrec_.part_no);
      IF (header_rowstate_ = 'Planned' AND newrec_.part_no IS NOT NULL) THEN
         inv_part_cost_level_db_ := Inventory_Part_API.Get_Invent_Part_Cost_Level_Db(newrec_.contract, newrec_.part_no);
         -- Checked inv_part_cost_level_db_ as well before setting the cost to zero.
         IF (newrec_.configuration_id = '*') AND (inv_part_cost_level_db_ = 'COST PER CONFIGURATION') AND (partca_rec_.configurable = 'CONFIGURED') THEN
            newrec_.cost := 0;
         END IF;
      END IF;
      IF (newrec_.rental = Fnd_Boolean_API.DB_TRUE) THEN
         newrec_.cost := 0;
      END IF;
      -- New order lines not allowed when the order is in state 'Delivered' or 'Invoiced'
      -- unless the lines are created by the public New method.
      -- Forward the created_by_server_ value to the Insert___ method...
      IF (NOT created_by_server_) THEN
         -- Make sure new order lines are allowed
         IF (CUSTOMER_ORDER_API.New_Order_Lines_Allowed(newrec_.order_no) = 0) THEN
            Error_SYS.Record_General(lu_name_, 'NONEWLINES: Order lines cannot be added if the order is Invoiced/Closed or Cancelled.');
         END IF;
   
         IF (newrec_.line_item_no > 0) THEN
            -- Check if new component order lines are allowed.
            IF (New_Comp_Lines_Allowed(newrec_.order_no, newrec_.line_no, newrec_.rel_no) = 0) THEN
               Error_SYS.Record_General(lu_name_, 'NONEWCOMP: Package components cannot be added if the order line is Delivered, Invoiced/Closed or Cancelled.');
            END IF;
         END IF;
      END IF;
   
      -- update pricing info
      IF (is_config_edited_ = TRUE) THEN
         Update_Config_Pricing_Info___(newrec_);
         Client_SYS.Add_To_Attr('CHAR_PRICE', newrec_.char_price, attr_);
         Client_SYS.Add_To_Attr('CALC_CHAR_PRICE', newrec_.calc_char_price, attr_);
      END IF;
   
      Check_Before_Insert___(attr_, newrec_, order_rec_.currency_code);
   
      Client_SYS.Add_To_Attr('LINE_NO', newrec_.line_no, attr_);
      Client_SYS.Add_To_Attr('REL_NO', newrec_.rel_no, attr_);
      Client_SYS.Add_To_Attr('LINE_ITEM_NO', newrec_.line_item_no, attr_);
      Client_SYS.Add_To_Attr('DESIRED_QTY', newrec_.desired_qty, attr_);
      Client_SYS.Add_To_Attr('ADDITIONAL_DISCOUNT', newrec_.additional_discount, attr_);
      Client_SYS.Add_To_Attr('SUPPLY_CODE_DB', newrec_.supply_code, attr_);
      Client_SYS.Add_To_Attr('SUPPLY_CODE', Order_Supply_Type_API.Decode(newrec_.supply_code), attr_);
      Client_SYS.Add_To_Attr('VENDOR_NO', newrec_.vendor_no, attr_);
      Client_SYS.Add_To_Attr('SHIP_VIA_CODE', newrec_.ship_via_code, attr_);
      Client_SYS.Add_To_Attr('CUST_CALENDAR_ID', newrec_.cust_calendar_id, attr_);
      Client_SYS.Add_To_Attr('EXT_TRANSPORT_CALENDAR_ID', newrec_.ext_transport_calendar_id, attr_);
      Client_SYS.Add_To_Attr('DELIVERY_LEADTIME', newrec_.delivery_leadtime, attr_);
      Client_SYS.Add_To_Attr('DEFAULT_ADDR_FLAG_DB', newrec_.default_addr_flag, attr_);
      Client_SYS.Add_To_Attr('DEFAULT_ADDR_FLAG', Gen_Yes_No_API.Decode(newrec_.default_addr_flag), attr_);
      Client_SYS.Add_To_Attr('SUPPLY_SITE', newrec_.supply_site, attr_);
      Client_SYS.Add_To_Attr('SUPPLY_SITE_RESERVE_TYPE_DB', newrec_.supply_site_reserve_type, attr_);
      Client_SYS.Add_To_Attr('SUPPLY_SITE_RESERVE_TYPE', Supply_Site_Reserve_Type_API.Decode(newrec_.supply_site_reserve_type), attr_);
      Client_SYS.Add_To_Attr('SUPPLIER_SHIP_VIA_TRANSIT', newrec_.supplier_ship_via_transit, attr_);
      Client_SYS.Add_To_Attr('SUPPLIER_SHIP_VIA_TRANSIT_DESC', newrec_.supplier_ship_via_transit_desc, attr_);
      Client_SYS.Add_To_Attr('DELIVERY_CONFIRMED_DB', newrec_.delivery_confirmed, attr_);
      Client_SYS.Add_To_Attr('PICKING_LEADTIME', newrec_.picking_leadtime, attr_);
      Client_SYS.Add_To_Attr('SHIPMENT_TYPE', newrec_.shipment_type, attr_);
      Client_SYS.Add_To_Attr('ROUTE_ID', newrec_.route_id, attr_);
      Client_SYS.Add_To_Attr('FORWARD_AGENT_ID', newrec_.forward_agent_id, attr_);
      Client_SYS.Add_To_Attr('PLANNED_DUE_DATE', newrec_.planned_due_date, attr_);
      
      newrec_.planned_due_date    := newrec_.planned_due_date;
      newrec_.additional_discount := order_rec_.additional_discount;
   
      IF (newrec_.part_no IS NOT NULL) THEN
         IF (newrec_.condition_code IS NOT NULL) THEN
            IF (partca_rec_.condition_code_usage = 'NOT_ALLOW_COND_CODE') THEN
               Error_SYS.Record_General(lu_name_,'COND_NOT_ALLOW: Condition code functionality is not enabled for this part. You cannot enter a condition code.');
            ELSE
               Condition_Code_API.Exist(newrec_.condition_code);
            END IF;
         ELSE
            IF (partca_rec_.condition_code_usage = 'ALLOW_COND_CODE') THEN
               newrec_.condition_code := Condition_Code_API.Get_Default_Condition_Code;
               -- send this to the client
            Client_SYS.Add_To_Attr('CONDITION_CODE', newrec_.condition_code, attr_);
            END IF;
         END IF;
      END IF;
   
      IF (newrec_.condition_code IS NOT NULL) THEN
         IF (newrec_.catalog_type = 'PKG') THEN
            Error_SYS.Record_General(lu_name_,'NO_COND_ON_PKG: Condition codes are not allowed for Package Parts.');
         ELSIF (newrec_.catalog_type = 'NON') THEN
            Error_SYS.Record_General(lu_name_,'NO_COND_ON_NON: Condition codes are not allowed for Non Inventory Sales Parts.');
         END IF;
      END IF;
   
      -- IF supply code is MRO no SM object should be created on delivery of the order line
      IF (newrec_.supply_code = 'MRO') AND (newrec_.create_sm_object_option = 'CREATESMOBJECT') THEN
         Error_SYS.Record_General(lu_name_, 'NOMROSM: Create SM Object is not allowed when supply code is MRO');
      END IF;
   
      IF (newrec_.supply_code IN ('IPD', 'PD', 'SEO')) OR (newrec_.supply_code = 'ND' AND (newrec_.line_item_no > 0)) THEN
         -- Added IF condition to use shipment creation method when supply code is IPD.
         IF ( newrec_.supply_code != 'IPD') THEN
            newrec_.shipment_creation := 'NO_AUTOMATIC';
         END IF;
         -- change default address flag to 'N' if header and line shipment creation methods are different.
         IF (order_rec_.shipment_creation != newrec_.shipment_creation ) THEN
            newrec_.default_addr_flag := 'N';
         END IF;
      END IF;
   
      -- Validate for not to raise information message for component parts due to changes in component part shipment creation will update the package shipment creation where package it self
      -- raise the message.
      IF (newrec_.catalog_type = 'NON' AND newrec_.supply_code != 'IPD' AND newrec_.line_item_no <= 0 ) AND (newrec_.shipment_creation = 'PICK_LIST_CREATION') THEN
         Raise_Info_Message___;
      END IF;
   
      IF (newrec_.ext_transport_calendar_id IS NOT NULL) THEN
         Work_Time_Calendar_API.Check_Not_Generated(newrec_.ext_transport_calendar_id);
      END IF;
   
      IF (newrec_.shipment_type IS NULL AND newrec_.packing_instruction_id IS NOT NULL) THEN
         Error_SYS.Record_General(lu_name_, 'PACKINSTRIDNOTALLOWED: Packing Instruction cannot have a value when shipment type is NULL.');
      END IF;
   
      IF (newrec_.line_item_no < 1) THEN
         IF (newrec_.demand_code = 'IPT' AND newrec_.packing_instruction_id IS NULL) THEN
            IF (newrec_.shipment_type IS NOT NULL) THEN
               IF (newrec_.addr_flag = 'Y') THEN
                  newrec_.packing_instruction_id := Def_Pack_Instruct_Shipment_API.Get_Packing_Instruction_Id(newrec_.contract, newrec_.catalog_no, newrec_.deliver_to_customer_no, newrec_.ship_addr_no);
               ELSE
                  newrec_.packing_instruction_id := Def_Pack_Instruct_Shipment_API.Get_Packing_Instruction_Id(newrec_.contract, newrec_.catalog_no, newrec_.deliver_to_customer_no, NULL);
               END IF;
            ELSE
               newrec_.packing_instruction_id := NULL;
            END IF;
            Client_SYS.Set_Item_Value('PACKING_INSTRUCTION_ID', newrec_.packing_instruction_id, attr_);
         END IF;
      ELSE
         newrec_.packing_instruction_id := NULL;
         Client_SYS.Set_Item_Value('PACKING_INSTRUCTION_ID', newrec_.packing_instruction_id, attr_);
      END IF;
   
      IF (newrec_.packing_instruction_id IS NOT NULL) THEN
         Part_Handling_Unit_API.Check_Combination(newrec_.catalog_no,
                                                  newrec_.sales_unit_meas,
                                                  newrec_.packing_instruction_id);
      END IF;
   
      IF (NVL(Client_SYS.Get_Item_Value('ADD_INFO', attr_), 'FALSE') = 'TRUE') THEN
         current_info_ := Client_SYS.Get_All_Info;
         App_Context_SYS.Set_Value('CUSTOMER_ORDER_LINE_API.CURRENT_INFO_', current_info_);
         Trace_SYS.Field('current_info 1', current_info_);
      END IF;
   EXCEPTION
      WHEN value_error THEN
         Error_SYS.Item_Format(lu_name_, name_, value_);
   END Core;

BEGIN
   $IF Component_Rmcom_SYS.INSTALLED $THEN
      IF Rm_Acc_Usage_API.Possible_To_Insert('CustomerOrder', 'BELONG_TO_PARENT', 'CHECK', newrec_.order_no) = FALSE THEN
         Rm_Acc_Usage_API.Raise_No_Access('CustomerOrder', newrec_.order_no);
      END IF;
   $END
   Core(newrec_, indrec_, attr_);
END Check_Insert___;


PROCEDURE Insert___ (
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   newrec_     IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      objid_      OUT    VARCHAR2,
      objversion_ OUT    VARCHAR2,
      newrec_     IN OUT NOCOPY customer_order_line_tab%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2 )
   IS
      value_too_large  EXCEPTION;
      PRAGMA           EXCEPTION_INIT(value_too_large, -12899);
   BEGIN
      newrec_.rowversion := sysdate;
      newrec_.rowkey := sys_guid();
      Client_SYS.Add_To_Attr('OBJKEY', newrec_.rowkey, attr_);
      newrec_.rowstate := '<UNDEFINED>';
      INSERT
         INTO customer_order_line_tab
         VALUES newrec_
         RETURNING rowid INTO objid_;
      newrec_.rowstate := NULL;
      Finite_State_Init___(newrec_, attr_);
      objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
   EXCEPTION
      WHEN dup_val_on_index THEN
         DECLARE
            constraint_ VARCHAR2(4000) := Utility_SYS.Get_Constraint_From_Error_Msg(sqlerrm);
         BEGIN
            IF (constraint_ = 'CUSTOMER_ORDER_LINE_RK') THEN
               Error_SYS.Fnd_Rowkey_Exist(lu_name_, newrec_.rowkey);
            ELSIF (constraint_ = 'CUSTOMER_ORDER_LINE_PK') THEN
               Raise_Record_Exist___(newrec_);
            ELSE
               Raise_Constraint_Violated___(newrec_, constraint_);
            END IF;
         END;
      WHEN value_too_large THEN
         Error_SYS.Fnd_Item_Length(lu_name_, sqlerrm);
   END Base;

   PROCEDURE Core (
      objid_      OUT    VARCHAR2,
      objversion_ OUT    VARCHAR2,
      newrec_     IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2 )
   IS
      company_                  VARCHAR2(20);
      pre_accounting_id_        NUMBER;
      temp_pre_accounting_id_   NUMBER;
      source_id_                VARCHAR2(200);
      order_rec_                CUSTOMER_ORDER_API.Public_Rec;
      sales_part_rec_           SALES_PART_API.Public_Rec;
      site_rec_                 Site_API.Public_Rec;
      temp_                     Public_Rec;
      created_by_server_        NUMBER;
      -- dynamic server call variables
      cross_rec_                Sales_Part_Cross_Reference_API.Public_Rec;
      clp_attr_                 VARCHAR2(2000);
      old_note_id_              NUMBER;
      is_input_uom_grp_allowed_ VARCHAR2(20);
      input_uom_group_          Inventory_Part_Tab.Input_Unit_Meas_Group_Id%TYPE;
      site_date_                DATE;
      country_desc_             VARCHAR2(740);
      insert_package_mode_      VARCHAR2(5);
      new_default_addr_flag_    VARCHAR2(1);
      copy_order_line_          BOOLEAN := NVL(Client_SYS.Get_Item_Value('COPY_ORDER_LINE', attr_), 'FALSE') = 'TRUE';   
   BEGIN
      order_rec_           := CUSTOMER_ORDER_API.Get(newrec_.order_no);
      -- New lines are not allowed if mandatory postings on order head have not been defined
      site_rec_            := Site_API.Get(newrec_.contract);
      company_             := site_rec_.company;
      pre_accounting_id_   := order_rec_.pre_accounting_id;
      source_id_           := Language_SYS.Translate_Constant(lu_name_, 'SOURCEID_1: Customer Order :P1', NULL, newrec_.order_no);
      created_by_server_   := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('CREATED_BY_SERVER', attr_));
      insert_package_mode_ := NVL(Client_SYS.Get_Item_Value('INSERT_PACKAGE_MODE_', attr_), 'FALSE');
      
      IF (newrec_.customer_tax_usage_type IS NULL) THEN
         newrec_.customer_tax_usage_type  := order_rec_.customer_tax_usage_type;
      END IF;
   
      IF (created_by_server_ = 0) THEN
         Pre_Accounting_API.Check_Mandatory_Code_Parts(pre_accounting_id_, 'M103', company_, source_id_);
      END IF;
   
      IF (newrec_.planned_ship_date IS NOT NULL) THEN
         Client_SYS.Set_Item_Value('PLANNED_SHIP_DATE', newrec_.planned_ship_date, attr_);
      END IF;
   
      -- fetch customer part number if not entered - or invalid
      IF ((newrec_.customer_part_no IS NULL) OR
          (newrec_.catalog_no != NVL(Sales_Part_Cross_Reference_API.Get_Catalog_No(newrec_.customer_no, newrec_.contract,
                                                                                   newrec_.customer_part_no), ' '))) THEN
         Trace_SYS.Message('Fetching cross referenced part');
         newrec_.customer_part_no := Sales_Part_Cross_Reference_API.Get_Customer_Part_No(newrec_.customer_no, newrec_.contract, newrec_.catalog_no);
         Trace_SYS.Field('CUSTOMER_PART_NO', newrec_.customer_part_no);
      END IF;
         -- if part number was found, fetch unit and conv factor...
      
      IF (newrec_.customer_part_no IS NOT NULL) THEN
         Trace_SYS.Message('Fetching the rest of the customer part attributes.');
         cross_rec_ := Sales_Part_Cross_Reference_API.Get(newrec_.customer_no, newrec_.contract, newrec_.customer_part_no);
         IF (newrec_.customer_part_conv_factor IS NULL) THEN
            newrec_.customer_part_conv_factor := greatest(NVL(cross_rec_.conv_factor, 1), 0);
         END IF;
         IF (newrec_.cust_part_invert_conv_fact IS NULL) THEN
            newrec_.cust_part_invert_conv_fact := greatest(NVL(cross_rec_.inverted_conv_factor, 1), 0);
         END IF;
         IF (newrec_.customer_part_unit_meas IS NULL) THEN
            newrec_.customer_part_unit_meas := NVL(cross_rec_.customer_unit_meas, newrec_.sales_unit_meas);
         END IF;
         IF (newrec_.customer_part_buy_qty IS NULL) THEN
            newrec_.customer_part_buy_qty := (newrec_.buy_qty_due / newrec_.customer_part_conv_factor) * newrec_.cust_part_invert_conv_fact;
         END IF;
         IF (newrec_.catalog_desc IS NULL) THEN
            newrec_.catalog_desc := cross_rec_.catalog_desc;
         END IF;
   
         Client_SYS.Set_Item_Value('CUSTOMER_PART_NO', newrec_.customer_part_no, attr_);
         Client_SYS.Set_Item_Value('CUSTOMER_PART_CONV_FACTOR', newrec_.customer_part_conv_factor, attr_);
         Client_SYS.Set_Item_Value('CUSTOMER_PART_UNIT_MEAS', newrec_.customer_part_unit_meas, attr_);
         Client_SYS.Set_Item_Value('CUSTOMER_PART_BUY_QTY', newrec_.customer_part_buy_qty, attr_);
         Client_SYS.Set_Item_Value('CUST_PART_INVERT_CONV_FACT', newrec_.cust_part_invert_conv_fact, attr_);
      ELSE
         newrec_.customer_part_conv_factor  := NULL;
         newrec_.customer_part_unit_meas    := NULL;
         newrec_.customer_part_buy_qty      := NULL;
         newrec_.cust_part_invert_conv_fact := NULL;
      END IF;
   
      -- IF inserting a package component, set catalog_type as such and set the self billing value as NOT SELF BILLING.
      IF (newrec_.line_item_no > 0) THEN
         newrec_.catalog_type := 'KOMP';
         Client_SYS.Set_Item_Value('CATALOG_TYPE', Sales_Part_Type_API.Decode(newrec_.catalog_type), attr_);
         newrec_.self_billing := 'NOT SELF BILLING';
         Client_SYS.Set_Item_Value('SELF_BILLING_DB',  newrec_.self_billing, attr_);
      ELSE
         --Add the self billing to the attribute string
         Client_SYS.Set_Item_Value('SELF_BILLING_DB',  newrec_.self_billing, attr_);
         Client_SYS.Set_Item_Value('SELF_BILLING',  Self_Billing_Type_API.Decode(newrec_.self_billing), attr_);
      END IF;
   
      sales_part_rec_           := Sales_Part_API.Get(newrec_.contract, newrec_.catalog_no);
      input_uom_group_          := Inventory_Part_API.Get_Input_Unit_Meas_Group_Id( newrec_.contract, newrec_.part_no);
      is_input_uom_grp_allowed_ := Input_Unit_Meas_Group_API.Is_Usage_Allowed(input_uom_group_, 'ORDER' );
   
      -- IID DI011 removed net weight from Invent Part and adds it to the Partcatalog.
      -- As a result now Sales Part's freight info can get fetched from on itself or from part catalog.
      -- Sales_Weight_Volume_Util_API.Get_Total_Weight_Volume does the necessary conversions and returns the values.
      Sales_Weight_Volume_Util_API.Get_Total_Weight_Volume(total_net_weight_      => newrec_.line_total_weight,
                                                           total_gross_weight_    => newrec_.line_total_weight_gross,
                                                           total_volume_          => newrec_.line_total_qty,
                                                           adjusted_net_weight_   => newrec_.adjusted_weight_net,
                                                           adjusted_gross_weight_ => newrec_.adjusted_weight_gross,
                                                           adjusted_volume_       => newrec_.adjusted_volume,
                                                           contract_              => newrec_.contract,
                                                           catalog_no_            => newrec_.catalog_no,
                                                           part_no_               => newrec_.part_no,
                                                           buy_qty_due_           => newrec_.buy_qty_due,
                                                           configuration_id_      => newrec_.configuration_id,
                                                           input_unit_meas_       => newrec_.input_unit_meas,
                                                           input_qty_              => newrec_.input_qty,
                                                           packing_instruction_id_ => newrec_.packing_instruction_id);
   
      site_date_ := Site_API.Get_Site_Date(newrec_.contract);
      -- Check if new line with non inventory part should be ready for delivery
      IF (((newrec_.supply_code = 'NO') AND ((newrec_.catalog_type != 'KOMP') OR (order_rec_.backorder_option != 'INCOMPLETE PACKAGES NOT ALLOWED')))
             AND ((trunc(newrec_.planned_due_date) <= trunc(site_date_)) OR Cust_Order_Type_API.Get_Oe_Alloc_Assign_Flag(order_rec_.order_id) = Cust_Ord_Reservation_Type_API.Decode('Y'))
             OR (newrec_.supply_code IN ('SEO', 'PRJ'))) THEN
         newrec_.qty_to_ship := newrec_.revised_qty_due;
      ELSE
         newrec_.qty_to_ship := 0;
      END IF;
   
      old_note_id_    := newrec_.note_id;
      newrec_.note_id := Document_Text_API.Get_Next_Note_Id;
   
      IF (old_note_id_ IS NOT NULL) THEN
         Document_Text_API.Copy_All_Note_Texts(old_note_id_, newrec_.note_id);
      END IF;
   
      temp_pre_accounting_id_ := newrec_.pre_accounting_id ;
   
      IF (newrec_.line_item_no > 0) THEN
         -- if a component, use the same pre_accounting_id.
         temp_ := Get(newrec_.order_no, newrec_.line_no, newrec_.rel_no, -1);
         newrec_.pre_accounting_id := temp_.pre_accounting_id;
         IF (newrec_.qty_per_assembly IS NULL) THEN
            newrec_.qty_per_assembly := newrec_.buy_qty_due/temp_.buy_qty_due;
         END IF;
   
         IF ((newrec_.new_comp_after_delivery IS NULL)) THEN
            newrec_.new_comp_after_delivery := 'FALSE';
         END IF;
      ELSE
         -- Not a package component
         newrec_.pre_accounting_id := Pre_Accounting_API.Get_Next_Pre_Accounting_Id;
      END IF;
   
      IF (newrec_.line_item_no <= 0) THEN
         IF (temp_pre_accounting_id_ IS NOT NULL) AND
            (newrec_.originating_rel_no IS NOT NULL) AND (newrec_.originating_line_item_no IS NOT NULL) THEN
            -- new source lines copy old order line pre accounting info to the new line
            Pre_Accounting_API.Copy_Pre_Accounting(temp_pre_accounting_id_, newrec_.pre_accounting_id, newrec_.contract);
         ELSE
            -- do copy for normal lines and package heads
            Pre_Accounting_API.Copy_Pre_Accounting(order_rec_.pre_accounting_id, newrec_.pre_accounting_id, newrec_.contract, NULL, 'CUSTOMER ORDER');
         END IF;
      END IF;
   
      Client_SYS.Set_Item_Value('NOTE_ID', newrec_.note_id, attr_);
      Client_SYS.Set_Item_Value('PRE_ACCOUNTING_ID', newrec_.pre_accounting_id, attr_);
   
      IF (NVL(newrec_.demand_code, ' ') != 'CQ') THEN
         newrec_.price_conv_factor := sales_part_rec_.price_conv_factor;
      END IF;
   
      -- The column is mandatory in the database, but calculated from the delivery dates
      Error_SYS.Check_Not_Null(lu_name_, 'PLANNED_SHIP_DATE', newrec_.planned_ship_date);
      -- Set shipment period
      newrec_.planned_ship_period := Work_Time_Calendar_API.Get_Period(site_rec_.dist_calendar_id, newrec_.planned_ship_date);
      Client_SYS.Add_To_Attr('PLANNED_SHIP_PERIOD', newrec_.planned_ship_period, attr_);
   
      -- if we have a configurable part, we will sooner or later create a configuration,
      -- then we need a price-id. Create it now so it is available when we call the configuration dialog.
      IF (Part_Catalog_API.Get_Configurable_Db(nvl(newrec_.part_no, newrec_.catalog_no)) = 'CONFIGURED') THEN
         IF (newrec_.configured_line_price_id IS NULL) THEN
            newrec_.configured_line_price_id := Configured_Line_Price_API.New_Order_Line_Price(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
         ELSE
         -- if we get a configured line price id from the client, it was created before saving.
         -- Update the reference back to this line now that all keys are determined.
            Client_Sys.Clear_Attr(clp_attr_);
            Client_SYS.Add_To_Attr('LINE_NO', newrec_.line_no, clp_attr_);
            Client_SYS.Add_To_Attr('REL_NO', newrec_.rel_no, clp_attr_);
            Client_SYS.Add_To_Attr('LINE_ITEM_NO', newrec_.line_item_no, clp_attr_);
            Configured_Line_Price_API.Modify(newrec_.configured_line_price_id, clp_attr_);
         END IF;
      ELSE
         newrec_.configuration_id         := '*';
         newrec_.configured_line_price_id := NULL;
      END IF;
   
      Client_SYS.Add_To_Attr('CONFIGURED_LINE_PRICE_ID', newrec_.configured_line_price_id, attr_);
   
      -- fetch warranty ID from sales part if not inherited from Quotation
      IF ((NVL(newrec_.demand_code, ' ') != 'CQ') AND NOT(copy_order_line_)) THEN
         newrec_.cust_warranty_id := sales_part_rec_.cust_warranty_id;
      END IF;
   
      IF (newrec_.charged_item = 'ITEM NOT CHARGED' OR newrec_.exchange_item = 'EXCHANGED ITEM')
         OR (newrec_.part_ownership IN ('SUPPLIER LOANED', 'CUSTOMER OWNED')) THEN
         newrec_.cust_warranty_id := NULL;
      END IF;
   
      IF (newrec_.cust_warranty_id IS NOT NULL) THEN
         Cust_Warranty_API.Inherit(newrec_.cust_warranty_id);
         Client_SYS.Add_To_Attr('CUST_WARRANTY_ID', newrec_.cust_warranty_id, attr_);
      END IF;
   
      IF (newrec_.activity_seq IS NULL) THEN
         newrec_.project_id := NULL;
      END IF;
   
      -- gelr:disc_price_rounded, begin
      IF (Customer_Order_API.Get_Discounted_Price_Rounded(newrec_.order_no)) THEN
         -- user/system operates on additional_discount but it is saved in technical column: original_add_discount
         -- Initialize original_ column which is now empty
         newrec_.original_add_discount := newrec_.additional_discount;
         newrec_.additional_discount := Customer_Order_Pricing_API.Calculate_Additional_Discount(newrec_.contract,
                                                                      order_rec_.currency_code,
                                                                      newrec_.additional_discount,
                                                                      newrec_.buy_qty_due,
                                                                      newrec_.price_conv_factor,
                                                                      newrec_.sale_unit_price,
                                                                      newrec_.discount);
         -- The same as previous
         newrec_.original_order_discount := newrec_.order_discount;
         newrec_.order_discount := Customer_Order_Pricing_API.Calculate_Additional_Discount(newrec_.contract,
                                                                      order_rec_.currency_code,
                                                                      newrec_.order_discount,
                                                                      newrec_.buy_qty_due,
                                                                      newrec_.price_conv_factor,
                                                                      newrec_.sale_unit_price,
                                                                      newrec_.discount);
      ELSE
         newrec_.original_discount       := 0;
         newrec_.original_order_discount := 0;
         newrec_.original_add_discount   := 0;
      END IF;
      -- gelr:disc_price_rounded, end   
      -- gelr:brazilian_specific_attributes, begin
      IF order_rec_.business_transaction_id IS NOT NULL THEN
         newrec_.ref_id := order_rec_.business_transaction_id;
      END IF;
      -- gelr:brazilian_specific_attributes, end
      
      Base(objid_, objversion_, newrec_, attr_);
   
      $IF (Component_Jinsui_SYS.INSTALLED) $THEN
         IF order_rec_.jinsui_invoice ='TRUE' THEN
            Validate_Jinsui_Constraints__(newrec_, 0, FALSE);
         END IF;
      $END
   
      IF NOT (Client_SYS.Item_Exist('INSERT_PACKAGE_MODE_',attr_))THEN
         Client_SYS.Add_To_Attr('INSERT_PACKAGE_MODE_', insert_package_mode_, attr_);
      END IF;
   
      -- Note : Rental object should be created before Post Insert Action.
      -- To calculate the sales price total, it needs rental duration days.
      IF (newrec_.rental = Fnd_Boolean_API.DB_TRUE) THEN
         New_Rental___(attr_, newrec_);
      END IF;
   
      -- Perform post insert action like creating package component lines and making reservations
      Post_Insert_Actions___(attr_, newrec_);
   
   
      IF (newrec_.activity_seq IS NOT NULL) THEN
         IF (newrec_.charged_item = 'CHARGED ITEM') THEN
            Calculate_Revenue(newrec_.order_no,
                              newrec_.line_no,
                              newrec_.rel_no,
                              newrec_.line_item_no);
         END IF;
         $IF Component_Ordstr_SYS.INSTALLED $THEN
            DECLARE
               interim_head_id_  VARCHAR2(12);
            BEGIN
               interim_head_id_ := Interim_Demand_Head_API.Get_Cust_Ord_Line_Int_Head(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
               IF interim_head_id_ IS NOT NULL THEN
                  -- Reflect activity information changes to the Interim Demand Header
                  Interim_Demand_Head_API.Modify_Project_Activity_Seq(interim_head_id_, newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, newrec_.project_id, newrec_.activity_seq);
               END IF;
            END;
         $END
      END IF;
   
      IF (newrec_.cust_calendar_id IS NOT NULL) THEN
         IF (newrec_.cust_calendar_id != NVL(order_rec_.cust_calendar_id, Database_Sys.string_null_)) THEN
            Work_Time_Calendar_API.Add_Info_On_Pending(newrec_.cust_calendar_id);
         END IF;
   
         IF (NOT (newrec_.planned_delivery_date = newrec_.wanted_delivery_date
                  AND newrec_.wanted_delivery_date = order_rec_.wanted_delivery_date)) THEN
            Cust_Ord_Date_Calculation_API.Check_Date_On_Cust_Calendar_(newrec_.customer_no, newrec_.cust_calendar_id,
                                                        newrec_.planned_delivery_date, 'PLANNED');
         END IF;
      END IF;
   
      IF (newrec_.ext_transport_calendar_id IS NOT NULL) THEN
         Work_Time_Calendar_API.Add_Info_On_Pending(newrec_.ext_transport_calendar_id);
      END IF;
   
      IF (newrec_.supply_code = 'IPD') THEN
         IF Tax_Handling_Order_Util_API.Check_Ipd_Tax_Registration(company_, newrec_.contract, newrec_.supply_code, order_rec_.supply_country, newrec_.country_code) THEN
            country_desc_ := Iso_Country_API.Get_Description(newrec_.country_code, NULL);
            Client_SYS.Add_Info(lu_name_, 'SUPCOUNTRYDIFF: Company :P1 has a tax registration in delivery country :P2. The company tax ID number for the supply country of the order might not be appropriate.', company_, country_desc_);
         END IF;
      END IF;
      -- Set out parameter value
      Get_Id_Version_By_Keys___(objid_, objversion_, newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
   EXCEPTION
      WHEN dup_val_on_index THEN
         Error_SYS.Record_Exist(lu_name_);
   END Core;

BEGIN
   $IF Component_Rmcom_SYS.INSTALLED $THEN
      IF Rm_Acc_Usage_API.Possible_To_Insert('CustomerOrder', 'BELONG_TO_PARENT', 'DO', newrec_.order_no) = FALSE THEN
         Rm_Acc_Usage_API.Raise_No_Access('CustomerOrder', newrec_.order_no);
      END IF;
   $END
   Core(objid_, objversion_, newrec_, attr_);
END Insert___;


PROCEDURE Check_Update___ (
   oldrec_ IN     customer_order_line_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY customer_order_line_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      oldrec_ IN     customer_order_line_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY customer_order_line_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Validate_SYS.Item_Update(lu_name_, 'ORDER_NO', indrec_.order_no);
      Validate_SYS.Item_Update(lu_name_, 'LINE_NO', indrec_.line_no);
      Validate_SYS.Item_Update(lu_name_, 'REL_NO', indrec_.rel_no);
      Validate_SYS.Item_Update(lu_name_, 'LINE_ITEM_NO', indrec_.line_item_no);
      Validate_SYS.Item_Update(lu_name_, 'CONTRACT', indrec_.contract);
      Validate_SYS.Item_Update(lu_name_, 'CATALOG_NO', indrec_.catalog_no);
      Validate_SYS.Item_Update(lu_name_, 'NOTE_ID', indrec_.note_id);
      Validate_SYS.Item_Update(lu_name_, 'PART_NO', indrec_.part_no);
      Validate_SYS.Item_Update(lu_name_, 'PRE_ACCOUNTING_ID', indrec_.pre_accounting_id);
      Validate_SYS.Item_Update(lu_name_, 'DATE_ENTERED', indrec_.date_entered);
      Validate_SYS.Item_Update(lu_name_, 'CUSTOMER_PART_NO', indrec_.customer_part_no);
      Validate_SYS.Item_Update(lu_name_, 'PLANNED_SHIP_PERIOD', indrec_.planned_ship_period);
      Validate_SYS.Item_Update(lu_name_, 'CUSTOMER_NO', indrec_.customer_no);
      Validate_SYS.Item_Update(lu_name_, 'PROJECT_ID', indrec_.project_id);
      Validate_SYS.Item_Update(lu_name_, 'DELIVER_TO_CUSTOMER_NO', indrec_.deliver_to_customer_no);
      Validate_SYS.Item_Update(lu_name_, 'RENTAL', indrec_.rental);
      Check_Common___(oldrec_, newrec_, indrec_, attr_);
   END Base;

   PROCEDURE Core (
      oldrec_ IN     customer_order_line_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY customer_order_line_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
      name_                            VARCHAR2(30);
      value_                           VARCHAR2(4000);
      delivery_date_changed_           BOOLEAN := FALSE;
      calendar_id_                     VARCHAR2(12);
      order_rec_                       CUSTOMER_ORDER_API.Public_Rec;
      site_rec_                        SITE_API.Public_Rec;
      sales_part_rec_                  SALES_PART_API.Public_Rec;
      site_discom_info_rec_            Site_Discom_Info_API.Public_Rec;
      header_rowstate_                 CUSTOMER_ORDER_TAB.rowstate%TYPE;
      default_addr_flag_               CUSTOMER_ORDER_LINE_TAB.default_addr_flag%TYPE;
      qty_refreshed_                   BOOLEAN := FALSE;
      buy_qty_changed_                 BOOLEAN := FALSE;
      total_sourced_qty_               NUMBER;
      supply_site_qty_                 NUMBER;
      supply_chain_reserve_            NUMBER;
      sourcing_flag_                   VARCHAR2(5) := 'FALSE';
      company_                         VARCHAR2(20);
      planned_date_changed_            BOOLEAN := FALSE;
      server_data_change_              NUMBER :=0;
      inv_flag_                        VARCHAR2(10);
      dop_new_qty_demand_              VARCHAR2(2000);
      dummy_                           VARCHAR2(2000);
      automatic_capability_check_      VARCHAR2(50);
      capability_check_source_flag_    VARCHAR2(5) := 'FALSE';
      dummy_boolean_                   BOOLEAN;
      old_auto_cc_flag_                VARCHAR2(50);
      interim_head_id_                 VARCHAR2(12);
      count_                           NUMBER;
      tax_code_                        VARCHAR2(20);
      refresh_tax_code_                BOOLEAN := FALSE;
      revised_qty_due_                 NUMBER;
      inv_part_cost_level_db_          VARCHAR2(50);
      temp_num_                        NUMBER;
      zone_info_exist_                 VARCHAR2(5) := 'FALSE';
      sing_occ_addr_                   Cust_Order_Line_Address_API.Co_Line_Addr_Rec;
   
      update_price_effective_date_     VARCHAR2(5);
      customer_level_db_               VARCHAR2(30);
      customer_level_id_               VARCHAR2(200);
      price_source_                    VARCHAR2(200);
      tax_codes_found_                 BOOLEAN := FALSE;
      supply_country_                  VARCHAR2(2);
      header_tax_id_no_                VARCHAR2(50);
      calculate_cost_for_config_       BOOLEAN := FALSE;
      sales_price_type_db_             VARCHAR2(20);
      rental_chargable_days_           NUMBER;
      current_info_                    VARCHAR2(32000);
      make_reservation_                VARCHAR2(5):='FALSE';
      from_shortage_                   VARCHAR2(5):='FALSE';
      no_of_preliminary_shipments_     NUMBER;
      new_ship_connectable_qty_        NUMBER;
      old_ship_connectable_qty_        NUMBER;
      connected_shipment_id_           NUMBER;
      change_request_                  VARCHAR2(5);
      update_on_ordchg_approve_        BOOLEAN:=FALSE;
      customer_no_                     customer_order_tab.customer_no%TYPE;   
      addr_no_                         customer_order_tab.bill_addr_no%TYPE;    
      calc_revise_qty_due_             NUMBER;
      ctp_run_id_                      NUMBER;
      temp_newrec_                     CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
      b2b_quotation_order_             ORDER_QUOTATION_TAB.B2B_ORDER%TYPE;
      
      CURSOR get_manual_pick_lines IS
         SELECT COUNT(res.preliminary_pick_list_no)
         FROM   customer_order_reservation_tab res, manual_consol_pick_list_tab mpl
         WHERE  res.preliminary_pick_list_no IS NOT NULL
         AND    mpl.rowstate = 'Preliminary'
         AND    mpl.preliminary_pick_list_no = res.preliminary_pick_list_no
         AND    pick_list_no = '*'
         AND    res.order_no = newrec_.order_no
         AND    line_no      = newrec_.line_no
         AND    rel_no       = newrec_.rel_no
         AND    line_item_no = newrec_.line_item_no;
   
      insert_package_mode_             VARCHAR2(5);
      pkg_buy_qty_due_                 NUMBER;
      po_charged_comp_change_          VARCHAR2(5);
      discount_line_count_             NUMBER;
      sale_unit_price_                 NUMBER;
      unit_price_incl_tax_             NUMBER;
      base_sale_unit_price_            NUMBER;
      base_unit_price_incl_tax_        NUMBER;
      discount_                        NUMBER;
      unpeg_ipd_flag_                  VARCHAR2(5);
      interim_ord_id_                  VARCHAR2(12);
   BEGIN
      -- planned_ship_date
      -- Planned ship period will be updated when the calendar is recreated (via planned_delivery_date)
      -- or if planned_ship_date has been changed by the user
   
      insert_package_mode_          := NVL(Client_SYS.Get_Item_Value('INSERT_PACKAGE_MODE_', attr_), 'FALSE');
      order_rec_                    := CUSTOMER_ORDER_API.Get(newrec_.order_no);
      header_rowstate_              := order_rec_.rowstate;
      capability_check_source_flag_ := NVL(Client_SYS.Get_Item_Value('CAPABILITY_CHECK_SOURCE_FLAG', attr_), 'FALSE');
      site_rec_                     := Site_API.Get(newrec_.contract);
      calendar_id_                  := site_rec_.dist_calendar_id;
      company_                      := site_rec_.company;
      server_data_change_           := NVL(Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('SERVER_DATA_CHANGE', attr_)), 0);
      po_charged_comp_change_       := Client_SYS.Get_Item_Value('PO_CHARGED_COMP_CHANGE', attr_);
      change_request_               := NVL(Client_SYS.Get_Item_Value('CHANGE_REQUEST', attr_), 'FALSE');
      unpeg_ipd_flag_               := NVL(Client_SYS.Get_Item_Value('UNPEG_IPD_FLAG', attr_), 'FALSE');
      IF ((change_request_ = 'TRUE') AND (NVL(newrec_.demand_code, Database_Sys.string_null_) = 'IPD')) THEN
         update_on_ordchg_approve_ := TRUE;
      END IF;
   
      Validate_Price___(newrec_);
      IF (indrec_.buy_qty_due) THEN
         Check_Qty_From_Repair_Order___(newrec_.demand_code, newrec_.demand_order_ref1, newrec_.part_no);
         -- Check if qty is refreshed, i.e., if qty has been updated with same value as in old record.
         -- Used for being able to trigger fetching of correct default prices and discounts.
         IF (oldrec_.buy_qty_due = newrec_.buy_qty_due) THEN
            -- buy_qty_due has been refreshed.
            qty_refreshed_ := TRUE;
         END IF;
         IF (newrec_.demand_code = 'WO') THEN
            Client_SYS.Add_Info(lu_name_, 'CONNECTED_TO_WO: This order is connected to work order :P1/:P2/:P3 - which will not be updated automatically.', newrec_.demand_order_ref1, newrec_.demand_order_ref2, newrec_.demand_order_ref3);
         END IF;
         make_reservation_ := 'TRUE';
         buy_qty_changed_  := TRUE;
   
      END IF;
    
      IF (indrec_.desired_qty) THEN
         Check_Qty_From_Repair_Order___(newrec_.demand_code, newrec_.demand_order_ref1, newrec_.part_no);
      END IF;
   
      -- check if date portion has changed - in that case it's not allowed to change the value
      IF ((trunc(oldrec_.planned_ship_date) != trunc(newrec_.planned_ship_date)) AND (server_data_change_ != 1) AND (capability_check_source_flag_ = 'FALSE')) THEN
         Error_SYS.Item_General(lu_name_, 'PLANNED_SHIP_DATE', 'UPD_TIME_ONLY: You may only change the time for [:NAME]!');
      ELSE
         -- set shipment period
         newrec_.planned_ship_period := Work_Time_Calendar_API.Get_Period(calendar_id_, newrec_.planned_ship_date);
      END IF;
      
      -- check if date portion has changed - in that case it's not allowed to change the value
      IF ((trunc(oldrec_.planned_due_date) != trunc(newrec_.planned_due_date)) AND (server_data_change_ != 1) AND (capability_check_source_flag_ = 'FALSE')) THEN
         Error_SYS.Item_General(lu_name_, 'PLANNED_DUE_DATE', 'UPD_TIME_ONLY: You may only change the time for [:NAME]!');
      END IF;
   
      b2b_quotation_order_ := Order_Quotation_API.Get_B2b_Order_Db(oldrec_.demand_order_ref1);
      
      IF (indrec_.demand_order_ref1) THEN
         IF (oldrec_.supply_code != 'MRO') THEN
            IF NOT(oldrec_.demand_code = 'CQ' AND b2b_quotation_order_ = 'TRUE') THEN
               Error_SYS.Item_Update(lu_name_, 'DEMAND_ORDER_REF1');
            END IF;
         END IF;
      END IF;
   
      IF (indrec_.demand_order_ref2) THEN
         IF (oldrec_.supply_code != 'MRO') THEN
            IF NOT(oldrec_.demand_code = 'CQ' AND b2b_quotation_order_ = 'TRUE') THEN
               Error_SYS.Item_Update(lu_name_, 'DEMAND_ORDER_REF2');
            END IF;
         END IF;
      END IF;
      
      IF NOT(oldrec_.demand_code = 'CQ' AND b2b_quotation_order_ = 'TRUE') THEN
         IF (indrec_.demand_order_ref3) THEN
            Error_SYS.Item_Update(lu_name_, 'DEMAND_ORDER_REF3');
         END IF;
         IF (indrec_.demand_order_ref4) THEN
            Error_SYS.Item_Update(lu_name_, 'DEMAND_ORDER_REF4');
         END IF;
      END IF;
   
      IF ((indrec_.demand_code) AND (oldrec_.supply_code != 'MRO')) THEN
         IF NOT(oldrec_.demand_code = 'CQ' AND b2b_quotation_order_ = 'TRUE') THEN
            Error_SYS.Item_Update(lu_name_, 'DEMAND_CODE');
         END IF;
      END IF;
   
      IF(indrec_.vendor_no) THEN
         -- If order has been released then supplier may be changed only if supply code is (was) Not Decided...
         IF ((header_rowstate_ = 'Planned') OR
             ((oldrec_.supply_code = 'ND' OR newrec_.supply_code = 'IO' OR newrec_.supply_code = 'NO') AND (header_rowstate_ NOT IN ('Delivered', 'Invoiced', 'Cancelled')))) THEN
            IF (newrec_.vendor_no IS NOT NULL) THEN
               Exist_Vendor_No___(newrec_.vendor_no, newrec_.contract, newrec_.purchase_part_no, newrec_.rental);
            END IF;
         ELSE
            IF ((newrec_.vendor_no IS NOT NULL) OR ((newrec_.vendor_no IS NULL) AND (oldrec_.vendor_no IS NOT NULL))) THEN
               IF (oldrec_.supply_code = newrec_.supply_code) THEN
                  Error_SYS.Record_General(lu_name_, 'CANNOTUPDSUPP: Supplier can be changed only when order has not been Released.');
               END IF;
            END IF;
         END IF;
      END IF;
   
      IF (newrec_.activity_seq IS NOT NULL) THEN
         $IF (Component_Proj_SYS.INSTALLED) $THEN
            NULL;
         $ELSE
            Error_SYS.Record_General(lu_name_, 'ACTIVITYNOTINST: Activity Sequence may not be set since Activity is not installed.');
         $END
      END IF;
      
      $IF (Component_Deford_SYS.INSTALLED) $THEN
         IF (Def_Contract_Order_Item_API.CO_Line_On_Defense_Contract(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no)) THEN
            Def_Contract_Order_Item_API.Validate_Co_Line_Changes(oldrec_,newrec_,server_data_change_);
         END IF;
      $END
      
      Base(oldrec_, newrec_, indrec_, attr_);
      
      IF (indrec_.configuration_id) THEN
         Client_SYS.Add_To_Attr('SENT_CONFIGURATION', 'TRUE', attr_);
      END IF;
      
      IF (indrec_.ship_addr_no) THEN
         newrec_.end_customer_id := Customer_Info_Address_API.Get_End_Customer_Id(newrec_.deliver_to_customer_no, newrec_.ship_addr_no);
      END IF;
   
      IF po_charged_comp_change_ = 'TRUE' THEN
         Client_SYS.Add_To_Attr('PO_CHARGED_COMP_CHANGE', po_charged_comp_change_, attr_);
      END IF;
   
      IF ((NVL(newrec_.route_id, ' ') != NVL(oldrec_.route_id, ' '))  OR (NVL(newrec_.ship_via_code, ' ') != NVL(oldrec_.ship_via_code, ' ')) OR
         (newrec_.delivery_leadtime != oldrec_.delivery_leadtime) OR (NVL(oldrec_.ext_transport_calendar_id, Database_SYS.string_null_) != NVL(oldrec_.ext_transport_calendar_id, Database_SYS.string_null_))
          OR (newrec_.picking_leadtime != oldrec_.picking_leadtime) OR (indrec_.target_date OR indrec_.supplier_ship_via_transit)) THEN
         delivery_date_changed_ := TRUE;
      END IF;
   
      -- Check if price source is refreshed, i.e., if price source has been updated with same value as in old record.
      -- Used for being able to trigger fetching of correct default prices and discounts.
      IF ((indrec_.price_source) AND (oldrec_.price_source = newrec_.price_source)) THEN
         -- buy_qty_due has been refreshed.
         Client_SYS.Add_To_Attr('PRICE_SOURCE_REFRESHED', 1, attr_);
      END IF;
   
      IF indrec_.planned_delivery_date THEN
         make_reservation_      := 'TRUE';
         delivery_date_changed_ := TRUE;
         planned_date_changed_  := TRUE;
      END IF;
   
      IF indrec_.wanted_delivery_date THEN
         delivery_date_changed_ := TRUE;
         make_reservation_      := 'TRUE';
      END IF;
   
      IF indrec_.tax_code THEN
         refresh_tax_code_        := TRUE;      
      END IF;
   
      IF (indrec_.tax_liability  AND oldrec_.tax_liability != newrec_.tax_liability) OR
         (indrec_.ship_addr_no AND oldrec_.ship_addr_no != newrec_.ship_addr_no)  OR
         (newrec_.addr_flag = 'N' AND oldrec_.addr_flag = 'Y') OR
         (newrec_.addr_flag = 'Y' AND oldrec_.addr_flag = 'N' and oldrec_.default_addr_flag = 'N') OR --this added to handle copy address from header to non-default lines
         (newrec_.default_addr_flag = 'Y' AND oldrec_.default_addr_flag = 'N') THEN
         refresh_tax_code_ := TRUE;
      END IF;
   
      IF (indrec_.delivery_type ) THEN
         refresh_tax_code_      := TRUE;
      END IF;
   
      IF ((oldrec_.buy_qty_due != newrec_.buy_qty_due) AND (oldrec_.revised_qty_due = newrec_.revised_qty_due)) THEN
         calc_revise_qty_due_ := newrec_.buy_qty_due * newrec_.conv_factor / newrec_.inverted_conv_factor;
         -- calculated value for calc_revise_qty_due_ could exceed 38 decimal points sometimes. Therefor it is
         -- rounded for 38 because maximum guaranteed precision for Oracle numbers is 38.
         IF ((length(calc_revise_qty_due_)-INSTR(calc_revise_qty_due_,'.')) > 38) THEN
            calc_revise_qty_due_ := ROUND(calc_revise_qty_due_, 38);
         END IF;
         newrec_.revised_qty_due := calc_revise_qty_due_;
      END IF;
      
      -- Recalculate buy_qty_due and revised_qty_due because it may have rounding issues with large decimal values for qty_per_assembly
      IF (newrec_.line_item_no > 0 AND newrec_.qty_per_assembly != oldrec_.qty_per_assembly) THEN
         pkg_buy_qty_due_        := Get_Buy_Qty_Due(newrec_.order_no, newrec_.line_no, newrec_.rel_no, -1);
         newrec_.buy_qty_due     := pkg_buy_qty_due_* newrec_.qty_per_assembly;
         newrec_.revised_qty_due := newrec_.buy_qty_due * newrec_.conv_factor / newrec_.inverted_conv_factor;
      END IF;
   
      IF ((newrec_.part_ownership = 'SUPPLIER LOANED') AND
          (NVL(Get_Owner_For_Part_Ownership(newrec_.order_no,
                                           newrec_.line_no,
                                           newrec_.rel_no,
                                           newrec_.line_item_no,
                                           newrec_.part_ownership), Database_SYS.string_null_) = Database_SYS.string_null_)) THEN
          Error_SYS.Record_General(lu_name_, 'NULLOWNERFORSUPLOANED: The customer must be connected to a supplier in order to return :P1 stock', Part_Ownership_API.Decode(newrec_.part_ownership));
      END IF;
   
      IF newrec_.demand_code = 'PO' THEN
         IF (oldrec_.buy_qty_due != newrec_.buy_qty_due) AND (server_data_change_ = 0) THEN
            IF Is_Purch_Comp_Part_Line___(newrec_) THEN
               Error_Sys.Record_General(lu_name_, 'POCOMPLINCONN: Quantity cannot be changed since this order line is connected to a purchase order :P1/:P2/:P3 which having component lines.', newrec_.demand_order_ref1, newrec_.demand_order_ref2, newrec_.demand_order_ref3);
            ELSE
               Client_SYS.Add_Info(lu_name_, 'CONNECTED_TO_PO: This order is connected to purchase order :P1/:P2/:P3 - which will not be updated automatically.', newrec_.demand_order_ref1, newrec_.demand_order_ref2, newrec_.demand_order_ref3);
            END IF;
         END IF;
      END IF;
   
      IF ((oldrec_.revised_qty_due > newrec_.revised_qty_due) AND (oldrec_.qty_shipdiff != 0)) THEN
         newrec_.qty_shipdiff := newrec_.qty_shipped + newrec_.qty_picked - newrec_.revised_qty_due;
      END IF;
   
      -- Avoid resetting the manually updated Target Date with Wanted Delivery Date and
      -- avoid setting target date earlier than wanted delivery date and
      IF ((oldrec_.wanted_delivery_date != newrec_.wanted_delivery_date) AND (oldrec_.target_date = newrec_.target_date)) THEN
         newrec_.target_date := newrec_.wanted_delivery_date;
      END IF;
   
      IF (newrec_.blocked_for_invoicing IS NULL) THEN
         newrec_.blocked_for_invoicing := 'FALSE';
      END IF;
   
      IF (newrec_.price_source_net_price IS NULL) THEN
         newrec_.price_source_net_price := 'FALSE';
      END IF;
   
      IF (newrec_.blocked_for_invoicing = 'TRUE') THEN
         Validate_Block_For_Invoic___(newrec_);
      END IF;
   
      IF (newrec_.staged_billing = 'STAGED BILLING' AND newrec_.consignment_stock = 'CONSIGNMENT STOCK') THEN
         Error_SYS.Record_General(lu_name_, 'STAGE_BILL_CON_STOCK: Staged Billing cannot be used together with Customer Consignment Stock.');
      END IF;
   
      sales_part_rec_ := Sales_Part_API.Get(newrec_.contract, newrec_.catalog_no);
      
      IF (newrec_.price_unit_meas IS NULL) THEN
         newrec_.price_unit_meas := sales_part_rec_.price_unit_meas;
      END IF;
   
      IF (newrec_.input_unit_meas IS NOT NULL) AND (newrec_.input_qty IS NULL) THEN
         Error_SYS.Record_General(lu_name_, 'INPUTQTYNEEDED: Input quantity must be entered when Input UoM has a value');
      END IF;
   
      Check_Demand_Code___(newrec_.demand_code, order_rec_.confirm_deliveries, newrec_.consignment_stock);
   
      IF (newrec_.rental = Fnd_Boolean_Api.DB_FALSE AND NVL(newrec_.demand_code, Database_SYS.string_null_) = Order_Supply_Type_API.DB_REPLACEMENT_CUSTOMER_ORDER) THEN
         Error_SYS.Record_General(lu_name_, 'NONRENTALREPLACEMENT: The demand code :P1 cannot be used for a non-rental customer order line.');
      END IF;
   
      IF (newrec_.supply_code != oldrec_.supply_code) OR
          (newrec_.ship_addr_no != oldrec_.ship_addr_no) OR
          (NVL(newrec_.vendor_no, ' ') != NVL(oldrec_.vendor_no, ' ')) THEN
         IF (newrec_.supply_code IN ('PT', 'PD', 'IPT', 'IPD')) THEN
            -- Validate the category for the specified vendor
            Validate_Vendor_Category___(newrec_.vendor_no, newrec_.supply_code);
         ELSE
            newrec_.vendor_no                := NULL;
            newrec_.supply_site              := NULL;
            newrec_.supply_site_reserve_type := 'NOTALLOWED';
         END IF;
   
         -- type into Invent Order.
         IF ( NOT (newrec_.supply_code = 'IO' AND oldrec_.supply_code IN ('IPT','PT', 'SO', 'DOP')) AND NOT (oldrec_.supply_code = 'IO' AND newrec_.supply_code IN ('PT', 'SO', 'DOP'))) THEN
            -- Retrieve new supply chain defaults
            temp_newrec_ := newrec_;
            Get_Supply_Chain_Defaults___(newrec_, indrec_, oldrec_ );
            IF (oldrec_.supply_code = 'IO' AND temp_newrec_.supply_code = 'IPT') THEN
               temp_newrec_.supplier_ship_via_transit      := newrec_.supplier_ship_via_transit;
               temp_newrec_.supplier_ship_via_transit_desc := newrec_.supplier_ship_via_transit_desc;
               newrec_                                     := temp_newrec_; 
            END IF; 
         END IF;
         -- recalculate all dates since necessary parameter have been changed.
         delivery_date_changed_ := TRUE;
   
         IF (newrec_.supply_code IN ('IPT', 'IPD')) THEN
            IF (newrec_.supply_code != oldrec_.supply_code) THEN
               -- fetching the supply site part no.
               newrec_.supply_site_part_no := Sales_Part_API.Get_Supply_Site_Part_No__(newrec_.supply_site, newrec_.contract, newrec_.catalog_no, newrec_.vendor_no );
            END IF;
            -- Do not fetch the supply_site_reserve_type_ if the customer order is not in Planned state
            IF (header_rowstate_ = 'Planned') THEN
               -- Initialize the supply site attribute for internal suppliers
               newrec_.supply_site := Get_Vendor_Contract__(newrec_.vendor_no, NULL, NULL, NULL, newrec_.rental);
   
               IF (newrec_.supply_site_reserve_type = 'NOTALLOWED') THEN
                  -- get default supply_site_reserve_type_
                  -- check if the inventory part exists on the supply_site (is the supply_site in the same database)
                  IF (Inventory_Part_API.Part_Exist(newrec_.supply_site, NVL(newrec_.part_no,newrec_.purchase_part_no)) = 1) THEN
                     -- check if a security connection exists between the CO/PO Site (Demand site) and the Supply Site
                     IF (Site_To_Site_Reserve_Setup_API.Connection_Allowed(newrec_.supply_site, newrec_.contract) = 1) THEN
                        newrec_.supply_site_reserve_type := Site_To_Site_Reserve_Setup_API.Get_Supply_Site_Reserve_Db(newrec_.supply_site, newrec_.contract);
                     END IF;
                  END IF;
               END IF;
            END IF;
         ELSE
            newrec_.supply_site_part_no := NULL;
            newrec_.supply_site              := NULL;
            newrec_.supply_site_reserve_type := 'NOTALLOWED';
         END IF;
      END IF;
      IF ((newrec_.shipment_type != oldrec_.shipment_type) AND (newrec_.shipment_creation IS NOT NULL) AND (NOT indrec_.shipment_creation)) THEN
         newrec_.shipment_creation := Shipment_Creation_API.Encode(Shipment_Type_API.Get_Shipment_Creation_Co(newrec_.shipment_type));
      END IF;
      IF ((newrec_.freight_map_id IS NULL AND newrec_.zone_id IS NULL)
          OR ((newrec_.addr_flag = 'N') AND (oldrec_.addr_flag = 'Y'))) THEN
         IF (newrec_.addr_flag = 'N') THEN
            Freight_Zone_Util_API.Fetch_Zone_For_Cust_Addr(newrec_.freight_map_id,
                                                           newrec_.zone_id,
                                                           newrec_.customer_no,
                                                           newrec_.ship_addr_no,
                                                           newrec_.contract,
                                                           newrec_.ship_via_code);
         ELSE
            sing_occ_addr_ := Cust_Order_Line_Address_API.Get_Co_Line_Addr(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
            Freight_Zone_Util_API.Fetch_Zone_For_Addr_Details(newrec_.freight_map_id,
                                                              newrec_.zone_id,
                                                              zone_info_exist_,
                                                              newrec_.contract,
                                                              newrec_.ship_via_code,
                                                              sing_occ_addr_.zip_code,
                                                              sing_occ_addr_.city,
                                                              sing_occ_addr_.county,
                                                              sing_occ_addr_.state,
                                                              sing_occ_addr_.country_code);
         END IF;
      END IF;
      IF (newrec_.freight_map_id IS NOT NULL) THEN
         IF ((newrec_.supply_code IN ('PD', 'IPD') AND newrec_.vendor_no IS NOT NULL)) THEN
            newrec_.freight_price_list_no := Freight_Price_List_Direct_API.Get_Active_Freight_List_No(newrec_.contract, newrec_.ship_via_code, newrec_.freight_map_id, newrec_.forward_agent_id, order_rec_.use_price_incl_tax, newrec_.vendor_no);
         ELSE
            newrec_.freight_price_list_no := Freight_Price_List_API.Get_Active_Freight_List_No(newrec_.contract, newrec_.ship_via_code, newrec_.freight_map_id, newrec_.forward_agent_id, order_rec_.use_price_incl_tax);
         END IF;
      ELSE
         newrec_.freight_price_list_no := NULL;
      END IF;
   
      IF (newrec_.supply_code IN ('IPT', 'IPD')) AND (newrec_.supply_site_reserve_type != 'NOTALLOWED') AND
          ((Site_To_Site_Reserve_Setup_API.Connection_Allowed(newrec_.supply_site, newrec_.contract) = 0) OR
          (Site_To_Site_Reserve_Setup_API.Get_Supply_Site_Reserve_Db(newrec_.supply_site, newrec_.contract) = Supply_Site_Reserve_Type_API.DB_NOT_ALLOWED)) THEN
         IF (newrec_.supply_site_reserve_type != oldrec_.supply_site_reserve_type) THEN
            Error_Sys.Record_General(lu_name_, 'CONN_NOT_ALLOWED: No Site to Site Reservation allowed between demand site :P1 and supply site :P2',newrec_.contract,newrec_.supply_site);
         ELSE
            Error_Sys.Record_General(lu_name_, 'SET_NOT_ALLOWED: Set the supply site reservation type to Not Allowed before releasing the customer order.'); 
         END IF;      
      END IF;
   
      IF ((order_rec_.internal_po_no IS NOT NULL) AND (order_rec_.internal_po_no = NVL(newrec_.demand_order_ref1, ' ')) AND (newrec_.discount < 0)) THEN
         Error_SYS.Record_General(lu_name_, 'IPO_NEG_DISC: Negative discount cannot be handled when the customer order originates from an internal purchase order. Check valid price list(s) and/or Customer Agreement(s).');
      END IF;
   
      -- date parameters have been changed. Recalculate from wanted delivery date if not planned delivery date hasn't been changed.
      IF (delivery_date_changed_ AND NOT planned_date_changed_) THEN         
         newrec_.planned_delivery_date := newrec_.target_date;      
      END IF;
   
      --if changing supplier and/or reservation type, check first that no reservations exist
      --(changing from MANUAL/INSTANT/SOURCED to NOTALLOWED is not permitted...).
      IF ((NVL(newrec_.vendor_no, ' ') != NVL(oldrec_.vendor_no, ' ')) OR
          (newrec_.supply_site_reserve_type = 'NOTALLOWED' AND oldrec_.supply_site_reserve_type != 'NOTALLOWED')) THEN
         IF (Co_Supply_Site_Reservation_API.Get_Qty_Reserved(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no) > 0) THEN
            Error_SYS.Record_General(lu_name_ , 'REMSUPPRES: You cannot change supplier or reservation type since supply site reservation exists.');
         END IF;
      END IF;
   
      IF (NVL(newrec_.supply_code, ' ') != NVL(oldrec_.supply_code, ' ') AND
          oldrec_.supply_code != 'ND' AND header_rowstate_ = 'Planned' ) THEN
         IF (Co_Supply_Site_Reservation_API.Get_Qty_Reserved(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no) > 0) THEN
            Error_SYS.Record_General(lu_name_ , 'SUPRESCHGEXS: You cannot change supply code since supply site reservation exists.');
         END IF;
      END IF;
   
      -- IF condition code or qty was changed, and this is not a configured part then retrive new cost
      -- (For configured parts cost should be calculated using the interim order functionality)
      IF (oldrec_.buy_qty_due != newrec_.buy_qty_due AND oldrec_.revised_qty_due = newrec_.revised_qty_due) THEN
         revised_qty_due_        := newrec_.buy_qty_due * newrec_.conv_factor / newrec_.inverted_conv_factor;
      END IF;
      inv_part_cost_level_db_ := Inventory_Part_API.Get_Invent_Part_Cost_Level_Db(newrec_.contract,newrec_.part_no);
   
      -- Calculate cost details if supply code is invent order and the part cost level in "Cost Per Configuration" when order is in planned state.
      IF ((oldrec_.supply_code != newrec_.supply_code OR oldrec_.configuration_id != newrec_.configuration_id ) AND
          ((newrec_.supply_code = 'IO') AND (inv_part_cost_level_db_ = 'COST PER CONFIGURATION')) )THEN
         Order_Config_Util_API.Configuration_Exist(NVL(newrec_.part_no, newrec_.catalog_no), newrec_.configuration_id);
         calculate_cost_for_config_ := TRUE;
      END IF;
   
      -- Modified if condition to calculate cost of configured part after set configuration and source form Invent Order.
      IF (revised_qty_due_ > newrec_.qty_shipped) AND (newrec_.rowstate != 'PartiallyDelivered') AND
         (((newrec_.condition_code != NVL(oldrec_.condition_code, 'NOT_NULL')) AND (inv_part_cost_level_db_ = 'COST PER CONDITION')) OR
          ((inv_part_cost_level_db_ != 'COST PER CONFIGURATION') AND (newrec_.buy_qty_due != oldrec_.buy_qty_due))) OR ( calculate_cost_for_config_ ) THEN
   
         -- Modified if condition to calculate cost of configured part after set configuration and source form Invent Order.
         IF (revised_qty_due_ IS NOT NULL AND (newrec_.part_ownership NOT IN ('CUSTOMER OWNED', 'SUPPLIER LOANED'))) OR ( calculate_cost_for_config_ ) THEN
            newrec_.cost := Sales_Cost_Util_API.Get_Cost_Incl_Sales_Overhead(newrec_.contract,
                                                                             newrec_.part_no,
                                                                             NVL(newrec_.configuration_id,'*'),
                                                                             newrec_.condition_code,
                                                                             revised_qty_due_,
                                                                             newrec_.charged_item,
                                                                             newrec_.supply_code,
                                                                             newrec_.customer_no,
                                                                             newrec_.part_ownership);
            Client_SYS.Set_Item_Value('COST', newrec_.cost, attr_);
         END IF;
      END IF;
   
      IF ((newrec_.condition_code != oldrec_.condition_code) AND (newrec_.demand_code = 'DO')) THEN
         Error_Sys.Record_General(lu_name_, 'DO_CONDITION_CODE: Condition code cannot be changed when the demand code is DO.');
      END IF;
   
      IF (indrec_.part_ownership) THEN
         IF (order_rec_.project_id IS NOT NULL) AND (newrec_.part_ownership = 'SUPPLIER LOANED') THEN
            Error_Sys.Record_General(lu_name_, 'PROJ_OWNERSHIP: Ownership can not be :P1 when the customer order is connected to a project.',Part_Ownership_API.Decode(newrec_.part_ownership));
         END IF;
         IF (newrec_.supply_code = 'IO') AND (newrec_.demand_code = 'PO') AND (NVL(newrec_.part_ownership, Database_SYS.string_null_) != NVL(oldrec_.part_ownership, Database_SYS.string_null_)) AND (newrec_.rowstate != 'Released') THEN
            Error_Sys.Record_General(lu_name_, 'COMP_OWNERSHIP: Ownership can be changed only when the customer order line is in the released status.');
         END IF;
      END IF;
      total_sourced_qty_ := Sourced_Cust_Order_Line_API.Get_Total_Sourced_Qty(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
   
      IF (newrec_.supply_code != 'DOP') THEN
         newrec_.dop_connection := NULL;
      END IF;
   
      IF (newrec_.supply_code = 'ND') THEN
         IF delivery_date_changed_ THEN
            -- Delivery date is changed for sourced lines
             IF (total_sourced_qty_ IS NOT NULL) AND (total_sourced_qty_!= 0) THEN
                Client_SYS.Add_Info(lu_name_, 'DATE_CHANGED: This order line is sourced, please, check source lines.');
             END IF;
         END IF;
         IF buy_qty_changed_ THEN
            -- Qty on line is more than the total sourced Qty
             IF (total_sourced_qty_ > newrec_.revised_qty_due) THEN
                Error_SYS.Record_General(lu_name_ , 'SOUQTY_LARGE: This order line is sourced, quantity must be equal to, or larger than, total sourced quantity.');
             END IF;
         END IF;
   
      ELSIF (newrec_.supply_code = 'DOP') THEN
         IF ((header_rowstate_ != 'Planned') AND (oldrec_.supply_code = newrec_.supply_code) AND (oldrec_.dop_connection != newrec_.dop_connection)) THEN
            Error_SYS.Record_General(lu_name_ , 'AUTDOPNOTALLOWED: It is not possible to change the DOP Connection field for an existing order line when the order is released.');
         END IF;
         IF (newrec_.dop_connection IS NULL) THEN
            newrec_.dop_connection := Dop_Connection_API.Encode(Inventory_Part_API.Get_Dop_Connection(newrec_.contract, newrec_.part_no));
         END IF;
      END IF;
   
      IF (total_sourced_qty_ IS NOT NULL) AND (total_sourced_qty_ != 0) THEN
         sourcing_flag_ := NVL(Client_SYS.Get_Item_Value('SOURCING_FLAG', attr_), 'FALSE');
         IF (newrec_.originating_rel_no IS NULL) AND (newrec_.originating_line_item_no IS NULL)
           AND (sourcing_flag_ != 'TRUE')THEN
            -- Supply code cannot be changed for co lines which has source lines.
            IF (oldrec_.supply_code != newrec_.supply_code ) THEN
               Error_SYS.Record_General(lu_name_ , 'SOUSUP_LINE: This order line is sourced, please remove source lines to change supply code.');
            END IF;
         END IF;
      END IF;
   
      IF (indrec_.owning_customer_no) THEN
         IF (newrec_.owning_customer_no IS NOT NULL) AND (newrec_.owning_customer_no != order_rec_.customer_no ) THEN
            IF (order_rec_.project_id IS NOT NULL) THEN
               Error_Sys.Record_General(lu_name_, 'PROJ_OWNER: Owner can not be different from :P1 when the customer order is connected to a project.',order_rec_.customer_no);
            END IF;
         END IF;
   
         IF (newrec_.supply_code = 'IO') AND (newrec_.demand_code = 'PO') AND (NVL(newrec_.owning_customer_no, Database_SYS.string_null_) != NVL(oldrec_.owning_customer_no, Database_SYS.string_null_)) AND (newrec_.rowstate != 'Released') THEN
            Error_Sys.Record_General(lu_name_, 'COMP_OWNER: Owner can be changed only when the customer order line is in the released status.');
         END IF;
      END IF;
   
      -- IF promised delivery date was set to null the reinitialize the value
      IF (newrec_.promised_delivery_date IS NULL) THEN
         newrec_.promised_delivery_date := newrec_.planned_delivery_date;
      END IF;
   
      IF (oldrec_.activity_seq IS NOT NULL) AND (newrec_.consignment_stock = 'CONSIGNMENT STOCK') THEN
         Error_Sys.Record_General(lu_name_, 'CSNOTALLOWED: When Customer Order line is project connected, it is not allowed to be a consignment stock delivery');
      END IF;
      inv_flag_ := sales_part_rec_.catalog_type;
      IF (oldrec_.activity_seq IS NOT NULL) AND (newrec_.supply_code != oldrec_.supply_code) THEN
         IF (inv_flag_ = 'INV') THEN
            IF (oldrec_.supply_code = 'PJD') AND (newrec_.demand_code != 'PI') THEN
               Error_SYS.Record_General(lu_name_, 'PROJECT_DELIVERABLES: This Customer Order line originates from Project Deliverables. Therefore it is not allowed to change the supply code on this.');
            END IF;
         END IF;
      END IF;
   
      IF (newrec_.configuration_id != '*' AND newrec_.revised_qty_due != oldrec_.revised_qty_due) THEN
         Client_SYS.Add_Info(lu_name_, 'CONFIGQTY: Quantity change may affect configuration. Edit configuration to verify characteristics.');
      END IF;
   
      IF (newrec_.configuration_id != '*' AND Nvl(newrec_.supply_site, '*') != Nvl(oldrec_.supply_site, '*')) THEN
         Client_SYS.Add_Info(lu_name_, 'CONFIGSUPPSITE: Supply site change may affect configuration. Edit configuration to verify characteristics.');
      END IF;
   
      IF (newrec_.country_code IS NULL)THEN
         IF newrec_.addr_flag = 'Y' THEN
            newrec_.country_code := Cust_Order_Line_Address_API.Get_Country_Code(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
         ELSE
            newrec_.country_code := Cust_Ord_Customer_Address_API.Get_Country_Code(newrec_.customer_no, newrec_.ship_addr_no);
         END IF;
      END IF;
      
      IF (newrec_.configuration_id != '*' AND (newrec_.ship_addr_no != oldrec_.ship_addr_no OR
          newrec_.addr_flag != oldrec_.addr_flag)) THEN
         IF Nvl(oldrec_.country_code, '*') != Nvl(newrec_.country_code, '*') THEN
            Client_SYS.Add_Info(lu_name_, 'CONFIGDELCTRY: Delivery country change may affect configuration. Edit configuration to verify characteristics.');
         END IF;
      END IF;
   
      IF (NVL(oldrec_.activity_seq, -9999) != NVL(newrec_.activity_seq, -9999)) THEN
         IF (newrec_.activity_seq IS NULL)  THEN
            Validate_Proj_Disconnect___(newrec_);
         ELSE
            Validate_Proj_Connect___(newrec_.project_id,
                                     newrec_.demand_code,
                                     newrec_.supply_code,
                                     newrec_.order_no,
                                     newrec_.contract,
                                     newrec_.rowstate,
                                     newrec_.consignment_stock,
                                     newrec_.qty_on_order,
                                     newrec_.activity_seq,
                                     oldrec_.activity_seq,
                                     newrec_.planned_ship_date,
                                     newrec_.catalog_no,
                                     FALSE,
                                     newrec_.catalog_type);
         END IF;
      END IF;
   
      IF (newrec_.provisional_price IS NULL) THEN
         newrec_.provisional_price := 'FALSE';
      END IF;
   
      IF (newrec_.receiving_advice_type = 'USE_CUSTOMER_DEFAULT') THEN
         Error_SYS.Record_General(lu_name_, 'INVALIDRECADVTYPE: Receiving advice type ":P1" can not be used in customer order line.', Receiving_Advice_Type_API.Decode(newrec_.receiving_advice_type));
      END IF;
   
      IF (newrec_.qty_assigned < 0) THEN
         Error_SYS.Record_General(lu_name_,'COASSQTYNOTNEG: The quantity reserved may not be negative.');
      END IF;
   
      Iso_Unit_API.Exist(newrec_.price_unit_meas);
   
      IF (newrec_.rental = Fnd_Boolean_API.DB_FALSE) THEN
         sales_price_type_db_ := Sales_Price_Type_API.DB_SALES_PRICES;
      ELSE
         sales_price_type_db_ := Sales_Price_Type_API.DB_RENTAL_PRICES;
      END IF;
   
      site_discom_info_rec_   := Site_Discom_Info_API.Get(newrec_.contract);
      IF (oldrec_.wanted_delivery_date != newrec_.wanted_delivery_date AND newrec_.supply_code != 'SEO') THEN
         update_price_effective_date_ := Client_SYS.Get_Item_Value('UPDATE_PRICE_EFFECTIVE_DATE', attr_);
         IF (site_discom_info_rec_.price_effective_date = 'TRUE') AND update_price_effective_date_ = 'TRUE' AND (newrec_.free_of_charge = Fnd_Boolean_API.DB_FALSE) THEN
            newrec_.price_effectivity_date := newrec_.wanted_delivery_date;
   
            Sales_Price_List_API.Get_Valid_Price_List(customer_level_db_,        customer_level_id_,              newrec_.price_list_no,
                                                      order_rec_.contract,       newrec_.catalog_no,              order_rec_.customer_no,
                                                      order_rec_.currency_code,  newrec_.price_effectivity_date,  NULL ,
                                                      sales_price_type_db_);
   
            IF customer_level_db_ IS NOT NULL THEN
               newrec_.customer_level := customer_level_db_;
            END IF;
            IF customer_level_id_ IS NOT NULL THEN
               newrec_.customer_level_id := customer_level_id_;
            END IF;
   
            -- For rental lines, the rental  chargable days retreived from the rental atrributes
            -- because rental object is updated after customer order line.
            rental_chargable_days_ := NULL;
            IF (newrec_.rental = Fnd_Boolean_API.DB_TRUE) THEN
               rental_chargable_days_ := Get_Latest_Rent_Charge_Days___(attr_, newrec_);
            END IF;
   
            IF ((newrec_.buy_qty_due IS NOT NULL) AND (newrec_.rental = Fnd_Boolean_API.DB_FALSE OR
                                                       (newrec_.rental = Fnd_Boolean_API.DB_TRUE AND rental_chargable_days_ IS NOT NULL))) THEN
               Customer_Order_Pricing_API.Get_Order_Line_Price_Info(sale_unit_price_,          unit_price_incl_tax_,           base_sale_unit_price_,        base_unit_price_incl_tax_,
                                                                    newrec_.currency_rate,     discount_,                      price_source_,                newrec_.price_source_id,
                                                                    newrec_.provisional_price, newrec_.price_source_net_price, newrec_.rebate_builder,       newrec_.part_level,
                                                                    newrec_.part_level_id,     newrec_.customer_level,         newrec_.customer_level_id,    newrec_.order_no,
                                                                    newrec_.catalog_no,        newrec_.buy_qty_due,            newrec_.price_list_no,        newrec_.price_effectivity_date,
                                                                    newrec_.condition_code,    order_rec_.use_price_incl_tax,  rental_chargable_days_);
   
               newrec_.price_source := Pricing_Source_API.Encode(price_source_);
               IF (newrec_.price_freeze = 'FREE') THEN
                  newrec_.sale_unit_price := sale_unit_price_;
                  newrec_.unit_price_incl_tax := unit_price_incl_tax_;
                  newrec_.base_sale_unit_price := base_sale_unit_price_;
                  newrec_.base_unit_price_incl_tax := base_unit_price_incl_tax_;
               END IF;
               IF NOT(newrec_.price_freeze = 'FROZEN' AND site_discom_info_rec_.discount_freeze = 'TRUE') THEN
                  newrec_.discount := discount_;
               END IF;
               IF (order_rec_.use_price_incl_tax = 'TRUE') THEN
                  newrec_.part_price   := newrec_.sale_unit_price;
               ELSE
                  newrec_.part_price   := newrec_.unit_price_incl_tax;
            END IF;
               Calculate_Prices(newrec_);                 
            END IF;
   
            IF (Cust_Order_Line_Discount_API.Check_Manual_Rows(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no)) THEN
               newrec_.discount := Customer_Order_Line_API.Get_Discount(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
            END IF;
            IF (newrec_.configuration_id != '*') THEN
               Config_Char_Price_API.Get_Calculated_Char_Prices (newrec_.char_price, newrec_.calc_char_price, newrec_.configured_line_price_id,
                                                                 newrec_.part_no, newrec_.price_list_no, newrec_.configuration_id, newrec_.price_effectivity_date);
            END IF;
         END IF;
      END IF;
   
      IF (newrec_.picking_leadtime != trunc(newrec_.picking_leadtime)) OR (newrec_.picking_leadtime < 0) THEN
         Error_SYS.Item_General(lu_name_, 'PICKING_LEADTIME', 'PICKVALUEINTEGER: [:NAME] must be an integer. Negative values not allowed.');
      END IF;
   
      IF (qty_refreshed_) THEN
         Client_SYS.Add_To_Attr('QTY_REFRESHED', 1, attr_);
      END IF;
   
      IF (capability_check_source_flag_ = 'TRUE') THEN
         -- add the flag to the attr string again so we can use it a check inside Check_Before_Update___
         Client_SYS.Add_To_Attr('CAPABILITY_CHECK_SOURCE_FLAG', capability_check_source_flag_, attr_);
      END IF;
   
      IF (unpeg_ipd_flag_ = 'TRUE') THEN
         -- add the flag to the attr string again so we can use it a check inside Check_Before_Update___
         Client_SYS.Set_Item_Value('UNPEG_IPD_FLAG', unpeg_ipd_flag_, attr_);
      END IF;
      
      IF (newrec_.rental = Fnd_Boolean_API.DB_TRUE) THEN
         IF (newrec_.tax_code != oldrec_.tax_code) THEN
         $IF (Component_Rental_SYS.INSTALLED) $THEN
            IF (Rental_Transaction_API.Rental_Transactions_Exist(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, Rental_Type_API.DB_CUSTOMER_ORDER)) THEN
               Error_SYS.Record_General(lu_name_, 'RENTTRANSEXIST: Tax code cannot be changed when rental transactions exist.');
            END IF;
         $ELSE
            Error_SYS.Component_Not_Exist('RENTAL');
         $END
         END IF;
         IF (newrec_.sale_unit_price != oldrec_.sale_unit_price) THEN
            IF (Rental_Period_Exists(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no)) THEN
               Error_SYS.Record_General(lu_name_, 'RENTEVENTSEXIST: It is not possible to edit the price as rental events exist.');
            END IF;
         END IF;
      ELSE
         IF (newrec_.part_ownership = Part_Ownership_API.DB_COMPANY_RENTAL_ASSET) AND (newrec_.supply_code NOT IN ('IO', 'PI')) THEN
            Error_SYS.Record_General(lu_name_,'INVALIDSUPPLYPARTOWN: Ownership :P1 is not allowed for this supply code.', Part_Ownership_API.Decode(newrec_.part_ownership));
         END IF;
      END IF;
   
      IF (newrec_.default_addr_flag IS NULL) THEN
         default_addr_flag_ := oldrec_.default_addr_flag;
      ELSE
         default_addr_flag_ := newrec_.default_addr_flag;
      END IF;
      
      IF ((default_addr_flag_ = 'N') AND (newrec_.addr_flag = 'N') AND (NVL(oldrec_.ship_addr_no, ' ') != NVL(newrec_.ship_addr_no, ' '))) THEN
         IF (NVL(newrec_.demand_code, Database_Sys.string_null_) != 'IPD') THEN
            IF (order_rec_.customer_no_pay IS NOT NULL) THEN
               customer_no_ := order_rec_.customer_no_pay;
               addr_no_     := order_rec_.customer_no_pay_addr_no;
            ELSE
               customer_no_ := order_rec_.customer_no;
               addr_no_     := order_rec_.bill_addr_no;         
            END IF;            
            newrec_.tax_id_no  := Customer_Document_Tax_Info_API.Get_Vat_No_Db(customer_no_,
                                                                            addr_no_,
                                                                            company_,
                                                                            order_rec_.supply_country,
                                                                            newrec_.country_code);
            IF (newrec_.tax_id_no IS NOT NULL) THEN
               newrec_.tax_id_validated_date := Tax_Handling_Order_Util_API.Get_Tax_Id_Validated_Date(order_rec_.customer_no_pay,
                                                                                                      order_rec_.customer_no_pay_addr_no,
                                                                                                      order_rec_.customer_no,
                                                                                                      order_rec_.bill_addr_no,
                                                                                                      company_,
                                                                                                      order_rec_.supply_country,
                                                                                                      newrec_.country_code);
            END IF;
         END IF;
      END IF;
      
      IF (NVL(newrec_.demand_code, Database_Sys.string_null_) != 'IPD') AND (newrec_.end_customer_id IS NOT NULL) THEN
         -- This was written for Intrastat purpose.
         IF Customer_Info_API.Get_Country_Db(NVL(order_rec_.customer_no_pay, order_rec_.customer_no)) != Customer_Info_API.Get_Country_Db(newrec_.end_customer_id) THEN
            newrec_.tax_id_no  := Customer_Document_Tax_Info_API.Get_Vat_No_Db(newrec_.end_customer_id,
                                                                               Customer_Info_Address_API.Get_Default_Address(newrec_.end_customer_id, 'Document'),
                                                                               company_,
                                                                               order_rec_.supply_country,
                                                                               newrec_.country_code);
         END IF;
      END IF;
      
      IF oldrec_.supply_code != newrec_.supply_code AND newrec_.supply_code NOT IN ('DOP','SO','IPT','IPD') AND
          oldrec_.supply_code IN ('DOP','SO','IPT','IPD') AND oldrec_.latest_release_date IS NOT NULL AND
          (header_rowstate_ = 'Planned') THEN
         old_auto_cc_flag_ := Get_Auto_Capability_Check___(oldrec_.supply_code, oldrec_.contract, oldrec_.supply_site, oldrec_.part_no);
         -- changing from a valid capability check supply code to a non valid capability check supply code means that
         -- we need to remove our ctp_planned flag and cancel the ctp when the part was using automatic capability check
         IF (old_auto_cc_flag_ IN ('RESERVE AND ALLOCATE','ALLOCATE ONLY')) THEN
            $IF (Component_Ordstr_SYS.INSTALLED)$THEN
               IF (newrec_.ctp_planned = 'Y') THEN
                  Interim_Ctp_Manager_API.Cancel_Ctp(dummy_, newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no,
                                                    'CUSTOMERORDER', oldrec_.supply_code);
                  -- Remove ctp record
                  ctp_run_id_ := Interim_Ctp_Critical_Path_API.Get_Ctp_Run_Id('CUSTOMERORDER', newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
                  IF (ctp_run_id_ IS NOT NULL AND ctp_run_id_ > 0) THEN
                     Interim_Ctp_Critical_Path_API.Clear_Ctp_Data(ctp_run_id_);
                  END IF;
         
                  newrec_.ctp_planned           := 'N';
                  newrec_.latest_release_date   := NULL;
                  -- recalculate all dates
                  delivery_date_changed_        := TRUE;
                  newrec_.planned_delivery_date := newrec_.wanted_delivery_date;
               END IF;
            $ELSE
               NULL;
            $END
         END IF;
      END IF;
      -- if supply code changes from a valid CTP/CC code to a non valid and latest_release_date have value
      -- then set latest_release_date to null. This covers all 'NEITHER RESERVE NOR ALLOCATE' cases (both manual and automatic cc)
      IF oldrec_.supply_code IN ('SO','DOP','IPT','IPD','IO') AND newrec_.supply_code NOT IN ('SO','DOP','IPT','IPD','IO') AND
          newrec_.latest_release_date IS NOT NULL AND newrec_.ctp_planned = 'N' AND
          (header_rowstate_ = 'Planned') THEN
         newrec_.latest_release_date   := NULL;
         -- recalculate all dates
         delivery_date_changed_        := TRUE;
         newrec_.planned_delivery_date := newrec_.target_date;
      END IF;
      
      interim_ord_id_ := Get_Interim_Order_No(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, newrec_.ctp_planned);
   
      IF (newrec_.ctp_planned = 'Y' OR newrec_.latest_release_date IS NOT NULL OR (oldrec_.ctp_planned = 'N' AND interim_ord_id_ IS NOT NULL))THEN
      -- handling of special updates that concerns manual Capability Check
         IF (Get_Auto_Capability_Check___(newrec_.supply_code, newrec_.contract, newrec_.supply_site, newrec_.part_no) = 'NO AUTOMATIC CAPABILITY CHECK') THEN
            IF ((delivery_date_changed_) OR
                (oldrec_.planned_due_date != newrec_.planned_due_date) OR
                (oldrec_.planned_ship_date != newrec_.planned_ship_date) OR
                (oldrec_.revised_qty_due != newrec_.revised_qty_due) OR
                (oldrec_.rel_mtrl_planning = 'TRUE' AND newrec_.rel_mtrl_planning = 'FALSE')) AND
                (header_rowstate_ = 'Planned') THEN
               -- inform user that he needs to re-run the Capability Check to get correct delivery date when he changes dates or quantity
               Client_SYS.Add_Info(lu_name_, 'COLCCPLANNED: This Customer Order Line was planned with a Capability Check. Dates will be reset and possible interim orders deleted. You can choose to run the Capability Check again.');
               -- cancel interim orders
               $IF (Component_Ordstr_SYS.INSTALLED) $THEN
                  IF (newrec_.ctp_planned = 'Y' OR (oldrec_.ctp_planned = 'N' AND interim_ord_id_ IS NOT NULL)) THEN
                     Add_Info___(insert_package_mode_);   -- cancel ctp seems to do a clear info somewhere
                     Interim_Ctp_Manager_API.Cancel_Ctp(dummy_, newrec_.order_no, newrec_.line_no, newrec_.rel_no,
                                                        newrec_.line_item_no, 'CUSTOMERORDER', oldrec_.supply_code);
                     -- Remove ctp record
                     ctp_run_id_ := Interim_Ctp_Critical_Path_API.Get_Ctp_Run_Id('CUSTOMERORDER', newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
                     IF (ctp_run_id_ IS NOT NULL AND ctp_run_id_ > 0) THEN
                        Interim_Ctp_Critical_Path_API.Clear_Ctp_Data(ctp_run_id_);
                     END IF;
                  END IF;
               $END
               -- recalculate all dates
               delivery_date_changed_        := TRUE;
               newrec_.planned_delivery_date := newrec_.wanted_delivery_date;
               -- removed cc/ctp flags and latest release date
               newrec_.ctp_planned           := 'N';
               newrec_.latest_release_date   := NULL;
            END IF;
         END IF;
         IF (oldrec_.part_ownership != newrec_.part_ownership) THEN
            Error_SYS.Record_General(lu_name_, 'OWNCHANGEDFORCC: Ownership may not be changed for a Capability Checked line.');
         END IF;
      ELSIF (newrec_.ctp_planned = 'N') THEN
         IF (oldrec_.revised_qty_due != newrec_.revised_qty_due) THEN
            $IF (Component_Ordstr_SYS.INSTALLED)$THEN
               -- if we for some reason in the future would like to do this even for ctp_planned lines we need to use
               -- method Interim_Ctp_Manager_API.Get_Top_Int_Head_By_Usage instead of Interim_Demand_Head_API.Get_Cust_Ord_Line_Int_Head
               interim_head_id_ := Interim_Demand_Head_API.Get_Cust_Ord_Line_Int_Head(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
               IF interim_head_id_ IS NOT NULL THEN
                  Interim_Demand_Head_API.Set_Demand_Qty(interim_head_id_, newrec_.revised_qty_due);
               END IF;
            $ELSE
               NULL;
            $END
         ELSE
            IF (oldrec_.target_date != newrec_.target_date) THEN
               $IF (Component_Ordstr_SYS.INSTALLED)$THEN
                  interim_head_id_ := Interim_Demand_Head_API.Get_Cust_Ord_Line_Int_Head(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
                  IF interim_head_id_ IS NOT NULL THEN
                     Error_SYS.Record_General(lu_name_, 'INTORDEXISTS: Date may not be changed when an Interim Order exists. Delete the Interim Order to proceed.');
                  END IF;
               $ELSE
                  NULL;
               $END
            END IF;
         END IF;
      END IF;
   
      IF ((oldrec_.configuration_id != newrec_.configuration_id) AND (Get_Send_Change_Msg_For_Supp(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no)) = 'TRUE') THEN
         Client_SYS.Set_Item_Value('CHANGE_REQUEST', 'TRUE', attr_);
      END IF;
   
      Check_Before_Update___(attr_, newrec_, oldrec_, order_rec_.currency_code, header_rowstate_, delivery_date_changed_);
   
      -- if the line tax_id_no is manually changed; i.e we haven't changed the header tax_id_no and consequentlly
      -- getting the line tax_id_no being updated...then the validated date should be NULL.
      IF (NOT update_on_ordchg_approve_) THEN
         header_tax_id_no_ := order_rec_.tax_id_no;
         IF (NVL(oldrec_.tax_id_no,' ') != NVL(newrec_.tax_id_no,' ')) AND (NVL(newrec_.tax_id_no,' ') != NVL(header_tax_id_no_,' ')) THEN
            newrec_.tax_id_validated_date := NULL;
         END IF;
      END IF;
      
      IF refresh_tax_code_ OR (oldrec_.planned_ship_date != newrec_.planned_ship_date AND newrec_.tax_class_id IS NOT NULL) THEN
         newrec_.tax_liability_type := Tax_Liability_API.Get_Tax_Liability_Type_Db(newrec_.tax_liability, newrec_.country_code);
               
         IF (update_on_ordchg_approve_ = FALSE AND newrec_.demand_code = 'IPD' AND Get_Ship_Addr_No( newrec_.order_No, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no) != newrec_.ship_addr_no) THEN
            Client_SYS.Add_Info(lu_name_, 'NOTAXUPDATE: The tax information will not be updated automatically. Consider reviewing the information.');
         END IF;
         
      END IF;
   
      IF (NVL(newrec_.ext_transport_calendar_id, Database_Sys.string_null_) != NVL(oldrec_.ext_transport_calendar_id, Database_Sys.string_null_)) THEN
         Work_Time_Calendar_API.Check_Not_Generated(newrec_.ext_transport_calendar_id);
      END IF;
   
      -- handling of changes that could affect the automatic capability check
      IF (newrec_.ctp_planned = 'Y' OR newrec_.latest_release_date IS NOT NULL) THEN
         automatic_capability_check_ := Get_Auto_Capability_Check___(newrec_.supply_code, newrec_.contract, newrec_.supply_site, newrec_.part_no);
         -- this is a possible automatic capability check
         IF (automatic_capability_check_ IN ('RESERVE AND ALLOCATE','ALLOCATE ONLY','NEITHER RESERVE NOR ALLOCATE')) THEN
            -- if the supply code have been changed and its one of the supply codes valid for capability check, then run the automatic capability check again
            IF (oldrec_.supply_code != newrec_.supply_code AND newrec_.supply_code IN ('DOP','SO','IPT','IPD')) THEN
               Perform_Capability_Check___(newrec_, dummy_boolean_, header_rowstate_, automatic_capability_check_);
            -- if the due date, qty or configuration id have been changed, then run the automatic capability check again
            ELSIF (oldrec_.revised_qty_due != newrec_.revised_qty_due OR
                   oldrec_.planned_due_date != newrec_.planned_due_date OR
                   oldrec_.configuration_id != newrec_.configuration_id) THEN
               Perform_Capability_Check___(newrec_, dummy_boolean_, header_rowstate_, automatic_capability_check_);
            END IF;
            $IF (Component_Ordstr_SYS.INSTALLED)$THEN 
               IF (App_Context_SYS.Find_Number_Value('CTP_RUN_ID') IS NOT NULL) THEN
                  ctp_run_id_ := App_Context_SYS.Get_Number_Value('CTP_RUN_ID');
                  IF (ctp_run_id_ > 0 ) THEN
                     Client_SYS.Add_To_Attr('CTP_RUN_ID', ctp_run_id_ , attr_);
                     Client_SYS.Add_To_Attr('IS_DELIVERABLE', Interim_Ctp_Critical_Path_API.Get_Is_Deliverable(ctp_run_id_) , attr_);
                  END IF;
                  IF (App_Context_SYS.Find_Date_Value('OLD_REQUIRED_DATE') IS NOT NULL) THEN
                     Client_SYS.Add_To_Attr('OLD_REQUIRED_DATE', App_Context_SYS.Get_Date_Value('OLD_REQUIRED_DATE') , attr_);
                  END IF;
               END IF;
            $ELSE
               NULL;
            $END
         END IF;
      ELSIF (oldrec_.supply_code != newrec_.supply_code AND newrec_.supply_code IN ('DOP','SO','IPT','IPD') AND
             oldrec_.supply_code NOT IN ('DOP','SO','IPT','IPD')) THEN
         automatic_capability_check_ := Get_Auto_Capability_Check___(newrec_.supply_code, newrec_.contract, newrec_.supply_site, newrec_.part_no);
         IF (automatic_capability_check_ IN ('RESERVE AND ALLOCATE','ALLOCATE ONLY','NEITHER RESERVE NOR ALLOCATE')) THEN
            -- changing from a non valid capability check supply code to a valid one, will start the engine
            Perform_Capability_Check___(newrec_, dummy_boolean_, header_rowstate_, automatic_capability_check_);
         END IF;
      ELSIF (oldrec_.configuration_id != newrec_.configuration_id) AND (newrec_.supply_code IN ('DOP','SO','IPT','IPD')) THEN
         automatic_capability_check_ := Get_Auto_Capability_Check___(newrec_.supply_code, newrec_.contract, newrec_.supply_site, newrec_.part_no);
         IF (automatic_capability_check_ IN ('RESERVE AND ALLOCATE','ALLOCATE ONLY','NEITHER RESERVE NOR ALLOCATE')) THEN
            -- creating the configuration, will start the engine
            Perform_Capability_Check___(newrec_, dummy_boolean_, header_rowstate_, automatic_capability_check_);
         END IF;
      END IF;
   
      -- check if supply site reservation quantity differs from revised_qty_due...
      IF (newrec_.revised_qty_due != oldrec_.revised_qty_due) THEN
         -- if its a supply chain reservation compare Revised_qty_due and Qty Assigned + Qty Shipped
         -- where the Qty Assigned is fetched from the Co_Supply_Site_Reservation
         supply_chain_reserve_ := Reserve_Customer_Order_API.Is_Supply_Chain_Reservation(newrec_.order_no,
                                    newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, NULL, newrec_.contract,
                                    newrec_.supply_code, newrec_.vendor_no, newrec_.part_no,
                                    newrec_.supply_site_reserve_type, NULL);
   
         -- if supply chain reservations can be done...
         IF (supply_chain_reserve_ = 1) THEN
            supply_site_qty_ := Co_Supply_Site_Reservation_API.Get_Qty_Reserved(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
   
            -- convert the supply site inv uom quantity to demand site inv uom
            supply_site_qty_ := Inventory_Part_API.Get_Site_Converted_Qty(newrec_.supply_site, newrec_.part_no, newrec_.contract, supply_site_qty_, 'ADD');
   
            -- if quantity is less than reserved quantity on supply site, display error...
            IF (newrec_.revised_qty_due < supply_site_qty_ + newrec_.qty_shipped) AND (supply_site_qty_ + newrec_.qty_shipped != 0) THEN
               Error_SYS.Record_General(lu_name_, 'NOLESSQTYSCR: The quantity may not be less than Qty Reserved on Supply Site. Reduce the reserved quantity via the window for Manual Reservation on Supply Site first.');
            -- if quantity has increased make instant / automatic update of the remaning quantity.
            ELSIF (newrec_.revised_qty_due > oldrec_.revised_qty_due) AND (supply_site_qty_ + newrec_.qty_shipped > 0) THEN
               -- if the reserve type is Instant (not updated to), reservations will be made later in this update...
               IF (newrec_.supply_site_reserve_type = 'INSTANT') AND (oldrec_.supply_site_reserve_type = 'INSTANT') THEN
                  make_reservation_ := 'TRUE';
               END IF;
            END IF;
         END IF;
      END IF;
   
      IF (indrec_.part_ownership) THEN
      -- Set all prices and cost zero if for customer owned and supplier loaned stocks.
         IF ((newrec_.part_ownership IN ('CUSTOMER OWNED', 'SUPPLIER LOANED')))  THEN
            newrec_.part_price               := 0;
            newrec_.sale_unit_price          := 0;
            newrec_.unit_price_incl_tax      := 0;
            newrec_.base_sale_unit_price     := 0;
            newrec_.base_unit_price_incl_tax := 0;
            newrec_.cost                     := 0;
            newrec_.price_source             := 'UNSPECIFIED';
            newrec_.price_source_id          := NULL;
            IF (newrec_.char_price IS NOT NULL) THEN
               newrec_.char_price := 0;
            END IF;
            IF (newrec_.calc_char_price IS NOT NULL) THEN
               newrec_.calc_char_price := 0;
            END IF;
         ELSIF (newrec_.part_ownership = Part_Ownership_API.DB_COMPANY_RENTAL_ASSET) THEN
            newrec_.cost  := 0;
         END IF;
      END IF;
   
      -- check change of supply code for non-inventory parts
      IF ((((newrec_.supply_code = 'NO') AND ((newrec_.catalog_type != 'KOMP') OR (order_rec_.backorder_option != 'INCOMPLETE PACKAGES NOT ALLOWED')))
          OR (newrec_.supply_code = 'SEO')) AND ((newrec_.planned_due_date <= trunc(Site_API.Get_Site_Date(newrec_.contract))) OR
          Cust_Order_Type_API.Get_Oe_Alloc_Assign_Flag(order_rec_.order_id) = Cust_Ord_Reservation_Type_API.Decode('Y'))) THEN
         IF (oldrec_.supply_code IN ('PT', 'PD', 'IPT', 'IPD', 'ND')) THEN
            newrec_.qty_to_ship := newrec_.revised_qty_due;
         END IF;
      ELSIF (newrec_.supply_code IN ('PT', 'PD', 'IPT', 'IPD', 'ND')) THEN
         IF (oldrec_.supply_code IN ('NO', 'SEO', 'PRJ')) THEN
            newrec_.qty_to_ship := 0;
         END IF;
      END IF;
   
      IF ((newrec_.supply_code = 'IO') AND (oldrec_.supply_code != 'IO'))THEN
         make_reservation_ := 'TRUE';
      END IF;
   
      -- if the supply_site_reserve_type have been changed to INSTANT make sure that we make new reservations
      IF ((newrec_.supply_site_reserve_type = 'INSTANT') AND (oldrec_.supply_site_reserve_type != 'INSTANT')
          AND header_rowstate_ = 'Planned') THEN
         make_reservation_ := 'TRUE';
      ELSIF (((NOT Validate_SYS.Is_Equal(oldrec_.supply_code, newrec_.supply_code)) OR (NOT Validate_SYS.Is_Equal(oldrec_.supply_site_reserve_type, newrec_.supply_site_reserve_type))) 
            AND (header_rowstate_ != 'Planned')) THEN
         newrec_.supply_site_reserve_type := 'NOTALLOWED';
      END IF;
   
      -- Order discount may not be >= 100%
      IF (newrec_.order_discount >= 100) THEN
         Error_SYS.Record_General(lu_name_, 'WRONGDISC: Order discount must be lower than 100%.');
      END IF;
   
      IF (server_data_change_ != 1) AND
         (newrec_.discount != 0) AND
         (newrec_.discount != oldrec_.discount) THEN
         discount_line_count_ := Cust_Order_Line_Discount_API.Get_Discount_Line_Count( newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
         IF (discount_line_count_ > 1) THEN
            Error_SYS.Record_General(lu_name_, 'NODISCOUNTCHNG: Cannot update discount since there are multiple discount lines connected to the customer order line.');
         END IF;
      END IF;
   
      -- IF supply code is MRO no SM object should be created on delivery of the order line
      IF (newrec_.supply_code = 'MRO') AND (newrec_.create_sm_object_option = 'CREATESMOBJECT') THEN
         Error_SYS.Record_General(lu_name_, 'NOMROSM: Create SM Object is not allowed when supply code is MRO');
      END IF;
   
      IF (newrec_.demand_code = 'DO') AND (newrec_.create_sm_object_option = 'CREATESMOBJECT') AND
          (newrec_.create_sm_object_option != oldrec_.create_sm_object_option) THEN
         Error_SYS.Record_General(lu_name_, 'NODOSM1: Create SM Object is not allowed when demand code is DO');
      END IF;
      IF (oldrec_.configuration_id != newrec_.configuration_id) THEN
         $IF (Component_Dop_SYS.INSTALLED)$THEN
            Dop_Demand_Cust_Ord_API.Check_Connected_Dop_Status(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
         $ELSE
            NULL;
         $END
      END IF;
   
      -- If the line is connected to a sales promotion calculation that has resulted in a sales promotion charge, tax code can't be changed.
      IF (Sales_Promotion_Util_API.Check_Promo_Exist_For_Ord_Line(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no)) THEN
         IF ((NVL(newrec_.tax_code, ' ') != NVL(oldrec_.tax_code, ' ')) OR (NVL(newrec_.tax_class_id, ' ') != NVL(oldrec_.tax_class_id, ' ')) OR (NVL(newrec_.tax_calc_structure_id, ' ') != NVL(oldrec_.tax_calc_structure_id, ' '))) THEN
            Error_SYS.Record_General(lu_name_, 'NOALTERTAXCODEPROMO: The tax code or tax class or tax calculation structure cannot be altered unless sales promotion calculations have been cleared.');
         END IF;
         IF (oldrec_.buy_qty_due != newrec_.buy_qty_due OR oldrec_.sale_unit_price != newrec_.sale_unit_price OR oldrec_.base_sale_unit_price != newrec_.base_sale_unit_price) THEN
            Client_SYS.Add_Info(lu_name_, 'SALEPROMOEXISTORD: There are connected sales promotion charge lines existing for the order line :P1 that may have to be recalculated or reviewed.', newrec_.order_no ||'-'||newrec_.line_no ||'-'|| newrec_.rel_no);
         END IF;
      END IF;
   
      IF (newrec_.part_ownership != 'COMPANY OWNED') THEN
         IF (Customer_Order_Charge_API.Exist_Charge_On_Order_Line(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no) = 1) THEN
            Error_SYS.Record_General(lu_name_, 'WRONGOWNERSHIP: You are not allowed to change the ownership of customer order line :P1-:P2-:P3 to Customer Owned or Supplier Loaned since one or more sales charge(s) are connected.', newrec_.order_no, newrec_.line_no, newrec_.rel_no);
         END IF;
         IF Sales_Promotion_Util_API.Check_Promo_Exist_For_Ord_Line(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no) THEN
            Error_SYS.Record_General(lu_name_, 'WRONGOWNERSHIPFORSP: You are not allowed to change the ownership of customer order line :P1-:P2-:P3 to Customer Owned or Supplier Loaned unless sales promotion calculations are cleared.', newrec_.order_no, newrec_.line_no, newrec_.rel_no);
         END IF;
      END IF;
   
      IF order_rec_.proposed_prepayment_amount > 0 AND newrec_.tax_calc_structure_id IS NOT NULL THEN
         Error_SYS.Record_General(lu_name_, 'PREPAYINVSTRUCT: Tax calculation structure may not be added when a prepayment based invoice is connected to a customer order.');
      END IF;
      
      -- Attributes that might have changed passed back to the client 
      Client_SYS.Add_To_Attr('VENDOR_NO', newrec_.vendor_no, attr_);
      Client_SYS.Add_To_Attr('SUPPLY_SITE', newrec_.supply_site, attr_);
      Client_SYS.Add_To_Attr('SUPPLY_SITE_RESERVE_TYPE_DB', newrec_.supply_site_reserve_type, attr_);
      Client_SYS.Add_To_Attr('SUPPLY_SITE_RESERVE_TYPE', Supply_Site_Reserve_Type_API.Decode(newrec_.supply_site_reserve_type), attr_);
      Client_SYS.Add_To_Attr('SUPPLIER_SHIP_VIA_TRANSIT', newrec_.supplier_ship_via_transit, attr_);
      Client_SYS.Add_To_Attr('SUPPLIER_SHIP_VIA_TRANSIT_DESC', newrec_.supplier_ship_via_transit_desc, attr_);
      Client_SYS.Add_To_Attr('DOP_NEW_QTY_DEMAND', dop_new_qty_demand_, attr_);
      Client_SYS.Add_To_Attr('DOP_CONNECTION', Dop_Connection_API.Decode(newrec_.dop_connection), attr_);
      Client_SYS.Add_To_Attr('SUPPLY_SITE_DUE_DATE', newrec_.supply_site_due_date, attr_);
      Client_SYS.Add_To_Attr('PLANNED_DUE_DATE', newrec_.planned_due_date, attr_);
      
      newrec_.planned_due_date    := newrec_.planned_due_date;
   
      IF (newrec_.shipment_creation = 'PICK_LIST_CREATION' AND newrec_.shipment_creation != oldrec_.shipment_creation) THEN
         OPEN get_manual_pick_lines;
         FETCH get_manual_pick_lines INTO temp_num_;
         CLOSE get_manual_pick_lines;
         IF (NVL(temp_num_, 0) > 0) THEN
            Error_SYS.Record_General(lu_name_, 'SHIPLINEMANUALERR: A customer order line connected to a manual consolidated pick list cannot use a shipment creation method where the line is connected to a shipment at pick list creation.');
         END IF;
      END IF;
   
      IF (indrec_.buy_qty_due) THEN
         IF (newrec_.shipment_connected = 'TRUE') THEN
            Shipment_Line_API.Get_Preliminary_Ship_Info(no_of_preliminary_shipments_, connected_shipment_id_, newrec_.order_no,
                                                        newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER);
   
            new_ship_connectable_qty_ := newrec_.revised_qty_due - oldrec_.qty_shipped - oldrec_.open_shipment_qty + oldrec_.qty_shipdiff;
            old_ship_connectable_qty_ := oldrec_.revised_qty_due - oldrec_.qty_shipped - oldrec_.open_shipment_qty + oldrec_.qty_shipdiff;
   
            IF  (oldrec_.buy_qty_due > newrec_.buy_qty_due AND new_ship_connectable_qty_ < 0) THEN
               IF (no_of_preliminary_shipments_ != 1) THEN
                  Error_SYS.Record_General(lu_name_, 'COLEXCEEDSSHL: The quantity cannot be less than the total shipment connected quantity.');
               END IF;
            END IF;
   
            IF (no_of_preliminary_shipments_ > 1) THEN
               Client_SYS.Add_Info(lu_name_, 'NOUPDATESHPQTY1: The changed quantity will not be reflected in any shipment, since the customer order line is connected to multiple shipments in the Preliminary status.');
            ELSIF (no_of_preliminary_shipments_ = 1 AND old_ship_connectable_qty_ > 0 AND (newrec_.revised_qty_due - oldrec_.qty_shipped) > oldrec_.open_shipment_qty) THEN
               Client_SYS.Add_Info(lu_name_, 'NOUPDATESHPQTY2: The changed quantity will not be reflected in any shipment, since the customer order line is partly connected to a shipment in the Preliminary status.');
            ELSIF ((newrec_.revised_qty_due - oldrec_.qty_shipped) != oldrec_.open_shipment_qty) THEN
               IF (no_of_preliminary_shipments_ = 1) THEN
                  Client_Sys.Add_To_Attr('CONNECTED_SHIPMENT_ID', connected_shipment_id_, attr_);
               ELSE
                  Client_SYS.Add_Info(lu_name_, 'NOUPDATESHPQTY3: The changed quantity will not be reflected in any shipment, since the customer order line is not connected to a shipment in the Preliminary state, not blocked for automatic connection.');
               END IF;
            END IF;
         END IF;
      END IF;
   
      IF (NVL(oldrec_.ship_addr_no, Database_Sys.string_null_) != NVL(newrec_.ship_addr_no, Database_Sys.string_null_) AND (NOT indrec_.cust_calendar_id)) THEN
         newrec_.cust_calendar_id := Cust_Ord_Customer_Address_API.Get_Cust_Calendar_Id(newrec_.customer_no, newrec_.ship_addr_no);
      END IF;
   
      IF (NVL(newrec_.cust_calendar_id, Database_Sys.string_null_) != NVL(oldrec_.cust_calendar_id, Database_Sys.string_null_)) THEN
         IF newrec_.demand_code != 'IPD' THEN
            Cust_Ord_Customer_API.Validate_Customer_Calendar(newrec_.customer_no, newrec_.cust_calendar_id, TRUE);
         ELSE
            Cust_Ord_Customer_API.Validate_Customer_Calendar(newrec_.customer_no, newrec_.cust_calendar_id, FALSE);
         END IF;
      END IF;
   
      -- Check and update the Export License Connect Header.
      Update_License_Connect_Head__(newrec_, oldrec_, attr_);
   
      Validate_Pack_Instr_Id___(attr_, newrec_, oldrec_);
   
      Client_SYS.Add_To_Attr('MAKE_RESERVATION', make_reservation_, attr_);
      Client_SYS.Add_To_Attr('FROM_SHORTAGE', from_shortage_, attr_);
   
      IF (NVL(Client_SYS.Get_Item_Value('ADD_INFO', attr_), 'FALSE') = 'TRUE') THEN
         current_info_ := App_Context_SYS.Find_Value('CUSTOMER_ORDER_LINE_API.CURRENT_INFO_');
         current_info_ := current_info_ || Client_SYS.Get_All_Info;
         App_Context_SYS.Set_Value('CUSTOMER_ORDER_LINE_API.CURRENT_INFO_', current_info_);
      END IF;
   EXCEPTION
      WHEN value_error THEN
         Error_SYS.Item_Format(lu_name_, name_, value_);
   END Core;

BEGIN
   $IF Component_Rmcom_SYS.INSTALLED $THEN
      IF Rm_Acc_Usage_API.Possible_To_Update('CustomerOrder', 'BELONG_TO_PARENT', 'CHECK', newrec_.order_no) = FALSE THEN
         Rm_Acc_Usage_API.Raise_No_Access('CustomerOrder', newrec_.order_no);
      END IF;
   $END
   Core(oldrec_, newrec_, indrec_, attr_);
END Check_Update___;


PROCEDURE Update___ (
   objid_            IN     VARCHAR2,
   oldrec_           IN     CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   newrec_           IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   attr_             IN OUT NOCOPY VARCHAR2,
   objversion_       IN OUT NOCOPY VARCHAR2,
   by_keys_          IN     BOOLEAN DEFAULT FALSE )
IS
   
   PROCEDURE Base (
      objid_      IN     VARCHAR2,
      oldrec_     IN     customer_order_line_tab%ROWTYPE,
      newrec_     IN OUT NOCOPY customer_order_line_tab%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      by_keys_    IN     BOOLEAN DEFAULT FALSE )
   IS
      value_too_large  EXCEPTION;
      PRAGMA           EXCEPTION_INIT(value_too_large, -12899);
   BEGIN
      newrec_.rowversion := sysdate;
      IF by_keys_ THEN
         UPDATE customer_order_line_tab
            SET ROW = newrec_
            WHERE order_no = newrec_.order_no
            AND   line_no = newrec_.line_no
            AND   rel_no = newrec_.rel_no
            AND   line_item_no = newrec_.line_item_no;
      ELSE
         UPDATE customer_order_line_tab
            SET ROW = newrec_
            WHERE rowid = objid_;
      END IF;
      objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
   EXCEPTION
      WHEN dup_val_on_index THEN
         DECLARE
            constraint_ VARCHAR2(4000) := Utility_SYS.Get_Constraint_From_Error_Msg(sqlerrm);
         BEGIN
            IF (constraint_ = 'CUSTOMER_ORDER_LINE_RK') THEN
               Error_SYS.Fnd_Rowkey_Exist(Customer_Order_Line_API.lu_name_, newrec_.rowkey);
            ELSIF (constraint_ = 'CUSTOMER_ORDER_LINE_PK') THEN
               Raise_Record_Exist___(newrec_);
            ELSE
               Raise_Constraint_Violated___(newrec_, constraint_);
            END IF;
         END;
      WHEN value_too_large THEN
         Error_SYS.Fnd_Item_Length(lu_name_, sqlerrm);
   END Base;

   PROCEDURE Core (
      objid_            IN     VARCHAR2,
      oldrec_           IN     CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
      newrec_           IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
      attr_             IN OUT NOCOPY VARCHAR2,
      objversion_       IN OUT NOCOPY VARCHAR2,
      by_keys_          IN     BOOLEAN DEFAULT FALSE )
   IS
       CURSOR get_component_lines IS
         SELECT col.line_item_no, col.buy_qty_due, col.revised_qty_due, col.qty_on_order, col.supply_code, col.addr_flag, col.part_no, col.qty_assigned, col.qty_shipped, cop.po_order_no,
                col.ship_via_code, col.forward_agent_id, col.delivery_terms, col.del_terms_location, col.ext_transport_calendar_id,
                col.ship_addr_no, col.default_addr_flag
         FROM   customer_order_line_tab col, customer_order_pur_order_tab cop
         WHERE  col.order_no = newrec_.order_no
         AND    col.line_no = newrec_.line_no
         AND    col.rel_no = newrec_.rel_no
         AND    col.line_item_no > 0
         AND    col.rowstate NOT IN ('Invoiced', 'Cancelled')
         AND    cop.oe_order_no(+) = col.order_no
         AND    cop.oe_line_no(+) = col.line_no
         AND    cop.oe_rel_no(+) = col.rel_no
         AND    cop.oe_line_item_no(+)  = col.line_item_no
         ORDER BY cop.po_order_no, col.line_item_no;
   
      comp_rec_                      get_component_lines%ROWTYPE;
      next_comp_rec_                 get_component_lines%ROWTYPE;
      temp_change_request_           VARCHAR2(5);
   
      comp_qty_invoiced_             NUMBER;
      text_                          VARCHAR2(200);
      linerec_                       CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
      rowid_                         VARCHAR2(2000);
      rowversion_                    VARCHAR2(2000);
      sales_part_rec_                Sales_Part_API.Public_Rec;
      order_rec_                     CUSTOMER_ORDER_API.Public_Rec;
      site_rec_                      Site_API.Public_Rec;
      old_sale_price_total_          NUMBER;
      new_sale_price_total_          NUMBER;
      company_                       VARCHAR2(20);
      pkg_changed_                   BOOLEAN := FALSE;
      discount_                      NUMBER;
      qty_refreshed_                 NUMBER;
      price_source_refreshed_        NUMBER;
      contract_                      CUSTOMER_ORDER_LINE_TAB.contract%TYPE;
      part_no_                       CUSTOMER_ORDER_LINE_TAB.part_no%TYPE;
      header_rowstate_               CUSTOMER_ORDER_TAB.rowstate%TYPE;
      tot_percentage_                NUMBER;
      msg_text_                      VARCHAR2(200);
      originating_rel_no_            VARCHAR2(4);
      originating_line_item_no_      NUMBER;
      source_msg_text_               VARCHAR2(300);
      len_msg_text_                  NUMBER:= 0;
      local_site_reservation_exist_  NUMBER := 0;
      planned_receipt_date_          DATE;
      data_changed_                  BOOLEAN;
      create_connected_order_        BOOLEAN := TRUE;
      replicate_changes_             VARCHAR2(5);
      change_request_                VARCHAR2(5);
      server_data_change_            NUMBER;
      comp_attr_                     VARCHAR2(2000);
      prov_msg_text_                 VARCHAR2(200);
      calc_price_per_curr_           NUMBER;
      tax_from_defaults_             BOOLEAN := FALSE;
      price_changed_                 BOOLEAN := FALSE;
      shipment_id_                   NUMBER;
      tax_method_                    VARCHAR2(50);
      exist_chg_on_order_line_       NUMBER;
      is_input_uom_grp_allowed_      VARCHAR2(20);
      input_uom_group_               Inventory_Part_Tab.Input_Unit_Meas_Group_Id%TYPE;
      update_pegged_orders_          VARCHAR2(5);
      dummy_                         Shipment_API.Shipment_Id_Tab;
      price_source_                  VARCHAR2(200);
      header_deliver_country_db_     VARCHAR2(2);
      proj_unique_sale_              VARCHAR2(5);
      order_project_id_              CUSTOMER_ORDER_TAB.project_id%TYPE;
      do_qty_                        BOOLEAN := FALSE;
      site_date_                     DATE;
      country_desc_                  VARCHAR2(740);
      new_rental_chargeable_days_    NUMBER;
      old_rental_chargeable_days_    NUMBER;
      old_sale_price_incl_tax_total_ NUMBER;
      new_sale_price_incl_tax_total_ NUMBER;
      insert_package_mode_           VARCHAR2(5);
      block_component_info_          VARCHAR2(5):= 'FALSE';
      current_info_                  VARCHAR2(32000);
      pkg_qty_reserved_              NUMBER;
      dop_replicate_msg_             VARCHAR2(2000) := NULL;
      no_of_dop_conns_               NUMBER;
      order_info_                    VARCHAR2(23);
      from_shortage_                 BOOLEAN := FALSE;
      make_reservation_              BOOLEAN := FALSE;
      connected_shipment_id_         NUMBER;
      po_charged_comp_change_        VARCHAR2(5);
      changed_attrib_not_in_pol_     VARCHAR2(5);
      discount_freeze_db_            VARCHAR2(5);    
      replication_not_needed_        VARCHAR2(10) := 'NOTSENT';
      currency_type_                 Currency_Type_Tab.currency_type%TYPE;      
      new_default_addr_flag_         VARCHAR2(1);
      evaluate_default_info_         BOOLEAN := FALSE;
      rounding_                      NUMBER;
      new_comprec_                   CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
      unit_price_                    NUMBER;
      dummy_total_disc_pct_          NUMBER;
      dummy_total_disc_amt_          NUMBER;
      tax_code_changed_              VARCHAR2(5) := 'FALSE';
      multiple_tax_lines_            VARCHAR2(20);
      tax_item_removed_              VARCHAR2(5) := 'FALSE';
      price_refetch_                 VARCHAR2(5);
      fetch_external_tax_             VARCHAR2(5) := 'TRUE';
      -- gelr:disc_price_rounded, begin
      discounted_price_rounded_      BOOLEAN := Customer_Order_API.Get_Discounted_Price_Rounded(newrec_.order_no);
      -- gelr:disc_price_rounded, end
   BEGIN  
      order_rec_                := CUSTOMER_ORDER_API.Get(newrec_.order_no);
      insert_package_mode_      := NVL(Client_SYS.Get_Item_Value('INSERT_PACKAGE_MODE_', attr_), 'FALSE');
      po_charged_comp_change_   := NVL(Client_SYS.Get_Item_Value('PO_CHARGED_COMP_CHANGE', attr_), 'FALSE');
   
      IF (Client_SYS.Get_Item_Value('MAKE_RESERVATION', attr_) = 'TRUE') THEN
         make_reservation_ := TRUE;
      END IF;
      
      IF Fnd_Session_API.Is_Odp_Session AND Client_SYS.Get_Item_Value('SOURCE', attr_) = 'SHORTAGES' THEN 
         from_shortage_ := TRUE;
      ELSIF (Client_SYS.Item_Exist('NULL', attr_)) THEN
         from_shortage_ := TRUE;
      END IF;
   
      IF (Client_SYS.Item_Exist('CONNECTED_SHIPMENT_ID', attr_)) THEN
         connected_shipment_id_ := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('CONNECTED_SHIPMENT_ID', attr_));
      END IF;
   
      site_rec_                 := Site_API.Get(newrec_.contract);
      company_                  := site_rec_.company;
      sales_part_rec_           := Sales_Part_API.Get(newrec_.contract, newrec_.catalog_no);
      input_uom_group_          := Inventory_Part_API.Get_Input_Unit_Meas_Group_Id( newrec_.contract, newrec_.part_no);
      is_input_uom_grp_allowed_ := Input_Unit_Meas_Group_API.Is_Usage_Allowed(input_uom_group_, 'ORDER' );
   
      -- IID DI011 removed net weight from Invent Part and adds it to the Partcatalog.
      -- As a result now Sales Part's freight info can get fetched from on itself or from part catalog.
      -- Sales_Weight_Volume_Util_API.Get_Total_Weight_Volume does the necessary conresions and returns the values.
      Sales_Weight_Volume_Util_API.Get_Total_Weight_Volume(total_net_weight_      => newrec_.line_total_weight,
                                                           total_gross_weight_    => newrec_.line_total_weight_gross,
                                                           total_volume_          => newrec_.line_total_qty,
                                                           adjusted_net_weight_   => newrec_.adjusted_weight_net,
                                                           adjusted_gross_weight_ => newrec_.adjusted_weight_gross,
                                                           adjusted_volume_       => newrec_.adjusted_volume,
                                                           contract_              => newrec_.contract,
                                                           catalog_no_            => newrec_.catalog_no,
                                                           part_no_               => newrec_.part_no,
                                                           buy_qty_due_           => newrec_.buy_qty_due,
                                                           configuration_id_      => newrec_.configuration_id,
                                                           input_unit_meas_       => newrec_.input_unit_meas,
                                                           input_qty_              => newrec_.input_qty,
                                                           packing_instruction_id_ => newrec_.packing_instruction_id);
   
      header_rowstate_ := order_rec_.rowstate;
   
      qty_refreshed_          := (NVL(Client_SYS.Get_Item_Value('QTY_REFRESHED', attr_), 0));
      price_source_refreshed_ := (NVL(Client_SYS.Get_Item_Value('PRICE_SOURCE_REFRESHED', attr_), 0));
   
      replicate_changes_    := Client_SYS.Get_Item_Value('REPLICATE_CHANGES', attr_);
      change_request_       := Client_SYS.Get_Item_Value('CHANGE_REQUEST', attr_);
      server_data_change_   := NVL(Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('SERVER_DATA_CHANGE', attr_)), 0);
      update_pegged_orders_ := Client_SYS.Get_Item_Value('UPDATE_PEGGED_ORDERS', attr_);
      changed_attrib_not_in_pol_   := Client_SYS.Get_Item_Value('CHANGED_ATTRIB_NOT_IN_POL', attr_);
      tax_code_changed_ := NVL(Client_SYS.Get_Item_Value('TAX_CODE_CHANGED', attr_), 'FALSE');
      price_refetch_        := Client_SYS.Get_Item_Value('PRICE_REFETCH', attr_);   
      multiple_tax_lines_  := Client_SYS.Get_Item_Value('MULTIPLE_TAX_LINES', attr_);
      tax_method_ := Company_Tax_Control_API.Get_External_Tax_Cal_Method_Db(company_);
      
      -- When AVALARA tax is used when possible bundle calls are used to fetch tax. At those 
      -- times UPDATE_TAX is set to FALSE in attr
      IF tax_method_ IN (External_Tax_Calc_Method_API.DB_AVALARA_SALES_TAX, External_Tax_Calc_Method_API.DB_AVALARA_TAX_BRAZIL) THEN
         fetch_external_tax_ := NVL(Client_SYS.Get_Item_Value('UPDATE_TAX', attr_), 'TRUE');
      END IF;
   
      IF (newrec_.line_item_no <= 0) THEN
         IF ((newrec_.tax_code IS NULL) AND (newrec_.tax_calc_structure_id IS NULL) AND (tax_method_ = External_Tax_Calc_Method_API.DB_NOT_USED)
            AND (multiple_tax_lines_ IS NOT NULL) AND (multiple_tax_lines_ = 'FALSE')
            AND (NVL(newrec_.project_id, Database_SYS.string_null_) = NVL(oldrec_.project_id, Database_SYS.string_null_)) AND order_rec_.rowstate != 'Invoiced') THEN
   
            tax_item_removed_ := 'TRUE';
   
            Source_Tax_Item_Order_API.Remove_Tax_Items(company_, 
                                                      Tax_Source_API.DB_CUSTOMER_ORDER_LINE,
                                                      newrec_.order_no, 
                                                      newrec_.line_no, 
                                                      newrec_.rel_no, 
                                                      TO_CHAR(newrec_.line_item_no),
                                                      '*');
            Tax_Handling_Util_API.Validate_Tax_Code_Mandatory(company_, 'CUSTOMER_TAX');      
         END IF;
      END IF;
   
      -- For rental lines, the rental duration is retreived from the rental atrributes
      -- because rental object is updated after customer order line.
      IF (newrec_.rental = Fnd_Boolean_API.DB_TRUE) THEN
         old_rental_chargeable_days_  := Get_Rental_Chargeable_Days___(newrec_.order_no,
                                                                       newrec_.line_no,
                                                                       newrec_.rel_no,
                                                                       newrec_.line_item_no);
         new_rental_chargeable_days_ := Get_Latest_Rent_Charge_Days___(attr_, newrec_);
      END IF;
   
      IF (from_shortage_ AND (newrec_.rowstate IN ('Delivered', 'Invoiced', 'Cancelled'))) THEN
         Error_SYS.Record_General(lu_name_, 'NOORDERCHGS: No changes may be made to an order when Delivered or Invoiced/Closed or Cancelled.');
      END IF;
   
      IF sales_part_rec_.minimum_qty IS NOT NULL AND newrec_.buy_qty_due != oldrec_.buy_qty_due THEN
         IF sales_part_rec_.minimum_qty > newrec_.buy_qty_due THEN
            Client_SYS.Add_Info(lu_name_, 'LTMINIMUMQTY: The minimum quantity when ordering Sales Part No :P1 is :P2 :P3.', newrec_.catalog_no, sales_part_rec_.minimum_qty, newrec_.sales_unit_meas);
         END IF;
      END IF;
   
      -- Project Umbrella Connection
      IF (newrec_.activity_seq IS NOT NULL) THEN
         IF ((oldrec_.activity_seq IS NULL) OR (oldrec_.activity_seq != newrec_.activity_seq)) THEN
            $IF (Component_Proj_SYS.INSTALLED) $THEN
               newrec_.project_id  := Activity_API.Get_Project_Id(newrec_.activity_seq);
               proj_unique_sale_   := Project_API.Get_Proj_Unique_Sale_Db(newrec_.project_id);
               IF (proj_unique_sale_ = 'TRUE') THEN
                  order_project_id_ := order_rec_.project_id;
                  IF (order_project_id_ IS NULL) THEN
                     Customer_Order_API.Modify_Project_Id(newrec_.order_no, newrec_.project_id);
                  END IF;
                  currency_type_ := Project_API.Get_Currency_Type(newrec_.project_id, company_);
               END IF;
            $ELSE
               Error_SYS.Record_General(lu_name_, 'ACTIVITYNOTINST: Activity Sequence may not be set since Activity is not installed.');
            $END
         END IF;
      ELSE
         newrec_.project_id := NULL;
         IF (oldrec_.activity_seq IS NOT NULL) THEN
            IF (order_rec_.currency_rate_type IS NULL) THEN
               currency_type_ := Currency_Type_API.Get_Default_Type(company_, 'CUSTOMER');
            ELSE
               currency_type_ := order_rec_.currency_rate_type;
            END IF;      
         END IF;
      END IF;
      IF ((currency_type_ IS NOT NULL) AND (newrec_.rowstate != 'Cancelled')) THEN 
         IF (order_rec_.use_price_incl_tax = 'TRUE') THEN
            Customer_Order_Pricing_API.Get_Base_Price_In_Currency( newrec_.base_unit_price_incl_tax, newrec_.currency_rate,
                                                                   NVL(order_rec_.customer_no_pay, order_rec_.customer_no),
                                                                   newrec_.contract,order_rec_.currency_code, newrec_.unit_price_incl_tax,
                                                                   currency_type_);
         ELSE
            Customer_Order_Pricing_API.Get_Base_Price_In_Currency( newrec_.base_sale_unit_price, newrec_.currency_rate,
                                                                   NVL(order_rec_.customer_no_pay, order_rec_.customer_no),
                                                                   newrec_.contract,order_rec_.currency_code, newrec_.sale_unit_price,
                                                                   currency_type_);
         END IF;      
         Calculate_Prices(newrec_);       
      END IF;
   
      -- Update should only be done if the configuration has changed, it not the flow might get stuck in an infinite loop.
      IF (newrec_.configuration_id != '*' AND newrec_.configuration_id != oldrec_.configuration_id) THEN
         Order_Config_Util_API.Update_Configuration__('CUSTOMERORDER', newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no,
                                                      oldrec_.configuration_id, newrec_.configuration_id, newrec_.ctp_planned, newrec_.supply_code );
      END IF;
   
      -- Maintain qty_short for inventory demand shortage.
      IF (oldrec_.qty_short > 0) AND ((oldrec_.revised_qty_due != newrec_.revised_qty_due) OR
         (oldrec_.qty_shipdiff != newrec_.qty_shipdiff) OR (oldrec_.qty_assigned != newrec_.qty_assigned)) THEN
         IF (newrec_.rowstate IN ('Delivered', 'Invoiced', 'Cancelled')) OR (newrec_.qty_shipdiff > 0) THEN
            newrec_.qty_short := 0;
         ELSIF (newrec_.qty_assigned + newrec_.qty_short + newrec_.qty_shipped) != newrec_.revised_qty_due THEN
            IF (newrec_.supply_code IN ('IO','PS')) AND (newrec_.qty_on_order > 0) THEN
               newrec_.qty_short := GREATEST(newrec_.revised_qty_due - newrec_.qty_assigned - newrec_.qty_shipped - newrec_.qty_on_order, 0);
            ELSE
               newrec_.qty_short := GREATEST(newrec_.revised_qty_due - newrec_.qty_assigned - newrec_.qty_shipped, 0);
            END IF;
         END IF;
      END IF;
   
      IF (newrec_.qty_shipped != oldrec_.qty_shipped) AND newrec_.demand_code = 'PI' THEN
         -- IF some qty delivered, update forecast in Project MS
         Update_Proj_Ms_Forecast___(newrec_.contract,
                                    newrec_.part_no,
                                    (newrec_.qty_shipped - oldrec_.qty_shipped),
                                    newrec_.planned_due_date,
                                    newrec_.activity_seq);
      END IF;
   
      IF (newrec_.qty_returned != oldrec_.qty_returned) THEN
         IF ((newrec_.qty_shipped < 0) AND (newrec_.qty_returned != 0)) OR
            ((newrec_.qty_shipped > 0) AND (newrec_.qty_returned > newrec_.qty_shipped)) THEN
            -- Error if quantity returned is greater than quantity delivered.
            -- Qty shipped could be negative if line was created from service management.
            Error_SYS.Record_General(lu_name_, 'TOMUCHTORETURN: The quantity to return exceeds the maximum quantity to return.');
         END IF;
   
         IF newrec_.demand_code = 'PI' THEN
            -- IF some qty returned, update forecast in Project MS
            Update_Proj_Ms_Forecast___(newrec_.contract,
                                       newrec_.part_no,
                                       (oldrec_.qty_returned - newrec_.qty_returned),
                                       newrec_.planned_due_date,
                                       newrec_.activity_seq);
         END IF;
      END IF;
   
      site_date_ := Site_API.Get_Site_Date(newrec_.contract);
   
      IF (newrec_.rowstate = 'Cancelled') THEN
         IF (newrec_.supply_code = 'PKG') AND (newrec_.promised_delivery_date != oldrec_.promised_delivery_date) THEN
            Update_Package___(newrec_.promised_delivery_date, newrec_.planned_delivery_date, newrec_.planned_ship_date, newrec_.planned_due_date, newrec_, insert_package_mode_, block_component_info_, dop_replicate_msg_);
         END IF;
      ELSE
         IF (oldrec_.rowstate IN ('Released', 'PartiallyDelivered') 
            AND (((newrec_.supply_code ='NO') AND ((newrec_.catalog_type != 'KOMP') OR (order_rec_.backorder_option != 'INCOMPLETE PACKAGES NOT ALLOWED'))) OR
            (newrec_.supply_code IN ('SEO', 'PRJ'))) AND ((oldrec_.revised_qty_due != newrec_.revised_qty_due) OR (oldrec_.planned_due_date != newrec_.planned_due_date))) THEN
            IF ((trunc(newrec_.planned_due_date) <= trunc(site_date_)) OR
               (Cust_Order_Type_API.Get_Oe_Alloc_Assign_Flag(order_rec_.order_id) = Cust_Ord_Reservation_Type_API.Decode('Y'))) THEN
               newrec_.qty_to_ship := newrec_.buy_qty_due - newrec_.qty_shipped;
               Client_SYS.Add_To_Attr('QTY_TO_SHIP', newrec_.qty_to_ship, attr_);
               IF (newrec_.shipment_connected = 'TRUE') THEN              
                 Shipment_Line_API.Reserve_Non_Inventory(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, 'CUSTOMER_ORDER', newrec_.qty_to_ship);
               END IF;
               IF (oldrec_.qty_to_ship = 0) THEN
                  Customer_Order_Line_Hist_API.New(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no,
                  Language_SYS.Translate_Constant(lu_name_, 'CANBESHIPPED: The line can now be shipped'));
               END IF;
            ELSIF (oldrec_.qty_to_ship > 0) THEN
               IF (newrec_.revised_qty_due < oldrec_.revised_qty_due) THEN
                  -- The ordered quantity has been decreased.
                  newrec_.qty_to_ship := newrec_.revised_qty_due - newrec_.qty_shipped;
                  Client_SYS.Add_Info(lu_name_, 'QTY_TO_SHIP_UPDATE: Quantity Non Inventory to Deliver has been updated.');
               ELSIF (newrec_.revised_qty_due > oldrec_.revised_qty_due) THEN
                  -- The ordered quantity has been increased.
                  Client_SYS.Add_Info(lu_name_, 'UPDATE_QTY_RESERVED: Reserve the increased Sales Quantity to update Quantity Non Inventory to Deliver.');
               END IF;
               IF ((TRUNC(newrec_.planned_due_date) > TRUNC(site_date_))
                  AND (newrec_.revised_qty_due = oldrec_.revised_qty_due)) THEN
                  newrec_.qty_to_ship := 0;
                  Client_SYS.Add_To_Attr('QTY_TO_SHIP', newrec_.qty_to_ship, attr_);
                  IF (newrec_.shipment_connected = 'TRUE') THEN                 
                    Shipment_Line_API.Unreserve_Non_Inventory(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, 'CUSTOMER_ORDER', newrec_.qty_to_ship, TRUE);
                  END IF;
               END IF;
            END IF;
         END IF;
   
         IF make_reservation_ THEN
            -- only create priority / instant reservations when its not a CTP planned/reserved line
            IF (newrec_.ctp_planned = 'N') THEN
               IF (newrec_.supply_code = 'IPD') THEN
                  contract_ := newrec_.supply_site;
                  IF (Sales_Part_API.Check_Exist(contract_, newrec_.part_no) = 0) THEN
                     part_no_ := Sales_Part_Cross_Reference_API.Get_Catalog_No(Cust_Ord_Customer_API.Get_Customer_No_From_Contract(newrec_.contract),
                                                                               contract_, newrec_.part_no);
                  ELSE
                     part_no_ := newrec_.part_no;
                  END IF;
               ELSE
                  contract_ := newrec_.contract;
                  part_no_  := newrec_.part_no;
               END IF;
   
               local_site_reservation_exist_ := NVL(Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('LOCAL_SITE_RESERVATION_EXIST', attr_)), 0);
   
               IF (Reserve_Customer_Order_API.Is_Supply_Chain_Reservation(newrec_.order_no,
                                            newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, NULL, newrec_.contract,
                                            newrec_.supply_code, newrec_.vendor_no, NVL(part_no_,newrec_.purchase_part_no),
                                            newrec_.supply_site_reserve_type, 'INSTANT') = 1) THEN
                  -- instant supply chain reservation
                  Reserve_Customer_Order_API.Create_Instant_Reservation__(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no,
                                                                          NULL, NVL(part_no_,newrec_.purchase_part_no), newrec_.revised_qty_due,
                                                                          newrec_.qty_shipped, objid_, newrec_.vendor_no);
               ELSIF (local_site_reservation_exist_= 0) THEN
                  -- dont make any priority reservation if a local site reservation exist
                  Reserve_Customer_Order_API.Create_Priority_Reservation__(newrec_.qty_assigned, contract_,
                        part_no_, newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, newrec_.revised_qty_due,
                        newrec_.qty_shipped, newrec_.supply_code, objid_);
               END IF;
   
               IF (newrec_.supply_code = 'IO') THEN
                  Client_SYS.Set_Item_Value('QTY_ASSIGNED', newrec_.qty_assigned, attr_);
               END IF;
            END IF;
         END IF;
   
         -- Note: Create a history record if provisional price check is changed.
         IF (oldrec_.provisional_price != newrec_.provisional_price) THEN
            IF (newrec_.provisional_price = 'TRUE') THEN
               prov_msg_text_ := Language_SYS.Translate_Constant(lu_name_, 'PROV_PRICE_CHK1: Provisional price has been checked.');
            ELSE
               prov_msg_text_ := Language_SYS.Translate_Constant(lu_name_, 'PROV_PRICE_CHK2: Provisional price has been un-checked.');
            END IF;
   
            msg_text_ := SUBSTR(prov_msg_text_, 1, 200);
            Customer_Order_Line_Hist_API.New( newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, msg_text_);
         END IF;
   
         IF (newrec_.line_item_no <= 0) THEN
            IF (newrec_.supply_code = 'PKG') THEN
               dop_replicate_msg_ := Client_SYS.Get_Item_Value('DOP_NEW_QTY_DEMAND', attr_);
               IF (NVL(server_data_change_,0) != 1) AND (NVL(replicate_changes_, 'FALSE') = 'TRUE') AND (header_rowstate_ != 'Planned') AND (dop_replicate_msg_ IS NOT NULL) THEN
                  IF ((oldrec_.buy_qty_due != newrec_.buy_qty_due) OR (oldrec_.wanted_delivery_date != newrec_.wanted_delivery_date) OR (Message_SYS.Find_Attribute(dop_replicate_msg_, 'FROM_CO_HEAD_CLIENT', 'FALSE') = 'TRUE')) THEN
                     $IF (Component_Dop_SYS.INSTALLED) $THEN
                        no_of_dop_conns_ := Dop_Demand_Cust_Ord_API.Get_No_Of_All_Dop_Headers(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, 'TRUE');
                     $END
                     IF (NVL(no_of_dop_conns_,0) > 1) THEN
                        order_info_ := newrec_.order_no || '-' || newrec_.line_no || '-' || newrec_.rel_no;
                        Client_SYS.Add_Info(lu_name_,'MOREDOPCONNS: There is more than one DOP header connected to the CO line :P1. The change in the CO line will not be replicated in any of them.', order_info_);
                        dop_replicate_msg_ := NULL;
                     END IF;
                  ELSE
                     dop_replicate_msg_ := NULL;
                  END IF;
               ELSE
                  dop_replicate_msg_ := NULL;
               END IF;
   
               -- Save any info messages before we start to handle the components
               Add_Info___(insert_package_mode_);
               -- Set the block component info flag so we stop the component info messages generated from Change_Package_Structure___ later on
               block_component_info_ := 'TRUE';
   
               Update_Package___(newrec_.promised_delivery_date, newrec_.planned_delivery_date, newrec_.planned_ship_date, newrec_.planned_due_date, newrec_, insert_package_mode_, block_component_info_, dop_replicate_msg_);
   
               block_component_info_ := 'FALSE';
   
            END IF;
            IF (oldrec_.promised_delivery_date != newrec_.promised_delivery_date) THEN
               Check_Allow_Backorders___(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, newrec_.planned_delivery_date);
            END IF;
         END IF;
   
         IF ((oldrec_.line_item_no >= 0) AND (newrec_.supply_code = 'DOP') AND (NVL(server_data_change_,0) != 1)) THEN
            dop_replicate_msg_ := Client_SYS.Get_Item_Value('DOP_NEW_QTY_DEMAND', attr_);
            IF ((NVL(replicate_changes_, 'FALSE') = 'TRUE') AND (((oldrec_.line_item_no > 0) AND (dop_replicate_msg_ IS NULL)) 
               OR ((Fnd_Session_API.Is_Odp_Session) AND (oldrec_.buy_qty_due != newrec_.buy_qty_due) AND (oldrec_.wanted_delivery_date = newrec_.wanted_delivery_date)))) THEN
               $IF (Component_Dop_SYS.INSTALLED) $THEN
                  no_of_dop_conns_ := Dop_Demand_Cust_Ord_API.Get_No_Of_All_Dop_Headers(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, 'TRUE');
               $END
               IF (NVL(no_of_dop_conns_, 0) > 1) THEN
                  order_info_ := newrec_.order_no || '-' || newrec_.line_no || '-' || newrec_.rel_no || '-' || newrec_.line_item_no;
                  Client_SYS.Add_Info(lu_name_, 'MOREDOPCONNS: There is more than one DOP header connected to the CO line :P1. The change in the CO line will not be replicated in any of them.', order_info_);
                  IF (NOT Fnd_Session_API.Is_Odp_Session) THEN
                     dop_replicate_msg_ := NULL;
                  END IF;
               ELSE
                  dop_replicate_msg_ := Message_SYS.Construct(dop_replicate_msg_);
                  Message_SYS.Add_Attribute(dop_replicate_msg_,'REPLICATE_DOP_IN_SERVER','TRUE');
               END IF;
               Client_SYS.Set_Item_Value('DOP_NEW_QTY_DEMAND', dop_replicate_msg_, attr_);
            END IF;
            IF ((oldrec_.line_item_no = 0) AND (newrec_.supply_code = 'DOP') AND (NVL(server_data_change_,0) != 1)) THEN
               -- Modify DOP structure for part with Supply_Type = 'Dop'
               IF (header_rowstate_ != 'Planned') THEN
                  Connect_Customer_Order_API.Modify_Dop(newrec_.qty_on_order,
                                                        newrec_.order_no,
                                                        newrec_.line_no,
                                                        newrec_.rel_no,
                                                        newrec_.line_item_no,
                                                        newrec_.revised_qty_due,
                                                        newrec_.planned_due_date,
                                                        dop_replicate_msg_,
                                                        NVL(replicate_changes_, 'FALSE'));
               END IF;
            END IF;
         END IF;
      END IF;
   
      -- This needs for stage billing invoicing porcess when Group discount is there for sales part.
      IF (newrec_.staged_billing = 'STAGED BILLING') THEN
         old_sale_price_total_ := Get_Sale_Price_Total(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
         old_sale_price_incl_tax_total_ := Get_Sale_Price_Incl_Tax_Total(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
      END IF;
      -- Recalculate sale_unit_price and base_sale_unit_price
      IF (newrec_.line_item_no <= 0) THEN
         IF ((newrec_.price_freeze = 'FREE') AND ((NVL(newrec_.char_price, 0) != NVL(oldrec_.char_price, 0)) OR (newrec_.price_freeze != oldrec_.price_freeze))) THEN
            IF (order_rec_.use_price_incl_tax = 'TRUE') THEN
               IF (newrec_.free_of_charge = Fnd_Boolean_API.DB_FALSE OR newrec_.unit_price_incl_tax != 0) THEN
                  newrec_.unit_price_incl_tax := newrec_.part_price + NVL(newrec_.char_price, 0);
               END IF;            
               IF (newrec_.unit_price_incl_tax != oldrec_.unit_price_incl_tax) THEN
                  Customer_Order_Pricing_API.Get_Base_Price_In_Currency( newrec_.base_unit_price_incl_tax, newrec_.currency_rate,
                                                                         NVL(order_rec_.customer_no_pay, order_rec_.customer_no),
                                                                         newrec_.contract,order_rec_.currency_code, newrec_.unit_price_incl_tax,
                                                                         nvl(currency_type_, order_rec_.currency_rate_type));
               END IF;
               Client_SYS.Set_Item_Value('UNIT_PRICE_INCL_TAX',      newrec_.unit_price_incl_tax,      attr_);
               Client_SYS.Set_Item_Value('BASE_UNIT_PRICE_INCL_TAX', newrec_.base_unit_price_incl_tax, attr_);
            ELSE
               IF (newrec_.free_of_charge = Fnd_Boolean_API.DB_FALSE OR newrec_.sale_unit_price != 0) THEN
                  newrec_.sale_unit_price := newrec_.part_price + NVL(newrec_.char_price, 0);
               END IF;            
               IF (newrec_.sale_unit_price != oldrec_.sale_unit_price) THEN
                  Customer_Order_Pricing_API.Get_Base_Price_In_Currency( newrec_.base_sale_unit_price, newrec_.currency_rate,
                                                                         NVL(order_rec_.customer_no_pay, order_rec_.customer_no),
                                                                         newrec_.contract,order_rec_.currency_code, newrec_.sale_unit_price,
                                                                         nvl(currency_type_, order_rec_.currency_rate_type));
               END IF;
               Client_SYS.Set_Item_Value('SALE_UNIT_PRICE', newrec_.sale_unit_price, attr_);
               Client_SYS.Set_Item_Value('BASE_SALE_UNIT_PRICE', newrec_.base_sale_unit_price, attr_);
            END IF;         
            Calculate_Prices(newrec_);            
         END IF;
      END IF;
   
      originating_rel_no_       := Get_Originating_Rel_No(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
      originating_line_item_no_ := Get_Originating_Line_Item_No(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
   
      source_msg_text_ := NULL;
      current_info_    :=  App_Context_SYS.Find_Value('CUSTOMER_ORDER_LINE_API.CURRENT_INFO_');
   
      IF (oldrec_.demand_code IS NULL OR oldrec_.demand_code != 'RCO') THEN
         IF ((originating_rel_no_ IS NOT NULL ) AND (originating_line_item_no_ = 0)) THEN
            source_msg_text_ := Language_SYS.Translate_Constant(lu_name_, 'ORILNEITMNO_NULL: The order line :P1-:P2 is sourced and originates from another order line. Check the other sourced order line(s) with the same previous delivery number.', NULL,
                                                                    (newrec_.order_no ||'-'||newrec_.line_no ||'-'|| newrec_.rel_no), to_char(newrec_.line_item_no));
            source_msg_text_ := LTRIM(SUBSTR(source_msg_text_, INSTR(source_msg_text_, ':') + 1));
            len_msg_text_    := instr(current_info_, source_msg_text_);
   
            IF (len_msg_text_ IS NULL) OR (len_msg_text_= 0) THEN
               Client_SYS.Add_Info(lu_name_, 'ORILNEITMNO_NULL: The order line :P1-:P2 is sourced and originates from another order line. Check the other sourced order line(s) with the same previous delivery number.',
                                   (newrec_.order_no ||'-'||newrec_.line_no ||'-'|| newrec_.rel_no), to_char(newrec_.line_item_no));
            END IF;
         ELSIF (originating_line_item_no_ > 0) THEN
            source_msg_text_ := Language_SYS.Translate_Msg_(lu_name_, 'ORILNEITMNO_NOT_NULL: This order line is sourced and originates from another order lines package component. Check the other order lines package components with the same "Sales Part No".');
            source_msg_text_ := LTRIM(SUBSTR(source_msg_text_, INSTR(source_msg_text_, ':') + 1));
            len_msg_text_    := INSTR(current_info_, source_msg_text_);
   
            IF (len_msg_text_ IS NULL) OR (len_msg_text_= 0) THEN
               Client_SYS.Add_Info(lu_name_, 'ORILNEITMNO_NOT_NULL: This order line is sourced and originates from another order lines package component. Check the other order lines package components with the same "Sales Part No".');
            END IF;
         END IF;
      END IF;
   
      -- Recalculate prices / prices incl tax if tax code or quantity is changed
      IF (newrec_.buy_qty_due != oldrec_.buy_qty_due) THEN      
         Calculate_Prices(newrec_);      
      END IF;
   
      --  fetch the latest rowstate before calling Update___ to avoid setting it to a old value. There are some reservation methods called above which will do a state change.
      newrec_.rowstate := Get_Objstate(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);   
         
      Base(objid_, oldrec_, newrec_, attr_, objversion_, by_keys_);
      
      IF (newrec_.line_item_no <= 0) THEN
         IF (Client_SYS.Get_Item_Value('EVALUATE_DEFAULT_INFO', attr_) = 'TRUE') THEN
            evaluate_default_info_ := TRUE;
         END IF;
         IF evaluate_default_info_ THEN
            new_default_addr_flag_ := Check_Default_Addr_Flag___(newrec_, newrec_.order_no, newrec_.default_addr_flag);
            newrec_.default_addr_flag := new_default_addr_flag_;
         END IF; 
         
         IF (newrec_.default_addr_flag = 'N') THEN
            -- remove any prior single occurence address
            IF ((newrec_.addr_flag = 'N') AND (oldrec_.addr_flag = 'Y')) THEN
               Cust_Order_Line_Address_API.Remove_Address__(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
            END IF;
            -- create new default address if single occurence
            IF ((newrec_.addr_flag = 'Y') AND (oldrec_.addr_flag = 'N')) OR ((oldrec_.default_addr_flag = 'Y') AND (newrec_.addr_flag = 'Y')) THEN
               Insert_Default_Address___(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, newrec_.customer_no, newrec_.ship_addr_no, newrec_.deliver_to_customer_no);
               IF nvl(Client_SYS.Get_Item_Value('COPY_ADDR_TO_LINE', attr_),'FALSE') = 'FALSE' THEN 
                  replication_not_needed_ := 'SENT';
               END IF ;
            END IF;
         ELSIF (oldrec_.default_addr_flag = 'N') THEN
            -- if user unchecked the address flag, remove the single occurence address
            IF ((newrec_.addr_flag = 'N') OR (oldrec_.addr_flag = 'Y')) THEN
               -- Remove the address if a single occurance existed from last save
               Cust_Order_Line_Address_API.Remove_Address__(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
            END IF;
         -- if default address flag wasn't updated, remove address just in case (if it exists)
         ELSIF (newrec_.default_addr_flag = 'Y') THEN
            Cust_Order_Line_Address_API.Remove_Address__(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
         END IF;
         IF evaluate_default_info_ THEN
            Modify_Default_Addr_Flag__(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, newrec_.default_addr_flag);  
         END IF;
         Customer_Order_Flow_API.Modify_License_Address(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, newrec_.demand_code, newrec_.demand_order_ref1, newrec_.demand_order_ref2, newrec_.demand_order_ref3); -- Export control
   
         Client_SYS.Set_Item_Value('DEFAULT_ADDR_FLAG_DB', newrec_.default_addr_flag, attr_);
         Client_SYS.Set_Item_Value('SHIP_ADDR_NO', newrec_.ship_addr_no, attr_);
         Client_SYS.Set_Item_Value('ADDR_FLAG_DB', newrec_.addr_flag, attr_);
      END IF;
      
      Modify_Connected_Order_Line___ (newrec_, attr_, oldrec_, replicate_changes_, header_rowstate_, po_charged_comp_change_,
                                      update_pegged_orders_, change_request_, changed_attrib_not_in_pol_, server_data_change_);
         
      IF (newrec_.rowstate != 'Cancelled') THEN
         IF (newrec_.line_item_no <= 0) THEN
            IF (newrec_.supply_code = 'PKG') THEN
               -- Do Replication for package components based on client value sent.
               IF ((NVL(server_data_change_, 0) != 1) OR
                   (NVL(oldrec_.activity_seq, -9999) != NVL(newrec_.activity_seq, -9999)) OR (po_charged_comp_change_ = 'TRUE')) THEN
                  OPEN get_component_lines;
                  FETCH get_component_lines INTO comp_rec_;
   
                  LOOP
                     EXIT WHEN get_component_lines%NOTFOUND;
                     -- next_comp_rec_ is not set to null when NOTFOUND. So, set it to NULL to make next_component_rec_.po_order_no = component_rec_.po_order_no FALSE in the last iteration
                     next_comp_rec_ := NULL;
   
                     FETCH get_component_lines INTO next_comp_rec_;
                     temp_change_request_ := change_request_;
                     IF (replicate_changes_ = 'TRUE' AND comp_rec_.po_order_no IS NOT NULL AND  next_comp_rec_.po_order_no = comp_rec_.po_order_no) THEN
                        temp_change_request_ :='FALSE';
                     END IF;
                     
                     -- Initialize the component line record.
                     new_comprec_ := newrec_;
                     
                     -- Assign values from component line. 
                     new_comprec_.line_item_no              := comp_rec_.line_item_no;                  
                     new_comprec_.supply_code               := comp_rec_.supply_code;
                     new_comprec_.revised_qty_due           := comp_rec_.revised_qty_due;
                     new_comprec_.qty_on_order              := comp_rec_.qty_on_order;
                     new_comprec_.qty_assigned              := comp_rec_.qty_assigned;
                     new_comprec_.qty_shipped               := comp_rec_.qty_shipped;                  
                     new_comprec_.part_no                   := comp_rec_.part_no;
                     new_comprec_.ship_via_code             := comp_rec_.ship_via_code;
                     new_comprec_.forward_agent_id          := comp_rec_.forward_agent_id;
                     new_comprec_.delivery_terms            := comp_rec_.delivery_terms;
                     new_comprec_.del_terms_location        := comp_rec_.del_terms_location;
                     new_comprec_.ext_transport_calendar_id := comp_rec_.ext_transport_calendar_id;
                     new_comprec_.addr_flag                 := comp_rec_.addr_flag;
                     new_comprec_.ship_addr_no              := comp_rec_.ship_addr_no;
                     new_comprec_.default_addr_flag         := comp_rec_.default_addr_flag;
                     
                     Modify_Connected_Order_Line___ (new_comprec_, attr_, oldrec_, replicate_changes_, header_rowstate_, po_charged_comp_change_,
                                      update_pegged_orders_, temp_change_request_, changed_attrib_not_in_pol_, server_data_change_);
   
                     -- Connect the Package Component Lines to project.
                     IF (NVL(oldrec_.activity_seq, -9999) != NVL(newrec_.activity_seq, -9999)) THEN
                        Client_SYS.Clear_Attr(comp_attr_);
                        Client_SYS.Add_To_Attr('ACTIVITY_SEQ', newrec_.activity_seq, comp_attr_);
                        Modify_Line___(comp_attr_, newrec_.order_no, newrec_.line_no, newrec_.rel_no, comp_rec_.line_item_no);
                     END IF;
                     comp_rec_ := next_comp_rec_;
                  END LOOP;
                  CLOSE get_component_lines;
               END IF;
            END IF;
         END IF;
      END IF;
      
      IF (replication_not_needed_ != 'SENT') AND (NVL(replicate_changes_, 'FALSE') = 'TRUE') THEN
         Cust_Order_Line_Address_API.Modify_Connected_Addr_Line__(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, 
                                       replicate_changes_, change_request_, header_rowstate_, newrec_.supply_code); 
      END IF;
      
      IF (newrec_.buy_qty_due != 0) THEN
         IF (oldrec_.discount != newrec_.discount) AND ((server_data_change_ != 1) OR (change_request_ = 'TRUE')) THEN
            -- gelr:disc_price_rounded, begin
            IF (discounted_price_rounded_) THEN
               newrec_.discount := newrec_.original_discount;   
            END IF;
            -- gelr:disc_price_rounded, end
            Cust_Order_Line_Discount_API.Add_Remove_Update_Line(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, newrec_.discount, newrec_.contract);
            -- gelr:disc_price_rounded, begin
            -- if DISCPRICEROUNDED is not set, discount will be calculated in a core way, and original_discount will be equal discount
            IF (discounted_price_rounded_) THEN
               Cust_Order_Line_Discount_API.Calc_Discount_Upd_Co_Line__(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
               newrec_.discount := Get_Discount(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
               newrec_.original_discount := Get_Original_Discount(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
            END IF;
            -- gelr:disc_price_rounded, end         
         END IF;
      END IF;
   
      IF (newrec_.buy_qty_due > oldrec_.buy_qty_due) THEN
         IF (header_rowstate_ IN ('Reserved','Picked','PartiallyDelivered') and newrec_.supply_code IN ('SO','PT','IPT','DOP') AND newrec_.qty_on_order = 0) THEN
            Client_Sys.Add_Info(lu_name_,'INCREASEDDEMAND: Increasing the sales quantity will not create any new pegged supply. Reservation can still be done from standard inventory');
         END IF;
         Generate_Next_Level_Demands___(header_rowstate_, newrec_);
      END IF;
      
      -- gelr:disc_price_rounded, begin
      -- Recalculate additional_discount and order_discount to achive net value the same as rounded price
      -- All of this variables affects net value, therefore all of this can affect recalculated additional_discount and order_discount
      -- if DISCPRICEROUNDED is not set, calculated discounts and original discounts will be the same
      IF (discounted_price_rounded_) THEN
         IF ((newrec_.buy_qty_due != oldrec_.buy_qty_due) OR
             (newrec_.base_sale_unit_price != oldrec_.base_sale_unit_price) OR
             (newrec_.order_discount != oldrec_.order_discount) OR
             (newrec_.additional_discount != oldrec_.additional_discount) OR
             (newrec_.discount != oldrec_.discount)) THEN
   
            -- 1. additional_discount
            -- user/system operates on additional_discount but it is saved in technical column: original_add_discount
            -- Initialize original_ column which is now empty
            IF (newrec_.additional_discount != oldrec_.additional_discount) THEN
               newrec_.original_add_discount := newrec_.additional_discount;
            ELSE
               -- the reason of recalculation was NOT changing of additional_discount but the other variable
               newrec_.original_add_discount := oldrec_.original_add_discount;
            END IF;
            newrec_.additional_discount := Customer_Order_Pricing_API.Calculate_Additional_Discount(newrec_.contract,
                                                                         order_rec_.currency_code,
                                                                         newrec_.original_add_discount,
                                                                         newrec_.buy_qty_due,
                                                                         newrec_.price_conv_factor,
                                                                         newrec_.sale_unit_price,
                                                                         newrec_.discount);
   
            -- 2. order_discount
            -- Read the comment upper
            IF (newrec_.order_discount != oldrec_.order_discount) THEN
               newrec_.original_order_discount := newrec_.order_discount;
            ELSE
               newrec_.order_discount := oldrec_.order_discount;
            END IF;
            newrec_.order_discount := customer_Order_Pricing_API.Calculate_Additional_Discount(newrec_.contract,
                                                                    order_rec_.currency_code,
                                                                    newrec_.original_order_discount,
                                                                    newrec_.buy_qty_due,
                                                                    newrec_.price_conv_factor,
                                                                    newrec_.sale_unit_price,
                                                                    newrec_.discount);
            Update_Line___(objid_, newrec_);
         END IF;
      END IF;
      -- discount and original_discount are handle in diffrent way in Modify_Discount__()
      -- they both comes from cust_order_line_discount_tab.
      -- Sometimes discount is not changed (because it comes from rounded price) but original should be.
      -- gelr:disc_price_rounded, end
   
      $IF (Component_Jinsui_SYS.INSTALLED)$THEN
         IF order_rec_.jinsui_invoice ='TRUE' THEN
            Validate_Jinsui_Constraints__(newrec_, 0, FALSE);
         END IF;
      $END  
   
      IF Tax_Liability_Countries_API.Check_Valid_Info_Exist(company_, order_rec_.supply_country, site_date_) = 'TRUE' THEN
         IF Tax_Liability_API.Get_Tax_Liability_Type_Db(order_rec_.tax_liability, newrec_.country_code) != 'EXM' AND 
            oldrec_.tax_liability_type != 'EXM' AND newrec_.tax_liability_type = 'EXM'  THEN
            Client_SYS.Add_Info(lu_name_, 'EXEMPTLIABILITY: Since the tax liability type is ''Exempt'' the Supply Country Tax ID No will be printed on the invoice.');
         ELSIF (oldrec_.ship_addr_no != newrec_.ship_addr_no) THEN
            header_deliver_country_db_ := Customer_Order_Address_API.Get_Country_Code(newrec_.order_no);
            -- if the line is not defaulted from header and is having a NON-single occurence address
            IF newrec_.default_addr_flag = 'N' AND newrec_.addr_flag = 'N' AND newrec_.country_code != header_deliver_country_db_ THEN
               Client_SYS.Add_Info(lu_name_, 'DIFFDELIVCOUNTRY: Since delivery address country is not the same as the header delivery address country the Supply Country Tax ID No will be printed on the invoice.');
            END IF;
         END IF;
      END IF;
   
      IF oldrec_.supply_code = 'ND' AND newrec_.supply_code != 'ND' THEN
         IF (newrec_.originating_rel_no IS NOT NULL) THEN
            msg_text_ := SUBSTR(Language_SYS.Translate_Constant(lu_name_,'SRC_ORG: Line created from source lines with del no :P1',NULL,newrec_.originating_rel_no), 1, 200);
            Customer_Order_Line_Hist_API.New( newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, msg_text_);
         END IF;
      END IF;
   
      IF (newrec_.line_item_no > 0) THEN
         linerec_ := Get_Object_By_Keys___(newrec_.order_no, newrec_.line_no, newrec_.rel_no, -1);
   
         IF ((newrec_.buy_qty_due != oldrec_.buy_qty_due) OR (newrec_.cost != oldrec_.cost) OR (oldrec_.supply_code != newrec_.supply_code) OR
             (NVL(tax_code_changed_, 'FALSE') = 'TRUE')) THEN
            -- Buy quantity due changed for a component -> Recalculate package structure.
            -- or the cost changed (due to cost roll up of interim order or change of condition code)
            -- Modify the cost for the package  header order line
            IF ((newrec_.buy_qty_due != oldrec_.buy_qty_due) OR (newrec_.cost != oldrec_.cost))  THEN
               Update_Package_Cost___(linerec_.cost, newrec_.order_no, newrec_.line_no, newrec_.rel_no);
            END IF;
            IF (newrec_.buy_qty_due != oldrec_.buy_qty_due) THEN
               do_qty_ := TRUE;
            END IF;
            Change_Package_Structure___(linerec_.promised_delivery_date, linerec_.planned_delivery_date,
                                        linerec_.planned_ship_date, linerec_.planned_due_date, linerec_, do_qty_, TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, insert_package_mode_, block_component_info_, NULL);
            IF (newrec_.cost != oldrec_.cost) THEN
               Trace_Sys.Field(' new cost of component', newrec_.cost);
               Trace_Sys.Field(' new cost of package  ', linerec_.cost);
            END IF;
            pkg_changed_ := TRUE;
         END IF;
         IF (NVL(newrec_.calc_char_price, 0) != NVL(oldrec_.calc_char_price, 0)) OR (NVL(newrec_.char_price, 0) != NVL(oldrec_.char_price, 0)) THEN
            linerec_.calc_char_price := 0;
            linerec_.char_price      := 0;
            pkg_changed_             := TRUE;
         END IF;
         IF (newrec_.shipment_creation = 'NO_AUTOMATIC') AND (linerec_.shipment_creation != 'NO_AUTOMATIC') THEN
            linerec_.shipment_creation := 'NO_AUTOMATIC';
            pkg_changed_               := TRUE;
         END IF;
         IF (newrec_.qty_per_assembly != oldrec_.qty_per_assembly OR newrec_.qty_to_ship != oldrec_.qty_to_ship) THEN
            pkg_qty_reserved_ :=  Reserve_Customer_Order_API.Get_No_Of_Packages_Reserved(newrec_.order_no, newrec_.line_no, newrec_.rel_no);
            IF (linerec_.qty_assigned != pkg_qty_reserved_) THEN
               linerec_.qty_assigned := pkg_qty_reserved_;
               pkg_changed_          := TRUE;
            END IF;
         END IF;
         IF pkg_changed_ THEN
            Get_Id_Version_By_Keys___(rowid_, rowversion_, newrec_.order_no, newrec_.line_no, newrec_.rel_no, -1);
            linerec_.rowversion := sysdate;
            Update_Line___(rowid_, linerec_);
         END IF;
      END IF;
      
      IF (newrec_.rowstate != 'Cancelled') THEN
         -- if supply code has changed from Not Decided to any order supply - create the connected order.
         IF (header_rowstate_ NOT IN ('Planned', 'Blocked')) THEN
            IF ((oldrec_.supply_code IN ('ND', 'IO', 'PI') OR (oldrec_.rel_mtrl_planning = 'FALSE' AND newrec_.rel_mtrl_planning = 'TRUE')) AND
               newrec_.supply_code IN ('SO', 'PT', 'PD', 'IPT', 'IPD', 'DOP')) OR
               (oldrec_.supply_code IN ('NO', 'PRJ') AND newrec_.supply_code IN ('PT','PD', 'IPT', 'IPD')) THEN
               -- If update triggers from customer order release process connected orders should not be generated since,
               -- customer order release process itself generates the connected orders.
               IF NVL(Client_SYS.Get_Item_Value('CREATE_CONNECTED_ORDER', attr_), Fnd_Boolean_API.DB_TRUE) = Fnd_Boolean_API.DB_TRUE THEN
                  -- When Purch is called in Connect_Customer_Order_API all info is lost
                  Add_Info___(insert_package_mode_);
   
                  -- Connected orders are normally created when the order is released,
                  -- but if lines are updated after release - the work has to be done when the line is saved.
                  -- IF the order is credit blocked the connected orders will be created when the credit
                  -- block is released.
   
                  -- IF the part is configurable then configuration has to be defined to create a connected order
                  IF (Sales_Part_API.Get_Configurable_Db(newrec_.contract, newrec_.catalog_no) = 'CONFIGURED'
                      AND Order_Config_Util_API.Get_Config_Spec_Objstate(newrec_.part_no, newrec_.configuration_id) != 'Completed') THEN
                     create_connected_order_ := FALSE;
                  END IF;
                  IF (create_connected_order_) THEN
                     Connect_Customer_Order_API.Create_Connected_Order_Line(newrec_.qty_on_order, newrec_.order_no, newrec_.line_no,
                                                                            newrec_.rel_no, newrec_.line_item_no, FALSE);
                  END IF;
               END IF;
            END IF;
         END IF;
      END IF;
   
      -- Store the info created so far locally because the methods called below could clear the global info.
      Add_Info___(insert_package_mode_);
   
      IF (newrec_.rental = Fnd_Boolean_API.DB_TRUE) THEN
         Modify_Rental___( attr_, newrec_);
      END IF;
   
      IF (newrec_.line_item_no <= 0) THEN
         IF newrec_.shipment_connected = 'FALSE' AND oldrec_.shipment_connected = 'FALSE' THEN         
            Update_Freight_Free(newrec_);         
         END IF;
   
         IF (newrec_.buy_qty_due != oldrec_.buy_qty_due) OR (newrec_.rental = Fnd_Boolean_API.DB_TRUE AND new_rental_chargeable_days_ != old_rental_chargeable_days_) OR
            (NVL(newrec_.price_list_no, ' ') != NVL(oldrec_.price_list_no, ' ') OR
             NVL(to_char(newrec_.price_effectivity_date), '0') != NVL(TO_CHAR(oldrec_.price_effectivity_date), '0') OR
             (qty_refreshed_ = 1) OR (price_source_refreshed_ = 1) OR (oldrec_.price_source != newrec_.price_source)) THEN
             IF ((newrec_.price_freeze = 'FREE') AND ((server_data_change_ = 1) OR (NVL(price_refetch_, 'FALSE') = 'TRUE'))) THEN
                Customer_Order_Pricing_API.Get_Order_Line_Price_Info(sale_unit_price_ => newrec_.sale_unit_price,
                                                                     unit_price_incl_tax_ => newrec_.unit_price_incl_tax,
                                                                     base_sale_unit_price_ => newrec_.base_sale_unit_price,
                                                                     base_unit_price_incl_tax_ => newrec_.base_unit_price_incl_tax,
                                                                     currency_rate_ => newrec_.currency_rate,
                                                                     discount_ => newrec_.discount,
                                                                     price_source_ => price_source_,
                                                                     price_source_id_ => newrec_.price_source_id,
                                                                     provisional_price_db_ => newrec_.provisional_price,
                                                                     net_price_fetched_ => newrec_.price_source_net_price,
                                                                     rebate_builder_db_ => newrec_.rebate_builder,
                                                                     part_level_db_ => newrec_.part_level,
                                                                     part_level_id_ => newrec_.part_level_id,
                                                                     customer_level_db_ => newrec_.customer_level,
                                                                     customer_level_id_ => newrec_.customer_level_id,
                                                                     order_no_ => newrec_.order_no,
                                                                     catalog_no_ => newrec_.catalog_no,
                                                                     buy_qty_due_ => newrec_.buy_qty_due,
                                                                     price_list_no_ => newrec_.price_list_no,
                                                                     effectivity_date_ => newrec_.price_effectivity_date,
                                                                     condition_code_ => newrec_.condition_code,
                                                                     use_price_incl_tax_ => order_rec_.use_price_incl_tax,
                                                                     rental_chargable_days_ => new_rental_chargeable_days_);
   
                newrec_.price_source := Pricing_Source_API.Encode(price_source_);
                IF (order_rec_.use_price_incl_tax = 'TRUE') THEN
                   newrec_.part_price   := newrec_.unit_price_incl_tax;
                ELSE
                   newrec_.part_price   := newrec_.sale_unit_price;
                END IF;
                
                IF (newrec_.free_of_charge = Fnd_Boolean_API.DB_TRUE) THEN
                   newrec_.rebate_builder := Fnd_Boolean_API.DB_FALSE;
                END IF;
                
                Calculate_Prices(newrec_);                     
   
                Client_SYS.Set_Item_Value('SALE_UNIT_PRICE',          newrec_.sale_unit_price,          attr_);
                Client_SYS.Set_Item_Value('UNIT_PRICE_INCL_TAX',      newrec_.unit_price_incl_tax,      attr_);
                Client_SYS.Set_Item_Value('BASE_SALE_UNIT_PRICE',     newrec_.base_sale_unit_price,     attr_);
                Client_SYS.Set_Item_Value('BASE_UNIT_PRICE_INCL_TAX', newrec_.base_unit_price_incl_tax, attr_);
                Client_SYS.Set_Item_Value('CURRENCY_RATE',            newrec_.currency_rate,            attr_);
                Client_SYS.Set_Item_Value('DISCOUNT',                 newrec_.discount,                 attr_);
                Client_SYS.Set_Item_Value('PRICE_SOURCE',             price_source_,                    attr_);
                Client_SYS.Set_Item_Value('PRICE_SOURCE_ID',          newrec_.price_source_id,          attr_);
                Client_SYS.Set_Item_Value('PROVISIONAL_PRICE_DB',     newrec_.provisional_price,        attr_);
                Client_SYS.Set_Item_Value('PART_PRICE',               newrec_.part_price,               attr_);
                Client_SYS.Set_Item_Value('PRICE_SOURCE_NET_PRICE',   newrec_.price_source_net_price,   attr_);
                Client_SYS.Set_Item_Value('REBATE_BUILDER_DB',        newrec_.rebate_builder,           attr_);
                Client_SYS.Set_Item_Value('PART_LEVEL_DB',            newrec_.part_level,               attr_);
                Client_SYS.Set_Item_Value('PART_LEVEL_ID',            newrec_.part_level_id,            attr_);
                Client_SYS.Set_Item_Value('CUSTOMER_LEVEL_DB',        newrec_.customer_level,           attr_);
                Client_SYS.Set_Item_Value('CUSTOMER_LEVEL_ID',        newrec_.customer_level_id,        attr_);
                Update_Line___(objid_, newrec_);
             END IF;
   
             IF (newrec_.configuration_id != '*') THEN
                Configured_Line_Price_API.Modify_Config_Line_Price (newrec_.char_price,
                                                                    newrec_.calc_char_price,
                                                                    newrec_.configuration_id,
                                                                    newrec_.configured_line_price_id,
                                                                    newrec_.catalog_no);
               IF (newrec_.price_freeze = 'FREE') AND (server_data_change_ = 1) THEN
                  IF (order_rec_.use_price_incl_tax = 'TRUE') THEN
                     newrec_.unit_price_incl_tax := newrec_.part_price + NVL(newrec_.char_price, 0);
                     IF (newrec_.unit_price_incl_tax != oldrec_.unit_price_incl_tax) THEN
                        Customer_Order_Pricing_API.Get_Base_Price_In_Currency( newrec_.base_unit_price_incl_tax,
                                                                               newrec_.currency_rate,
                                                                               NVL(order_rec_.customer_no_pay, order_rec_.customer_no),
                                                                               newrec_.contract,
                                                                               order_rec_.currency_code,
                                                                               newrec_.unit_price_incl_tax,
                                                                               nvl(currency_type_, order_rec_.currency_rate_type));
                        Client_SYS.Set_Item_Value('UNIT_PRICE_INCL_TAX',      newrec_.unit_price_incl_tax,      attr_);
                        Client_SYS.Set_Item_Value('BASE_UNIT_PRICE_INCL_TAX', newrec_.base_unit_price_incl_tax, attr_);
                     END IF;
                  ELSE
                     newrec_.sale_unit_price := newrec_.part_price + NVL(newrec_.char_price, 0);
                     IF (newrec_.sale_unit_price != oldrec_.sale_unit_price) THEN
                        Customer_Order_Pricing_API.Get_Base_Price_In_Currency( newrec_.base_sale_unit_price,
                                                                               newrec_.currency_rate,
                                                                               NVL(order_rec_.customer_no_pay, order_rec_.customer_no),
                                                                               newrec_.contract,
                                                                               order_rec_.currency_code,
                                                                               newrec_.sale_unit_price,
                                                                               nvl(currency_type_, order_rec_.currency_rate_type));
                        Client_SYS.Set_Item_Value('SALE_UNIT_PRICE', newrec_.sale_unit_price, attr_);
                        Client_SYS.Set_Item_Value('BASE_SALE_UNIT_PRICE', newrec_.base_sale_unit_price, attr_);
                     END IF;
                  END IF;               
                  Calculate_Prices(newrec_);                  
               END IF;
   
               Client_SYS.Set_Item_Value('CHAR_PRICE', newrec_.char_price, attr_);
               Client_SYS.Set_Item_Value('CALC_CHAR_PRICE', newrec_.calc_char_price, attr_);
   
               newrec_.rowversion := sysdate;
               
               Update_Line___(objid_, newrec_);            
            END IF;
   
   
         END IF;
   
         discount_freeze_db_ := Site_Discom_Info_API.Get_Discount_Freeze_Db(newrec_.contract);
         rounding_ := Currency_Code_API.Get_Currency_Rounding(company_, order_rec_.currency_code);
   
   
         IF (((newrec_.addr_flag != oldrec_.addr_flag) AND (tax_method_ != External_Tax_Calc_Method_API.DB_NOT_USED)) 
            OR (NVL(newrec_.ship_addr_no, ' ') != NVL(oldrec_.ship_addr_no, ' ')) OR
            (newrec_.tax_liability!= oldrec_.tax_liability) OR (NVL(Client_SYS.Get_Item_Value('SUPPLY_COUNTRY_CHANGED', attr_),'FALSE')) = 'TRUE') THEN
            IF fetch_external_tax_ = 'TRUE' THEN 
               Customer_Order_Charge_API.Add_Transaction_Tax_Info(newrec_.order_no,                                                     
                                                                  newrec_.line_no,
                                                                  newrec_.rel_no,
                                                                  newrec_.line_item_no);
            END IF;
         END IF;
   
         IF ((oldrec_.sale_unit_price = 0 AND newrec_.sale_unit_price != 0) OR
             (oldrec_.sale_unit_price != 0 AND newrec_.sale_unit_price = 0) OR
             (oldrec_.unit_price_incl_tax = 0 AND newrec_.unit_price_incl_tax != 0) OR
             (oldrec_.unit_price_incl_tax != 0 AND newrec_.unit_price_incl_tax = 0)) THEN
            price_changed_ := TRUE;
         END IF;
   
         newrec_.free_of_charge_tax_basis := NVL(Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('FREE_OF_CHARGE_TAX_BASIS', attr_)), newrec_.free_of_charge_tax_basis);
         
         IF ((price_changed_) OR (newrec_.tax_liability_type != oldrec_.tax_liability_type) OR
             (newrec_.tax_liability != oldrec_.tax_liability) OR
             (NVL(newrec_.tax_code, Database_SYS.string_null_) != NVL(oldrec_.tax_code, Database_SYS.string_null_)) OR
             (NVL(newrec_.tax_calc_structure_id, Database_SYS.string_null_) != NVL(oldrec_.tax_calc_structure_id, Database_SYS.string_null_)) OR
             ((newrec_.addr_flag != oldrec_.addr_flag) AND (tax_method_ != External_Tax_Calc_Method_API.DB_NOT_USED)) OR
             (NVL(newrec_.ship_addr_no, Database_SYS.string_null_) != NVL(oldrec_.ship_addr_no, Database_SYS.string_null_)) OR
             (NVL(newrec_.free_of_charge_tax_basis, 0) != NVL(oldrec_.free_of_charge_tax_basis, 0)) OR
             ((NVL(Client_SYS.Get_Item_Value('SUPPLY_COUNTRY_CHANGED', attr_),'FALSE')) = 'TRUE') OR 
             (newrec_.country_code != oldrec_.country_code) OR
             ((newrec_.addr_flag != oldrec_.addr_flag OR newrec_.planned_ship_date != oldrec_.planned_ship_date) AND (tax_method_ = External_Tax_Calc_Method_API.DB_NOT_USED) AND (newrec_.tax_class_id IS NOT NULL))) THEN
              
            IF (order_rec_.use_price_incl_tax = Fnd_Boolean_API.DB_FALSE) THEN
               unit_price_            := newrec_.sale_unit_price;
            ELSE
               unit_price_            := newrec_.unit_price_incl_tax;
            END IF;
            
            -- Update discount calculation basis before recalculate tax.
            Cust_Order_Line_Discount_API.Calculate_Discount__(dummy_total_disc_pct_, dummy_total_disc_amt_, 
                                                             newrec_.order_no, newrec_.line_no, 
                                                             newrec_.rel_no, newrec_.line_item_no,
                                                             unit_price_, newrec_.buy_qty_due,
                                                             newrec_.price_conv_factor, 'TRUE',
                                                             NVL(new_rental_chargeable_days_, 1));
   
            -- Added condition to stop adding taxes during CO line creation from quotation, as taxes will be transferred later from quotation line         
            IF (tax_item_removed_ != 'TRUE' AND fetch_external_tax_ = 'TRUE'
                AND (NOT(NVL(newrec_.demand_code, ' ') = 'CQ' AND NVL(Order_Quotation_Line_API.Get_Objstate(newrec_.demand_order_ref1, newrec_.demand_order_ref2, newrec_.demand_order_ref3, newrec_.demand_order_ref4),' ')= 'Released'))) THEN
               IF (newrec_.customer_no = newrec_.deliver_to_customer_no) THEN
                  IF ((((NVL(Client_SYS.Get_Item_Value('SUPPLY_COUNTRY_CHANGED', attr_),'FALSE')) = 'TRUE') OR
                       (newrec_.country_code != oldrec_.country_code) OR (newrec_.tax_liability != oldrec_.tax_liability) OR 
                       (((newrec_.addr_flag != oldrec_.addr_flag) OR (NVL(newrec_.free_of_charge_tax_basis, 0) != NVL(oldrec_.free_of_charge_tax_basis, 0)))
                        AND (tax_method_ != External_Tax_Calc_Method_API.DB_NOT_USED)) OR
                       (NVL(newrec_.ship_addr_no, Database_SYS.string_null_) != NVL(oldrec_.ship_addr_no, Database_SYS.string_null_))
                      OR price_changed_) AND nvl(Client_SYS.Get_Item_Value('FETCH_TAX_FROM_DEFAULTS', attr_), 'TRUE') = 'TRUE' OR 
                      ((newrec_.addr_flag != oldrec_.addr_flag OR newrec_.planned_ship_date != oldrec_.planned_ship_date) AND (tax_method_ = External_Tax_Calc_Method_API.DB_NOT_USED) AND (newrec_.tax_class_id IS NOT NULL))) THEN
                     tax_from_defaults_ := TRUE;
                  END IF;
                  
                  IF newrec_.addr_flag = 'N' THEN
                     newrec_.country_code := Cust_Ord_Customer_Address_API.Get_Country_Code(newrec_.customer_no, newrec_.ship_addr_no);                   
                  END IF; 
                  
                  Add_Transaction_Tax_Info___ (newrec_,  
                                               company_,                                         
                                               newrec_.customer_no,
                                               newrec_.ship_addr_no,                                         
                                               order_rec_.supply_country,                                           
                                               order_rec_.use_price_incl_tax,
                                               order_rec_.currency_code,                                          
                                               tax_from_defaults_,                                         
                                               attr_   => NULL);                                                 
               ELSE
                  IF ((price_changed_) OR (newrec_.tax_liability_type != oldrec_.tax_liability_type) OR 
                      (NVL(newrec_.tax_code,Database_SYS.string_null_) != NVL(oldrec_.tax_code,Database_SYS.string_null_)) OR
                      (NVL(newrec_.tax_calc_structure_id, Database_SYS.string_null_) != NVL(oldrec_.tax_calc_structure_id, Database_SYS.string_null_))) THEN
   
                     tax_from_defaults_ := (newrec_.ship_addr_no != order_rec_.ship_addr_no);
                     IF (((price_changed_) OR (newrec_.tax_liability_type != oldrec_.tax_liability_type) OR (NVL(newrec_.free_of_charge_tax_basis, 0) != NVL(oldrec_.free_of_charge_tax_basis, 0))) 
                        AND (tax_method_ != External_Tax_Calc_Method_API.DB_NOT_USED)) THEN
                        tax_from_defaults_ := TRUE;
                     END IF;
                     IF (NVL(newrec_.tax_code,Database_SYS.string_null_) != NVL(oldrec_.tax_code,Database_SYS.string_null_) OR 
                         NVL(newrec_.tax_calc_structure_id, Database_SYS.string_null_) != NVL(oldrec_.tax_calc_structure_id, Database_SYS.string_null_)) THEN
                        tax_from_defaults_ := FALSE;
                     END IF;
   
                     Add_Transaction_Tax_Info___ (newrec_,                                              
                                                  company_,                                            
                                                  order_rec_.customer_no,
                                                  order_rec_.ship_addr_no,                                            
                                                  order_rec_.supply_country,                                              
                                                  order_rec_.use_price_incl_tax,
                                                  order_rec_.currency_code,                                            
                                                  tax_from_defaults_,                                            
                                                  attr_   => NULL); 
                  END IF;
               END IF;
            END IF;
   
            IF price_changed_ THEN
               Customer_Order_Charge_Util_API.Recalc_Percentage_Charge_Taxes(newrec_.order_no, newrec_.line_no, tax_from_defaults_);
            END IF;
         -- gelr:br_external_tax_integration, added acquisition_origin, acquisition_reason_id, statistical_code
         -- If any of the attributes affecting the total line amount have been changed then
         -- tax lines connected to the order line will have to be recalculated
         -- since the tax amount may have to be updated
         ELSIF ((newrec_.buy_qty_due != oldrec_.buy_qty_due) OR
                (newrec_.base_sale_unit_price != oldrec_.base_sale_unit_price AND order_rec_.use_price_incl_tax = 'FALSE' ) OR
                (newrec_.base_unit_price_incl_tax != oldrec_.base_unit_price_incl_tax AND  order_rec_.use_price_incl_tax = 'TRUE') OR
                (newrec_.order_discount != oldrec_.order_discount) OR (newrec_.additional_discount != oldrec_.additional_discount) OR
                (NVL(oldrec_.customer_tax_usage_type,' ') != NVL(newrec_.customer_tax_usage_type,' ')) OR
                (newrec_.discount != oldrec_.discount) OR (newrec_.rental = Fnd_Boolean_API.DB_TRUE AND new_rental_chargeable_days_ != old_rental_chargeable_days_) OR
                (NVL(newrec_.acquisition_origin, -9999) != NVL(oldrec_.acquisition_origin, -9999)) OR
                (NVL(newrec_.acquisition_reason_id, Database_SYS.string_null_) != NVL(oldrec_.acquisition_reason_id, Database_SYS.string_null_)) OR
                (NVL(newrec_.statistical_code, Database_SYS.string_null_) != NVL(oldrec_.statistical_code, Database_SYS.string_null_))) THEN
            
            IF (order_rec_.use_price_incl_tax = Fnd_Boolean_API.DB_FALSE) THEN
               unit_price_            := newrec_.sale_unit_price;
            ELSE
               unit_price_            := newrec_.unit_price_incl_tax;
            END IF;
            
            -- Update discount calculation basis before recalculate tax.
            Cust_Order_Line_Discount_API.Calculate_Discount__(dummy_total_disc_pct_, dummy_total_disc_amt_, 
                                                             newrec_.order_no, newrec_.line_no, 
                                                             newrec_.rel_no, newrec_.line_item_no,
                                                             unit_price_, newrec_.buy_qty_due,
                                                             newrec_.price_conv_factor, 'TRUE', 
                                                             NVL(new_rental_chargeable_days_, 1));
                                                             
            IF (tax_method_ != External_Tax_Calc_Method_API.DB_NOT_USED) THEN
               tax_from_defaults_ := TRUE;
               IF fetch_external_tax_ = 'TRUE' THEN 
                  Add_Transaction_Tax_Info___ (newrec_,  
                                               company_,                                         
                                               newrec_.customer_no,
                                               newrec_.ship_addr_no,                                         
                                               order_rec_.supply_country,                                           
                                               order_rec_.use_price_incl_tax,
                                               order_rec_.currency_code,                                          
                                               tax_from_defaults_,                                         
                                               attr_   => NULL); 
               END IF;
            ELSE
               tax_from_defaults_ := FALSE;
               Recalculate_Tax_Lines___(newrec_,                                  
                                     company_,                                  
                                     order_rec_.customer_no,
                                     order_rec_.ship_addr_no,
                                     order_rec_.supply_country,
                                     order_rec_.use_price_incl_tax,
                                     order_rec_.currency_code,
                                     tax_from_defaults_,
                                     NULL);
            END IF;         
            Customer_Order_Charge_Util_API.Recalc_Percentage_Charge_Taxes(newrec_.order_no, newrec_.line_no, tax_from_defaults_);
         END IF; 
         IF (NVL(tax_code_changed_, 'FALSE') = 'TRUE') THEN 
            Calculate_Prices(newrec_);
            newrec_.rowversion := sysdate;            
            Update_Line___(objid_, newrec_);
         END IF;
         
         -- NOTE: When price including tax is specified, gross amounts are used to calculate calculation basis of the discount. And these values are used when reclaculating tax lines.
         IF ((newrec_.buy_qty_due != oldrec_.buy_qty_due) OR (newrec_.sale_unit_price != oldrec_.sale_unit_price) OR (ROUND(newrec_.unit_price_incl_tax, rounding_) != ROUND(oldrec_.unit_price_incl_tax, rounding_))
            OR (price_source_refreshed_ = 1) OR (oldrec_.price_source != newrec_.price_source)) THEN
               discount_ :=  Cust_Order_Line_Discount_API.Calculate_Discount__(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
               Client_SYS.Add_To_Attr('DISCOUNT', discount_, attr_);
               Modify_Discount__(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, discount_);
         END IF;
         
         exist_chg_on_order_line_ := Customer_Order_Charge_API.Exist_Charge_On_Order_Line(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
         IF (exist_chg_on_order_line_ = 1) AND newrec_.rowstate NOT IN ('Delivered', 'Invoiced', 'Closed') THEN
            Customer_Order_Charge_Util_API.Modify_Cust_Order_Charge_Line(newrec_, oldrec_, NVL(tax_code_changed_, 'FALSE'));
         ELSIF ((newrec_.input_unit_meas IS NOT NULL AND oldrec_.input_unit_meas IS NULL) OR
               (newrec_.freight_map_id IS NOT NULL AND (NVL(oldrec_.freight_map_id, ' ') != newrec_.freight_map_id)) OR
               (newrec_.zone_id IS NOT NULL AND (NVL(oldrec_.zone_id, ' ') != newrec_.zone_id)) OR
               (newrec_.buy_qty_due != oldrec_.buy_qty_due) OR
               (newrec_.planned_delivery_date != oldrec_.planned_delivery_date) OR
               (newrec_.delivery_terms != oldrec_.delivery_terms)) AND newrec_.rowstate NOT IN ('Delivered','PartiallyDelivered','Invoiced', 'Closed') THEN
            Customer_Order_Charge_Util_API.New_Cust_Order_Charge_Line(newrec_, FALSE);
         END IF;
      END IF;
             
      -- Moved discount calculation logic after Tax calculation logic. When price including tax is specified, final tax amount is used for discount calculations.
      IF (newrec_.buy_qty_due != oldrec_.buy_qty_due) OR (NVL(newrec_.price_list_no, ' ') != NVL(oldrec_.price_list_no, ' ') OR
          NVL(to_char(newrec_.price_effectivity_date), '0') != NVL(to_char(oldrec_.price_effectivity_date), '0')
          OR (qty_refreshed_ = 1) OR (price_source_refreshed_ = 1) OR (oldrec_.price_source != newrec_.price_source)) THEN
         IF NOT((newrec_.price_freeze = 'FROZEN' AND discount_freeze_db_ = 'TRUE') OR (NVL(change_request_, Database_SYS.string_null_) = 'TRUE')) THEN
            Customer_Order_Pricing_API.Modify_Default_Discount_Rec(newrec_.order_no,
                                                                   newrec_.line_no,
                                                                   newrec_.rel_no,
                                                                   newrec_.line_item_no,
                                                                   newrec_.contract,
                                                                   newrec_.customer_no,
                                                                   order_rec_.currency_code,
                                                                   order_rec_.agreement_id,
                                                                   newrec_.catalog_no,
                                                                   newrec_.buy_qty_due,
                                                                   newrec_.price_list_no,
                                                                   newrec_.customer_level,
                                                                   newrec_.customer_level_id);
         END IF;
      END IF;
   
      IF (newrec_.buy_qty_due != oldrec_.buy_qty_due) OR (newrec_.sales_unit_meas != oldrec_.sales_unit_meas) OR
         (newrec_.sale_unit_price != oldrec_.sale_unit_price) OR (newrec_.unit_price_incl_tax != oldrec_.unit_price_incl_tax) OR
         (newrec_.base_sale_unit_price != oldrec_.base_sale_unit_price) OR (newrec_.base_unit_price_incl_tax != oldrec_.base_unit_price_incl_tax) OR
         (newrec_.order_discount != oldrec_.order_discount) OR (newrec_.price_conv_factor != oldrec_.price_conv_factor) OR
         (newrec_.discount != oldrec_.discount) OR
         (newrec_.rental = Fnd_Boolean_API.DB_TRUE AND old_rental_chargeable_days_ != new_rental_chargeable_days_) THEN
         -- Recalculation of group discount must be made.
         CUSTOMER_ORDER_API.Modify_Grp_Disc_Calc_Flag(newrec_.order_no, 'N');
      END IF;
   
      -- Check for prepayment amount has exceed the total gross amount including charges.
      IF ((newrec_.buy_qty_due != oldrec_.buy_qty_due) OR
          (newrec_.base_sale_unit_price != oldrec_.base_sale_unit_price) OR
          (newrec_.base_unit_price_incl_tax != oldrec_.base_unit_price_incl_tax) OR
          (newrec_.order_discount != oldrec_.order_discount) OR
          (newrec_.discount != oldrec_.discount) OR
          (newrec_.tax_code != oldrec_.tax_code)) THEN
   
         Validate_Prepayment___(newrec_, 'MODIFY');
      END IF;
   
      -- IF revised_qty_due was decreased change of order line state might be needed if the state i 'PartiallyDelivered'
      IF ((newrec_.revised_qty_due < oldrec_.revised_qty_due) AND (newrec_.rowstate = 'PartiallyDelivered')) THEN
         Check_State(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
         IF newrec_.line_item_no > 0 THEN
            --In this case we have to check and deliver the package part(header) if
            --all the component lines are delivered.
            Deliver_Customer_Order_API.Deliver_Package_If_Complete(newrec_.order_no, newrec_.line_no, newrec_.rel_no);
         END IF;
      END IF;
   
      IF (from_shortage_ AND Customer_Order_Shortage_API.Check_Exist(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no)) THEN
         Customer_Order_Shortage_API.Remove(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
      END IF;
   
      IF (newrec_.rowstate != 'Cancelled') THEN
         IF (oldrec_.line_item_no > 0) THEN
            IF (newrec_.buy_qty_due != oldrec_.buy_qty_due) THEN
               text_ := substr(Language_SYS.Translate_Constant(lu_name_, 'QTYCHANGED: The quantity has been changed from :P1 to :P2',
                                   NULL, TO_CHAR(oldrec_.buy_qty_due), TO_CHAR(newrec_.buy_qty_due)), 1, 200);
               Customer_Order_Line_Hist_API.New(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, text_);
            END IF;
   
            IF ((newrec_.sale_unit_price != oldrec_.sale_unit_price) AND (order_rec_.use_price_incl_tax != 'TRUE')) THEN
               text_ := SUBSTR(Language_SYS.Translate_Constant(lu_name_, 'PRICECHG: The price has been changed from :P1 to :P2',
                                                                          NULL, TO_CHAR(oldrec_.sale_unit_price), TO_CHAR(newrec_.sale_unit_price)), 1, 200);
               Customer_Order_Line_Hist_API.New(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, text_);
            ELSIF ((newrec_.unit_price_incl_tax != oldrec_.unit_price_incl_tax) AND (order_rec_.use_price_incl_tax = 'TRUE')) THEN
               text_ := SUBSTR(Language_SYS.Translate_Constant(lu_name_, 'PRICECHG: The price has been changed from :P1 to :P2',
                                                                          NULL, TO_CHAR(oldrec_.unit_price_incl_tax), TO_CHAR(newrec_.unit_price_incl_tax)), 1, 200);
               Customer_Order_Line_Hist_API.New(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, text_);
            END IF;
         END IF;
         -- Check if a history record should be generated for changed attributes
         -- Only create history lines if user modifies an order line and not a component
         IF (oldrec_.line_item_no <= 0) THEN
            -- Is buy_qty_due changed?
            IF (newrec_.buy_qty_due != oldrec_.buy_qty_due) THEN
               -- Is it changed in the shortage-form?
               IF from_shortage_ THEN
                  text_ := Language_SYS.Translate_Constant(lu_name_, 'UPDATEFROMSHORTAGE: The order line has been updated via the handle shortage form.');
               ELSE
                  text_ := substr(Language_SYS.Translate_Constant(lu_name_, 'QTYCHANGED: The quantity has been changed from :P1 to :P2',
                                    NULL, to_char(oldrec_.buy_qty_due), to_char(newrec_.buy_qty_due)), 1, 200);
               END IF;
               Customer_Order_Line_Hist_API.New(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, text_);
            END IF;
            -- Planned_delivery_date?
            IF (newrec_.planned_delivery_date != oldrec_.planned_delivery_date) THEN
               -- Is it changed in the shortage-form?
               IF from_shortage_ THEN
                  text_ := Language_SYS.Translate_Constant(lu_name_, 'UPDATEFROMSHORTAGE: The order line has been updated via the handle shortage form.');
               ELSE
                  text_ := substr(Language_SYS.Translate_Constant(lu_name_, 'TARGETDATECHG2: The planned delivery date has been changed from :P1 to :P2',
                     NULL, to_char(oldrec_.planned_delivery_date, 'YYYY-MM-DD HH24.MI.SS'), to_char(newrec_.planned_delivery_date, 'YYYY-MM-DD HH24.MI.SS')), 1, 200);
               END IF;
               Customer_Order_Line_Hist_API.New(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, text_);
            END IF;
            -- Sale_unit_price?
            IF ((newrec_.sale_unit_price != oldrec_.sale_unit_price) AND (order_rec_.use_price_incl_tax != 'TRUE')) THEN
               text_ := substr(Language_SYS.Translate_Constant(lu_name_, 'PRICECHG: The price has been changed from :P1 to :P2',
                                                                          NULL, to_char(oldrec_.sale_unit_price), to_char(newrec_.sale_unit_price)), 1, 200);
               Customer_Order_Line_Hist_API.New(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, text_);
   
               calc_price_per_curr_ := newrec_.part_price + NVL(newrec_.calc_char_price, 0);
               Log_Price_Changes___(newrec_, order_rec_, calc_price_per_curr_);
            ELSIF ((newrec_.unit_price_incl_tax != oldrec_.unit_price_incl_tax) AND (order_rec_.use_price_incl_tax = 'TRUE')) THEN
               text_ := substr(Language_SYS.Translate_Constant(lu_name_, 'PRICECHG: The price has been changed from :P1 to :P2',
                                                                          NULL, to_char(oldrec_.unit_price_incl_tax), to_char(newrec_.unit_price_incl_tax)), 1, 200);
               Customer_Order_Line_Hist_API.New(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, text_);
   
               calc_price_per_curr_ := newrec_.part_price + NVL(newrec_.calc_char_price, 0);
               Log_Price_Changes___(newrec_, order_rec_, calc_price_per_curr_);
            END IF;
            
            -- Discount?
            IF (newrec_.discount != oldrec_.discount) THEN
               -- gelr:disc_price_rounded, begin
               IF (discounted_price_rounded_) THEN
                  text_ := substr(Language_SYS.Translate_Constant(lu_name_, 'DISCCHG: The discount has been changed from :P1 to :P2',
                     NULL, to_char(round(oldrec_.original_discount, 2)), to_char(round(newrec_.original_discount, 2))), 1, 200);
               ELSE
                  text_ := substr(Language_SYS.Translate_Constant(lu_name_, 'DISCCHG: The discount has been changed from :P1 to :P2',
                     NULL, to_char(round(oldrec_.discount, 2)), to_char(round(newrec_.discount, 2))), 1, 200);
               END IF;
               -- gelr:disc_price_rounded, end               
               Customer_Order_Line_Hist_API.New(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, text_);
            END IF;
            IF (newrec_.ship_addr_no != oldrec_.ship_addr_no) THEN
               text_ := substr(Language_Sys.Translate_Constant(lu_name_, 'SHIPADDRNOCHGLINE: The delivery address has been changed from :P1 to :P2', NULL, oldrec_.ship_addr_no, newrec_.ship_addr_no), 1, 200);
               Customer_Order_Line_Hist_API.New(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, text_);
            END IF;
            -- Has Configuration Id changed?
            IF ((newrec_.configuration_id != oldrec_.configuration_id) AND (oldrec_.configuration_id != '*'))THEN
               text_ := substr(Language_SYS.Translate_Constant(lu_name_, 'CONFIGCCHG: The configuration id has changed from :P1 to :P2',
                  NULL, oldrec_.configuration_id, newrec_.configuration_id), 1, 200);
               Customer_Order_Line_Hist_API.New(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, text_);
            END IF;
         END IF;
      END IF;
   
      -- Create a history record for Invoiced Blocked.
      IF (newrec_.blocked_for_invoicing != oldrec_.blocked_for_invoicing) THEN
         IF (newrec_.blocked_for_invoicing = 'TRUE') THEN
            text_ := Language_SYS.Translate_Constant(lu_name_, 'INVOICEBLOCEKD: Invoice Blocked');
         ELSE
            text_ := Language_SYS.Translate_Constant(lu_name_, 'INVBLOCKUNCHECK: Invoice Blocked Unchecked');
         END IF;
         Customer_Order_Line_Hist_API.New( newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, text_);
      END IF;
   
      IF (newrec_.staged_billing = 'STAGED BILLING') THEN
         new_sale_price_total_ := Get_Sale_Price_Total(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, new_rental_chargeable_days_);
         new_sale_price_incl_tax_total_ := Get_Sale_Price_Incl_Tax_Total(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
         -- Added the check for ignoring the Recalculation of Staged Billing for package part components.
         IF (((new_sale_price_total_ - old_sale_price_total_) != 0) OR ((new_sale_price_incl_tax_total_ - old_sale_price_incl_tax_total_) != 0) OR (NVL(tax_code_changed_, 'FALSE') = 'TRUE')) AND (newrec_.line_item_no <= 0) THEN
            Order_Line_Staged_Billing_API.Recalculate(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no,
                                          new_sale_price_total_, old_sale_price_total_, new_sale_price_incl_tax_total_, old_sale_price_incl_tax_total_,
                                          newrec_.buy_qty_due, oldrec_.buy_qty_due, order_rec_.use_price_incl_tax);
         END IF;
   
         -- Get the total percentage of invoiced stage billing lines to calculate the qty_invoiced of the order lines , if the qty_invoiced
         -- is equal to sales qty and the status is Partially/fully delivered then the status of the line will be changed to Invoiced/Closed
         IF (((new_sale_price_total_ - old_sale_price_total_) != 0) OR (oldrec_.buy_qty_due != newrec_.buy_qty_due)) THEN
            IF (newrec_.line_item_no > 0) THEN
               tot_percentage_:= Order_Line_Staged_Billing_API.Get_Total_Invoiced_Percentage(newrec_.order_no, newrec_.line_no, newrec_.rel_no, -1);
            ELSE
               tot_percentage_:= Order_Line_Staged_Billing_API.Get_Total_Invoiced_Percentage(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
            END IF;
            IF (tot_percentage_ >= 0) THEN
               FOR comp_rec_ IN get_component_lines LOOP
                  comp_qty_invoiced_ := round((comp_rec_.buy_qty_due*tot_percentage_/100),12);
                  CUSTOMER_ORDER_API.Set_Line_Qty_Invoiced(newrec_.order_no, newrec_.line_no, newrec_.rel_no, comp_rec_.line_item_no, comp_qty_invoiced_);
               END LOOP;
               newrec_.qty_invoiced := round((newrec_.buy_qty_due*tot_percentage_/100),12);
               Client_SYS.Add_To_Attr('QTY_INVOICED', newrec_.qty_invoiced, attr_);
               IF (newrec_.qty_invoiced != oldrec_.qty_invoiced) THEN
                  CUSTOMER_ORDER_API.Set_Line_Qty_Invoiced(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, newrec_.qty_invoiced);
               END IF;
            END IF;
         END IF;
      END IF;
   
      -- Created commission lines will be cancelled if the line is a free of charge line.
      IF (Order_Line_Commission_API.Has_Commission_Lines(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no)) AND 
         (newrec_.free_of_charge = Fnd_Boolean_API.DB_TRUE) THEN
         Order_Line_Commission_API.Cancel_Order_Commission_Lines(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
         Client_SYS.Add_Info(lu_name_, 'COMMCAN: Commission lines have been cancelled for free of charge lines.');      
      END IF;
      -- Set the associated commission lines as 'Changed'
      IF (newrec_.rowstate != 'Cancelled') AND (newrec_.free_of_charge = Fnd_Boolean_API.DB_FALSE) THEN
         IF (newrec_.base_sale_unit_price <> oldrec_.base_sale_unit_price OR
            newrec_.base_unit_price_incl_tax <> oldrec_.base_unit_price_incl_tax OR
            newrec_.buy_qty_due <> oldrec_.buy_qty_due OR
            newrec_.discount <> oldrec_.discount OR
            newrec_.order_discount <> oldrec_.order_discount OR
            newrec_.price_list_no <> oldrec_.price_list_no OR
            newrec_.contract <> oldrec_.contract OR
            newrec_.catalog_no <> oldrec_.catalog_no OR
            newrec_.region_code <> oldrec_.region_code) THEN
            Order_Line_Commission_API.Set_Order_Com_Lines_Changed(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
         END IF;
      END IF;
   
      IF (newrec_.supply_code = 'IO') AND (newrec_.demand_code = 'PO') THEN
         IF (newrec_.part_ownership != oldrec_.part_ownership) OR (newrec_.owning_customer_no != oldrec_.owning_customer_no) THEN
            $IF (Component_Purch_SYS.INSTALLED)$THEN
               Purchase_Order_Line_Part_API.Modify_Po_Part_Ownership_Info(newrec_.demand_order_ref1, newrec_.demand_order_ref2,
                                                                          newrec_.demand_order_ref3, newrec_.part_ownership, newrec_.owning_customer_no);
            $ELSE
               Error_SYS.Record_General(lu_name_,'POLINEPNOTEXIST: Can not modify the part ownership information when purchase order line part is not installed.');
            $END
         END IF;
      END IF;
   
      IF (newrec_.demand_code = 'DO') THEN
         $IF (Component_Disord_SYS.INSTALLED) $THEN
            IF (newrec_.wanted_delivery_date != oldrec_.wanted_delivery_date OR newrec_.planned_delivery_date != oldrec_.planned_delivery_date
               OR (newrec_.planned_ship_date != oldrec_.planned_ship_date) OR newrec_.planned_due_date != oldrec_.planned_due_date)
               OR (newrec_.buy_qty_due != oldrec_.buy_qty_due) OR (NVL(newrec_.forward_agent_id,CHR(2)) != NVL(oldrec_.forward_agent_id,CHR(2)))
               OR (newrec_.delivery_terms != oldrec_.delivery_terms) OR (newrec_.ship_via_code != oldrec_.ship_via_code)
               OR (newrec_.ship_addr_no != oldrec_.ship_addr_no)
               OR (newrec_.route_id != oldrec_.route_id) THEN
               data_changed_ := TRUE;
            END IF;
            IF (data_changed_ AND ((NVL(Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('SERVER_DATA_CHANGE', attr_)), 0) != 1)
               OR (NVL(Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('MODIFIED_FROM_HEADER', attr_)), 0) = 1))) THEN
               Distribution_Order_API.Modify_From_Connected_Order(newrec_.demand_order_ref1,
                                                                  newrec_.wanted_delivery_date,
                                                                  newrec_.planned_due_date,
                                                                  newrec_.planned_ship_date,
                                                                  newrec_.planned_delivery_date,
                                                                  planned_receipt_date_,
                                                                  newrec_.revised_qty_due,
                                                                  '',
                                                                  newrec_.forward_agent_id,
                                                                  newrec_.delivery_terms,
                                                                  newrec_.ship_via_code,
                                                                  '',
                                                                  newrec_.route_id,
                                                                  'ORDER');
            END IF;
         $ELSE
            NULL;
         $END
      END IF;
   
      IF (header_rowstate_ != 'Planned' AND ((oldrec_.planned_delivery_date != newrec_.planned_delivery_date) OR
                                             (oldrec_.buy_qty_due != newrec_.buy_qty_due))) THEN
   
         Cust_Order_Event_Creation_API.Delivery_Date_Or_Qty_Changed(oldrec_.order_no, oldrec_.line_no, oldrec_.rel_no, oldrec_.line_item_no,
                                                                    oldrec_.planned_delivery_date, oldrec_.revised_qty_due,
                                                                    newrec_.planned_delivery_date, newrec_.revised_qty_due,
                                                                    newrec_.supply_code, newrec_.qty_on_order, newrec_.part_no);
      END IF;
   
      Client_SYS.Set_Item_Value('PLANNED_DELIVERY_DATE', newrec_.planned_delivery_date, attr_);
      Client_SYS.Set_Item_Value('PROMISED_DELIVERY_DATE', newrec_.promised_delivery_date, attr_);
      Client_SYS.Set_Item_Value('PLANNED_SHIP_DATE', newrec_.planned_ship_date, attr_);
      Client_SYS.Set_Item_Value('PLANNED_DUE_DATE', newrec_.planned_due_date, attr_);
      Client_SYS.Set_Item_Value('PROJECT_ID', newrec_.project_id, attr_);
   
      Client_SYS.Set_Item_Value('TAX_CODE', Customer_Order_Line_API.Get_Tax_Code(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no), attr_);
      Client_SYS.Set_Item_Value('TAX_CLASS_ID', Customer_Order_Line_API.Get_Tax_Class_Id(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no), attr_);
   
      objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
   
      IF (NVL(oldrec_.activity_seq, -9999) != NVL(newrec_.activity_seq, -9999)) THEN
         IF (newrec_.activity_seq IS NOT NULL AND newrec_.activity_seq > 0) THEN
            -- Create Customer Order Line and Customer Order Revenue connections
            Handle_Activity_Seq___ (newrec_,
                                    oldrec_.activity_seq );
            IF (newrec_.charged_item = 'CHARGED ITEM') THEN
               Calculate_Revenue(newrec_.order_no,
                                 newrec_.line_no,
                                 newrec_.rel_no,
                                 newrec_.line_item_no);
            END IF;
         ELSIF (newrec_.activity_seq IS NULL) THEN
            -- Remove Customer Order Line and Customer Order Revenue connections
            Remove_Project_Connection___(newrec_.order_no,
                                         newrec_.line_no,
                                         newrec_.rel_no,
                                         newrec_.line_item_no,
                                         oldrec_.activity_seq );
         END IF;
         $IF Component_Ordstr_SYS.INSTALLED $THEN
            DECLARE
               interim_head_id_  VARCHAR2(12);
            BEGIN
               interim_head_id_ := Interim_Demand_Head_API.Get_Cust_Ord_Line_Int_Head(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
               IF interim_head_id_ IS NOT NULL THEN
                  -- Reflect activity information changes to the Interim Demand Header
                  Interim_Demand_Head_API.Modify_Project_Activity_Seq(interim_head_id_, newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, newrec_.project_id, newrec_.activity_seq);
               END IF;
            END;
         $END
      ELSIF (newrec_.activity_seq IS NOT NULL) THEN
         -- Refersh Customer Order Line and Customer Order Revenue connections
         IF (oldrec_.buy_qty_due != newrec_.buy_qty_due) OR (oldrec_.qty_shipped != newrec_.qty_shipped)
            OR (oldrec_.supply_code != newrec_.supply_code) OR (oldrec_.qty_assigned != newrec_.qty_assigned)
            OR (oldrec_.qty_returned != newrec_.qty_returned)
            OR (oldrec_.part_ownership != newrec_.part_ownership) THEN
            Calculate_Cost_And_Progress(newrec_.order_no,
                                        newrec_.line_no,
                                        newrec_.rel_no,
                                        newrec_.line_item_no);
         END IF;
   
         IF (newrec_.charged_item = 'CHARGED ITEM') THEN
            IF (oldrec_.buy_qty_due != newrec_.buy_qty_due) OR (oldrec_.additional_discount != newrec_.additional_discount)
               OR (oldrec_.discount != newrec_.discount) OR (oldrec_.sale_unit_price != newrec_.sale_unit_price)
               OR (oldrec_.unit_price_incl_tax != newrec_.unit_price_incl_tax) OR (oldrec_.tax_code != newrec_.tax_code)
               OR (newrec_.rental = Fnd_Boolean_API.DB_TRUE AND old_rental_chargeable_days_ != new_rental_chargeable_days_) THEN
               Calculate_Revenue(newrec_.order_no,
                                 newrec_.line_no,
                                 newrec_.rel_no,
                                 newrec_.line_item_no);
            END IF;
         END IF;
      END IF;
   
      IF (newrec_.line_item_no = -1) THEN
         IF (newrec_.supply_code = 'PKG') THEN
            IF (oldrec_.shipment_creation != newrec_.shipment_creation AND newrec_.shipment_creation != 'NO_AUTOMATIC') THEN
               FOR comp_rec_ IN get_component_lines LOOP
                  comp_attr_ := NULL;
                  IF (comp_rec_.supply_code IN ('PD', 'ND', 'SEO')) THEN
                     Error_SYS.Record_General(lu_name_, 'NOTCHANGESHIPMENT: A line with a package part where its components have supply code Purchase Order Direct or Not Decided or Service Order, '||
                                                         'cannot use a shipment creation method where the line should be connected automatically to a shipment.');
                  END IF;
               END LOOP;
            END IF;
         END IF;
      END IF;
   
      IF (newrec_.shipment_connected = 'TRUE') THEN
         IF ((header_rowstate_ != 'Planned') AND (oldrec_.supply_code != newrec_.supply_code) AND (newrec_.supply_code IN ('PD', 'IPD')) AND (newrec_.line_item_no <= 0 )) THEN
            Shipment_Line_API.Remove_Shipment_Lines(newrec_.order_no, newrec_.line_no, newrec_.rel_no,
                                                    newrec_.line_item_no, Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER);
         END IF;
      ELSIF ((oldrec_.supply_code != newrec_.supply_code) AND (newrec_.rowstate != 'Cancelled')) THEN
         Check_And_Add_To_Shipment___(newrec_,  header_rowstate_);
      END IF;
   
      -- Invalidate Pre-Shipping Delivery note
      IF (newrec_.qty_to_ship != oldrec_.qty_to_ship AND oldrec_.qty_to_ship !=0) THEN
         IF order_rec_.use_pre_ship_del_note = 'TRUE' AND header_rowstate_ IN ('Picked', 'PartiallyDelivered') THEN
            Deliver_Customer_Order_API.Invalidate_Pre_Ship_Delnote(newrec_.order_no);
         END IF;
      END IF;
   
      IF (((newrec_.ship_addr_no          != oldrec_.ship_addr_no)    OR
          (newrec_.ship_via_code          != oldrec_.ship_via_code)   OR
          (newrec_.shipment_type          != oldrec_.shipment_type)   OR
          (newrec_.route_id               != oldrec_.route_id)OR
          (newrec_.forward_agent_id       != oldrec_.forward_agent_id)OR
          (newrec_.del_terms_location     != oldrec_.del_terms_location)OR
          (newrec_.delivery_terms         != oldrec_.delivery_terms)) AND
         ((newrec_.default_addr_flag      != oldrec_.default_addr_flag) OR
         (newrec_.default_addr_flag = 'N')) OR
         (NVL(newrec_.packing_instruction_id, Database_Sys.string_null_) != NVL(oldrec_.packing_instruction_id, Database_Sys.string_null_)) OR
         (NVL(newrec_.customs_value, -9999) != NVL(oldrec_.customs_value, -9999))) THEN
         IF (newrec_.shipment_connected = 'TRUE') THEN
            Client_SYS.Add_Info(lu_name_, 'SHIPCONADDR: Line no, rel no, order :P1  is connected to shipment(s). Note that delivery information must be changed manually for these shipment(s).', (newrec_.line_no ||' '||newrec_.rel_no ||' '|| newrec_.order_no));
         END IF;
      END IF;   
        
      IF (connected_shipment_id_ IS NOT NULL) THEN
         Shipment_Line_API.Update_From_Source_Line(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no,
                                                   Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER,
                                                   newrec_.buy_qty_due, newrec_.qty_shipped, oldrec_.open_shipment_qty,
                                                   newrec_.inverted_conv_factor, newrec_.conv_factor, connected_shipment_id_, newrec_.sales_unit_meas, newrec_.revised_qty_due);
      END IF;
   
      IF (NVL(newrec_.abnormal_demand,'FALSE') != NVL(oldrec_.abnormal_demand,'FALSE')) THEN
         IF (newrec_.abnormal_demand = 'TRUE') THEN
            Inventory_Transaction_Hist_API.Enable_Abnormal_Demand(newrec_.order_no,
                                                                  newrec_.line_no,
                                                                  newrec_.rel_no,
                                                                  newrec_.line_item_no,
                                                                  'CUST ORDER');
            Return_Material_Line_API.Enable_Abnormal_Demand(newrec_.order_no,
                                                            newrec_.line_no,
                                                            newrec_.rel_no,
                                                            newrec_.line_item_no);
         ELSE
            Inventory_Transaction_Hist_API.Disable_Abnormal_Demand(newrec_.order_no,
                                                                   newrec_.line_no,
                                                                   newrec_.rel_no,
                                                                   newrec_.line_item_no,
                                                                   'CUST ORDER');
            Return_Material_Line_API.Disable_Abnormal_Demand(newrec_.order_no,
                                                             newrec_.line_no,
                                                             newrec_.rel_no,
                                                             newrec_.line_item_no);
         END IF;
      END IF;
   
      IF (NVL(newrec_.cust_calendar_id, Database_Sys.string_null_) != NVL(oldrec_.cust_calendar_id, Database_Sys.string_null_)
          OR newrec_.planned_delivery_date != oldrec_.planned_delivery_date) THEN
   
         IF (NVL(newrec_.cust_calendar_id, Database_Sys.string_null_) != NVL(oldrec_.cust_calendar_id, Database_Sys.string_null_)) THEN
            Work_Time_Calendar_API.Add_Info_On_Pending(newrec_.cust_calendar_id);
         END IF;
   
         Cust_Ord_Date_Calculation_API.Check_Date_On_Cust_Calendar_(newrec_.customer_no, newrec_.cust_calendar_id,
                                                        newrec_.planned_delivery_date, 'PLANNED');
      END IF;
   
      IF (NVL(newrec_.ext_transport_calendar_id, Database_Sys.string_null_) != NVL(oldrec_.ext_transport_calendar_id, Database_Sys.string_null_)) THEN
         Work_Time_Calendar_API.Add_Info_On_Pending(newrec_.ext_transport_calendar_id);
      END IF;
      IF (newrec_.supply_code = 'IPD') THEN
         IF (oldrec_.supply_code != newrec_.supply_code) OR (newrec_.supply_site != oldrec_.supply_site)
            OR (((oldrec_.ship_addr_no != newrec_.ship_addr_no) OR (oldrec_.addr_flag != newrec_.addr_flag))AND (newrec_.addr_flag = 'N') AND (newrec_.default_addr_flag = 'N')) THEN
            IF Tax_Handling_Order_Util_API.Check_Ipd_Tax_Registration(company_, newrec_.contract, newrec_.supply_code,order_rec_.supply_country, newrec_.country_code) THEN
               country_desc_ := Iso_Country_API.Get_Description(newrec_.country_code, NULL);
               Client_SYS.Add_Info(lu_name_, 'SUPCOUNTRYDIFF: Company :P1 has a tax registration in delivery country :P2. The company tax ID number for the supply country of the order might not be appropriate.', company_, country_desc_);
            END IF;
         END IF;
      END IF;     
      Add_Info___(insert_package_mode_);
   EXCEPTION
      WHEN dup_val_on_index THEN
         Error_SYS.Record_Exist(lu_name_);
   END Core;

BEGIN
   $IF Component_Rmcom_SYS.INSTALLED $THEN
      IF Rm_Acc_Usage_API.Possible_To_Update('CustomerOrder', 'BELONG_TO_PARENT', 'DO', newrec_.order_no) = FALSE THEN
         Rm_Acc_Usage_API.Raise_No_Access('CustomerOrder', newrec_.order_no);
      END IF;
   $END
   Core(objid_, oldrec_, newrec_, attr_, objversion_, by_keys_);
END Update___;


PROCEDURE Check_Delete___ (
   remrec_ IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE )
IS
   
   PROCEDURE Base (
      remrec_ IN customer_order_line_tab%ROWTYPE )
   IS
      key_ VARCHAR2(2000);
   BEGIN
      key_ := remrec_.order_no||'^'||remrec_.line_no||'^'||remrec_.rel_no||'^'||remrec_.line_item_no||'^';
      Reference_SYS.Check_Restricted_Delete(lu_name_, key_);
   END Base;

   PROCEDURE Core (
      remrec_ IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE )
   IS
      linerec_             CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
      header_rec_          Customer_Order_API.Public_Rec;
      licensed_order_type_ VARCHAR2(25);
   
      CURSOR get_package IS
         SELECT rowid
         FROM  CUSTOMER_ORDER_LINE_TAB
         WHERE order_no = remrec_.order_no
         AND   line_no = remrec_.line_no
         AND   rel_no = remrec_.rel_no
         AND   line_item_no > 0;
   BEGIN
      licensed_order_type_ := Get_Expctr_License_Order_Type(remrec_.demand_code, remrec_.demand_order_ref1, remrec_.demand_order_ref2, remrec_.demand_order_ref3);
      Customer_Order_Flow_API.Check_Delete_Exp_License(remrec_.order_no, remrec_.line_no, remrec_.rel_no, remrec_.line_item_no, licensed_order_type_); -- Export control
      header_rec_ := Customer_Order_API.Get(remrec_.order_no);
      
      -- Deleting order lines only allowed if the order is in state 'Planned'
      IF (header_rec_.rowstate != 'Planned' ) THEN
         Error_SYS.Record_General(lu_name_, 'USE_CANCEL_ORDER: Order lines on released orders may not be removed, only cancelled!');
      ELSIF (remrec_.rowstate != 'Released') THEN
         Error_SYS.Record_General(lu_name_, 'NO_REMOVE: An order line in :P1 state may not be removed.', Finite_State_Decode__(remrec_.rowstate));
      END IF;
   
      -- Deleting not allowed if Supply site reservations exists on supply site
      IF (Co_Supply_Site_Reservation_API.Reservation_Exist(remrec_.order_no, remrec_.line_no, remrec_.rel_no, remrec_.line_item_no) = 1) THEN
         Error_SYS.Record_General(lu_name_, 'SSR_EXIST: The order line may not be removed while Supply Site Reservations exists, remove reservations first!');
      END IF;
   
      -- Deleting not allowed when customer order originates from an internal purchase order
      IF (header_rec_.internal_po_no IS NOT NULL) THEN
         Error_SYS.Record_General(lu_name_, 'CHANGENOTALLOWED: It is not allowed to add or remove order lines when the customer order originates from an internal purchase order.');
      END IF;
   
      -- IF the line is a package part then check all component lines
      IF (remrec_.line_item_no = -1) THEN
         FOR pkgrec_ IN get_package LOOP
            linerec_ := Get_Object_By_Id___(pkgrec_.rowid);
            Check_Delete___(linerec_);
         END LOOP;
      END IF;
   
      -- IF the line is connected to a sales promotion calculation that has resulted in a sales promotion charge it can't be removed.
      IF Sales_Promotion_Util_API.Check_Promo_Exist_For_Ord_Line(remrec_.order_no, remrec_.line_no, remrec_.rel_no, remrec_.line_item_no) THEN
         Error_SYS.Record_General(lu_name_, 'NOREMOVEPROMOCONN: The order line cannot be deleted unless sales promotions have been cleared first.');
      END IF;
   
      Validate_Prepayment___(remrec_, 'DELETE');
   
      IF (remrec_.demand_code = 'PO') THEN
         Client_SYS.Add_Warning(lu_name_, 'CONNECTED_TO_PO: This order is connected to purchase order :P1/:P2/:P3 - which will not be updated automatically.', remrec_.demand_order_ref1, remrec_.demand_order_ref2, remrec_.demand_order_ref3);
      ELSIF (remrec_.demand_code = 'WO') THEN
         Client_SYS.Add_Warning(lu_name_, 'CONNECTED_TO_WO: This order is connected to work order :P1/:P2/:P3 - which will not be updated automatically.', remrec_.demand_order_ref1, remrec_.demand_order_ref2, remrec_.demand_order_ref3);
      ELSIF (remrec_.demand_code = 'FSM') THEN
         Client_SYS.Add_Warning(lu_name_, 'CONNECTED_TO_FSM: This order is connected to Field Service Management invoice.');
      END IF;
   
      Base(remrec_);
   END Core;

BEGIN
   $IF Component_Rmcom_SYS.INSTALLED $THEN
      IF Rm_Acc_Usage_API.Possible_To_Delete('CustomerOrder', 'BELONG_TO_PARENT', 'CHECK', remrec_.order_no) = FALSE THEN
         Rm_Acc_Usage_API.Raise_No_Access('CustomerOrder', remrec_.order_no);
      END IF;
   $END
   Core(remrec_);
END Check_Delete___;


PROCEDURE Delete___ (
   objid_  IN VARCHAR2,
   remrec_ IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE )
IS
   
   PROCEDURE Base (
      objid_  IN VARCHAR2,
      remrec_ IN customer_order_line_tab%ROWTYPE )
   IS
      key_ VARCHAR2(2000);
   BEGIN
      key_ := remrec_.order_no||'^'||remrec_.line_no||'^'||remrec_.rel_no||'^'||remrec_.line_item_no||'^';
      Reference_SYS.Do_Cascade_Delete(lu_name_, key_);
      IF (objid_ IS NOT NULL) THEN
         DELETE
            FROM  customer_order_line_tab
            WHERE rowid = objid_;
      ELSE
         DELETE
            FROM  customer_order_line_tab
            WHERE order_no = remrec_.order_no
            AND   line_no = remrec_.line_no
            AND   rel_no = remrec_.rel_no
            AND   line_item_no = remrec_.line_item_no;
      END IF;
   END Base;

   PROCEDURE Core (
      objid_  IN VARCHAR2,
      remrec_ IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE )
   IS
      linerec_                 CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
      cc_dummy_                VARCHAR2(2000);
      company_                 VARCHAR2(20);
      result_code_             VARCHAR2(2000);
      available_qty_           NUMBER := 0;
      earliest_available_date_ DATE;
      licensed_order_type_     VARCHAR2(25);
      ctp_run_id_              NUMBER;
      interim_ord_id_          VARCHAR2(12);
   
      CURSOR get_package IS
         SELECT rowid
         FROM  CUSTOMER_ORDER_LINE_TAB
         WHERE order_no = remrec_.order_no
         AND   line_no = remrec_.line_no
         AND   rel_no = remrec_.rel_no
         AND   line_item_no > 0;
   BEGIN
      Base(objid_, remrec_);
   
      Customer_Order_Line_Hist_API.Remove(remrec_.order_no, remrec_.line_no, remrec_.rel_no, remrec_.line_item_no);
      IF (remrec_.line_item_no <= 0) THEN
         Pre_Accounting_API.Remove_Accounting_Id(remrec_.pre_accounting_id);
      END IF;
   
      licensed_order_type_ := Get_Expctr_License_Order_Type(remrec_.demand_code, remrec_.demand_order_ref1, remrec_.demand_order_ref2, remrec_.demand_order_ref3);
      Customer_Order_Flow_API.Remove_Connected_Exp_Licenses(remrec_.order_no, remrec_.line_no, remrec_.rel_no, remrec_.line_item_no, licensed_order_type_); -- Export control
   
      IF (remrec_.supply_code = 'PKG') THEN
         FOR pkgrec_ IN get_package LOOP
            linerec_ := Get_Object_By_Id___(pkgrec_.rowid);
            Delete___(pkgrec_.rowid, linerec_);
         END LOOP;
      -- Cancel DOP for DOP parts
      ELSIF (remrec_.supply_code = 'DOP') THEN
         Connect_Customer_Order_API.Cancel_Dop(remrec_.order_no, remrec_.line_no, remrec_.rel_no, remrec_.line_item_no);
      END IF;
      
      $IF (Component_Ordstr_SYS.INSTALLED) $THEN
         -- remove capibility check reservations/allocations
         interim_ord_id_:= Customer_Order_Line_API.Get_Interim_Order_No(remrec_.order_no, remrec_.line_no, remrec_.rel_no, remrec_.line_item_no, remrec_.ctp_planned);
         IF (remrec_.ctp_planned = 'Y' OR (remrec_.ctp_planned = 'N' AND interim_ord_id_ IS NOT NULL)) THEN
            Interim_Ctp_Manager_API.Cancel_Ctp(cc_dummy_, remrec_.order_no, remrec_.line_no, remrec_.rel_no, remrec_.line_item_no,
                                               'CUSTOMERORDER', remrec_.supply_code);
         END IF;
         
         -- Remove interim order association
         Interim_Demand_Head_API.Remove_Interim_Head_By_Usage('CUSTOMERORDER', remrec_.order_no, remrec_.line_no, remrec_.rel_no, remrec_.line_item_no);
         
         -- Remove ctp record
         ctp_run_id_ := Interim_Ctp_Critical_Path_API.Get_Ctp_Run_Id('CUSTOMERORDER', remrec_.order_no, remrec_.line_no, remrec_.rel_no, remrec_.line_item_no);
         IF (ctp_run_id_ IS NOT NULL AND ctp_run_id_ > 0) THEN
            Interim_Ctp_Critical_Path_API.Clear_Ctp_Data(ctp_run_id_);
         END IF;
      $END 
   
      IF remrec_.activity_seq IS NOT NULL THEN
         -- Remove Customer Order Line and Customer Order Revenue connections
         Connect_Customer_Order_API.Remove_Project_Connection(remrec_.order_no,
                                                              remrec_.line_no,
                                                              remrec_.rel_no,
                                                              remrec_.line_item_no,
                                                              remrec_.activity_seq );
      END IF;
   
      IF (remrec_.line_item_no <= 0) THEN
         CUSTOMER_ORDER_API.Modify_Grp_Disc_Calc_Flag(remrec_.order_no, 'N');
         IF (remrec_.default_addr_flag = 'N') THEN
            Cust_Order_Line_Address_API.Remove_Address__(remrec_.order_no, remrec_.line_no, remrec_.rel_no, remrec_.line_item_no);
         END IF;
      END IF;
   
      IF (remrec_.supply_code IN ('IO','PS','SO','DOP','PD','PT','IPD','IPT')) THEN
      -- Update forecast in MS or MRP if needed.
         IF (Inventory_Part_API.Get_Forecast_Consump_Flag_Db(remrec_.contract, remrec_.part_no) = 'FORECAST') THEN
            -- Unconsume the cancelled quantity
            Reserve_Customer_Order_API.Control_Ms_Mrp_Consumption(result_code_, available_qty_, earliest_available_date_, remrec_.contract, remrec_.part_no, NVL(remrec_.activity_seq, 0),
                                                                  0, remrec_.revised_qty_due, remrec_.planned_due_date, remrec_.planned_due_date, 'CO', TRUE, remrec_.abnormal_demand, NULL );
         END IF;
      END IF;
   
      IF (remrec_.job_id IS NOT NULL) THEN
         company_ := Site_API.Get_Company(remrec_.contract);
         $IF (Component_Genled_SYS.INSTALLED)$THEN
            Accounting_Project_Util_API.Remove_Financial_Job(company_, remrec_.job_id);
         $END
      END IF;
   
      IF (remrec_.demand_code = 'CRO' OR remrec_.demand_code = 'CRE') THEN
         IF (remrec_.supply_code IN ('IO', 'CRO')) THEN
            -- Clear CO Line information if CO line was created by a Component Repair Order Line.
            $IF (Component_Cromfg_SYS.INSTALLED)$THEN
               Cro_Line_Material_Route_API.Clear_Co_Information(  cro_no_              => remrec_.demand_order_ref1, 
                                                                  cro_line_no_         => remrec_.demand_order_ref2,
                                                                  dispatch_order_ref1_ => remrec_.order_no,
                                                                  dispatch_order_ref2_ => remrec_.line_no,
                                                                  dispatch_order_ref3_ => remrec_.rel_no, 
                                                                  dispatch_order_ref4_ => remrec_.line_item_no);
            $ELSE
               NULL;
            $END
            -- Clear CO Exchange Line information if CO line was created by a Component Repair Order Exchange Line.
            $IF Component_Cromfg_SYS.INSTALLED $THEN
               Cro_Exchange_Line_API.Clear_Co_Information(remrec_.demand_order_ref1, remrec_.demand_order_ref2);
            $ELSE
               NULL;
            $END
   
         ELSIF (remrec_.supply_code = 'SEO')THEN
            -- Clear CO Line information if CO line was generated by transferring sales lines in Component Repair Order.
            $IF (Component_Srvinv_SYS.INSTALLED) $THEN
               Srv_Sales_Lines_API.Undo_Transfer(remrec_.demand_order_ref4);
            $ELSE
               NULL;
            $END
         END IF;
      END IF;
      IF (remrec_.rental = Fnd_Boolean_API.DB_TRUE) THEN
         Remove_Rental___(remrec_);
      END IF;
   END Core;

BEGIN
   $IF Component_Rmcom_SYS.INSTALLED $THEN
      IF Rm_Acc_Usage_API.Possible_To_Delete('CustomerOrder', 'BELONG_TO_PARENT', 'DO', remrec_.order_no) = FALSE THEN
         Rm_Acc_Usage_API.Raise_No_Access('CustomerOrder', remrec_.order_no);
      END IF;
   $END
   Core(objid_, remrec_);
END Delete___;


PROCEDURE Check_Delete_Exp_License___ (
   rec_  IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   licensed_order_type_ VARCHAR2(25);
BEGIN
   licensed_order_type_ := Customer_Order_Line_API.Get_Expctr_License_Order_Type(rec_.demand_code, rec_.demand_order_ref1, rec_.demand_order_ref2, rec_.demand_order_ref3);
   Customer_Order_Flow_API.Check_Delete_Exp_License(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no, licensed_order_type_);
END Check_Delete_Exp_License___;


PROCEDURE Check_Delivery_Confirmed___ (
   rec_  IN     CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   lineattr_  VARCHAR2(2000);
BEGIN
   IF (rec_.delivery_confirmed = 'FALSE') THEN
      IF (CUSTOMER_ORDER_API.Get_Confirm_Deliveries_Db(rec_.order_no) = 'FALSE') THEN
         Client_SYS.Clear_Attr(lineattr_);
         Client_SYS.Add_To_Attr('DELIVERY_CONFIRMED_DB', 'TRUE', lineattr_);
         Modify(lineattr_, rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no);
      END IF;
   END IF;
END Check_Delivery_Confirmed___;


PROCEDURE Do_Nothing___ (
   rec_  IN OUT NOCOPY customer_order_line_tab%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
BEGIN
   NULL;
END Do_Nothing___;


PROCEDURE Do_Set_Pkg_Header_State___ (
   rec_  IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   rec_pkg_      CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
BEGIN
   -- IF package component, send message to package header.
   --Finite_State_Set is called here since it is quite difficult to model this within Finite_State_Machine.
   IF ((rec_.qty_shipped != 0) AND (rec_.line_item_no > 0)) THEN
       rec_pkg_ := Get_Object_By_Keys___(rec_.order_no, rec_.line_no, rec_.rel_no, -1);
       Finite_State_Set___(rec_pkg_, 'PartiallyDelivered');
   END IF;
END Do_Set_Pkg_Header_State___;


PROCEDURE Do_Set_Qty_Assigned___ (
   rec_  IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   qty_assigned_  NUMBER;
BEGIN
   qty_assigned_ := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('QTY_ASSIGNED', attr_));
   Modify_Qty_Assigned__(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no, qty_assigned_);
   rec_ := Get_Object_By_Keys___(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no);
END Do_Set_Qty_Assigned___;


PROCEDURE Do_Set_Qty_Confirmeddiff___ (
   rec_  IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   qty_confirmeddiff_  NUMBER;
BEGIN
   qty_confirmeddiff_ := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('QTY_CONFIRMEDDIFF', attr_));
   Modify_Qty_Confirmeddiff__(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no, qty_confirmeddiff_);
   rec_ := Get_Object_By_Keys___(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no);
END Do_Set_Qty_Confirmeddiff___;


PROCEDURE Do_Set_Qty_Invoiced___ (
   rec_  IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   qty_invoiced_  NUMBER;
BEGIN
   qty_invoiced_ := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('QTY_INVOICED', attr_));
   Modify_Qty_Invoiced__(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no, qty_invoiced_);
   rec_ := Get_Object_By_Keys___(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no);
END Do_Set_Qty_Invoiced___;


PROCEDURE Do_Set_Qty_Picked___ (
   rec_  IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   qty_picked_  NUMBER;
BEGIN
   qty_picked_ := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('QTY_PICKED', attr_));
   Modify_Qty_Picked__(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no, qty_picked_);
   rec_ := Get_Object_By_Keys___(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no);
END Do_Set_Qty_Picked___;


PROCEDURE Do_Set_Qty_Shipdiff___ (
   rec_  IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   qty_shipdiff_  NUMBER;
BEGIN
   qty_shipdiff_ := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('QTY_SHIPDIFF', attr_));
   Modify_Qty_Shipdiff__(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no, qty_shipdiff_);
   rec_ := Get_Object_By_Keys___(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no);
END Do_Set_Qty_Shipdiff___;


PROCEDURE Do_Set_Qty_Shipped___ (
   rec_  IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   qty_shipped_  NUMBER;
BEGIN
   qty_shipped_ := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('QTY_SHIPPED', attr_));
   Modify_Qty_Shipped__(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no, qty_shipped_);
   rec_ := Get_Object_By_Keys___(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no);
END Do_Set_Qty_Shipped___;


PROCEDURE Do_Undo_Delivery___ (
   rec_  IN OUT NOCOPY customer_order_line_tab%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   deliv_no_  NUMBER;
BEGIN
   deliv_no_ := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('DELIV_NO', attr_));
   Undo_Cust_Ord_Delivery_API.Undo_Cust_Ord_Line_Delivery__(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no, deliv_no_);
   rec_      := Get_Object_By_Keys___(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no);
END Do_Undo_Delivery___;


PROCEDURE Do_Uninvoice_Pkg_Component___ (
   rec_  IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   pkg_invoiced_qty_ NUMBER;
   cancelled_pkg_comp_qty_    NUMBER;
   no_of_cancelled_pkgs_      NUMBER;
   
   CURSOR get_pkg_comp IS
      SELECT order_no, line_no, rel_no, line_item_no, qty_per_assembly, revised_qty_due,
             conv_factor, inverted_conv_factor, rowstate, qty_invoiced
      FROM CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = rec_.order_no
      AND line_no = rec_.line_no
      AND rel_no = rec_.rel_no
      AND line_item_no > 0
      AND rowstate != 'Cancelled'
      AND qty_invoiced > 0;
BEGIN
   IF (rec_.line_item_no = -1) THEN
      pkg_invoiced_qty_ := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('QTY_INVOICED', attr_));
      no_of_cancelled_pkgs_ := rec_.qty_invoiced - pkg_invoiced_qty_;
      
      FOR comp_rec_ IN get_pkg_comp LOOP
         cancelled_pkg_comp_qty_ :=  no_of_cancelled_pkgs_ * (comp_rec_.revised_qty_due / rec_.revised_qty_due) / comp_rec_.conv_factor * comp_rec_.inverted_conv_factor;
         Set_Uninvoiced(comp_rec_.order_no, comp_rec_.line_no, comp_rec_.rel_no, comp_rec_.line_item_no, (comp_rec_.qty_invoiced - cancelled_pkg_comp_qty_));
      END LOOP;   
   END IF;
END Do_Uninvoice_Pkg_Component___;


PROCEDURE Do_Uninvoice_Pkg_Head_State___ (
   rec_  IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   pkg_line_rec_ CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
BEGIN
   IF (rec_.line_item_no > 0) THEN
      pkg_line_rec_ := Get_Object_By_Keys___(rec_.order_no, rec_.line_no, rec_.rel_no, -1);
      IF (pkg_line_rec_.rowstate = 'Invoiced' AND pkg_line_rec_.qty_invoiced = 0) THEN
         Finite_State_Set___(pkg_line_rec_, 'Delivered');
      END IF;   
   END IF;
END Do_Uninvoice_Pkg_Head_State___;


FUNCTION Is_Any_Delivery_Exist___ (
   rec_  IN     customer_order_line_tab%ROWTYPE ) RETURN BOOLEAN
IS
   CURSOR check_delivered_comp_exist IS
      SELECT 1
      FROM CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = rec_.order_no
      AND line_no = rec_.line_no
      AND rel_no = rec_.rel_no
      AND line_item_no > 0
      AND rowstate IN ('PartiallyDelivered', 'Delivered');
   
   found_ NUMBER;
BEGIN
   IF (rec_.qty_shipped != 0) THEN
      RETURN TRUE;
   ELSE
      IF (rec_.line_item_no = -1) THEN
         OPEN check_delivered_comp_exist;
         FETCH check_delivered_comp_exist INTO found_;
         CLOSE check_delivered_comp_exist;
         
         IF (found_ = 1) THEN
            RETURN TRUE;
         ELSE
            RETURN FALSE;
         END IF;  
      ELSE
        RETURN FALSE;
      END IF;
   END IF;
END Is_Any_Delivery_Exist___;


FUNCTION Line_Is_Fully_Delivered___ (
   rec_ IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE ) RETURN BOOLEAN
IS
   CURSOR get_undelivered_components IS
      SELECT 1
      FROM CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = rec_.order_no
      AND line_no = rec_.line_no
      AND rel_no = rec_.rel_no
      AND line_item_no > 0
      AND rowstate NOT IN ('Invoiced', 'Cancelled', 'Delivered');
   found_ NUMBER;
BEGIN
   IF (rec_.line_item_no = -1) THEN
      -- Package header, check if all components have been delivered
      OPEN get_undelivered_components;
      FETCH get_undelivered_components INTO found_;
      IF (get_undelivered_components%NOTFOUND) THEN
         found_ := 0;
      END IF;
      CLOSE get_undelivered_components;

      IF (found_ = 1) THEN
         -- Not fully delivered component lines exist
         RETURN FALSE;
      ELSE
         RETURN ((rec_.qty_shipped - rec_.qty_shipdiff) >= rec_.revised_qty_due);
      END IF;
   ELSE
      -- Normal line or package component line
      RETURN ((rec_.qty_shipped - rec_.qty_shipdiff) >= rec_.revised_qty_due);
   END IF;
END Line_Is_Fully_Delivered___;


FUNCTION Line_Is_Fully_Invoiced___ (
   rec_ IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE ) RETURN BOOLEAN
IS
   header_rec_       CUSTOMER_ORDER_API.Public_Rec;
   ordering_company_ VARCHAR2(20);

   CURSOR get_non_invoiced_packages IS
      SELECT 1
      FROM CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = rec_.order_no
      AND line_no = rec_.line_no
      AND rel_no = rec_.rel_no
      AND line_item_no > 0
      AND rental = Fnd_Boolean_API.DB_FALSE
      AND rowstate NOT IN ('Invoiced', 'Cancelled');

   found_  NUMBER := 0;
BEGIN
   -- For work order returns, when the Customer Order line is created, state machine should not proceed forward.
   IF ((rec_.rowstate = 'Released') AND (rec_.revised_qty_due < 0) AND (rec_.supply_code = 'SEO')) THEN
      RETURN FALSE;
   END IF; 
   
  IF (rec_.rental = Fnd_Boolean_API.DB_FALSE) THEN
     -- Used to distinguish Staged Billings.
     IF ((rec_.qty_invoiced > 0) AND (rec_.qty_shipped = 0)) THEN
        IF NOT Line_Is_Fully_Delivered___(rec_) THEN
           RETURN FALSE;
        END IF;
     END IF;
     IF (rec_.line_item_no = -1) THEN   -- this is a Package header
         OPEN get_non_invoiced_packages;
         FETCH get_non_invoiced_packages INTO found_;

         IF get_non_invoiced_packages%FOUND THEN
            CLOSE get_non_invoiced_packages;
            RETURN FALSE;
         END  IF;
         CLOSE get_non_invoiced_packages;
      END IF;

      header_rec_ := CUSTOMER_ORDER_API.Get(rec_.order_no);

      -- IF the line should not be charged it should be closed when fully delivered
      IF (rec_.charged_item = 'ITEM NOT CHARGED') THEN
         RETURN(Line_Is_Fully_Delivered___(rec_));
      END IF;

      -- IF the line is Customer Owned or Supplier loaned it should be closed when fully delivered
      IF (rec_.part_ownership IN ('CUSTOMER OWNED', 'SUPPLIER LOANED')) THEN       
         RETURN(Line_Is_Fully_Delivered___(rec_));
      END IF;
      
      IF (rec_.part_ownership IN ('COMPANY OWNED') AND (rec_.demand_code = Order_Supply_Type_API.DB_COMPONENT_REPAIR_EXCHANGE)
         AND (rec_.supply_code = Order_Supply_Type_API.DB_COMPONENT_REPAIR_ORDER)) THEN
         RETURN(Line_Is_Fully_Delivered___(rec_));   
      END IF;

      -- IF the line is for an exchange item it should be closed when fully delivered.
      IF (rec_.exchange_item = 'EXCHANGED ITEM') THEN
         RETURN(Line_Is_Fully_Delivered___(rec_));
      END IF;

      -- IF the header is connected to a sales contract it should be closed when fully delivered.
      IF (header_rec_.sales_contract_no IS NOT NULL) THEN
         RETURN(Line_Is_Fully_Delivered___(rec_));
      END IF;

      ordering_company_ :=  Site_API.Get_Company(header_rec_.contract);

      IF ((Site_API.Get_Company(Cust_Ord_Customer_API.Get_Contract_From_Customer_No(header_rec_.customer_no)) = ordering_company_)
         OR (Site_API.Get_Company(Cust_Ord_Customer_API.Get_Contract_From_Customer_No(header_rec_.customer_no_pay))= ordering_company_)) THEN
         RETURN (Line_Is_Fully_Delivered___(rec_));
      END IF;

      -- Not an internal order
      IF (rec_.buy_qty_due >= 0) THEN
         RETURN (ROUND((rec_.qty_invoiced - rec_.qty_confirmeddiff), 10) >= TRUNC(rec_.buy_qty_due + (rec_.qty_shipdiff / rec_.conv_factor * rec_.inverted_conv_factor), 10));
      ELSE
         -- Buy qty due may be negative for service order lines
         RETURN (ROUND((rec_.qty_invoiced - rec_.qty_confirmeddiff), 10) <= TRUNC(rec_.buy_qty_due + (rec_.qty_shipdiff / rec_.conv_factor * rec_.inverted_conv_factor), 10));
      END IF;
   ELSE
       RETURN Rental_Is_Completed___(rec_);
   END IF;
END Line_Is_Fully_Invoiced___;


FUNCTION Line_Is_Picked___ (
   rec_ IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE ) RETURN BOOLEAN
IS
   CURSOR get_package IS
      SELECT 1
      FROM CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = rec_.order_no
      AND line_no = rec_.line_no
      AND rel_no = rec_.rel_no
      AND line_item_no > 0
      AND (qty_picked > 0 OR qty_shipped > 0);
   found_  NUMBER := 0;
BEGIN
   IF (rec_.line_item_no = -1) THEN
      -- Package header
      OPEN get_package;
      FETCH get_package INTO found_;
      CLOSE get_package;
      RETURN (found_ = 1);
   ELSE
      RETURN (rec_.qty_picked > 0);
   END IF;
END Line_Is_Picked___;


FUNCTION Line_Is_Reserved___ (
   rec_ IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE ) RETURN BOOLEAN
IS
   CURSOR get_package IS
      SELECT 1
      FROM CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = rec_.order_no
      AND line_no = rec_.line_no
      AND rel_no = rec_.rel_no
      AND line_item_no > 0
      AND (qty_assigned > 0 OR qty_shipped > 0);
   found_  NUMBER := 0;
BEGIN
   IF (rec_.line_item_no = -1) THEN
      -- Package header
      OPEN get_package;
      FETCH get_package INTO found_;
      CLOSE get_package;
      RETURN (found_ = 1);
   ELSE
      RETURN (rec_.qty_assigned > 0);
   END IF;
END Line_Is_Reserved___;


FUNCTION Rental_Is_Completed___ (
   rec_  IN  customer_order_line_tab%ROWTYPE ) RETURN BOOLEAN
IS
   rental_no_                NUMBER;
   ro_fully_returned_        BOOLEAN:= TRUE;
   inter_site_intra_company_ BOOLEAN := FALSE;

   $IF Component_Rental_SYS.INSTALLED $THEN
      CURSOR get_replacement_orders(parent_rental_no_ NUMBER) IS
         SELECT order_no, line_no, rel_no, line_item_no
         FROM  CUSTOMER_ORDER_LINE_TAB, RENTAL_OBJECT_PUB
         WHERE demand_code IN ('RCO', 'IPT_RO')
         AND   order_no          = order_ref1
         AND   line_no           = order_ref2
         AND   rel_no            = order_ref3
         AND   line_item_no      = order_ref4
         AND   rental            = 'TRUE'
         AND   rental_type_db    = 'CUST ORDER'
         AND   primary_rental_no = parent_rental_no_;
   $END
BEGIN
   IF (rec_.rental = Fnd_Boolean_API.DB_TRUE) THEN
      IF (rec_.qty_shipped = 0) THEN
         RETURN FALSE;
      END IF;
      IF (NVL(rec_.demand_code, Database_SYS.string_null_) NOT IN (Order_Supply_Type_API.DB_REPLACEMENT_CUSTOMER_ORDER,
                                                                   Order_Supply_Type_API.DB_INT_PURCH_REPLACEMENT_ORDER)) THEN
         rental_no_ := Get_Rental_No(rec_.order_no,
                                     rec_.line_no,
                                     rec_.rel_no,
                                     rec_.line_item_no);
         $IF Component_Rental_SYS.INSTALLED $THEN
            -- Checks whether connected replacement orders fully returned.
            FOR replacement_ord_rec_ IN get_replacement_orders(rental_no_) LOOP
               IF (Return_Material_Line_API.Cal_Qty_To_Return_Sales_Uom(replacement_ord_rec_.order_no, replacement_ord_rec_.line_no, replacement_ord_rec_.rel_no, replacement_ord_rec_.line_item_no) != 0) THEN
                  ro_fully_returned_ := FALSE;
                  EXIT;
               END IF;
            END LOOP;

            IF (rec_.demand_code = 'IPT') AND
                (Site_API.Get_Company(Cust_Ord_Customer_API.Get_Acquisition_Site(rec_.customer_no)) = Site_API.Get_Company(rec_.contract)) THEN
               inter_site_intra_company_ :=  TRUE;
            END IF;

            IF (inter_site_intra_company_) THEN
               -- Inter-site, intra-company lines are not invoiced, we don't use the extra validation here.
               RETURN (Return_Material_Line_API.Cal_Qty_To_Return_Sales_Uom(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no) = 0) AND
                  ro_fully_returned_;
            ELSE
               RETURN (Rental_Transaction_Manager_API.Fully_Invoiced(rental_no_, ignore_invoice_date_ => TRUE) AND
                   (Return_Material_Line_API.Cal_Qty_To_Return_Sales_Uom(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no) = 0) AND
                   ro_fully_returned_);
            END IF;
         $ELSE
            RETURN FALSE;
         $END
      ELSE
         RETURN (Line_Is_Fully_Delivered___(rec_));
      END IF;
   END IF;
   RETURN FALSE;
END Rental_Is_Completed___;


PROCEDURE Finite_State_Set___ (
   rec_   IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   state_ IN     VARCHAR2 )
IS
   
   PROCEDURE Base (
      rec_   IN OUT NOCOPY customer_order_line_tab%ROWTYPE,
      state_ IN     VARCHAR2 )
   IS
   BEGIN
      rec_.rowversion := sysdate;
      UPDATE customer_order_line_tab
         SET rowstate = state_,
             rowversion = rec_.rowversion
         WHERE order_no = rec_.order_no
         AND   line_no = rec_.line_no
         AND   rel_no = rec_.rel_no
         AND   line_item_no = rec_.line_item_no;
      rec_.rowstate := state_;
   END Base;

   PROCEDURE Core (
      rec_   IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
      state_ IN     VARCHAR2 )
   IS
      old_state_  VARCHAR2(20);
      check_do_   BOOLEAN := TRUE;
   BEGIN
      old_state_ := rec_.rowstate;
      Base(rec_, state_);
   
      -- Modify the state of the Connected PO and DO.
      IF (rec_.demand_code = 'DO') THEN
         IF (state_ = 'Released' AND old_state_ IS NULL) THEN
            check_do_  := FALSE;
         ELSIF (state_ = 'Reserved') AND (old_state_ = 'Released')
            AND (Get_Qty_Assigned(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no) = 0) THEN
            -- Order line is not yet reserved.
            check_do_ := FALSE;
         END IF;
   
         $IF (Component_Disord_SYS.INSTALLED)$THEN
            IF check_do_ THEN
               Distribution_Order_API.Check_State(rec_.demand_order_ref1, NULL);
            END IF;
         $END
      END IF;
   
      IF rec_.activity_seq IS NOT NULL THEN
         Calculate_Cost_And_Progress(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no);
      END IF;
   
      IF (rec_.demand_code = Order_Supply_Type_API.DB_COMPONENT_REPAIR_EXCHANGE AND (rec_.supply_code = Order_Supply_Type_API.DB_COMPONENT_REPAIR_ORDER))
               AND (state_ IN ('PartiallyDelivered', 'Delivered')) THEN
         $IF Component_Cromfg_SYS.INSTALLED $THEN
            Cro_Exchange_Line_API.Set_Inexchange(rec_.demand_order_ref1, rec_.demand_order_ref2);
         $ELSE
            NULL;
         $END
      END IF;
   
      -- send event
      IF (state_ != 'PartiallyDelivered')THEN
         Cust_Order_Event_Creation_API.Order_Line_Status_Change(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no, state_);
         IF (state_ = 'Invoiced') THEN
            IF (rec_.job_id IS NOT NULL) THEN
               Close_Financial_Project___(Site_API.Get_Company(rec_.contract), rec_.job_id);
            END IF;
            IF (rec_.qty_short = 0) THEN
               IF (Customer_Order_Shortage_API.Check_Exist(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no)) THEN
                  Customer_Order_Shortage_API.Remove(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no);
               END IF;
            END IF;
         END IF;
         IF (state_ = 'Delivered') THEN
            Update_Pegged_Orders__(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no);
         END IF;
      ELSE
         -- When setting the state to PartiallyDelivered do an extra check to see if the status will be immediately set to Delivered as well.
         -- Trigger the event only when the  line will remain  in the PartiallyDelivered state.
         IF (NOT Line_Is_Fully_Delivered___(rec_)) THEN
            Cust_Order_Event_Creation_API.Order_Line_Status_Change(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no, state_);
         END IF;
      END IF;
      rec_ := Get_Object_By_Keys___(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no);
   END Core;

BEGIN
   $IF Component_Rmcom_SYS.INSTALLED $THEN
      IF (rec_.rowstate IS NOT NULL) THEN
         IF Rm_Acc_Usage_API.Possible_To_Update('CustomerOrder', 'BELONG_TO_PARENT', 'DO', rec_.order_no) = FALSE THEN
            Rm_Acc_Usage_API.Raise_No_Access('CustomerOrder', rec_.order_no);
         END IF;
      END IF;
   $END
   Core(rec_, state_);
END Finite_State_Set___;


PROCEDURE Update_Line___ (
   objid_  IN VARCHAR2,
   newrec_ IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE )
IS
BEGIN
   -- gelr:disc_price_rounded, added original_discount, original_add_discount, original_order_discount
   UPDATE customer_order_line_tab
   SET order_no = newrec_.order_no,
       line_no = newrec_.line_no,
       rel_no = newrec_.rel_no,
       line_item_no = newrec_.line_item_no,
       contract = newrec_.contract,
       catalog_no = newrec_.catalog_no,
       note_id = newrec_.note_id,
       order_code = newrec_.order_code,
       part_no = newrec_.part_no,
       pre_accounting_id = newrec_.pre_accounting_id,
       sales_unit_meas = newrec_.sales_unit_meas,
       base_sale_unit_price = newrec_.base_sale_unit_price,
       base_unit_price_incl_tax = newrec_.base_unit_price_incl_tax,
       buy_qty_due = newrec_.buy_qty_due,
       catalog_desc = newrec_.catalog_desc,
       catalog_type = newrec_.catalog_type,
       conv_factor = newrec_.conv_factor,
       cost = newrec_.cost,
       currency_rate = newrec_.currency_rate,
       date_entered = newrec_.date_entered,
       discount = newrec_.discount,
       line_total_qty = newrec_.line_total_qty,
       line_total_weight = newrec_.line_total_weight,
       note_text = newrec_.note_text,
       order_discount = newrec_.order_discount,
       planned_delivery_date = newrec_.planned_delivery_date,
       planned_due_date = newrec_.planned_due_date,
       supply_site_due_date = newrec_.supply_site_due_date,
       price_conv_factor = newrec_.price_conv_factor,
       promised_delivery_date = newrec_.promised_delivery_date,
       qty_assigned = newrec_.qty_assigned,
       qty_invoiced = newrec_.qty_invoiced,
       qty_on_order = newrec_.qty_on_order,
       qty_picked = newrec_.qty_picked,
       qty_returned = newrec_.qty_returned,
       qty_shipdiff = newrec_.qty_shipdiff,
       qty_shipped = newrec_.qty_shipped,
       qty_to_ship = newrec_.qty_to_ship,
       qty_short = newrec_.qty_short,
       real_ship_date = newrec_.real_ship_date,
       revised_qty_due = newrec_.revised_qty_due,
       sale_unit_price = newrec_.sale_unit_price,
       unit_price_incl_tax = newrec_.unit_price_incl_tax,
       supply_code = newrec_.supply_code,
       wanted_delivery_date = newrec_.wanted_delivery_date,
       delivery_type = newrec_.delivery_type,
       vendor_no = newrec_.vendor_no,
       tax_code = newrec_.tax_code,
       tax_class_id = newrec_.tax_class_id,
       customer_part_no = newrec_.customer_part_no,
       customer_part_conv_factor = newrec_.customer_part_conv_factor,
       customer_part_unit_meas = newrec_.customer_part_unit_meas,
       customer_part_buy_qty = newrec_.customer_part_buy_qty,
       planned_ship_date = newrec_.planned_ship_date,
       planned_ship_period = newrec_.planned_ship_period,
       customer_no = newrec_.customer_no,
       consignment_stock = newrec_.consignment_stock,
       close_tolerance = newrec_.close_tolerance,
       price_list_no = newrec_.price_list_no,
       charged_item = newrec_.charged_item,
       demand_order_ref1 = newrec_.demand_order_ref1,
       demand_order_ref2 = newrec_.demand_order_ref2,
       demand_order_ref3 = newrec_.demand_order_ref3,
       demand_order_ref4 = newrec_.demand_order_ref4,
       demand_code = newrec_.demand_code,
       dop_connection = newrec_.dop_connection,
       create_sm_object_option = newrec_.create_sm_object_option,
       default_addr_flag = newrec_.default_addr_flag,
       addr_flag = newrec_.addr_flag,
       ship_addr_no = newrec_.ship_addr_no,
       route_id = newrec_.route_id,
       forward_agent_id = newrec_.forward_agent_id,
       ship_via_code = newrec_.ship_via_code,
       delivery_terms = newrec_.delivery_terms,
       delivery_leadtime = newrec_.delivery_leadtime,
       district_code = newrec_.district_code,
       region_code = newrec_.region_code,
       desired_qty = newrec_.desired_qty,
       purchase_part_no = newrec_.purchase_part_no,
       staged_billing = newrec_.staged_billing,
       tax_liability = newrec_.tax_liability,
       original_part_no = original_part_no,
       equipment_object_seq = newrec_.equipment_object_seq,
       sup_sm_contract = newrec_.sup_sm_contract,
       sup_sm_object = newrec_.sup_sm_object,
       sm_connection = newrec_.sm_connection,
       part_price = newrec_.part_price,
       char_price = newrec_.char_price,
       calc_char_price = newrec_.calc_char_price,
       price_source = newrec_.price_source,
       price_freeze = newrec_.price_freeze,
       dock_code = newrec_.dock_code,
       sub_dock_code = newrec_.sub_dock_code,
       ref_id = newrec_.ref_id,
       location_no = newrec_.location_no,
       configuration_id = newrec_.configuration_id,
       price_effectivity_date = newrec_.price_effectivity_date,
       configured_line_price_id = newrec_.configured_line_price_id,
       latest_release_date = newrec_.latest_release_date,
       ctp_planned =newrec_.ctp_planned,
       job_id = newrec_.job_id,
       cust_warranty_id = newrec_.cust_warranty_id,
       price_source_id = newrec_.price_source_id,
       intrastat_exempt = newrec_.intrastat_exempt,
       price_unit_meas = newrec_.price_unit_meas,
       condition_code = newrec_.condition_code,
       additional_discount = newrec_.additional_discount,
       part_ownership = newrec_.part_ownership,
       owning_customer_no = newrec_.owning_customer_no,
       exchange_item = newrec_.exchange_item,
       supply_site_reserve_type = newrec_.supply_site_reserve_type,
       originating_rel_no = newrec_.originating_rel_no,
       originating_line_item_no = newrec_.originating_line_item_no,
       release_planning = newrec_.release_planning,
       supplier_ship_via_transit = newrec_.supplier_ship_via_transit,
       supplier_ship_via_transit_desc = newrec_.supplier_ship_via_transit_desc,
       supply_site = newrec_.supply_site,
       shipment_connected = newrec_.shipment_connected,
       self_billing = newrec_.self_billing,
       activity_seq = newrec_.activity_seq,
       project_id = newrec_.project_id,
       deliver_to_customer_no = newrec_.deliver_to_customer_no,
       contact = newrec_.contact,
       input_qty = newrec_.input_qty,
       input_unit_meas = newrec_.input_unit_meas,
       input_conv_factor = newrec_.input_conv_factor,
       input_variable_values = newrec_.input_variable_values,
       shipment_creation = newrec_.shipment_creation,
       manufacturing_department = newrec_.manufacturing_department,
       delivery_sequence = newrec_.delivery_sequence,
       cancel_reason = newrec_.cancel_reason,
       delivery_confirmed = newrec_.delivery_confirmed,
       customer_po_line_no = newrec_.customer_po_line_no,
       customer_po_rel_no = newrec_.customer_po_rel_no,
       qty_confirmeddiff = newrec_.qty_confirmeddiff,
       blocked_for_invoicing = newrec_.blocked_for_invoicing,
       provisional_price = newrec_.provisional_price,
       receiving_advice_type = newrec_.receiving_advice_type,
       first_actual_ship_date = newrec_.first_actual_ship_date,
       tax_id_no = newrec_.tax_id_no,
       tax_id_validated_date = newrec_.tax_id_validated_date,
       price_source_net_price = newrec_.price_source_net_price,
       target_date = newrec_.target_date,
       allocation_id = newrec_.allocation_id,
       del_terms_location = newrec_.del_terms_location,
       classification_part_no = newrec_.classification_part_no,
       classification_unit_meas = newrec_.classification_unit_meas,
       classification_standard = newrec_.classification_standard,
       rebate_builder = newrec_.rebate_builder,
       line_total_weight_gross = newrec_.line_total_weight_gross,
       freight_map_id = newrec_.freight_map_id,
       zone_id = newrec_.zone_id,
       freight_price_list_no = newrec_.freight_price_list_no,
       adjusted_weight_net = newrec_.adjusted_weight_net,
       adjusted_weight_gross = newrec_.adjusted_weight_gross,
       adjusted_volume = newrec_.adjusted_volume,
       freight_free = newrec_.freight_free,
       part_level = newrec_.part_level,
       part_level_id = newrec_.part_level_id,
       customer_level = newrec_.customer_level,
       customer_level_id = newrec_.customer_level_id,
       load_id = newrec_.load_id,
       customs_value = newrec_.customs_value,
       abnormal_demand = newrec_.abnormal_demand,
       cust_calendar_id = newrec_.cust_calendar_id,
       ext_transport_calendar_id = newrec_.ext_transport_calendar_id,
       rel_mtrl_planning = newrec_.rel_mtrl_planning,
       qty_per_assembly = newrec_.qty_per_assembly,
       new_comp_after_delivery = newrec_.new_comp_after_delivery,
       picking_leadtime = newrec_.picking_leadtime,
       inverted_conv_factor = newrec_.inverted_conv_factor,
       rental = newrec_.rental,
       end_customer_id = newrec_.end_customer_id,
       shipment_type        = newrec_.shipment_type,
       open_shipment_qty = newrec_.open_shipment_qty,
       packing_instruction_id = newrec_.packing_instruction_id,
       originating_co_lang_code = newrec_.originating_co_lang_code,
       cust_part_invert_conv_fact = newrec_.cust_part_invert_conv_fact,
       country_code = upper(newrec_.country_code),
       tax_liability_type = newrec_.tax_liability_type,
       free_of_charge_tax_basis = newrec_.free_of_charge_tax_basis,
       original_order_discount = newrec_.original_order_discount,
       original_discount = newrec_.original_discount,
       original_add_discount = newrec_.original_add_discount,   
       rowversion = newrec_.rowversion
   WHERE rowid = objid_;
END Update_Line___;


PROCEDURE Check_Allow_Backorders___ (
   order_no_              IN VARCHAR2,
   line_no_               IN VARCHAR2,
   rel_no_                IN VARCHAR2,
   line_item_no_          IN NUMBER,
   planned_delivery_date_ IN DATE )
IS
   found_  NUMBER;
   CURSOR get_rec IS
      SELECT 1
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    planned_delivery_date != planned_delivery_date_
      AND    (line_no != line_no_ OR rel_no != rel_no_ OR line_item_no != line_item_no_);
BEGIN
   IF (CUSTOMER_ORDER_API.Get_Backorder_Option_Db(order_no_) = 'NO PARTIAL DELIVERIES ALLOWED') THEN
      OPEN get_rec;
      FETCH get_rec INTO found_;
      IF get_rec%FOUND THEN
         Client_SYS.Add_Info(lu_name_, 'SAME_DATE: The planned delivery dates should be the same when no backorders are allowed.');
      END IF;
      CLOSE get_rec;
   END IF;
END Check_Allow_Backorders___;


PROCEDURE Modify_Line___ (
   attr_         IN OUT NOCOPY VARCHAR2,
   order_no_     IN     VARCHAR2,
   line_no_      IN     VARCHAR2,
   rel_no_       IN     VARCHAR2,
   line_item_no_ IN     NUMBER )
IS
   objid_               VARCHAR2(2000);
   objversion_          VARCHAR2(2000);
   oldrec_              CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   newrec_              CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   ptr_                 NUMBER;
   name_                VARCHAR2(30);
   value_               VARCHAR2(4000);
   info_counter_        NUMBER := 1;
   temp_info_           VARCHAR2(2000);
   current_info_        VARCHAR2(32000);
   insert_package_mode_ VARCHAR2(5);
   indrec_              Indicator_Rec;
BEGIN
   Get_Id_Version_By_Keys___(objid_, objversion_, order_no_, line_no_, rel_no_, line_item_no_);
   oldrec_              := Lock_By_Id___(objid_, objversion_);
   newrec_              := oldrec_;
   insert_package_mode_ := 'FALSE';
   Client_SYS.Add_To_Attr('INSERT_PACKAGE_MODE_', insert_package_mode_, attr_);
   Unpack___(newrec_, indrec_, attr_);
   Check_Update___(oldrec_, newrec_, indrec_, attr_);
   Update___(objid_, oldrec_, newrec_, attr_, objversion_);
   current_info_        := App_Context_SYS.Find_Value('CUSTOMER_ORDER_LINE_API.CURRENT_INFO_');

   IF (current_info_ IS NOT NULL AND ((newrec_.configuration_id != '*' AND newrec_.latest_release_date IS NOT NULL) OR
      (newrec_.supply_code = 'DOP' AND newrec_.rowstate = 'Cancelled')))THEN
      -- the call came probably from CONFIGURED_LINE_PRICE_API.Update_Parent_Config_Id when the user
      -- created or changed a configuration and in this case we want to send the info_ message back to CONFIGURED_LINE_PRICE_API
      --
      -- With existing condition another condition added to send the info message back to Client_SYS.
      -- IF a DOP is tied to more than one Customer Order Line, and one of those COL is cancelled, with Replicate changed of Yes,
      -- an informational message is supposed to be raised. To raise the information above condition added.
      Client_SYS.Clear_Info;
      ptr_ := NULL;
      WHILE (Client_SYS.Get_Next_From_Attr(current_info_, ptr_, name_, value_)) LOOP
         IF (name_ = 'INFO') THEN
            temp_info_    := 'INFO'||info_counter_||': '||value_;
            info_counter_ := info_counter_ + 1;
            Client_SYS.Add_Info(lu_name_, temp_info_);
         END IF;
      END LOOP;
      current_info_ := NULL;
      App_Context_SYS.Set_Value('CUSTOMER_ORDER_LINE_API.CURRENT_INFO_',current_info_);
   -- ELSE
   -- The clear info code below should probably be moved to Customer_Order_API.Calendar_Changed
   -- Clear info value, since no use of that string here - and if updating via Calendar_Changed method
   -- in Customer_Order_API, it might "hit the roof" right away.
      --Client_SYS.Clear_Info;
   ELSE
      App_Context_SYS.Set_Value('CUSTOMER_ORDER_LINE_API.CURRENT_INFO_',current_info_);
   END IF;
END Modify_Line___;


PROCEDURE Modify_Connected_Order_Line___ (
   newrec_                    IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   attr_                      IN OUT NOCOPY VARCHAR2,
   oldrec_                    IN     CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   replicate_changes_         IN     VARCHAR2,
   header_rowstate_           IN     VARCHAR2,
   po_charged_comp_change_    IN     VARCHAR2,
   update_pegged_orders_      IN     VARCHAR2,
   change_request_            IN     VARCHAR2,
   changed_attrib_not_in_pol_ IN     VARCHAR2,
   server_data_change_        IN     NUMBER )
IS
   ipd_replication_  BOOLEAN:=FALSE;
   old_qty_on_order_ NUMBER;
   copy_addr_to_line_ VARCHAR2(5) := 'FALSE' ;
BEGIN
   copy_addr_to_line_ := nvl(Client_SYS.Get_Item_Value('COPY_ADDR_TO_LINE', attr_),'FALSE') ;
   
   IF(header_rowstate_ != 'Planned') THEN
      IF ((newrec_.supply_code IN ('PT', 'PD', 'IPT', 'IPD', 'SO'))) THEN

         IF (newrec_.supply_code = 'IPD' AND ((NVL(newrec_.ext_transport_calendar_id, Database_SYS.string_null_) != NVL(oldrec_.ext_transport_calendar_id, Database_SYS.string_null_)) OR
             (NVL(newrec_.district_code, Database_SYS.string_null_) != NVL(oldrec_.district_code, Database_SYS.string_null_)) OR
             (NVL(newrec_.contact, Database_SYS.string_null_) != NVL(oldrec_.contact, Database_SYS.string_null_)) OR
             (NVL(newrec_.route_id, Database_SYS.string_null_) != NVL(oldrec_.route_id, Database_SYS.string_null_)) OR
             (NVL(newrec_.originating_co_lang_code, Database_SYS.string_null_) != NVL(oldrec_.originating_co_lang_code, Database_SYS.string_null_)) OR
             (newrec_.picking_leadtime != oldrec_.picking_leadtime) OR (newrec_.delivery_leadtime != oldrec_.delivery_leadtime) OR
             (NVL(newrec_.cust_calendar_id, Database_SYS.string_null_) != NVL(oldrec_.cust_calendar_id, Database_SYS.string_null_)) OR
             (NVL(newrec_.packing_instruction_id, Database_SYS.string_null_) != NVL(oldrec_.packing_instruction_id, Database_SYS.string_null_)) OR
             (newrec_.delivery_terms != oldrec_.delivery_terms) OR (NVL(newrec_.region_code, Database_SYS.string_null_) != NVL(oldrec_.region_code, Database_SYS.string_null_)) OR
             (NVL(newrec_.del_terms_location, Database_SYS.string_null_) != NVL(oldrec_.del_terms_location, Database_SYS.string_null_)) OR
             ((oldrec_.addr_flag != newrec_.addr_flag) AND copy_addr_to_line_ = 'FALSE') OR 
             (copy_addr_to_line_ = 'TRUE' AND oldrec_.addr_flag = 'Y' AND newrec_.addr_flag = 'N'))) THEN
               ipd_replication_ := TRUE;
         END IF;

         IF ((newrec_.supply_code IN ('PD', 'IPD') AND 
             (Validate_SYS.Is_Changed(newrec_.ship_addr_no, oldrec_.ship_addr_no)         OR
              Validate_SYS.Is_Changed(newrec_.ship_via_code, oldrec_.ship_via_code)       OR 
              Validate_SYS.Is_Changed(newrec_.forward_agent_id, oldrec_.forward_agent_id) OR
              Validate_SYS.Is_Changed(newrec_.dock_code, oldrec_.dock_code)               OR 
              Validate_SYS.Is_Changed(newrec_.sub_dock_code, oldrec_.sub_dock_code)       OR
              Validate_SYS.Is_Changed(newrec_.location_no, oldrec_.location_no)           OR
              Validate_SYS.Is_Changed(newrec_.packing_instruction_id, oldrec_.packing_instruction_id))) OR 
             (ipd_replication_) OR 
             Validate_SYS.Is_Changed(newrec_.revised_qty_due, oldrec_.revised_qty_due)   OR
             Validate_SYS.Is_Changed(newrec_.planned_due_date, oldrec_.planned_due_date) OR
             (update_pegged_orders_ ='TRUE') OR  
             (newrec_.rental = Fnd_Boolean_API.DB_TRUE AND Is_Rental_Dates_Changed___(attr_, newrec_))) THEN
            IF (NVL(server_data_change_, 0) != 1) OR (po_charged_comp_change_ = 'TRUE') THEN
               IF ((replicate_changes_ = 'TRUE') OR
                   (newrec_.supply_code IN ('PT', 'PD', 'IPT', 'IPD') AND (newrec_.revised_qty_due < oldrec_.qty_on_order)) OR
                   (newrec_.supply_code = 'SO' AND (newrec_.revised_qty_due - newrec_.qty_assigned - newrec_.qty_shipped < oldrec_.qty_on_order))) THEN
                  
                  IF (newrec_.line_item_no <= 0) THEN
                     old_qty_on_order_ := newrec_.qty_on_order;
                  END IF;
                  IF (newrec_.qty_on_order > 0) THEN
                     Client_SYS.Set_Item_Value('CONTRACT',                  newrec_.contract,                  attr_);
                     Client_SYS.Set_Item_Value('PART_NO',                   newrec_.part_no,                   attr_);
                     Client_SYS.Set_Item_Value('SUPPLY_CODE',               newrec_.supply_code,               attr_);
                     Client_SYS.Set_Item_Value('REVISED_QTY_DUE',           newrec_.revised_qty_due,           attr_);
                     Client_SYS.Set_Item_Value('PLANNED_DELIVERY_DATE',     newrec_.planned_delivery_date,     attr_);
                     Client_SYS.Set_Item_Value('PLANNED_DUE_DATE',          newrec_.planned_due_date,          attr_);
                     Client_SYS.Set_Item_Value('CHANGE_REQUEST',            change_request_,                   attr_);
                     Client_SYS.Set_Item_Value('REPLICATE_CHANGES',         replicate_changes_,                attr_);
                     Client_SYS.Set_Item_Value('QTY_ASSIGNED',              newrec_.qty_assigned,              attr_);
                     Client_SYS.Set_Item_Value('QTY_SHIPPED',               newrec_.qty_shipped,               attr_);
                     Client_SYS.Set_Item_Value('SHIP_VIA_CODE',             newrec_.ship_via_code,             attr_);
                     Client_SYS.Set_Item_Value('FORWARD_AGENT_ID',          newrec_.forward_agent_id,          attr_);
                     Client_SYS.Set_Item_Value('DELIVERY_TERMS',            newrec_.delivery_terms,            attr_);
                     Client_SYS.Set_Item_Value('DEL_TERMS_LOCATION',        newrec_.del_terms_location,        attr_);
                     Client_SYS.Set_Item_Value('CHANGED_ATTRIB_NOT_IN_POL',  changed_attrib_not_in_pol_,        attr_);
                     Client_SYS.Set_Item_Value('EXT_TRANSPORT_CALENDAR_ID', newrec_.ext_transport_calendar_id, attr_);
                     Client_SYS.Set_Item_Value('ORIGINATING_FROM',          'ORDER',                           attr_);
                     Client_SYS.Set_Item_Value('ADDR_FLAG_DB',              newrec_.addr_flag,                 attr_);
                     Client_SYS.Set_Item_Value('SHIP_ADDR_NO',              newrec_.ship_addr_no,              attr_);
                     Client_SYS.Set_Item_Value('CUSTOMER_NO',               newrec_.deliver_to_customer_no,    attr_);
                     Client_SYS.Set_Item_Value('CO_HEADER_STATUS',          header_rowstate_,                  attr_);
                     Client_SYS.Set_Item_Value('DEFAULT_ADDR_FLAG',         newrec_.default_addr_flag,         attr_);
                     Client_SYS.Set_Item_Value('PACKING_INSTRUCTION_ID',    newrec_.packing_instruction_id,    attr_);

                     Connect_Customer_Order_API.Modify_Connected_Order_Line(newrec_.qty_on_order,
                                                                            attr_,
                                                                            newrec_.order_no,
                                                                            newrec_.line_no,
                                                                            newrec_.rel_no,
                                                                            newrec_.line_item_no);
                  END IF;
                  IF (newrec_.line_item_no <= 0) AND (old_qty_on_order_ != newrec_.qty_on_order) THEN
                     Modify_Qty_On_Order(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, newrec_.qty_on_order);
                  END IF;
               END IF;
            END IF;
         END IF;
      END IF;
   END IF;
END Modify_Connected_Order_Line___;


PROCEDURE Insert_Package___ (
   pkg_planned_delivery_date_    IN OUT NOCOPY DATE,
   shipment_creation_            IN     VARCHAR2,
   pkg_contract_                 IN     VARCHAR2,
   pkg_catalog_no_               IN     VARCHAR2,
   pkg_order_no_                 IN     VARCHAR2,
   pkg_line_no_                  IN     VARCHAR2,
   pkg_rel_no_                   IN     VARCHAR2,
   pkg_order_code_               IN     VARCHAR2,
   pkg_tax_code_                 IN     VARCHAR2,
   pkg_tax_class_                IN     VARCHAR2,
   pkg_currency_rate_            IN     NUMBER,
   pkg_revised_qty_due_          IN     NUMBER,
   pkg_buy_qty_due_              IN     NUMBER,
   pkg_sale_unit_price_          IN     NUMBER,
   pkg_unit_price_incl_tax_      IN     NUMBER,
   pkg_base_sale_unit_price_     IN     NUMBER,
   pkg_base_unit_price_incl_tax_ IN     NUMBER,
   pkg_wanted_delivery_date_     IN     DATE,
   pkg_target_date_              IN     DATE,
   insert_package_mode_          IN     VARCHAR2 )
IS
   base_sale_unit_price_          NUMBER := 0;
   base_unit_price_incl_tax_      NUMBER := 0;
   sale_unit_price_               NUMBER := 0;
   unit_price_incl_tax_           NUMBER := 0;
   discount_                      NUMBER := 0;
   qty_on_order_                  NUMBER := 0;
   qty_assigned_                  NUMBER := 0;
   buy_qty_due_                   NUMBER := 0;
   desired_qty_                   NUMBER;
   revised_qty_due_               NUMBER := 0;
   cost_                          NUMBER := 0;
   pkg_cost_                      NUMBER := 0;
   dop_connection_                VARCHAR2(200) := NULL;
   supply_code_db_                VARCHAR2(3) := NULL;
   supply_code_                   VARCHAR2(200) := NULL;
   catalog_desc_                  CUSTOMER_ORDER_LINE_TAB.catalog_desc%TYPE;
   sales_part_desc_               CUSTOMER_ORDER_LINE_TAB.catalog_desc%TYPE;
   qty_to_ship_                   NUMBER := 0;
   template_attr_                 VARCHAR2(32000);
   attr_                          VARCHAR2(32000);
   objid_                         VARCHAR2(2000);
   objversion_                    VARCHAR2(2000);
   component_no_                  VARCHAR2(25);
   component_part_no_             VARCHAR2(25);
   original_part_no_              VARCHAR2(25);
   part_price_                    NUMBER := 0;
   price_source_                  VARCHAR2(200);
   price_source_id_               VARCHAR2(25);
   temp_base_sale_unit_price_     NUMBER;
   temp_base_unit_price_incl_tax_ NUMBER;
   temp_discount_                 NUMBER;
   temp_currency_rate_            NUMBER;
   header_rec_                    CUSTOMER_ORDER_API.Public_Rec;
   sales_part_rec_                SALES_PART_API.Public_Rec;
   pkg_header_rec_                CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   newrec_                        CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   part_price_is_set_             BOOLEAN;
   condition_code_                CUSTOMER_ORDER_LINE_TAB.condition_code%TYPE;
   pkg_deliv_conf_                VARCHAR2(20);
   deliv_conf_                    VARCHAR2(20);
   provisional_price_db_          VARCHAR2(20);
   net_price_fetched_             VARCHAR2(20);
   rebate_builder_db_             VARCHAR2(20);
   part_level_db_                 VARCHAR2(30);
   part_level_id_                 VARCHAR2(200);
   customer_level_db_             VARCHAR2(30);
   customer_level_id_             VARCHAR2(200);
   line_discount_amount_          NUMBER;
   customer_part_no_              CUSTOMER_ORDER_LINE_TAB.customer_part_no%TYPE;
   indrec_                        Indicator_Rec;
   tax_liability_type_db_         VARCHAR2(20);
   multiple_tax_                  VARCHAR2(20);

   CURSOR get_pkg_ingridients(contract_ VARCHAR2, parent_part_ VARCHAR2)
   IS
      SELECT catalog_no, line_item_no, qty_per_assembly
      FROM   SALES_PART_PACKAGE_PUB
      WHERE  contract = contract_
      AND    parent_part= parent_part_
      ORDER BY line_item_no;
BEGIN
   -- Fetch the total package cost for each component.
   pkg_cost_   := 0;
   header_rec_ := CUSTOMER_ORDER_API.Get(pkg_order_no_);

   FOR psrec_ IN get_pkg_ingridients(pkg_contract_, pkg_catalog_no_) LOOP
      component_part_no_ := psrec_.catalog_no;
      original_part_no_  := NULL;

      Handle_Replacement_Part___(component_part_no_,
                                 original_part_no_,
                                 pkg_contract_,
                                 FALSE );

      sales_part_rec_ := Sales_Part_API.Get(pkg_contract_, component_part_no_);

      --Check if part is active
      Check_Active_Part___(pkg_contract_, sales_part_rec_.part_no);
      revised_qty_due_ := pkg_buy_qty_due_ * psrec_.qty_per_assembly * sales_part_rec_.conv_factor / sales_part_rec_.inverted_conv_factor;
      IF (sales_part_rec_.part_no IS NULL) THEN
         cost_ := sales_part_rec_.cost;
      ELSE
         -- Retrive the default condition code if used for this part
         IF (Part_Catalog_API.Get_Condition_Code_Usage_Db(sales_part_rec_.part_no) = 'ALLOW_COND_CODE') THEN
            condition_code_ := Condition_Code_API.Get_Default_Condition_Code;
         ELSE
            condition_code_ := NULL;
         END IF;
         IF (revised_qty_due_ IS NOT NULL) THEN
            -- Retrive cost for the part (and condition code if applicable)
            cost_ := Sales_Cost_Util_API.Get_Cost_Incl_Sales_Overhead(pkg_contract_,
                                                                      sales_part_rec_.part_no,
                                                                      '*',
                                                                      condition_code_,
                                                                      revised_qty_due_,
                                                                      'CHARGED ITEM',
                                                                      Order_Supply_Type_API.Encode(Sales_Part_API.Get_Default_Supply_Code(pkg_contract_, psrec_.catalog_no)),
                                                                      header_rec_.customer_no,
                                                                      'COMPANY OWNED');
         END IF;
      END IF;
      pkg_cost_ := pkg_cost_ + cost_ * psrec_.qty_per_assembly * sales_part_rec_.conv_factor / sales_part_rec_.inverted_conv_factor;
   END LOOP;

   -- fetch package header to use with the components
   pkg_header_rec_ := Get_Object_By_Keys___(pkg_order_no_, pkg_line_no_, pkg_rel_no_, -1);

   -- Create a template that may be used for every component.
   Client_SYS.Clear_Attr(template_attr_);
   Client_SYS.Add_To_Attr('ORDER_NO', pkg_order_no_, template_attr_);
   Client_SYS.Add_To_Attr('LINE_NO', pkg_line_no_, template_attr_);
   Client_SYS.Add_To_Attr('REL_NO', pkg_rel_no_, template_attr_);
   Client_SYS.Add_To_Attr('CONTRACT', pkg_contract_, template_attr_);
   Client_SYS.Add_To_Attr('CURRENCY_RATE', pkg_currency_rate_, template_attr_);
   Client_SYS.Add_To_Attr('ORDER_CODE', pkg_order_code_, template_attr_);
   Client_SYS.Add_To_Attr('QTY_INVOICED', 0, template_attr_);
   Client_SYS.Add_To_Attr('QTY_RETURNED', 0, template_attr_);
   Client_SYS.Add_To_Attr('QTY_SHIPDIFF', 0, template_attr_);
   Client_SYS.Add_To_Attr('QTY_SHIPPED', 0, template_attr_);
   Client_SYS.Add_To_Attr('ORDER_DISCOUNT', 0, template_attr_);
   Client_SYS.Add_To_Attr('CONSIGNMENT_STOCK', Consignment_Stock_API.Decode('NO CONSIGNMENT STOCK'), template_attr_);
   Client_SYS.Add_To_Attr('CONSIGNMENT_STOCK_DB', 'NO CONSIGNMENT STOCK', template_attr_);
   Client_SYS.Add_To_Attr('CHARGED_ITEM', Charged_Item_API.Decode('CHARGED ITEM'), template_attr_);
   Client_SYS.Add_To_Attr('CHARGED_ITEM_DB', 'CHARGED ITEM', template_attr_);
   Client_SYS.Add_To_Attr('CATALOG_TYPE_DB', 'KOMP', template_attr_);
   Client_SYS.Add_To_Attr('TAX_CODE', pkg_tax_code_, template_attr_);
   Client_SYS.Add_To_Attr('TAX_CLASS_ID', pkg_tax_class_, template_attr_);
   Client_SYS.Add_To_Attr('ADDR_FLAG_DB', pkg_header_rec_.addr_flag, template_attr_);
   Client_SYS.Add_To_Attr('SHIP_ADDR_NO', pkg_header_rec_.ship_addr_no, template_attr_);
   Client_SYS.Add_To_Attr('CONTACT', pkg_header_rec_.contact, template_attr_);
   Client_SYS.Add_To_Attr('DELIVERY_TERMS', pkg_header_rec_.delivery_terms, template_attr_);
   Client_SYS.Add_To_Attr('DEL_TERMS_LOCATION', pkg_header_rec_.del_terms_location, template_attr_);
   Client_SYS.Add_To_Attr('DISTRICT_CODE', pkg_header_rec_.district_code, template_attr_);
   Client_SYS.Add_To_Attr('REGION_CODE', pkg_header_rec_.region_code, template_attr_);
   Client_SYS.Add_To_Attr('TAX_LIABILITY', pkg_header_rec_.tax_liability, template_attr_);
   Client_SYS.Add_To_Attr('STAGED_BILLING_DB',pkg_header_rec_.staged_billing, template_attr_);
   Client_SYS.Add_To_Attr('PRICE_FREEZE_DB', 'FROZEN', template_attr_);
   Client_SYS.Add_To_Attr('CONFIGURATION_ID', '*', template_attr_);
   Client_SYS.Add_To_Attr('INTRASTAT_EXEMPT_DB', pkg_header_rec_.intrastat_exempt, template_attr_);
   Client_SYS.Add_To_Attr('SUPPLY_SITE_RESERVE_TYPE_DB', pkg_header_rec_.supply_site_reserve_type, template_attr_);
   Client_SYS.Add_To_Attr('SUPPLY_SITE_RESERVE_TYPE', Supply_Site_Reserve_Type_API.Decode(pkg_header_rec_.supply_site_reserve_type), attr_);
   Client_SYS.Add_To_Attr('QTY_CONFIRMEDDIFF', 0, attr_);
   Client_SYS.Add_To_Attr('EQUIPMENT_OBJECT_SEQ', pkg_header_rec_.equipment_object_seq, template_attr_);
   Client_SYS.Add_To_Attr('SUP_SM_CONTRACT', pkg_header_rec_.sup_sm_contract, template_attr_);
   Client_SYS.Add_To_Attr('SUP_SM_OBJECT', pkg_header_rec_.sup_sm_object, template_attr_);
   Client_SYS.Add_To_Attr('TAX_ID_NO', pkg_header_rec_.tax_id_no, template_attr_);
   Client_SYS.Add_To_Attr('TAX_ID_VALIDATED_DATE', pkg_header_rec_.tax_id_validated_date, template_attr_);
   Client_SYS.Add_To_Attr('DELIVER_TO_CUSTOMER_NO', pkg_header_rec_.deliver_to_customer_no, template_attr_);
   Client_SYS.Add_To_Attr('DEMAND_CODE_DB',pkg_header_rec_.demand_code, template_attr_);
   Client_SYS.Add_To_Attr('COUNTRY_CODE',pkg_header_rec_.country_code, template_attr_);
   Client_SYS.Add_To_Attr('TAX_LIABILITY_TYPE_DB',pkg_header_rec_.tax_liability_type, template_attr_);
   
   -- Create record for each component.
   FOR psrec_ IN get_pkg_ingridients(pkg_contract_, pkg_catalog_no_) LOOP
      component_no_     := psrec_.catalog_no;
      original_part_no_ := NULL;
      dop_connection_   := NULL;

      Handle_Replacement_Part___(component_no_,
                                 original_part_no_,
                                 pkg_contract_,
                                 FALSE );

      sales_part_rec_    := Sales_Part_API.Get(pkg_contract_, component_no_);
      sales_part_desc_   := Sales_Part_API.Get_Catalog_Desc(pkg_contract_, component_no_, header_rec_.language_code);

      attr_              := template_attr_;
      part_price_is_set_ := FALSE;
      Client_SYS.Add_To_Attr('LINE_ITEM_NO', psrec_.line_item_no, attr_);
      Client_SYS.Add_To_Attr('CATALOG_NO', component_no_, attr_);
      Client_SYS.Add_To_Attr('CONV_FACTOR', sales_part_rec_.conv_factor, attr_);
      Client_SYS.Add_To_Attr('PRICE_CONV_FACTOR', sales_part_rec_.price_conv_factor, attr_);
      Client_SYS.Add_To_Attr('CLOSE_TOLERANCE', sales_part_rec_.close_tolerance, attr_);
      Client_SYS.Add_To_Attr('ORIGINAL_PART_NO', original_part_no_, attr_);
      Client_SYS.Add_To_Attr('INVERTED_CONV_FACTOR', sales_part_rec_.inverted_conv_factor, attr_);

      -- Fetch correct description.
      customer_part_no_ := Sales_Part_Cross_Reference_API.Get_Customer_Part_No(header_rec_.customer_no, header_rec_.contract, component_no_);
      catalog_desc_     := Sales_Part_Cross_Reference_API.Get_Catalog_Desc(header_rec_.customer_no ,pkg_contract_, customer_part_no_ );
      IF (catalog_desc_ IS NULL) THEN
         catalog_desc_:= Sales_Part_Language_Desc_API.Get_Catalog_Desc(pkg_contract_, component_no_, header_rec_.language_code);
         IF (catalog_desc_ IS NULL) THEN
            catalog_desc_ := sales_part_desc_;
         END IF;
      END IF;
      Client_SYS.Add_To_Attr('CATALOG_DESC', catalog_desc_, attr_);

      -- Fetch total_standard from PART_COST.
      condition_code_ := NULL;

      -- Set correct SUPPLY_CODE
      supply_code_     := Sales_Part_API.Get_Default_Supply_Code(pkg_contract_, component_no_);
      supply_code_db_  := Order_Supply_Type_API.Encode(supply_code_);
      Client_SYS.Add_To_Attr('SUPPLY_CODE_DB', supply_code_db_, attr_);
      revised_qty_due_ := pkg_buy_qty_due_ * psrec_.qty_per_assembly * sales_part_rec_.conv_factor / sales_part_rec_.inverted_conv_factor;

      IF (sales_part_rec_.part_no IS NULL) THEN
         cost_ := sales_part_rec_.cost;
      ELSE
         -- Retrive the default condition code if used for this part
         IF (Part_Catalog_API.Get_Condition_Code_Usage_Db(sales_part_rec_.part_no) = 'ALLOW_COND_CODE') THEN
            condition_code_ := Condition_Code_API.Get_Default_Condition_Code;
         END IF;
         IF (revised_qty_due_ IS NOT NULL) THEN
            -- Retrive cost for the part (and condition code if applicable)
            cost_ := Sales_Cost_Util_API.Get_Cost_Incl_Sales_Overhead(pkg_contract_,
                                                                      sales_part_rec_.part_no,
                                                                      '*',
                                                                      condition_code_,
                                                                      revised_qty_due_,
                                                                      'CHARGED ITEM',
                                                                      supply_code_db_,
                                                                      header_rec_.customer_no,
                                                                      'COMPANY OWNED');
         END IF;
      END IF;
      Client_SYS.Add_To_Attr('COST', cost_, attr_);
      Client_SYS.Add_To_Attr('CONDITION_CODE', condition_code_, attr_);

      -- Display an error about the primary supplier missing - instead of just "Supply Code must have a value" later...
      IF (supply_code_db_ IS NULL) AND (sales_part_rec_.sourcing_option IN ('PRIMARYSUPPTRANSIT', 'PRIMARYSUPPDIRECT')) THEN
         Error_SYS.Record_General(lu_name_, 'NO_PRIMARY_SUPP: No primary supplier exists for purchase part :P1.', sales_part_rec_.purchase_part_no);
      END IF;

      IF (supply_code_db_ = 'DOP') THEN
         dop_connection_ := Inventory_Part_API.Get_Dop_Connection(pkg_contract_, sales_part_rec_.part_no);
      -- if part is configured, supply_code is Not Decided
      ELSIF (sales_part_rec_.catalog_type != 'NON') AND (Part_Catalog_API.Get_Configurable_Db(nvl(sales_part_rec_.part_no, component_no_)) = 'CONFIGURED') THEN
         customer_level_db_ := pkg_header_rec_.customer_level;
         customer_level_id_ := pkg_header_rec_.customer_level_id;
         -- fetch a valid part price to be used as a base for characteristic pricing offsets.
         Customer_Order_Pricing_API.Get_Order_Line_Price_Info(sale_unit_price_,      unit_price_incl_tax_,    temp_base_sale_unit_price_,    temp_base_unit_price_incl_tax_,
                                                              temp_currency_rate_,   temp_discount_,          price_source_,                 price_source_id_,
                                                              provisional_price_db_, net_price_fetched_,      rebate_builder_db_,            part_level_db_,
                                                              part_level_id_,        customer_level_db_,      customer_level_id_,            pkg_order_no_,
                                                              component_no_,         psrec_.qty_per_assembly, pkg_header_rec_.price_list_no, pkg_header_rec_.price_effectivity_date,
                                                              NULL,                  header_rec_.use_price_incl_tax);
         IF (header_rec_.use_price_incl_tax = 'TRUE') THEN
            part_price_ := unit_price_incl_tax_;
         ELSE
            part_price_ := sale_unit_price_;
         END IF;
         Client_SYS.Add_to_Attr('PROVISIONAL_PRICE_DB', 'FALSE', attr_);
         Client_SYS.Add_To_Attr('PART_PRICE', part_price_, attr_);
         Client_SYS.Add_To_Attr('PRICE_SOURCE', price_source_, attr_);
         Client_SYS.Add_To_Attr('PRICE_SOURCE_ID', price_source_id_, attr_);
         Client_SYS.Add_To_Attr('PRICE_SOURCE_NET_PRICE_DB', net_price_fetched_, attr_);
         Client_SYS.Add_To_Attr('REBATE_BUILDER_DB', rebate_builder_db_, attr_);
         Client_SYS.Add_To_Attr('PART_LEVEL_DB', part_level_db_, attr_);
         Client_SYS.Add_To_Attr('PART_LEVEL_ID', part_level_id_, attr_);
         Client_SYS.Add_To_Attr('CUSTOMER_LEVEL_DB', customer_level_db_, attr_);
         Client_SYS.Add_To_Attr('CUSTOMER_LEVEL_ID', customer_level_id_, attr_);
         part_price_is_set_ := TRUE;
      ELSIF (supply_code_db_ NOT IN ('IPD', 'PD')) THEN
         Client_SYS.Add_To_Attr('SHIP_VIA_CODE', pkg_header_rec_.ship_via_code, attr_);
         Client_SYS.Add_To_Attr('CUST_CALENDAR_ID', pkg_header_rec_.cust_calendar_id, attr_);
         Client_SYS.Add_To_Attr('EXT_TRANSPORT_CALENDAR_ID', pkg_header_rec_.ext_transport_calendar_id, attr_);
         Client_SYS.Add_To_Attr('DEFAULT_ADDR_FLAG_DB', pkg_header_rec_.default_addr_flag, attr_);
         Client_SYS.Add_To_Attr('DELIVERY_LEADTIME', pkg_header_rec_.delivery_leadtime, attr_);
         Client_SYS.Add_To_Attr('ROUTE_ID', pkg_header_rec_.route_id, attr_);
         Client_SYS.Add_To_Attr('FORWARD_AGENT_ID', pkg_header_rec_.forward_agent_id, attr_);
         Client_SYS.Add_To_Attr('PICKING_LEADTIME', pkg_header_rec_.picking_leadtime, attr_);
         Client_SYS.Add_To_Attr('SHIPMENT_TYPE',    pkg_header_rec_.shipment_type, attr_);
         Client_SYS.Add_To_Attr('PACKING_INSTRUCTION_ID', pkg_header_rec_.packing_instruction_id, attr_);
      END IF;

      -- Calculate quantities.
      buy_qty_due_ := pkg_buy_qty_due_ * psrec_.qty_per_assembly;
      desired_qty_ := pkg_header_rec_.desired_qty * psrec_.qty_per_assembly;

      -- Calculate SALE_UNIT_PRICE and BASE_SALE_UNIT_PRICE.
      IF ((pkg_cost_ * pkg_revised_qty_due_) = 0) THEN
         sale_unit_price_          := 0;
         unit_price_incl_tax_      := 0;
         base_sale_unit_price_     := 0;
         base_unit_price_incl_tax_ := 0;
      ELSE
         -- Get unrounded line discount
         line_discount_amount_ := Cust_Order_Line_Discount_API.Get_Total_Line_Discount(pkg_header_rec_.order_no, pkg_header_rec_.line_no, pkg_header_rec_.rel_no, -1,
                                                                                          1, -- quantity
                                                                                          (sales_part_rec_.conv_factor / sales_part_rec_.inverted_conv_factor * cost_ * pkg_header_rec_.price_conv_factor) /(pkg_cost_ * sales_part_rec_.price_conv_factor));
         IF (header_rec_.use_price_incl_tax = 'TRUE') THEN
            unit_price_incl_tax_ := (sales_part_rec_.conv_factor / sales_part_rec_.inverted_conv_factor * cost_ * pkg_unit_price_incl_tax_ * pkg_header_rec_.price_conv_factor) /
                                     (pkg_cost_ * sales_part_rec_.price_conv_factor);
            IF (pkg_header_rec_.discount IS NOT NULL AND pkg_header_rec_.discount > 0) THEN
               -- Modified calculation logic of unit_price_incl_tax_
               unit_price_incl_tax_ := unit_price_incl_tax_ - line_discount_amount_;
            END IF;
         ELSE
            sale_unit_price_ := (sales_part_rec_.conv_factor / sales_part_rec_.inverted_conv_factor * cost_ * pkg_sale_unit_price_ * pkg_header_rec_.price_conv_factor) /
                                 (pkg_cost_ * sales_part_rec_.price_conv_factor);
            IF (pkg_header_rec_.discount IS NOT NULL AND pkg_header_rec_.discount > 0) THEN
               -- Modified calculation logic of sale_unit_price_
               sale_unit_price_ := sale_unit_price_ - line_discount_amount_;
            END IF;
         END IF;
         IF (Order_Supply_Type_API.Encode(pkg_header_rec_.demand_code) = 'IPD') THEN
            tax_liability_type_db_ := External_Cust_Order_Line_API.Get_Tax_Liability(pkg_header_rec_.order_no, 
                                                                                     pkg_header_rec_.line_no, 
                                                                                     pkg_header_rec_.rel_no);
         ELSE
            tax_liability_type_db_ := pkg_header_rec_.tax_liability_type;
         END IF;
         
         Tax_Handling_Order_Util_API.Get_Prices(base_sale_unit_price_,
                                                base_unit_price_incl_tax_,
                                                sale_unit_price_,
                                                unit_price_incl_tax_,
                                                multiple_tax_,
												            pkg_header_rec_.tax_code,
                                                pkg_header_rec_.tax_calc_structure_id,
                                                pkg_header_rec_.tax_class_id,
                                                pkg_header_rec_.order_no, 
                                                pkg_header_rec_.line_no, 
                                                pkg_header_rec_.rel_no, 
                                                -1,
                                                '*',
                                                Tax_Source_API.DB_CUSTOMER_ORDER_LINE,
                                                pkg_contract_,
                                                header_rec_.customer_no,
                                                pkg_header_rec_.ship_addr_no,
                                                pkg_header_rec_.planned_ship_date,
                                                header_rec_.supply_country,
                                                NVL(pkg_header_rec_.delivery_type, '*'),
                                                pkg_header_rec_.catalog_no,
                                                header_rec_.use_price_incl_tax,
                                                header_rec_.currency_code,
                                                pkg_header_rec_.currency_rate,
                                                'FALSE',                                                
                                                pkg_header_rec_.tax_liability,
                                                tax_liability_type_db_,
                                                delivery_country_db_ => NULL,
                                                ifs_curr_rounding_ => 16,
                                                tax_from_diff_source_ => 'FALSE',
                                                attr_ => NULL); 
      END IF;

      discount_ := 0;

      Client_SYS.Add_To_Attr('QTY_TO_SHIP', qty_to_ship_, attr_);
      Client_SYS.Add_To_Attr('BASE_SALE_UNIT_PRICE', base_sale_unit_price_, attr_);
      Client_SYS.Add_To_Attr('BASE_UNIT_PRICE_INCL_TAX', base_unit_price_incl_tax_, attr_);
      Client_SYS.Add_To_Attr('BUY_QTY_DUE', buy_qty_due_, attr_);
      Client_SYS.Add_To_Attr('DESIRED_QTY', desired_qty_, attr_);
      Client_SYS.Add_To_Attr('DISCOUNT', discount_, attr_);
      Client_SYS.Add_To_Attr('PART_NO', sales_part_rec_.part_no, attr_);
      Client_SYS.Add_To_Attr('PURCHASE_PART_NO', sales_part_rec_.purchase_part_no, attr_);
      Client_SYS.Add_To_Attr('PLANNED_DELIVERY_DATE', pkg_planned_delivery_date_, attr_);
      Client_SYS.Add_To_Attr('PROMISED_DELIVERY_DATE', pkg_planned_delivery_date_, attr_);
      Client_SYS.Add_To_Attr('QTY_ASSIGNED', qty_assigned_, attr_);
      Client_SYS.Add_To_Attr('QTY_ON_ORDER', qty_on_order_, attr_);
      Client_SYS.Add_To_Attr('REVISED_QTY_DUE', revised_qty_due_, attr_);
      Client_SYS.Add_To_Attr('SALES_UNIT_MEAS', sales_part_rec_.sales_unit_meas, attr_);
      Client_SYS.Add_To_Attr('SALE_UNIT_PRICE', sale_unit_price_, attr_);
      Client_SYS.Add_To_Attr('UNIT_PRICE_INCL_TAX', unit_price_incl_tax_, attr_);
      Client_SYS.Add_To_Attr('WANTED_DELIVERY_DATE', pkg_wanted_delivery_date_, attr_);
      Client_SYS.Add_To_Attr('TARGET_DATE', pkg_target_date_, attr_);
      Client_SYS.Add_To_Attr('CREATE_SM_OBJECT_OPTION_DB', sales_part_rec_.create_sm_object_option, attr_);
      Client_SYS.Add_To_Attr('CREATED_BY_SERVER','1',attr_);
      Client_SYS.Add_To_Attr('QTY_PER_ASSEMBLY', psrec_.qty_per_assembly, attr_);
      Client_SYS.Add_To_Attr('NEW_COMP_AFTER_DELIVERY', 'FALSE', attr_);

      IF NOT part_price_is_set_ THEN
         IF (header_rec_.use_price_incl_tax = 'TRUE') THEN
            Client_SYS.Add_To_Attr('PART_PRICE', unit_price_incl_tax_, attr_);
         ELSE
         Client_SYS.Add_To_Attr('PART_PRICE', sale_unit_price_, attr_);
         END IF;
         Client_SYS.Add_To_Attr('PRICE_SOURCE_DB', pkg_header_rec_.price_source, attr_);
         Client_SYS.Add_To_Attr('PRICE_SOURCE_ID', pkg_header_rec_.price_source_id, attr_);
         Client_SYS.Add_To_Attr('PART_LEVEL_DB', pkg_header_rec_.part_level, attr_);
         Client_SYS.Add_To_Attr('PART_LEVEL_ID', pkg_header_rec_.part_level_id, attr_);
         Client_SYS.Add_To_Attr('CUSTOMER_LEVEL_DB', pkg_header_rec_.customer_level, attr_);
         Client_SYS.Add_To_Attr('CUSTOMER_LEVEL_ID', pkg_header_rec_.customer_level_id, attr_);
      END IF;

      IF (dop_connection_ IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('DOP_CONNECTION', dop_connection_, attr_);
      END IF;
      IF NOT (Client_SYS.Item_Exist('REBATE_BUILDER_DB', attr_)) THEN
         Client_SYS.Add_To_Attr('REBATE_BUILDER_DB', pkg_header_rec_.rebate_builder, attr_);
      END IF;

      Client_SYS.Add_To_Attr('INSERT_PACKAGE_MODE_', insert_package_mode_, attr_);

      newrec_ := NULL;
      Unpack___(newrec_, indrec_, attr_);
      Check_Insert___(newrec_, indrec_, attr_);
      Insert___(objid_, objversion_, newrec_, attr_);
      -- Clearing all info generated for components.
      Client_SYS.Clear_Info;
   END LOOP;

   -- Client_SYS info is empty at this point. To be able to show the info message below in the client
   -- an Add_Info___ call is made when returning from this method.

   -- display an info message if there are components with invalid sales group setting.
   IF (header_rec_.check_sales_grp_deliv_conf = 'TRUE') THEN

      -- fetch package part's sales group setting
      pkg_deliv_conf_ := Sales_Group_API.Get_Delivery_Confirmation_Db(Sales_Part_API.Get_Catalog_Group(pkg_contract_, pkg_catalog_no_));
      Trace_SYS.Field('PKG SALES GROUP - delivery_confirmation', pkg_deliv_conf_);

      FOR psrec_ IN get_pkg_ingridients(pkg_contract_, pkg_catalog_no_) LOOP
         -- fetch component's sales group setting
         deliv_conf_ := Sales_Group_API.Get_Delivery_Confirmation_Db(Sales_Part_API.Get_Catalog_Group(pkg_contract_, psrec_.catalog_no));
         Trace_SYS.Field('COMP SALES GROUP - delivery_confirmation', deliv_conf_);

         IF (deliv_conf_ NOT IN (pkg_deliv_conf_, 'OPTIONAL')) THEN
            Trace_SYS.Message('Sales groups don''t match...');
            Client_SYS.Add_Info(lu_name_, 'SALESGRPDELIVCONF3: The Delivery Confirmation settings on the package part and its components'' sales groups don''t match. Please change the Sales Group Setting on the customer order or check the sales groups.');
            EXIT; -- only add info once
         END IF;
      END LOOP;
   END IF;
EXCEPTION
   WHEN zero_divide THEN
      Error_SYS.Record_General(lu_name_, 'WRONGCOST: The package is not permitted to have a standard cost of 0.');
END Insert_Package___;


PROCEDURE Update_Package___ (
   pkg_promised_delivery_date_ IN OUT NOCOPY DATE,
   pkg_planned_delivery_date_  IN OUT NOCOPY DATE,
   pkg_planned_ship_date_      IN OUT NOCOPY DATE,
   pkg_planned_due_date_       IN OUT NOCOPY DATE,
   pkg_rec_                    IN     CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   insert_package_mode_        IN     VARCHAR2,
   block_component_info_       IN     VARCHAR2,
   dop_replicate_msg_          IN     VARCHAR2 )
IS
   do_price_    BOOLEAN := FALSE;
   do_discount_ BOOLEAN := FALSE;
   do_planned_  BOOLEAN := FALSE;
   do_wanted_   BOOLEAN := FALSE;
   do_qty_      BOOLEAN := FALSE;
   do_promised_ BOOLEAN := FALSE;
   oldrec_      CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   do_target_   BOOLEAN := FALSE;
BEGIN
   oldrec_ := Get_Object_By_Keys___(pkg_rec_.order_no, pkg_rec_.line_no, pkg_rec_.rel_no, -1);

   IF ((oldrec_.buy_qty_due != pkg_rec_.buy_qty_due) OR
       (oldrec_.desired_qty != pkg_rec_.desired_qty)) THEN
      do_qty_     := TRUE;
      do_planned_ := TRUE;
   END IF;

   IF (oldrec_.discount != pkg_rec_.discount) THEN
      do_discount_ := TRUE;
      do_price_    := TRUE;
   END IF;

   IF ((oldrec_.base_sale_unit_price != pkg_rec_.base_sale_unit_price) OR
       (oldrec_.base_unit_price_incl_tax != pkg_rec_.base_unit_price_incl_tax) OR
       (oldrec_.sale_unit_price != pkg_rec_.sale_unit_price) OR
       (oldrec_.unit_price_incl_tax != pkg_rec_.unit_price_incl_tax)) THEN
      do_price_ := TRUE;
   END IF;

   IF ((oldrec_.planned_delivery_date != pkg_rec_.planned_delivery_date) OR
       (oldrec_.planned_due_date != pkg_planned_due_date_) OR
       (oldrec_.planned_ship_date != pkg_planned_ship_date_)) THEN
      do_planned_ := TRUE;
   END IF;

   IF (oldrec_.wanted_delivery_date != pkg_rec_.wanted_delivery_date) THEN
      do_wanted_ := TRUE;
   END IF;

   IF (oldrec_.target_date != pkg_rec_.target_date) THEN
      do_target_ := TRUE;
   END IF;

   IF (oldrec_.promised_delivery_date != pkg_rec_.promised_delivery_date) THEN
      do_promised_ := TRUE;
   END IF;

   Change_Package_Structure___(pkg_promised_delivery_date_, pkg_planned_delivery_date_, pkg_planned_ship_date_, pkg_planned_due_date_,
                               pkg_rec_, do_qty_, do_price_, do_discount_, do_planned_, do_wanted_, do_promised_, do_target_, insert_package_mode_, block_component_info_, dop_replicate_msg_);
END Update_Package___;


PROCEDURE Update_Package_Cost___ (
   pkg_cost_     IN OUT NOCOPY NUMBER,
   pkg_order_no_ IN     VARCHAR2,
   pkg_line_no_  IN     VARCHAR2,
   pkg_rel_no_   IN     VARCHAR2 )
IS
   revised_qty_due_ CUSTOMER_ORDER_LINE_TAB.revised_qty_due%TYPE;
   CURSOR get_package_cost IS
      SELECT NVL(sum(revised_qty_due / revised_qty_due_ * cost), 0)
      FROM  CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = pkg_order_no_
      AND   line_no = pkg_line_no_
      AND   rel_no = pkg_rel_no_
      AND   line_item_no > 0
      AND   rowstate != 'Cancelled';
BEGIN
   revised_qty_due_ := Get_Revised_Qty_Due(pkg_order_no_, pkg_line_no_, pkg_rel_no_, -1);
   OPEN  get_package_cost;
   FETCH get_package_cost INTO pkg_cost_;
   IF (get_package_cost%NOTFOUND) THEN
      pkg_cost_ := 0;
   END IF;
   CLOSE get_package_cost;
EXCEPTION
   WHEN zero_divide THEN
      Error_SYS.Record_General(lu_name_, 'WRONGCOST: The package is not permitted to have a standard cost of 0.');
END Update_Package_Cost___;


PROCEDURE Change_Package_Structure___ (
   pkg_promised_delivery_date_ IN OUT NOCOPY DATE,
   pkg_planned_delivery_date_  IN OUT NOCOPY DATE,
   pkg_planned_ship_date_      IN OUT NOCOPY DATE,
   pkg_planned_due_date_       IN OUT NOCOPY DATE,
   pkg_rec_                    IN     CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   do_qty_                     IN     BOOLEAN,
   do_price_                   IN     BOOLEAN,
   do_discount_                IN     BOOLEAN,
   do_planned_                 IN     BOOLEAN,
   do_wanted_                  IN     BOOLEAN,
   do_promised_                IN     BOOLEAN,
   do_target_                  IN     BOOLEAN,
   insert_package_mode_        IN     VARCHAR2,
   block_component_info_       IN     VARCHAR2,
   dop_replicate_msg_          IN     VARCHAR2 )
IS
   newrec_                    CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   old_pkg_rec_               Public_Rec;
   header_rec_                CUSTOMER_ORDER_API.Public_Rec;
   part_cat_rec_              Part_Catalog_API.Public_Rec;
   sales_part_rec_            Sales_Part_API.Public_Rec;
   max_planned_delivery_date_ DATE;
   min_planned_due_date_      DATE;
   old_pkg_delivery_date_     DATE;
   max_date_                  DATE := SYSDATE - 10000;
   min_date_                  DATE := SYSDATE + 10000;
   site_date_                 DATE;
   header_objstate_           CUSTOMER_ORDER_LINE_TAB.rowstate%TYPE;
   attr_                      VARCHAR2(2000);
   sales_unit_meas_           VARCHAR2(10);
   price_unit_meas_           VARCHAR2(10);
   price_conv_factor_         NUMBER;
   oldrec_                    CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   max_planned_ship_date_     DATE;
   external_deliv_ship_date_  DATE;
   backorder_option_          VARCHAR2(40);
   line_discount_amount_      NUMBER;
   promised_                  VARCHAR2(5) := Fnd_Boolean_Api.DB_FALSE;
   tax_liability_type_db_     VARCHAR2(20);
   multiple_tax_              VARCHAR2(20);
   alloc_assign_flag_db_      CUST_ORDER_TYPE_TAB.oe_alloc_assign_flag%TYPE;

   CURSOR get_package_structure IS
      SELECT rowid, activity_seq
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = pkg_rec_.order_no
      AND    line_no  = pkg_rec_.line_no
      AND    rel_no   = pkg_rec_.rel_no
      AND    line_item_no > 0
      AND    (rowstate != 'Cancelled' OR (rowstate = 'Cancelled' AND promised_ = Fnd_Boolean_Api.DB_TRUE))
      ORDER BY line_item_no;
BEGIN
   IF (do_promised_) THEN
      promised_ := Fnd_Boolean_Api.DB_TRUE;
   END IF;
   max_planned_delivery_date_ := max_date_;
   max_planned_ship_date_     := max_date_;
   external_deliv_ship_date_  := max_date_;
   min_planned_due_date_      := min_date_;
   old_pkg_delivery_date_     := pkg_planned_delivery_date_;

   site_date_       := TRUNC(Site_API.Get_Site_Date(pkg_rec_.contract));

   header_rec_      := CUSTOMER_ORDER_API.Get(pkg_rec_.order_no);
   header_objstate_ := header_rec_.rowstate;
   old_pkg_rec_     := Get(pkg_rec_.order_no, pkg_rec_.line_no, pkg_rec_.rel_no, -1);

   FOR comprec_ IN get_package_structure LOOP
      newrec_                       := Get_Object_By_Id___(comprec_.rowid);

      -- set header values on all components in case they have changed
      newrec_.addr_flag             := pkg_rec_.addr_flag;
      newrec_.ship_addr_no          := pkg_rec_.ship_addr_no;
      newrec_.contact               := pkg_rec_.contact;
      newrec_.district_code         := pkg_rec_.district_code;
      newrec_.region_code           := pkg_rec_.region_code;
      newrec_.staged_billing        := pkg_rec_.staged_billing;
      newrec_.tax_id_no             := pkg_rec_.tax_id_no;
      newrec_.tax_id_validated_date := pkg_rec_.tax_id_validated_date;
      newrec_.tax_code              := pkg_rec_.tax_code;
      newrec_.tax_class_id          := pkg_rec_.tax_class_id;
      newrec_.intrastat_exempt      := pkg_rec_.intrastat_exempt;
      newrec_.equipment_object_seq  := pkg_rec_.equipment_object_seq;
      newrec_.sup_sm_contract       := pkg_rec_.sup_sm_contract;
      newrec_.sup_sm_object         := pkg_rec_.sup_sm_object;

      IF (newrec_.supply_code NOT IN ('IPD', 'PD')) THEN
         newrec_.ship_via_code             := pkg_rec_.ship_via_code;
         newrec_.cust_calendar_id          := pkg_rec_.cust_calendar_id;
         newrec_.ext_transport_calendar_id := pkg_rec_.ext_transport_calendar_id;
         newrec_.delivery_leadtime         := pkg_rec_.delivery_leadtime;
         newrec_.route_id                  := pkg_rec_.route_id;
         newrec_.forward_agent_id          := pkg_rec_.forward_agent_id;
         newrec_.picking_leadtime          := pkg_rec_.picking_leadtime;
         newrec_.shipment_type             := pkg_rec_.shipment_type;
         newrec_.shipment_creation         := pkg_rec_.shipment_creation;
         newrec_.delivery_terms            := pkg_rec_.delivery_terms;
         newrec_.del_terms_location        := pkg_rec_.del_terms_location;
      END IF;
      
      -- Evaluating default info
      newrec_.default_addr_flag   := Check_Default_Addr_Flag___(newrec_, newrec_.order_no, newrec_.default_addr_flag);
      
      -- oldrec_ used in date calculation
      oldrec_           := newrec_;

      backorder_option_ := header_rec_.backorder_option;
      
      alloc_assign_flag_db_ := Cust_Order_Type_API.Get_Oe_Alloc_Assign_Flag_Db(header_rec_.order_id);
      
      IF do_qty_ THEN
         -- Recalculate quantities for package components
         newrec_.buy_qty_due      := (pkg_rec_.buy_qty_due * newrec_.buy_qty_due) / old_pkg_rec_.buy_qty_due;
         IF pkg_rec_.desired_qty = 0 THEN
            -- desired_qty of package header is 0
            newrec_.desired_qty := 0;
         ELSIF old_pkg_rec_.desired_qty = 0 THEN
            -- desired_qty of package header has been changed from 0 to another value. So, use ratio from buy_qty_due to calculate for component
            newrec_.desired_qty := pkg_rec_.desired_qty * (newrec_.buy_qty_due / pkg_rec_.buy_qty_due);
         ELSE
            newrec_.desired_qty := (pkg_rec_.desired_qty * newrec_.desired_qty) / old_pkg_rec_.desired_qty;
         END IF;
         newrec_.revised_qty_due  := (pkg_rec_.revised_qty_due * newrec_.revised_qty_due) / old_pkg_rec_.revised_qty_due;
         newrec_.qty_per_assembly := newrec_.buy_qty_due / pkg_rec_.buy_qty_due;

         IF (newrec_.rowstate IN ('Released', 'PartiallyDelivered')) AND (((newrec_.supply_code = 'NO') AND
            (backorder_option_ != 'INCOMPLETE PACKAGES NOT ALLOWED')) OR (newrec_.supply_code = 'SEO')) THEN
            IF (TRUNC(newrec_.planned_due_date) <= site_date_) OR
               (alloc_assign_flag_db_ = Cust_Ord_Reservation_Type_API.DB_PRIORITY_RESERVATION) THEN
                  newrec_.qty_to_ship := newrec_.revised_qty_due - newrec_.qty_shipped;
            END IF;
         END IF;
      END IF;

      IF do_wanted_ THEN
         newrec_.wanted_delivery_date := pkg_rec_.wanted_delivery_date;
      END IF;

      IF do_target_ THEN
         newrec_.target_date := pkg_rec_.target_date;
      END IF;

      IF do_planned_ THEN
         newrec_.promised_delivery_date := pkg_promised_delivery_date_;
         newrec_.planned_delivery_date  := pkg_planned_delivery_date_;

         IF (newrec_.revised_qty_due > newrec_.qty_shipped) OR (do_wanted_) THEN
            Calculate_Order_Line_Dates___(newrec_, oldrec_, comprec_.rowid);
         END IF;
         Add_Info___(insert_package_mode_);

         IF (newrec_.rowstate = 'Released') AND (((newrec_.supply_code = 'NO') AND
            (backorder_option_ != 'INCOMPLETE PACKAGES NOT ALLOWED')) OR (newrec_.supply_code = 'SEO')) THEN
            IF (TRUNC(newrec_.planned_due_date) <= site_date_) OR
                (alloc_assign_flag_db_ = Cust_Ord_Reservation_Type_API.DB_PRIORITY_RESERVATION) THEN
               newrec_.qty_to_ship := newrec_.revised_qty_due;
               Customer_Order_Line_Hist_API.New(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no,
                                                Language_SYS.Translate_Constant(lu_name_, 'CANBESHIPPED: The line can now be shipped'));
            END IF;
         END IF;
      END IF;

      IF (do_promised_) THEN
         newrec_.promised_delivery_date := pkg_rec_.promised_delivery_date;
      END IF;

      IF do_discount_ THEN
         newrec_.discount := 0;
      END IF;

      sales_part_rec_  := Sales_Part_API.Get(newrec_.contract, newrec_.catalog_no);
      sales_unit_meas_ := sales_part_rec_.sales_unit_meas;
      price_unit_meas_ := sales_part_rec_.price_unit_meas;
      price_conv_factor_ := sales_part_rec_.price_conv_factor;

      IF (pkg_rec_.catalog_type = 'PKG' AND pkg_rec_.price_freeze != 'FROZEN') THEN
         IF (newrec_.price_unit_meas != price_unit_meas_) THEN
            Client_SYS.Add_Info(lu_name_, 'PRICEUMCHG: Price unit of Measure has changed from :P1 to :P2 for component part :P3.',newrec_.price_unit_meas,price_unit_meas_,newrec_.catalog_no);
            newrec_.price_unit_meas := price_unit_meas_;
         END IF;
         IF (newrec_.sales_unit_meas != sales_unit_meas_) THEN
            Client_SYS.Add_Info(lu_name_, 'SALESUMCHG: Sales unit of Measure has changed from :P1 to :P2 for component part :P3.',newrec_.sales_unit_meas,sales_unit_meas_,newrec_.catalog_no);
            newrec_.sales_unit_meas := sales_unit_meas_;
         END IF;
         IF (newrec_.price_conv_factor != price_conv_factor_) THEN
            part_cat_rec_ := Part_Catalog_API.Get(newrec_.part_no);
            IF (part_cat_rec_.catch_unit_enabled = 'FALSE' ) THEN
               Client_SYS.Add_Info(lu_name_, 'PRICECONVCHG: Price Conversion factor has changed from :P1 to :P2 for component part :P3.',newrec_.price_conv_factor,price_conv_factor_,newrec_.catalog_no);
               newrec_.price_conv_factor := price_conv_factor_;
            END IF;
         END IF;
      END IF;

      IF (do_price_ AND (newrec_.price_source != 'MANUAL')) THEN
         IF (pkg_rec_.cost = 0) THEN
            newrec_.sale_unit_price          := 0;
            newrec_.unit_price_incl_tax      := 0;
            newrec_.base_sale_unit_price     := 0;
            newrec_.base_unit_price_incl_tax := 0;
         ELSE
            line_discount_amount_ := Cust_Order_Line_Discount_API.Get_Total_Line_Discount(pkg_rec_.order_no, pkg_rec_.line_no, pkg_rec_.rel_no, -1,
                                                                                          1, -- quantity
                                                                                          (newrec_.conv_factor / newrec_.inverted_conv_factor * newrec_.cost * pkg_rec_.price_conv_factor) /(pkg_rec_.cost * newrec_.price_conv_factor));
            IF (header_rec_.use_price_incl_tax = 'TRUE') THEN
               newrec_.unit_price_incl_tax := (newrec_.conv_factor / newrec_.inverted_conv_factor * newrec_.cost * pkg_rec_.unit_price_incl_tax * pkg_rec_.price_conv_factor) /
                                              (pkg_rec_.cost * newrec_.price_conv_factor);

               IF (pkg_rec_.discount IS NOT NULL AND pkg_rec_.discount != 0) THEN
                  IF (pkg_rec_.discount = 100) THEN
                     newrec_.unit_price_incl_tax := 0;
                  ELSE
                     -- Modified calculation of unit_price_incl_tax
                     newrec_.unit_price_incl_tax := newrec_.unit_price_incl_tax - line_discount_amount_;
                  END IF;
               END IF;
            ELSE
               newrec_.sale_unit_price := (newrec_.conv_factor / newrec_.inverted_conv_factor * newrec_.cost * pkg_rec_.sale_unit_price * pkg_rec_.price_conv_factor) /
                      (pkg_rec_.cost * newrec_.price_conv_factor);

               IF (pkg_rec_.discount IS NOT NULL AND pkg_rec_.discount != 0) THEN
                  IF (pkg_rec_.discount = 100) THEN
                     newrec_.sale_unit_price := 0;
                  ELSE
                     -- Modified calculation of sale_unit_price
                     newrec_.sale_unit_price := newrec_.sale_unit_price - line_discount_amount_;
                  END IF;
               END IF;
            END IF;
            
            IF (Order_Supply_Type_API.Encode(pkg_rec_.demand_code) = 'IPD') THEN
               tax_liability_type_db_ := External_Cust_Order_Line_API.Get_Tax_Liability(pkg_rec_.order_no, 
                                                                                        pkg_rec_.line_no, 
                                                                                        pkg_rec_.rel_no);
            ELSE
               tax_liability_type_db_ := pkg_rec_.tax_liability_type;
            END IF;
                                    
            Tax_Handling_Order_Util_API.Get_Prices(newrec_.base_sale_unit_price,
                                                   newrec_.base_unit_price_incl_tax,
                                                   newrec_.sale_unit_price,
                                                   newrec_.unit_price_incl_tax,
                                                   multiple_tax_,
												               old_pkg_rec_.tax_code,
                                                   old_pkg_rec_.tax_calc_structure_id,
                                                   old_pkg_rec_.tax_class_id,
                                                   pkg_rec_.order_no, 
                                                   pkg_rec_.line_no, 
                                                   pkg_rec_.rel_no, 
                                                   -1,
                                                   '*',
                                                   Tax_Source_API.DB_CUSTOMER_ORDER_LINE,
                                                   old_pkg_rec_.contract,
                                                   header_rec_.customer_no,
                                                   old_pkg_rec_.ship_addr_no,
                                                   old_pkg_rec_.planned_ship_date,
                                                   header_rec_.supply_country,
                                                   NVL(old_pkg_rec_.delivery_type, '*'),
                                                   old_pkg_rec_.catalog_no,
                                                   header_rec_.use_price_incl_tax,
                                                   header_rec_.currency_code,
                                                   old_pkg_rec_.currency_rate,
                                                   'FALSE',                                                   
                                                   old_pkg_rec_.tax_liability,
                                                   tax_liability_type_db_,
                                                   delivery_country_db_ => NULL,
                                                   ifs_curr_rounding_ => 16,
                                                   tax_from_diff_source_ => 'FALSE',
                                                   attr_ => NULL);
      
         END IF;
      END IF;

      IF (do_qty_ OR do_wanted_) THEN
         -- only create priority / instant reservations when its not a CTP planned/reserved line
         IF (newrec_.ctp_planned = 'N') THEN
            IF (Reserve_Customer_Order_API.Is_Supply_Chain_Reservation(pkg_rec_.order_no, pkg_rec_.line_no, pkg_rec_.rel_no,
                                                                       pkg_rec_.line_item_no, NULL, 'INSTANT') = 1) THEN
               -- instant supply chain reservation
               Reserve_Customer_Order_API.Create_Instant_Reservation__(pkg_rec_.order_no,  pkg_rec_.line_no, pkg_rec_.rel_no, newrec_.line_item_no,
                                                                    NULL, NVL(newrec_.part_no, newrec_.purchase_part_no), newrec_.revised_qty_due,
                                                                    newrec_.qty_shipped, comprec_.rowid, newrec_.vendor_no);
            ELSE
               Reserve_Customer_Order_API.Create_Priority_Reservation__(newrec_.qty_assigned,
                  newrec_.contract, newrec_.part_no, pkg_rec_.order_no, pkg_rec_.line_no, pkg_rec_.rel_no, newrec_.line_item_no,
                  newrec_.revised_qty_due, newrec_.qty_shipped, newrec_.supply_code, comprec_.rowid);
            END IF;
         END IF;
      END IF;

      -- set date "bounds"
      max_planned_delivery_date_ := GREATEST(max_planned_delivery_date_, newrec_.planned_delivery_date);
      IF (newrec_.supply_code IN ('IPD', 'PD')) THEN
         external_deliv_ship_date_     := GREATEST(external_deliv_ship_date_, newrec_.planned_ship_date);
      ELSE
         max_planned_ship_date_ := GREATEST(max_planned_ship_date_, newrec_.planned_ship_date);
      END IF;
      min_planned_due_date_      := LEAST(min_planned_due_date_, newrec_.planned_due_date);

      -- Modify DOP structure for component part with Supply_Type = 'Dop'.
      IF (newrec_.supply_code = 'DOP') AND (dop_replicate_msg_ IS NOT NULL) THEN
         Connect_Customer_Order_API.Modify_Dop(newrec_.qty_on_order,
                                               newrec_.order_no,
                                               newrec_.line_no,
                                               newrec_.rel_no,
                                               newrec_.line_item_no,
                                               newrec_.revised_qty_due,
                                               newrec_.planned_due_date,
                                               dop_replicate_msg_,
                                               'TRUE');
      END IF;

      newrec_.rowversion := sysdate;
      IF do_planned_ THEN
         IF ((trunc(pkg_planned_ship_date_)) = (trunc(newrec_.planned_ship_date))) AND (pkg_planned_ship_date_ != newrec_.planned_ship_date) THEN
            newrec_.planned_ship_date := pkg_planned_ship_date_;
         END IF;
      END IF;

      Update_Line___(comprec_.rowid, newrec_);

      IF (do_qty_ AND comprec_.activity_seq IS NOT NULL) THEN
         Calculate_Cost_And_Progress(newrec_.order_no,
                                     newrec_.line_no,
                                     newrec_.rel_no,
                                     newrec_.line_item_no);
      END IF;
   END LOOP;

   FOR comprec_ IN get_package_structure LOOP
      newrec_ := Get_Object_By_Id___(comprec_.rowid);
      oldrec_ := newrec_;

      IF (header_objstate_ = 'Planned') THEN
         IF (do_promised_ AND NOT do_planned_) THEN
            newrec_.promised_delivery_date := pkg_rec_.promised_delivery_date;
            pkg_promised_delivery_date_    := pkg_rec_.promised_delivery_date;
         ELSE
            newrec_.promised_delivery_date := max_planned_delivery_date_;
            pkg_promised_delivery_date_    := max_planned_delivery_date_;
         END IF;
      END IF;

      newrec_.rowversion := sysdate;

      IF (newrec_.promised_delivery_date != oldrec_.promised_delivery_date) THEN
         Update_Line___(comprec_.rowid, newrec_);
      END IF;

      IF do_qty_ THEN
         Finite_State_Machine___(newrec_, NULL, attr_);
      END IF;
   END LOOP;
   -- do not use components of newrec_ after this loop!

   -- Remove all component infos that have been generated
   IF (block_component_info_ = 'TRUE') THEN
      Client_Sys.Clear_Info;
   END IF;

   -- Fix PLANNED_DELIVERY_DATE and PLANNED_DUE_DATE for Package.
   IF (pkg_planned_delivery_date_ < max_planned_delivery_date_) THEN
      pkg_planned_delivery_date_ := max_planned_delivery_date_;

      min_planned_due_date_      := min_date_;

      FOR comprec_ IN get_package_structure LOOP
         newrec_ := Get_Object_By_Id___(comprec_.rowid);
         IF (newrec_.planned_delivery_date < pkg_planned_delivery_date_) THEN
            oldrec_                        := newrec_;
            newrec_.promised_delivery_date := pkg_promised_delivery_date_;
            newrec_.planned_delivery_date  := pkg_planned_delivery_date_;
            IF (newrec_.revised_qty_due > newrec_.qty_shipped) THEN
               Calculate_Order_Line_Dates___(newrec_, oldrec_, comprec_.rowid);
            END IF;

            -- Modify DOP structure for component part with Supply_Type = 'Dop'.
            IF (newrec_.supply_code = 'DOP') AND (dop_replicate_msg_ IS NOT NULL) THEN
               Connect_Customer_Order_API.Modify_Dop(newrec_.qty_on_order,
                                                     newrec_.order_no,
                                                     newrec_.line_no,
                                                     newrec_.rel_no,
                                                     newrec_.line_item_no,
                                                     newrec_.revised_qty_due,
                                                     newrec_.planned_due_date,
                                                     dop_replicate_msg_,
                                                     'TRUE');
            END IF;

            Update_Line___(comprec_.rowid, newrec_);
         END IF;
      END LOOP;
   END IF;
         min_planned_due_date_ := LEAST(min_planned_due_date_, newrec_.planned_due_date);

   IF (pkg_planned_delivery_date_ != old_pkg_delivery_date_) THEN
      Client_SYS.Add_Info(lu_name_, 'TARGETDATECHG: The planned delivery date has been changed from :P1 to :P2.',
         to_char(old_pkg_delivery_date_, 'YYYY-MM-DD HH24.MI'),
         to_char(pkg_planned_delivery_date_, 'YYYY-MM-DD HH24.MI'));
   END IF;

   IF (max_planned_ship_date_ != max_date_) THEN
      pkg_planned_ship_date_ := max_planned_ship_date_;
      IF ((trunc(pkg_planned_ship_date_)) = (trunc(newrec_.planned_ship_date))) AND (pkg_planned_ship_date_ != newrec_.planned_ship_date) THEN
         pkg_planned_ship_date_ := newrec_.planned_ship_date;
      END IF;
   ELSIF (external_deliv_ship_date_ != max_date_) THEN
      pkg_planned_ship_date_ := external_deliv_ship_date_;
   END IF;

   IF (min_planned_due_date_ != min_date_) THEN
      pkg_planned_due_date_ := min_planned_due_date_;
   END IF;
EXCEPTION
   WHEN zero_divide THEN
      Error_Sys.Record_General(lu_name_, 'WRONGCOST: The package is not permitted to have a standard cost of 0.');
END Change_Package_Structure___;


PROCEDURE Check_Active_Part___ (
   contract_ IN VARCHAR2,
   part_no_  IN VARCHAR2 )
IS
BEGIN
   IF (part_no_ IS NOT NULL) THEN
      IF (Inventory_Part_Status_Par_API.Get_Demand_Flag_Db(Inventory_Part_API.Get_Part_Status(contract_, part_no_)) = 'N') THEN
         Error_SYS.Record_General(lu_name_, 'DMD_NOT_ALLOW: The inventory part :P1 has a status that does not allow new demands.', part_no_);
      END IF;
   END IF;
END Check_Active_Part___;


PROCEDURE Get_Line_Defaults___ (
   attr_                     IN OUT NOCOPY VARCHAR2,
   catalog_no_               IN OUT NOCOPY VARCHAR2,
   order_no_                 IN     VARCHAR2,
   part_replacement_allowed_ IN     NUMBER )
IS
   buy_qty_due_                     NUMBER;
   currency_rate_                   NUMBER;
   sale_unit_price_                 NUMBER;
   unit_price_incl_tax_             NUMBER;
   base_sale_unit_price_            NUMBER;
   base_unit_price_incl_tax_        NUMBER;
   discount_                        NUMBER;
   supply_code_                     CUSTOMER_ORDER_LINE_TAB.supply_code%TYPE;
   supply_code_client_              VARCHAR2(200);
   price_list_no_                   CUSTOMER_ORDER_LINE_TAB.price_list_no%TYPE;
   vendor_no_                       CUSTOMER_ORDER_LINE_TAB.vendor_no%TYPE;
   catalog_desc_                    CUSTOMER_ORDER_LINE_TAB.catalog_desc%TYPE;
   sales_part_desc_                 CUSTOMER_ORDER_LINE_TAB.catalog_desc%TYPE;
   cost_                            NUMBER;
   consignment_stock_               CUSTOMER_ORDER_LINE_TAB.consignment_stock%TYPE;
   dop_connection_                  VARCHAR2(200) := NULL;
   header_rec_                      CUSTOMER_ORDER_API.Public_Rec;
   sales_part_rec_                  Sales_Part_API.Public_Rec;
   inv_part_rec_                    Inventory_Part_API.Public_Rec;
   org_catalog_no_                  CUSTOMER_ORDER_LINE_TAB.catalog_no%TYPE;
   component_part_no_               CUSTOMER_ORDER_LINE_TAB.catalog_no%TYPE;
   catalog_type_                    CUSTOMER_ORDER_LINE_TAB.catalog_type%TYPE;
   price_source_                    VARCHAR2(200);
   effectivity_date_                DATE := NULL;
   price_source_id_                 VARCHAR2(25);
   customer_part_no_                CUSTOMER_ORDER_LINE_TAB.customer_part_no%TYPE;
   receiving_advice_type_           CUSTOMER_ORDER_LINE.receiving_advice_type%TYPE;
   cross_rec_                       Sales_Part_Cross_Reference_API.Public_Rec;
   customer_part_conv_factor_       NUMBER;
   customer_part_unit_meas_         VARCHAR2(50);
   supply_site_reserve_type_        VARCHAR2(20);
   supply_site_                     VARCHAR2(5);   
   condition_code_                  CUSTOMER_ORDER_LINE_TAB.condition_code%TYPE;
   demand_code_                     VARCHAR2(200);
   value_                           VARCHAR2(200) := NULL;
   sm_object_option_                VARCHAR2(20);
   self_billing_db_                 VARCHAR2(20);
   created_by_server_               BOOLEAN;
   provisional_price_db_            VARCHAR2(20) := 'FALSE';
   charged_item_                    VARCHAR2(20);
   revised_qty_due_                 NUMBER;
   configuration_id_                CUSTOMER_ORDER_LINE_TAB.configuration_id%TYPE;
   net_price_fetched_               VARCHAR2(20);
   rebate_builder_db_               VARCHAR2(20);
   input_unit_meas_group_id_        VARCHAR2(30);
   default_input_uom_               VARCHAR2(30);
   uom_rec_                         Input_Unit_Meas_API.Public_Rec;
   part_level_db_                   VARCHAR2(30);
   part_level_id_                   VARCHAR2(200);
   customer_level_db_               VARCHAR2(30);
   customer_level_id_               VARCHAR2(200);
   tax_code_                        CUSTOMER_ORDER_LINE_TAB.tax_code%TYPE;
   tax_class_                       CUSTOMER_ORDER_LINE_TAB.tax_class_id%TYPE;
   line_item_no_                    CUSTOMER_ORDER_LINE_TAB.line_item_no%TYPE;
   activity_seq_                    CUSTOMER_ORDER_LINE_TAB.activity_seq%TYPE;
   demand_order_ref_                CUSTOMER_ORDER_LINE_TAB.demand_order_ref1%TYPE;
   rental_db_                       CUSTOMER_ORDER_LINE_TAB.rental%TYPE;
   part_ownership_db_               CUSTOMER_ORDER_LINE_TAB.part_ownership%TYPE;
   sales_price_type_db_             VARCHAR2(20);
   usage_                           VARCHAR2(20);
   ship_addr_no_                    VARCHAR2(50);
   dummy_rec_                       CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   rental_chargeable_days_          NUMBER;
   cust_part_inver_conv_fact_       NUMBER;
   free_of_charge_db_               VARCHAR2(20);   
   suggested_exists_                NUMBER;
   addr_flag_                       VARCHAR2(5);
   deliver_to_customer_no_          CUSTOMER_ORDER_LINE_TAB.deliver_to_customer_no%TYPE;
   packing_instruction_id_          VARCHAR2(50);
   header_contract_conected_comp_   SITE_TAB.company%TYPE;
   sales_unit_meas_                 VARCHAR2(10);
   configured_db_                   VARCHAR2(20);
   purchase_part_no_                VARCHAR2(25);

   
   
   CURSOR get_pkg_components(contract_ VARCHAR2, parent_part_ VARCHAR2) IS
      SELECT catalog_no, line_item_no, qty_per_assembly
        FROM sales_part_package_pub
       WHERE contract = contract_
         AND parent_part = parent_part_
    ORDER BY line_item_no;
BEGIN
   header_rec_ := CUSTOMER_ORDER_API.Get(order_no_);
   header_contract_conected_comp_ := Site_API.Get_Company(header_rec_.contract);
   -- Fetch already entered defaults from the attribute-string.
   buy_qty_due_       := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('BUY_QTY_DUE', attr_));
   effectivity_date_  := Client_SYS.Attr_Value_To_Date(Client_SYS.Get_Item_Value('PRICE_EFFECTIVITY_DATE', attr_));
   vendor_no_         := Client_SYS.Get_Item_Value('VENDOR_NO', attr_);
   ship_addr_no_      := Client_SYS.Get_Item_Value('SHIP_ADDR_NO', attr_);
   created_by_server_ := (NVL(Client_SYS.Get_Item_Value('CREATED_BY_SERVER', attr_), '0') = '1');

   IF (Fnd_Session_API.Is_Odp_Session) THEN
      addr_flag_               := Client_SYS.Get_Item_Value('ADDR_FLAG', attr_);
      deliver_to_customer_no_  := Client_SYS.Get_Item_Value('DELIVER_TO_CUSTOMER_NO', attr_);
   END IF;

   demand_code_ := Client_SYS.Get_Item_Value('DEMAND_CODE_DB', attr_);
   IF demand_code_ IS NULL THEN
      demand_code_ := Client_SYS.Get_Item_Value('DEMAND_CODE', attr_);
      IF demand_code_ IS NOT NULL THEN
         demand_code_ := Order_Supply_Type_API.Encode(demand_code_);
      END IF;
   END IF;

   rental_db_ := NVL(Client_SYS.Get_Item_Value('RENTAL_DB', attr_), Fnd_Boolean_API.DB_FALSE);
   IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
      usage_               := Sales_Type_API.DB_SALES_ONLY;
      sales_price_type_db_ := Sales_Price_Type_API.DB_SALES_PRICES;
   ELSE
      usage_               := Sales_Type_API.DB_RENTAL_ONLY;
      sales_price_type_db_ := Sales_Price_Type_API.DB_RENTAL_PRICES;
      rental_chargeable_days_ := Get_Latest_Rent_Charge_Days___(attr_, dummy_rec_);
   END IF;
   -- Check if it's a valid and active sales part.
   Sales_Part_API.Exist(header_rec_.contract, catalog_no_, usage_);
   catalog_type_  := Sales_Part_API.Get_Catalog_Type_Db(header_rec_.contract, catalog_no_);
   
   IF NVL(part_replacement_allowed_, 1) = 1 THEN
      Handle_Replacement_Part___(catalog_no_,
                                 org_catalog_no_,
                                 header_rec_.contract,
                                 TRUE );
                                 
      IF (catalog_type_ = 'PKG') THEN
        FOR pcrec_ IN get_pkg_components(header_rec_.contract, catalog_no_) LOOP
           component_part_no_ := pcrec_.catalog_no;
           Handle_Replacement_Part___(component_part_no_,
                                      org_catalog_no_,
                                      header_rec_.contract,
                                      TRUE );
           org_catalog_no_    := NULL;
           component_part_no_ := NULL;
        END LOOP;
     END IF;                                
   END IF;


   sales_part_rec_  := Sales_Part_API.Get(header_rec_.contract, catalog_no_);
   
   -- fetch catalog description from the cross reference
   customer_part_no_ := Sales_Part_Cross_Reference_API.Get_Customer_Part_No(header_rec_.customer_no, header_rec_.contract, catalog_no_);
   IF (customer_part_no_ IS NOT NULL) THEN
      cross_rec_                 := Sales_Part_Cross_Reference_API.Get(header_rec_.customer_no, header_rec_.contract, customer_part_no_);
      customer_part_conv_factor_ := greatest(NVL(cross_rec_.conv_factor, 1), 0);
      cust_part_inver_conv_fact_ := greatest(NVL(cross_rec_.inverted_conv_factor, 1), 0);
      customer_part_unit_meas_   := NVL(cross_rec_.customer_unit_meas, sales_part_rec_.sales_unit_meas);
   ELSE
      customer_part_conv_factor_ := NULL;
      customer_part_unit_meas_   := NULL;
      cust_part_inver_conv_fact_ := NULL;
   END IF;

   -- cross_rec_ may be NULL - But that does not generate any errors
   IF (cross_rec_.receiving_advice_type != 'USE_CUSTOMER_DEFAULT') THEN
      receiving_advice_type_ := Receiving_Advice_Type_API.Decode(cross_rec_.receiving_advice_type);
   ELSE
      receiving_advice_type_ := Cust_Ord_Customer_API.Get_Receiving_Advice_Type(header_rec_.customer_no);
   END IF;
   IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
      self_billing_db_ := NVL(Sales_Part_Cross_Reference_API.Get_Self_Billing_Db(header_rec_.customer_no, header_rec_.contract, customer_part_no_), 'NOT SELF BILLING');
   ELSE
      self_billing_db_ := Self_Billing_Type_API.DB_NOT_SELF_BILLING;
   END IF;
   
   condition_code_ := NULL;
   IF (sales_part_rec_.part_no IS NOT NULL) THEN
      IF (Part_Catalog_API.Get_Condition_Code_Usage_Db(sales_part_rec_.part_no) = 'ALLOW_COND_CODE') THEN
         condition_code_ := Client_SYS.Get_Item_Value('CONDITION_CODE', attr_);         
      END IF;
   END IF;
   
   supply_code_client_ := Client_SYS.Get_Item_Value('SUPPLY_CODE', attr_);
   supply_code_        := Client_SYS.Get_Item_Value('SUPPLY_CODE_DB', attr_);
   
   sales_unit_meas_ := sales_part_rec_.sales_unit_meas;
   purchase_part_no_ := sales_part_rec_.purchase_part_no;
   configured_db_ := Part_Catalog_API.Get_Configurable_Db(nvl(sales_part_rec_.part_no, catalog_no_));
   
   Customer_Order_Line_API.Validate_Cust_Ord_Lin_Defaults( catalog_no_, catalog_desc_, supply_code_, vendor_no_,
                                       supply_site_, condition_code_, supply_code_client_, header_rec_.contract, header_rec_.language_code,
                                       header_rec_.customer_no, demand_code_, purchase_part_no_, configured_db_, sales_part_rec_.part_no, 
                                       sales_part_rec_.sourcing_option, created_by_server_, rental_db_);

   demand_order_ref_ := Client_SYS.Get_Item_Value('DEMAND_ORDER_REF1', attr_);

   IF NOT (Is_External_Service_Order___(demand_code_, demand_order_ref_) = 'TRUE') THEN
      -- Check if it's a activ inventory part.
      Check_Active_Part___(header_rec_.contract, sales_part_rec_.part_no);
   END IF;

   -- Logic for Consignment stock
   consignment_stock_ := NVL(Consignment_Stock_API.Encode(Customer_Consignment_Stock_API.Get_Consignment_Stock(header_rec_.contract, catalog_no_,
                             header_rec_.customer_no, header_rec_.ship_addr_no)), 'NO CONSIGNMENT STOCK');

   line_item_no_       := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('LINE_ITEM_NO', attr_));
   activity_seq_       := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('ACTIVITY_SEQ', attr_));
   IF (line_item_no_ > 0 AND activity_seq_ > 0 AND supply_code_ NOT IN ('PD','IPD', 'SO', 'PT', 'ND', 'IPT', 'DOP','SEO') ) THEN
      IF (catalog_type_ ='INV') THEN
         supply_code_ := 'PI';
      ELSIF (catalog_type_ ='NON') THEN
         supply_code_ := 'PRJ';
      END IF;
   END IF;
   
  value_ := Client_SYS.Get_Item_Value('CHARGED_ITEM_DB', attr_);
  IF (value_ IS NOT NULL) THEN
     charged_item_ := value_;
  END IF;
  value_ := Client_SYS.Get_Item_Value('CHARGED_ITEM', attr_);
  IF (value_ IS NOT NULL) THEN
     charged_item_ := Charged_Item_API.Encode(value_);
  END IF;

  revised_qty_due_ := buy_qty_due_ * sales_part_rec_.conv_factor / sales_part_rec_.inverted_conv_factor;
  -- Logic for Cost
   IF (sales_part_rec_.part_no IS NULL) THEN
      cost_ := sales_part_rec_.cost;
   ELSE
      configuration_id_ := NVL(Client_SYS.Get_Item_Value('CONFIGURATION_ID', attr_),'*');

      IF (revised_qty_due_ IS NOT NULL) THEN
         cost_ := Sales_Cost_Util_API.Get_Cost_Incl_Sales_Overhead(header_rec_.contract,
                                                                   sales_part_rec_.part_no,
                                                                   configuration_id_,
                                                                   condition_code_,
                                                                   revised_qty_due_,
                                                                   charged_item_,
                                                                   supply_code_,
                                                                   header_rec_.customer_no,
                                                                   'COMPANY OWNED');
      END IF;
   END IF;

   inv_part_rec_ := Inventory_Part_API.Get(header_rec_.contract, sales_part_rec_.part_no);
   -- Only fetch dop_connection when supply code = 'DOP'
   IF (supply_code_ = 'DOP') THEN
      dop_connection_ := Dop_Connection_API.Decode(inv_part_rec_.dop_connection); 
   END IF;

   IF (supply_code_ IN ('IPT', 'IPD')) THEN

      IF (Inventory_Part_API.Part_Exist(supply_site_, nvl(sales_part_rec_.part_no, purchase_part_no_)) = 1) THEN

         -- check if a security connection exists between the CO/PO Site (Demand site) and the Supply Site
         IF (Site_To_Site_Reserve_Setup_API.Connection_Allowed(supply_site_, header_rec_.contract) = 1) THEN
            supply_site_reserve_type_ := Site_To_Site_Reserve_Setup_API.Get_Supply_Site_Reserve_Db(supply_site_, header_rec_.contract);
         END IF;
      END IF;
      IF (supply_site_ IS NOT NULL AND rental_db_ = Fnd_Boolean_API.DB_TRUE) THEN
         IF (Site_API.Get_Company(supply_site_) = header_contract_conected_comp_) THEN
            part_ownership_db_ := Part_Ownership_API.DB_COMPANY_RENTAL_ASSET;
         ELSE
            part_ownership_db_ := Part_Ownership_API.DB_SUPPLIER_RENTED;
         END IF;
      END IF;
   END IF;
   IF (supply_code_ = 'PT' AND rental_db_ = Fnd_Boolean_API.DB_TRUE) THEN
      part_ownership_db_ := Part_Ownership_API.DB_SUPPLIER_RENTED;
   END IF;
   -- if supply_site_reserve_type_ still is NULL set it to Not Allowed
   IF (supply_site_reserve_type_ IS NULL) THEN
      supply_site_reserve_type_ := 'NOTALLOWED';
   END IF;

   IF demand_code_ = 'WO' THEN
      value_ := Client_SYS.Get_Item_Value('PRICE_LIST_NO', attr_);
   END IF;

   IF value_ IS NOT NULL THEN
      price_list_no_ := value_;
   ELSE
      -- Find default price list.
      Sales_Price_List_API.Get_Valid_Price_List(customer_level_db_,        customer_level_id_,  price_list_no_,
                                                header_rec_.contract,      catalog_no_,         header_rec_.customer_no,
                                                header_rec_.currency_code, effectivity_date_,   NULL ,
                                                sales_price_type_db_);
   END IF;

   -- For CO lines created from WO (with or without connected to service contract), CRO and Service contract will have price source set to Service Price
   -- The discount is set to zero, but if discounts are sent in from WO or SEC they will be applied later in the code.
   IF (supply_code_ = 'SEO') THEN
      discount_        := 0;
      price_source_    := Pricing_Source_API.Decode('SERVICEPRICE');
      price_source_id_ := NULL;
      
      IF (demand_code_ = 'FSM' AND  base_sale_unit_price_ IS NULL) THEN
         Customer_Order_Pricing_API.Get_Base_Price_In_Currency( base_sale_unit_price_,
                                                                currency_rate_,
                                                                NVL(header_rec_.customer_no_pay, header_rec_.customer_no),
                                                                header_rec_.contract,
                                                                header_rec_.currency_code,
                                                                sale_unit_price_,
                                                                NVL(header_rec_.currency_rate_type, Currency_Type_API.Get_Default_Type(header_contract_conected_comp_, 'CUSTOMER')));
      END IF;   
   ELSIF (buy_qty_due_ IS NOT NULL) THEN
      -- Find prices, currency and discount.
      Customer_Order_Pricing_API.Get_Order_Line_Price_Info(sale_unit_price_,      unit_price_incl_tax_,  base_sale_unit_price_, base_unit_price_incl_tax_,
                                                           currency_rate_,        discount_,             price_source_,         price_source_id_,
                                                           provisional_price_db_, net_price_fetched_,    rebate_builder_db_,    part_level_db_,
                                                           part_level_id_,        customer_level_db_,    customer_level_id_,    order_no_,
                                                           catalog_no_,           buy_qty_due_,          price_list_no_,        effectivity_date_,
                                                           condition_code_,       header_rec_.use_price_incl_tax,               rental_chargeable_days_);
   END IF;

   tax_code_  := Client_SYS.Get_Item_Value('TAX_CODE', attr_);
   tax_class_ := Client_SYS.Get_Item_Value('TAX_CLASS_ID', attr_);
   free_of_charge_db_ := Client_SYS.Get_Item_Value('FREE_OF_CHARGE_DB', attr_);
   -- Return all defaults using the attribute string.
   Client_SYS.Clear_Attr(attr_);

   IF (org_catalog_no_ IS NOT NULL) THEN
      -- The part has been replaced
      Client_SYS.Add_To_Attr('ORIGINAL_PART_NO', org_catalog_no_, attr_);
   END IF;

   sm_object_option_ := sales_part_rec_.create_sm_object_option;

   -- IF the supply code is MRO create_sm_object_option should be unchecked.
   IF (supply_code_ = 'MRO') THEN
      sm_object_option_ := 'DONOTCREATESMOBJECT';
   END IF;

   Client_SYS.Add_To_Attr('CATALOG_DESC', catalog_desc_, attr_);

   Client_SYS.Add_To_Attr('CUSTOMER_PART_NO', customer_part_no_, attr_);
   Client_SYS.Add_To_Attr('CUSTOMER_PART_CONV_FACTOR', customer_part_conv_factor_, attr_);
   Client_SYS.Add_To_Attr('CUSTOMER_PART_UNIT_MEAS', customer_part_unit_meas_, attr_);

   Client_SYS.Add_To_Attr('BUY_QTY_DUE', buy_qty_due_, attr_);
   Client_SYS.Add_To_Attr('REVISED_QTY_DUE', buy_qty_due_ * sales_part_rec_.conv_factor / sales_part_rec_.inverted_conv_factor, attr_);
   Client_SYS.Add_To_Attr('CURRENCY_RATE', currency_rate_, attr_);
   Client_SYS.Add_To_Attr('CONV_FACTOR', sales_part_rec_.conv_factor, attr_);
   Client_SYS.Add_To_Attr('DELIVERY_TYPE', sales_part_rec_.delivery_type, attr_);
   Client_SYS.Add_To_Attr('PRICE_CONV_FACTOR', sales_part_rec_.price_conv_factor, attr_);
   Client_SYS.Add_To_Attr('SALE_UNIT_PRICE', sale_unit_price_, attr_);
   Client_SYS.Add_To_Attr('UNIT_PRICE_INCL_TAX', unit_price_incl_tax_, attr_);
   Client_SYS.Add_To_Attr('BASE_SALE_UNIT_PRICE', base_sale_unit_price_, attr_);
   Client_SYS.Add_To_Attr('BASE_UNIT_PRICE_INCL_TAX', base_unit_price_incl_tax_, attr_);
   Client_SYS.Add_To_Attr('SALES_UNIT_MEAS', sales_part_rec_.sales_unit_meas, attr_);
   IF (NVL(free_of_charge_db_, 'FALSE') = 'FALSE') THEN 
      Client_SYS.Add_To_Attr('DISCOUNT', discount_, attr_);
   END IF;
   Client_SYS.Add_To_Attr('COST', NVL(cost_, 0), attr_);
   Client_SYS.Add_To_Attr('PART_NO', sales_part_rec_.part_no, attr_);
   IF supply_code_ IS NOT NULL THEN
      supply_code_client_ := Order_Supply_Type_API.Decode(supply_code_);
   END IF;
   Client_SYS.Add_To_Attr('SUPPLY_CODE', supply_code_client_, attr_);
   Client_SYS.Add_To_Attr('CATALOG_TYPE', Sales_Part_Type_API.Decode(sales_part_rec_.catalog_type), attr_);
   Client_SYS.Add_To_Attr('VENDOR_NO', vendor_no_, attr_);
   Client_SYS.Add_To_Attr('CONSIGNMENT_STOCK_DB', consignment_stock_, attr_);
   Client_SYS.Add_To_Attr('CLOSE_TOLERANCE', sales_part_rec_.close_tolerance, attr_);
   Client_SYS.Add_To_Attr('PRICE_LIST_NO', price_list_no_, attr_);
   Client_SYS.Add_To_Attr('CHARGED_ITEM_DB', 'CHARGED ITEM', attr_);
   IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
      Client_SYS.Add_To_Attr('CREATE_SM_OBJECT_OPTION_DB', sm_object_option_, attr_);
   END IF;
   Client_SYS.Add_To_Attr('STAGED_BILLING_DB', 'NOT STAGED BILLING', attr_);
   IF (dop_connection_ IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DOP_CONNECTION', dop_connection_, attr_);
   END IF;
   Client_SYS.Add_To_Attr('PURCHASE_PART_NO', purchase_part_no_, attr_);
   IF (header_rec_.use_price_incl_tax = Fnd_Boolean_API.DB_TRUE) THEN
      Client_SYS.Add_To_Attr('PART_PRICE', unit_price_incl_tax_, attr_);
   ELSE
      Client_SYS.Add_To_Attr('PART_PRICE', sale_unit_price_, attr_);
   END IF;
   Client_SYS.Add_To_Attr('PRICE_SOURCE', price_source_, attr_);
   Client_SYS.Add_To_Attr('PRICE_SOURCE_ID', price_source_id_, attr_);
   Client_SYS.Add_to_Attr('PROVISIONAL_PRICE_DB', provisional_price_db_, attr_);
   Client_SYS.Add_To_Attr('PRICE_SOURCE_NET_PRICE_DB', net_price_fetched_, attr_);
   Client_SYS.Add_To_Attr('CONDITION_CODE', condition_code_ , attr_);
   Client_SYS.Add_To_Attr('SUPPLY_SITE_RESERVE_TYPE_DB', supply_site_reserve_type_, attr_);
   Client_SYS.Add_To_Attr('SUPPLY_SITE_RESERVE_TYPE', Supply_Site_Reserve_Type_API.Decode(supply_site_reserve_type_), attr_);
   Client_SYS.Add_To_Attr('SELF_BILLING_DB', self_billing_db_, attr_);
   Client_SYS.Add_To_Attr('SELF_BILLING', Self_Billing_Type_API.Decode(self_billing_db_), attr_);
   Client_SYS.Add_To_Attr('RECEIVING_ADVICE_TYPE', receiving_advice_type_, attr_);
   Client_SYS.Add_To_Attr('REBATE_BUILDER_DB', rebate_builder_db_, attr_);
   Client_SYS.Add_To_Attr('PART_LEVEL_DB', part_level_db_, attr_);
   Client_SYS.Add_To_Attr('PART_LEVEL_ID', part_level_id_, attr_);
   Client_SYS.Add_To_Attr('CUSTOMER_LEVEL_DB', customer_level_db_, attr_);
   Client_SYS.Add_To_Attr('CUSTOMER_LEVEL_ID', customer_level_id_, attr_);

   Client_SYS.Add_To_Attr('TAX_CODE', tax_code_, attr_);
   Client_SYS.Add_To_Attr('TAX_CLASS_ID', tax_class_, attr_);
   Client_SYS.Add_To_Attr('INVERTED_CONV_FACTOR', sales_part_rec_.inverted_conv_factor, attr_);
   Client_SYS.Add_To_Attr('RENTAL_DB', rental_db_, attr_);
   Client_SYS.Add_To_Attr('CUST_PART_INVERT_CONV_FACT', cust_part_inver_conv_fact_, attr_);
   -- gelr: acquisition_origin, begin
   Client_SYS.Add_To_Attr('ACQUISITION_ORIGIN', sales_part_rec_.acquisition_origin, attr_);
   -- gelr: acquisition_origin, end
   -- gelr:good_service_statistical_code, begin
   Client_SYS.Add_To_Attr('STATISTICAL_CODE', sales_part_rec_.statistical_code, attr_);
   -- gelr:good_service_statistical_code, end
   -- gelr:brazilian_specific_attributes, begin
   Client_SYS.Add_To_Attr('ACQUISITION_REASON_ID', NVL(Business_Transaction_Id_API.Get_Acquisition_Reason_Id(header_contract_conected_comp_, header_rec_.business_transaction_id), 
                                                       sales_part_rec_.acquisition_reason_id), attr_);
   -- gelr:brazilian_specific_attributes, end
   IF (supply_site_ IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('SUPPLY_SITE', supply_site_, attr_);
   END IF;
   IF (part_ownership_db_ IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PART_OWNERSHIP', Part_Ownership_API.Decode(part_ownership_db_), attr_);
   END IF;

   IF buy_qty_due_ IS NULL THEN
      input_unit_meas_group_id_ := inv_part_rec_.input_unit_meas_group_id;
      IF input_unit_meas_group_id_ IS NOT NULL AND demand_code_ IS NULL THEN
         default_input_uom_ := Input_Unit_Meas_API.Get_Default_Input_Uom(input_unit_meas_group_id_);
         IF default_input_uom_ IS NOT NULL THEN
            uom_rec_ := Input_Unit_Meas_API.Get(input_unit_meas_group_id_, default_input_uom_);
            IF (uom_rec_.cust_usage_allowed = 1) THEN
               Client_SYS.Add_To_Attr('INPUT_UNIT_MEAS', default_input_uom_, attr_);
               Client_SYS.Add_To_Attr('INPUT_CONV_FACTOR', uom_rec_.conversion_factor, attr_);
            END IF;
         END IF;
      END IF;
   END IF;

    IF (Fnd_Session_API.Is_Odp_Session) THEN
         Client_SYS.Add_To_Attr('PRICE_UNIT_MEAS', sales_part_rec_.price_unit_meas, attr_);
         IF header_rec_.limit_sales_to_assortments = 'TRUE' THEN
            suggested_exists_ := Suggested_Sales_Part_API.Limit_Suggest_Part_Exists(header_rec_.contract, catalog_no_);
         ELSE
            suggested_exists_ := Suggested_Sales_Part_API.Suggested_Sales_Part_Exists(header_rec_.contract, catalog_no_);                                
         END IF;
         Client_SYS.Add_To_Attr('SUGGESTED_PART_EXISTS', suggested_exists_, attr_);
         Client_SYS.Add_To_Attr('SERIAL_TRACKING', Part_Catalog_API.Get_Rcpt_Issue_Serial_Track_Db(sales_part_rec_.part_no), attr_);
         Client_SYS.Add_To_Attr('INPUT_UNIT_MEAS_GROUP_ID', input_unit_meas_group_id_, attr_);  
         Client_SYS.Add_To_Attr('INPUT_UOM_GROUP', Input_Unit_meas_Group_API.Is_Usage_Allowed(input_unit_meas_group_id_, 'ORDER'), attr_);
         Client_SYS.Add_To_Attr('COST_LEVEL', Inventory_Part_API.Get_Invent_Part_Cost_Level_Db(header_rec_.contract, sales_part_rec_.part_no), attr_);
         Client_SYS.Add_To_Attr('GTIN', Sales_Part_API.Get_Gtin_No(header_rec_.contract, catalog_no_, default_input_uom_), attr_);
         Client_SYS.Add_To_Attr('CATALOG_TYPE_DB', sales_part_rec_.catalog_type, attr_);
         Client_SYS.Add_To_Attr('SUPPLY_CODE_DB', supply_code_, attr_);
         Client_SYS.Add_To_Attr('PRICE_SOURCE_DB', Pricing_Source_API.Encode(price_source_), attr_);
         IF addr_flag_ = 'Y'  THEN
            packing_instruction_id_ := Def_Pack_Instruct_Shipment_API.Get_Packing_Instruction_Id(header_rec_.contract, catalog_no_, deliver_to_customer_no_, NULL);
         ELSE 
            packing_instruction_id_ := Def_Pack_Instruct_Shipment_API.Get_Packing_Instruction_Id(header_rec_.contract, catalog_no_, deliver_to_customer_no_, ship_addr_no_);
         END IF;
         Client_SYS.Add_To_Attr('PACKING_INSTRUCTION_ID', packing_instruction_id_, attr_);
      ELSE
         NULL;  
      END IF;
END Get_Line_Defaults___;


PROCEDURE Get_Default_Part_Attributes___ (
   attr_                     IN OUT NOCOPY VARCHAR2,
   part_replacement_allowed_ IN     NUMBER )
IS
   order_no_                  CUSTOMER_ORDER_LINE_TAB.order_no%TYPE;
   contract_                  CUSTOMER_ORDER_LINE_TAB.contract%TYPE;
   buy_qty_due_               CUSTOMER_ORDER_LINE_TAB.buy_qty_due%TYPE;
   catalog_no_                CUSTOMER_ORDER_LINE_TAB.catalog_no%TYPE;
   catalog_desc_              CUSTOMER_ORDER_LINE_TAB.catalog_desc%TYPE;
   customer_no_               CUSTOMER_ORDER_LINE_TAB.customer_no%TYPE;
   customer_part_no_          CUSTOMER_ORDER_LINE_TAB.customer_part_no%TYPE;
   customer_part_buy_qty_     CUSTOMER_ORDER_LINE_TAB.customer_part_buy_qty%TYPE;
   customer_part_conv_factor_ CUSTOMER_ORDER_LINE_TAB.customer_part_conv_factor%TYPE;
   customer_part_unit_meas_   CUSTOMER_ORDER_LINE_TAB.customer_part_unit_meas%TYPE;
   customer_part_desc_        CUSTOMER_ORDER_LINE_TAB.catalog_desc%TYPE;
   base_sale_unit_price_      CUSTOMER_ORDER_LINE_TAB.base_sale_unit_price%TYPE;
   base_unit_price_incl_tax_  CUSTOMER_ORDER_LINE_TAB.base_unit_price_incl_tax%TYPE;
   sale_unit_price_           CUSTOMER_ORDER_LINE_TAB.sale_unit_price%TYPE;
   unit_price_incl_tax_       CUSTOMER_ORDER_LINE_TAB.unit_price_incl_tax%TYPE;
   cross_rec_                 SALES_PART_CROSS_REFERENCE_API.Public_Rec;
   default_attr_              VARCHAR2(2000);
   ptr_                       NUMBER;
   name_                      VARCHAR2(30);
   value_                     VARCHAR2(4000);
   header_rec_                CUSTOMER_ORDER_API.Public_Rec;
   currency_rate_             NUMBER;
   packing_instruction_id_    VARCHAR2(50);
   supply_code_               CUSTOMER_ORDER_LINE_TAB.supply_code%TYPE;
   cust_part_invert_conv_fact_ CUSTOMER_ORDER_LINE_TAB.cust_part_invert_conv_fact%TYPE;
BEGIN
   order_no_         := Client_SYS.Get_Item_Value('ORDER_NO', attr_);
   header_rec_       := CUSTOMER_ORDER_API.Get(order_no_);

   customer_part_no_ := Client_SYS.Get_Item_Value('CUSTOMER_PART_NO', attr_);
   catalog_no_       := Client_SYS.Get_Item_Value('CATALOG_NO', attr_);
   catalog_desc_     := Client_SYS.Get_Item_Value('CATALOG_DESC', attr_);
   value_            := Client_SYS.Get_Item_Value('BUY_QTY_DUE', attr_);

   IF (value_ IS NOT NULL) THEN
      buy_qty_due_ := Client_SYS.Attr_Value_To_Number(value_);
   END IF;

   value_ := Client_SYS.Get_Item_Value('CUSTOMER_PART_BUY_QTY', attr_);
   IF (value_ IS NOT NULL) THEN
      customer_part_buy_qty_ := Client_SYS.Attr_Value_To_Number(value_);
   END IF;

   value_ := Client_SYS.Get_Item_Value('SALE_UNIT_PRICE', attr_);
   IF (value_ IS NOT NULL) THEN
      sale_unit_price_ := Client_SYS.Attr_Value_To_Number(value_);
   END IF;

   value_ := Client_SYS.Get_Item_Value('UNIT_PRICE_INCL_TAX', attr_);
   IF (value_ IS NOT NULL) THEN
      unit_price_incl_tax_ := Client_SYS.Attr_Value_To_Number(value_);
   END IF;

   value_ := Client_SYS.Get_Item_Value('BASE_SALE_UNIT_PRICE', attr_);
   IF (value_ IS NOT NULL) THEN
      base_sale_unit_price_ := Client_SYS.Attr_Value_To_Number(value_);
   END IF;

   value_ := Client_SYS.Get_Item_Value('BASE_UNIT_PRICE_INCL_TAX', attr_);
   IF (value_ IS NOT NULL) THEN
      base_unit_price_incl_tax_ := Client_SYS.Attr_Value_To_Number(value_);
   END IF;

   customer_no_ := header_rec_.customer_no;
   contract_    := header_rec_.contract;

   -- IF a customer part number has been specified then check the sales part cross reference.
   IF (customer_part_no_ IS NOT NULL) THEN
      Sales_Part_Cross_Reference_API.Exist(customer_no_, contract_, customer_part_no_);
      cross_rec_               := Sales_Part_Cross_Reference_API.Get(customer_no_, contract_, customer_part_no_);
      catalog_no_              := cross_rec_.catalog_no;
      customer_part_unit_meas_ := cross_rec_.customer_unit_meas;
      IF (catalog_desc_ IS NULL) THEN
         customer_part_desc_ := cross_rec_.catalog_desc;
      END IF;
      IF (customer_part_buy_qty_ IS NOT NULL) THEN
         customer_part_conv_factor_ := cross_rec_.conv_factor;
         cust_part_invert_conv_fact_ := cross_rec_.inverted_conv_factor;
         IF (customer_part_conv_factor_ IS NOT NULL AND cust_part_invert_conv_fact_ IS NOT NULL) THEN
            buy_qty_due_ := (customer_part_buy_qty_ * customer_part_conv_factor_) / cust_part_invert_conv_fact_;
         ELSE
            buy_qty_due_ := customer_part_buy_qty_;
         END IF;
      END IF;
   END IF;

   Client_SYS.Clear_Attr(default_attr_);
   Client_SYS.Set_Item_Value('BUY_QTY_DUE', buy_qty_due_, default_attr_);

   value_ := Client_SYS.Get_Item_Value('DEMAND_CODE', attr_);
   IF (value_ IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('DEMAND_CODE', value_, default_attr_);
   END IF;
   value_ := Client_SYS.Get_Item_Value('DEMAND_CODE_DB', attr_);
   IF (value_ IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('DEMAND_CODE_DB', value_, default_attr_);
   END IF;
   value_ := Client_SYS.Get_Item_Value('PRICE_LIST_NO', attr_);
   IF (value_ IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('PRICE_LIST_NO', value_, default_attr_);
   END IF;
   value_ := Client_SYS.Get_Item_Value('CHARGED_ITEM_DB', attr_);
   IF (value_ IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('CHARGED_ITEM_DB', value_, default_attr_);
   END IF;
   value_ := Client_SYS.Get_Item_Value('CHARGED_ITEM', attr_);
   IF (value_ IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('CHARGED_ITEM', value_, default_attr_);
   END IF;
   value_ := Client_SYS.Get_Item_Value('DEMAND_ORDER_REF1', attr_);
   IF (value_ IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('DEMAND_ORDER_REF1', value_, default_attr_);
   END IF;
   value_ := Client_SYS.Get_Item_Value('FREE_OF_CHARGE_DB', attr_);
   IF (value_ IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('FREE_OF_CHARGE_DB', value_, default_attr_);
   END IF;
   supply_code_ := Client_SYS.Get_Item_Value('SUPPLY_CODE_DB', attr_);

   -- Add supply_code and price effectivity date to attribute string to get correct default values
   Client_SYS.Set_Item_Value('SUPPLY_CODE_DB', supply_code_, default_attr_);
   Client_SYS.Set_Item_Value('PRICE_EFFECTIVITY_DATE', (Client_SYS.Get_Item_Value('PRICE_EFFECTIVITY_DATE', attr_)), default_attr_);
   Client_SYS.Set_Item_Value('CONDITION_CODE', (Client_SYS.Get_Item_Value('CONDITION_CODE', attr_)), default_attr_);
   Client_SYS.Set_Item_Value('CREATED_BY_SERVER', (Client_SYS.Get_Item_Value('CREATED_BY_SERVER', attr_)), default_attr_);

   -- Add rental_db value to check for valid and active sales part.
   Client_SYS.Set_Item_Value('RENTAL_DB', (Client_SYS.Get_Item_Value('RENTAL_DB', attr_)), default_attr_);
   
   Get_Line_Defaults___(default_attr_, catalog_no_, order_no_, part_replacement_allowed_);

   -- Check if a price was passed with the attribute string.
   -- IF that was the case this price should override the default price
   IF (header_rec_.use_price_incl_tax = 'TRUE') THEN
      IF (supply_code_ = 'SEO' AND (base_unit_price_incl_tax_ IS NULL AND unit_price_incl_tax_ IS NULL) ) THEN
         unit_price_incl_tax_      := sale_unit_price_;
         base_unit_price_incl_tax_ := base_sale_unit_price_;
      END IF;

      IF (unit_price_incl_tax_ IS NOT NULL) THEN
         -- Get the corresponding base sale unit price
         Customer_Order_Pricing_API.Get_Base_Price_In_Currency(base_unit_price_incl_tax_, currency_rate_,
                                                               NVL(header_rec_.customer_no_pay, header_rec_.customer_no),
                                                               contract_,header_rec_.currency_code, unit_price_incl_tax_,
                                                               header_rec_.currency_rate_type); 
         Client_SYS.Set_Item_Value('BASE_UNIT_PRICE_INCL_TAX', base_unit_price_incl_tax_, default_attr_);
         -- Since use_price_incl_tax is true, price calculation base will be gross amounts. but calculate_price() will call later.
         Client_SYS.Set_Item_Value('BASE_SALE_UNIT_PRICE', base_unit_price_incl_tax_, default_attr_);
         Client_SYS.Set_Item_Value('SALE_UNIT_PRICE', unit_price_incl_tax_, default_attr_);
         
         Client_SYS.Set_Item_Value('PROVISIONAL_PRICE_DB', 'FALSE', default_attr_);
         IF (supply_code_ = 'SEO') THEN
            Client_SYS.Set_Item_Value('PART_PRICE', unit_price_incl_tax_, default_attr_);
            Client_SYS.Set_Item_Value('CURRENCY_RATE', currency_rate_, default_attr_);
         END IF;
      ELSIF (base_unit_price_incl_tax_ IS NOT NULL) THEN
         -- Get the corresponding sale unit price
         Customer_Order_Pricing_API.Get_Sales_Price_In_Currency(unit_price_incl_tax_, currency_rate_, NVL(header_rec_.customer_no_pay, header_rec_.customer_no),
                                                                contract_, header_rec_.currency_code, base_unit_price_incl_tax_, header_rec_.currency_rate_type);
         Client_SYS.Set_Item_Value('UNIT_PRICE_INCL_TAX', unit_price_incl_tax_, default_attr_);
         -- Since use_price_incl_tax is true, price calculation base will be gross amounts. but calculate_price() will call later.
         Client_SYS.Set_Item_Value('SALE_UNIT_PRICE', unit_price_incl_tax_, default_attr_);
         Client_SYS.Set_Item_Value('BASE_SALE_UNIT_PRICE', base_unit_price_incl_tax_, default_attr_);
         
         Client_SYS.Set_Item_Value('PROVISIONAL_PRICE_DB', 'FALSE', default_attr_);
         IF (supply_code_ = 'SEO') THEN
            Client_SYS.Set_Item_Value('BASE_UNIT_PRICE_INCL_TAX', base_unit_price_incl_tax_, default_attr_);
            Client_SYS.Set_Item_Value('PART_PRICE', unit_price_incl_tax_, default_attr_);
            Client_SYS.Set_Item_Value('CURRENCY_RATE', currency_rate_, default_attr_);
         END IF;
      END IF;

      IF (customer_part_desc_ IS NOT NULL) THEN
         Client_SYS.Set_Item_Value('CATALOG_DESC', customer_part_desc_, default_attr_);
      END IF;
   ELSE
      IF (sale_unit_price_ IS NOT NULL) THEN
         -- Get the corresponding base sale unit price
         Customer_Order_Pricing_API.Get_Base_Price_In_Currency(base_sale_unit_price_, currency_rate_,
                                                               NVL(header_rec_.customer_no_pay, header_rec_.customer_no),
                                                               contract_, header_rec_.currency_code, sale_unit_price_,
                                                               header_rec_.currency_rate_type);
         Client_SYS.Set_Item_Value('BASE_SALE_UNIT_PRICE', base_sale_unit_price_, default_attr_);
         -- Since use_price_incl_tax is false, price calculation base will be net amounts. but calculate_price() will call later.
         Client_SYS.Set_Item_Value('BASE_UNIT_PRICE_INCL_TAX', base_sale_unit_price_, default_attr_);
         Client_SYS.Set_Item_Value('UNIT_PRICE_INCL_TAX', sale_unit_price_, default_attr_);
         
         Client_SYS.Set_Item_Value('PROVISIONAL_PRICE_DB', 'FALSE', default_attr_);
         IF (supply_code_ = 'SEO') THEN
            Client_SYS.Set_Item_Value('PART_PRICE', sale_unit_price_, default_attr_);
            Client_SYS.Set_Item_Value('CURRENCY_RATE', currency_rate_, default_attr_);
         END IF;
      ELSIF (base_sale_unit_price_ IS NOT NULL) THEN
         -- Get the corresponding sale unit price
         Customer_Order_Pricing_API.Get_Sales_Price_In_Currency(sale_unit_price_, currency_rate_, NVL(header_rec_.customer_no_pay, header_rec_.customer_no),
                                                                contract_, header_rec_.currency_code, base_sale_unit_price_, header_rec_.currency_rate_type);
         Client_SYS.Set_Item_Value('SALE_UNIT_PRICE', sale_unit_price_, default_attr_);
         -- Since use_price_incl_tax is false, price calculation base will be net amounts. but calculate_price() will call later.
         Client_SYS.Set_Item_Value('UNIT_PRICE_INCL_TAX', sale_unit_price_, default_attr_);
         Client_SYS.Set_Item_Value('BASE_UNIT_PRICE_INCL_TAX', base_sale_unit_price_, default_attr_);
         
         Client_SYS.Set_Item_Value('PROVISIONAL_PRICE_DB', 'FALSE', default_attr_);
         IF (supply_code_ = 'SEO') THEN
            Client_SYS.Set_Item_Value('PART_PRICE', sale_unit_price_, default_attr_);
            Client_SYS.Set_Item_Value('CURRENCY_RATE', currency_rate_, default_attr_);
         END IF;
      END IF;

      IF (customer_part_desc_ IS NOT NULL) THEN
         Client_SYS.Set_Item_Value('CATALOG_DESC', customer_part_desc_, default_attr_);
      END IF;
   END IF;
   IF (supply_code_ = 'SEO') THEN
      IF (sale_unit_price_ IS NOT NULL) THEN
         Client_SYS.Set_Item_Value('PART_PRICE', sale_unit_price_, default_attr_);
      END IF;
      Client_SYS.Set_Item_Value('CURRENCY_RATE', currency_rate_, default_attr_);
   END IF;

   packing_instruction_id_ := Def_Pack_Instruct_Shipment_API.Get_Packing_Instruction_Id(contract_,
                                                                                        catalog_no_,
                                                                                        customer_no_,
                                                                                        header_rec_.ship_addr_no);
   IF (packing_instruction_id_ IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('PACKING_INSTRUCTION_ID', packing_instruction_id_, default_attr_);
   END IF;

   Client_SYS.Add_To_Attr('CONTRACT', contract_, default_attr_);
   Client_SYS.Add_To_Attr('CATALOG_NO', catalog_no_, default_attr_);
   Client_SYS.Add_To_Attr('CUSTOMER_PART_UNIT_MEAS', customer_part_unit_meas_, default_attr_);
   Client_SYS.Add_To_Attr('CUSTOMER_PART_CONV_FACTOR', customer_part_conv_factor_, default_attr_);
   Client_SYS.Add_To_Attr('CUST_PART_INVERT_CONV_FACT', cust_part_invert_conv_fact_, default_attr_);

   -- Merge the default attributes with the attribute string passed in
   ptr_ := NULL;
   WHILE (Client_SYS.Get_Next_From_Attr(default_attr_, ptr_, name_, value_)) LOOP
      Client_SYS.Set_Item_Value(name_, value_, attr_);
   END LOOP;
END Get_Default_Part_Attributes___;


PROCEDURE Exist_Vendor_No___ (
   vendor_no_        IN VARCHAR2,
   contract_         IN VARCHAR2,
   purchase_part_no_ IN VARCHAR2,
   rental_db_        IN VARCHAR2)
IS
BEGIN
   $IF (Component_Purch_SYS.INSTALLED)$THEN
      IF (purchase_part_no_ IS NOT NULL) THEN
         IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
            Purchase_Part_Supplier_API.Exist(contract_, purchase_part_no_, vendor_no_, Acquisition_Type_API.DB_PURCHASE_ONLY);
         ELSE
            Purchase_Part_Supplier_API.Exist(contract_, purchase_part_no_, vendor_no_, Acquisition_Type_API.DB_RENTAL_ONLY);
         END IF;
      ELSE
         Supplier_API.Exist(vendor_no_);
      END IF;
   $ELSE
      NULL;
   $END
END Exist_Vendor_No___;


PROCEDURE Validate_Vendor_Category___ (
   vendor_no_   IN VARCHAR2,
   supply_code_ IN VARCHAR2 )
IS
   category_ VARCHAR2(200) := NULL;
BEGIN
   $IF (Component_Purch_SYS.INSTALLED)$THEN
      category_ := Supplier_Category_API.Encode(Supplier_API.Get_Category(vendor_no_));
   $END
   Validate_Vendor_No___(vendor_no_, supply_code_, category_);
END Validate_Vendor_Category___;


PROCEDURE Validate_Vendor_No___ (
   vendor_no_   IN VARCHAR2,
   supply_code_ IN VARCHAR2,
   category_    IN VARCHAR2 )
IS
BEGIN
   $IF Component_Purch_SYS.INSTALLED $THEN
      IF vendor_no_ IS NOT NULL THEN
         IF NOT (Supplier_API.Is_Valid(vendor_no_)) THEN
            Error_SYS.Record_General(lu_name_, 'SUPNOTVALID: The supplier :P1 expiry date has passed.', vendor_no_);
         END IF;
      END IF;
   $END
   -- Vendor_no is mandatory if using Internal Purchase supply
   IF (supply_code_ IN ('IPT', 'IPD')) THEN
      Error_SYS.Check_Not_Null(lu_name_, 'VENDOR_NO', vendor_no_);
      -- IF internal supply - internal vendor must be specified
      IF (NVL(category_, ' ') != 'I') THEN
         Error_SYS.Record_General(lu_name_, 'SUPPLIERCATEGORY: Internal supplier must be specified when supply code is Internal Purchase Order Transit/Direct.');
      END IF;
   -- IF supply code is PD or PT an external vendor must be specified
   ELSIF (supply_code_ IN ('PT', 'PD')) AND (vendor_no_ IS NOT NULL) AND (NVL(category_, ' ') != 'E') THEN
      Error_SYS.Record_General(lu_name_, 'SUPPLIERCATEGORY2: Internal supplier may not be specified when supply code is Purchase Order Transit/Direct.');
   END IF;
END Validate_Vendor_No___;


PROCEDURE Validate_Price___ (
   newrec_ IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE )
IS
BEGIN
   -- Ignored base_sale_unit_price and base_unit_price_incl_tax is less than zero for FSM created orders. 
   IF (NVL(newrec_.demand_code, ' ') != Order_Supply_Type_API.DB_FIELD_SERVICE_MANAGEMENT ) THEN
      IF ((newrec_.base_sale_unit_price < 0) OR (newrec_.sale_unit_price < 0)) THEN
         Error_SYS.Record_General(lu_name_, 'PRICE_LESS_THAN_ZERO: Price must be greater than zero!');
      END IF;

      IF ((newrec_.base_unit_price_incl_tax < 0) OR (newrec_.unit_price_incl_tax < 0)) THEN
         Error_SYS.Record_General(lu_name_, 'PRICE_INCL_TAX_LESS_THAN_ZERO: Price Including Tax must be greater than zero!');
      END IF;
   END IF;

   IF (newrec_.discount > 100) THEN
      Error_SYS.Record_General(lu_name_, 'INVALID_DISC: The total discount given cannot exceed the order line price.');
   END IF;
END Validate_Price___;


PROCEDURE Add_Info___(
   insert_package_mode_  VARCHAR2)
IS
   info_          VARCHAR2(2000);
   current_info_  VARCHAR2(32000);
BEGIN
   info_ := Client_SYS.Get_All_Info;
   -- only set the info if we are not in the insert package loop, in those cases
   -- we skip the info messages for the components
   IF (insert_package_mode_ = 'FALSE') THEN
      current_info_ := App_Context_SYS.Find_Value('CUSTOMER_ORDER_LINE_API.CURRENT_INFO_');
      current_info_ := SUBSTR(current_info_ || info_, 1, 2000);
      IF current_info_ IS NOT NULL THEN
         IF (SUBSTR(current_info_, 1, 4) = 'INFO') THEN
            current_info_ := SUBSTR(current_info_, 6, LENGTH(current_info_));
            current_info_ := RTRIM(current_info_, CHR(30));
         END IF;
         Client_SYS.Add_Info(lu_name_, SUBSTR(current_info_,1,1024));
         info_ := Client_SYS.Get_All_Info;
      ELSE
         info_ := current_info_;
      END IF;
      App_Context_SYS.Set_Value('CUSTOMER_ORDER_LINE_API.CURRENT_INFO_',info_);
   END IF;
END Add_Info___;


PROCEDURE Check_Before_Insert___ (
   attr_                IN OUT NOCOPY VARCHAR2,
   newrec_              IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   header_curr_code_    IN     VARCHAR2 )
IS
   sales_part_rec_            Sales_Part_API.Public_Rec;
   header_rec_                Customer_Order_API.Public_Rec;
   cust_ord_cust_rec_         Cust_Ord_Customer_API.Public_Rec;
   consignment_stock_db_      VARCHAR2(20);
   company_                   VARCHAR2(20);
   sup_object_status_         VARCHAR2(200);
   supplier_acquisition_site_ VARCHAR2(5);
   customer_contract_         CUSTOMER_ORDER_LINE_TAB.contract%TYPE;
   tax_customer_no_           CUSTOMER_ORDER_LINE_TAB.customer_no%TYPE;
   tax_ship_addr_no_          CUSTOMER_ORDER_LINE_TAB.ship_addr_no%TYPE;
   pkg_catalog_group_         VARCHAR2(10) := NULL;
   cust_category_             VARCHAR2(2);
   package_part_no_           VARCHAR2(25);
   customer_company_          VARCHAR2(20);
   insert_package_mode_       VARCHAR2(5);
   sales_price_type_db_       VARCHAR2(20);
   supplier_company_          VARCHAR2(20);
   price_effective_date_      DATE;
   copy_order_line_           BOOLEAN := (NVL(Client_SYS.Get_Item_Value('COPY_ORDER_LINE', attr_), 'FALSE') = 'TRUE');

   CURSOR get_package IS
      SELECT catalog_no
      FROM  CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = newrec_.order_no
      AND   line_no = newrec_.line_no
      AND   rel_no = newrec_.rel_no
      AND   line_item_no < 0;
BEGIN
   -- checks for the line_item_no and sets parameters acordingly
   IF (newrec_.line_item_no > 0) THEN
      Sales_Part_API.Check_If_Valid_Component(newrec_.contract, newrec_.catalog_no);
      Exist_Line_No(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
      IF (Fnd_Boolean_API.Encode(Get_Shipment_Connected(newrec_.order_no, newrec_.line_no, newrec_.rel_no, -1)) = 'TRUE') THEN
         Error_SYS.Record_General(lu_name_, 'NEW_NOT_ALLOWED: Entering new Component Part(s) to the Package Part Structure not allowed when the Package Part is connected to a Shipment.');
      END IF;
      pkg_catalog_group_ := Sales_Part_API.Get_Catalog_Group(newrec_.contract, Get_Catalog_No(newrec_.order_no, newrec_.line_no, newrec_.rel_no, -1));
   ELSE
      Exist_Line_No(newrec_.order_no, newrec_.line_no, newrec_.rel_no, NULL);
   END IF;

   -- Check if the user is allowed access to the current site
   IF NOT(newrec_.demand_code IN ('IPT','IPD')) OR (Site_Discom_Info_API.Get_Exec_Ord_Change_Online_Db(newrec_.contract) = 'FALSE') THEN
      User_Allowed_Site_API.Exist(Fnd_Session_API.Get_Fnd_User, newrec_.contract);
   END IF;

   -- Check whether supply site exists
   IF newrec_.supply_site IS NOT NULL THEN
      Site_API.Exist(newrec_.supply_site);
   END IF;

   sales_part_rec_ := Sales_Part_API.Get(newrec_.contract, newrec_.catalog_no);

   IF ((newrec_.supply_code IN ('PD', 'IPD')) AND (newrec_.consignment_stock = 'CONSIGNMENT STOCK')) THEN
      Error_SYS.Record_General(lu_name_, 'SUPPLY_CODE: Not possible to have supply code Purchase Order Direct or Internal Purchase Order Direct for Consignment Stock parts');
   END IF;

   insert_package_mode_ := Client_SYS.Get_Item_Value('INSERT_PACKAGE_MODE_', attr_);
   -- extended check on order headers delivery confirmation flag
   Validate_Delivery_Conf___(newrec_, TRUE, sales_part_rec_.catalog_group, pkg_catalog_group_, insert_package_mode_);

   IF (newrec_.catalog_desc IS NULL) THEN
      newrec_.catalog_desc := Sales_Part_API.Get_Catalog_Desc(newrec_.contract, newrec_.catalog_no);
   END IF;
   IF (newrec_.rental = Fnd_Boolean_API.DB_FALSE) THEN
      sales_price_type_db_  := Sales_Price_Type_API.DB_SALES_PRICES;
      price_effective_date_ := newrec_.price_effectivity_date;
   ELSE
      sales_price_type_db_  := Sales_Price_Type_API.DB_RENTAL_PRICES;
      price_effective_date_ := Get_Planned_Rental_Start_Dt___(attr_, newrec_);
   END IF;
   
   IF NOT(copy_order_line_) THEN
      IF (newrec_.price_list_no IS NOT NULL) THEN
         -- Check if valid
         IF ((Sales_Price_List_API.Is_Valid(newrec_.price_list_no, newrec_.contract, newrec_.catalog_no, price_effective_date_, sales_price_type_db_) = FALSE) AND
             (Sales_Price_List_API.Is_Valid_Assort(newrec_.price_list_no, newrec_.contract, newrec_.catalog_no, newrec_.price_effectivity_date) = FALSE)) OR
            (Sales_Price_List_API.Get_Sales_Price_Group_Id(newrec_.price_list_no) != sales_part_rec_.sales_price_group_id) THEN
            Error_Sys.Record_General(lu_name_, 'INVALID_PRICELIST: The selected sales price list has no valid part-based line or a valid assortment-node-based line for the sales part.');
         END IF;
      END IF;
   END IF;
   
   -- Order discount may not be >= 100%
   IF (newrec_.order_discount >= 100) THEN
      Error_SYS.Record_General(lu_name_, 'WRONGDISC: Order discount must be lower than 100%.');
   END IF;

   IF (newrec_.supply_code = 'MRO') THEN
      Validate_Mro_Line___(newrec_.part_no,newrec_.buy_qty_due,newrec_.part_ownership);
   END IF;

   company_           := Site_API.Get_Company(newrec_.contract);
   cust_ord_cust_rec_ := Cust_Ord_Customer_API.Get(newrec_.customer_no);
   customer_contract_ := cust_ord_cust_rec_.acquisition_site;
   customer_company_  := Site_API.Get_Company(customer_contract_);
   IF (newrec_.supply_code = 'IPT' OR newrec_.supply_code = 'IPD') THEN
      supplier_acquisition_site_ := Get_Vendor_Contract__(newrec_.vendor_no, NULL, NULL, NULL, NULL);
      supplier_company_          := Site_API.Get_Company(supplier_acquisition_site_);
   END IF;

   -- create SM object option check
   IF (newrec_.create_sm_object_option = 'CREATESMOBJECT') THEN
      IF (newrec_.part_no IS NULL) THEN
         Error_SYS.Record_General(lu_name_, 'SM_NOT_VALID1: The Create SM Object Option can not be set for none inventory parts.');
      ELSE
         -- receipt and issue serial tracked parts are not allowed to be package component parts for sm objects
         IF (Part_Catalog_API.Get_Rcpt_Issue_Serial_Track_Db(newrec_.part_no) = Fnd_Boolean_API.DB_TRUE) THEN
            cust_category_ := cust_ord_cust_rec_.category; 
            IF (cust_category_ = 'I') AND (NVL(customer_company_, Database_SYS.string_null_) != company_) AND (newrec_.line_item_no > 0)  THEN
               OPEN get_package;
               FETCH get_package INTO package_part_no_;
               CLOSE get_package;
               Error_SYS.Record_General(lu_name_, 'CANNOTINSERTSERIAL: You are not allowed to add serial-tracked sales part :P1 with the option to create S/M object in package part :P2 in an intersite flow between different companies.', newrec_.part_no, package_part_no_);
            END IF;
         ELSE
            -- sm objects have to always be serial parts
            Error_SYS.Record_General(lu_name_, 'SM_NOT_ALLOWED1: The Create SM Object Option can not be set on an item without serial tracking.');
         END IF;
      END IF;
   END IF;

   -- check so sup_sm_object isnt NULL when sup_sm_contract has a value
   IF (newrec_.sup_sm_contract IS NOT NULL and newrec_.sup_sm_object IS NULL) THEN
      Raise_Sm_Object_Error___;
   END IF;
   
    -- check so sup_sm_contract isnt NULL when sup_sm_object has a value
   IF (newrec_.sup_sm_contract IS NULL and newrec_.sup_sm_object IS NOT NULL) THEN
      Raise_Sm_Object_Error___;
   END IF;

   -- sup_sm_object status control
   IF (newrec_.sup_sm_contract IS NOT NULL) AND (newrec_.sup_sm_object IS NOT NULL) THEN
      $IF (Component_Equip_SYS.INSTALLED)$THEN
         sup_object_status_ := Equipment_Object_API.Get_Operational_Status_Db(newrec_.sup_sm_contract, newrec_.sup_sm_object);
         IF (sup_object_status_ = 'SCRAPPED') THEN
            Raise_Scrapped_Object_Error___(newrec_.sup_sm_object);
         END IF;
      $ELSE
         NULL;
      $END
   END IF;

   -- supply site reservation is only allowed if its a IPD or IPT
   IF (newrec_.supply_site_reserve_type != 'NOTALLOWED' AND newrec_.supply_code NOT IN ('IPD', 'IPT')) THEN
      Error_SYS.Record_General(lu_name_, 'SCRWITHINVALIDSC: A :P1 Supply Site Reservation is only valid for supply codes ":P2" and ":P3".',
                               Supply_Site_Reserve_Type_API.Decode(newrec_.supply_site_reserve_type), Order_Supply_Type_API.Decode('IPD'), Order_Supply_Type_API.Decode('IPT'));
   END IF;

   -- Negative quantity allowed if supply_code = 'Service Order'.
   IF ((newrec_.buy_qty_due <= 0) AND (newrec_.supply_code != 'SEO')) THEN
      Error_SYS.Record_General(lu_name_, 'QTY_LESS_THAN_ZERO: Quantity must be greater than zero!');
   END IF;

   IF ((newrec_.revised_qty_due < (newrec_.qty_shipped + newrec_.qty_assigned)) AND (newrec_.supply_code != 'SEO')) THEN
      Error_SYS.Record_General(lu_name_, 'QTYNOTLESS: This quantity may not be less than the sum of the reserved quantity and the delivered quantity of customer order :P1-:P2-:P3.', newrec_.order_no, newrec_.line_no, newrec_.rel_no);
   END IF;

   IF newrec_.rental = Fnd_Boolean_API.DB_TRUE THEN
      newrec_.consignment_stock := Consignment_Stock_API.DB_NO_CONSIGNMENT_STOCK;
   ELSE
      consignment_stock_db_ := newrec_.consignment_stock;

      -- get consignment delivery based on order line
      IF (newrec_.supply_code IN ('SEO', 'CRO')) AND (newrec_.part_ownership = 'CUSTOMER OWNED') THEN
         newrec_.consignment_stock := 'NO CONSIGNMENT STOCK';
      ELSIF (newrec_.customer_no = newrec_.deliver_to_customer_no) THEN
         newrec_.consignment_stock := NVL(Consignment_Stock_API.Encode(Customer_Consignment_Stock_API.Get_Consignment_Stock(newrec_.contract, newrec_.catalog_no,
                                          newrec_.customer_no, newrec_.ship_addr_no)), newrec_.consignment_stock);
      ELSE
         newrec_.consignment_stock := 'NO CONSIGNMENT STOCK';
      END IF;

      IF ((consignment_stock_db_ = 'NO CONSIGNMENT STOCK') AND (consignment_stock_db_ != newrec_.consignment_stock)) THEN
         newrec_.consignment_stock := consignment_stock_db_;
         consignment_stock_db_     := NULL;
      END IF;
      
      IF (company_ = NVL(customer_company_, Database_SYS.string_null_) AND newrec_.part_ownership = Part_Ownership_API.DB_COMPANY_RENTAL_ASSET) THEN
         Error_SYS.Record_General(lu_name_,'IPTINTERNALDELERR: The part ownership Company Rental Asset is not allowed for internal deliveries.');
      END IF;
   END IF;

   IF (newrec_.consignment_stock = 'CONSIGNMENT STOCK') THEN
      IF (newrec_.catalog_type != 'INV') THEN
         Error_SYS.Record_General(lu_name_, 'ONLY_INV_ON_CONSIGN: Consignment stock can only be used together with inventory parts.');
      ELSIF (newrec_.configuration_id != '*') THEN
         Error_SYS.Record_General(lu_name_, 'NO_CONS_FOR_CONFIG: Consignment stock can not be used for configured parts');
      ELSIF (newrec_.exchange_item = 'EXCHANGED ITEM') THEN
         Error_SYS.Record_General(lu_name_, 'NO_CONS_FOR_EXCHANGE: Consignment Stock cannot be used when the Customer Order Line has been created from a Purchase Exchange Order.');
      ELSE
         consignment_stock_db_ := Consignment_Stock_API.Encode(Customer_Consignment_Stock_API.Get_Consignment_Stock(newrec_.contract, newrec_.catalog_no,
                                                                                                                    newrec_.customer_no, newrec_.ship_addr_no));

         IF (consignment_stock_db_ IS NULL) THEN
            -- Not specified consignment stock.
            Error_SYS.Record_General(lu_name_, 'NOT_SPECIF_CONSIGN: The consignment stock can not be used for specified Customer No - Sales Part - Ship Addr No combination.');
         ELSIF (consignment_stock_db_ = 'NO CONSIGNMENT STOCK') THEN
            -- Not active consignment stock.
            Error_SYS.Record_General(lu_name_, 'NOT_ACTIVE_CONSIGN: The consignment stock is not active for specified Customer No - Sales Part - Ship Addr No combination.');
         END IF;
      END IF;
   END IF;

   IF ((newrec_.close_tolerance < 0) OR NOT (newrec_.close_tolerance < 100)) THEN
      Error_SYS.Record_General(lu_name_, 'WRONG_CLOSE_TOL: The close tolerance must be less than 100!');
   END IF;

   IF ((newrec_.charged_item = 'ITEM NOT CHARGED') AND (newrec_.consignment_stock = 'CONSIGNMENT STOCK')) THEN
      Error_SYS.Record_General(lu_name_, 'CHARGED_CONSIGN: Consignment stock can not be used together with noncharge functionality.');
   END IF;

   header_rec_ := Customer_Order_API.Get(newrec_.order_no); 
   -- Make sure the specified ship address for the order line is valid using deliver_to_customer_no and ship_addr_no on the order line.
   -- Make sure the tax information has been defined for the address of the ordering customer.
   IF (newrec_.ship_addr_no IS NOT NULL) THEN
      IF (newrec_.deliver_to_customer_no = newrec_.customer_no) THEN
         tax_customer_no_  := newrec_.deliver_to_customer_no;
         tax_ship_addr_no_ := newrec_.ship_addr_no;
      ELSE
         tax_customer_no_  := newrec_.customer_no;
         tax_ship_addr_no_ := header_rec_.ship_addr_no;
      END IF;

      IF ((NVL(customer_company_, ' ') != company_) AND
          (newrec_.charged_item != 'ITEM NOT CHARGED') AND
          (newrec_.part_ownership NOT IN ('CUSTOMER OWNED', 'SUPPLIER LOANED')) AND
          (newrec_.exchange_item != 'EXCHANGED ITEM')) THEN
         IF (Customer_Delivery_Tax_Info_API.Check_Exist(tax_customer_no_, tax_ship_addr_no_, company_, header_rec_.supply_country) = 'FALSE') THEN   
            Error_SYS.Record_General(lu_name_, 'NOTAXFORADDR: Customer Tax Information has not been defined for the delivery address.');
         END IF;
      END IF;

      IF (newrec_.addr_flag = 'N') THEN
         IF (Cust_Ord_Customer_Address_API.Is_Ship_Location(newrec_.deliver_to_customer_no, newrec_.ship_addr_no) = 0) THEN
            Error_SYS.Record_General(lu_name_, 'NOTDELADDR: Invalid delivery address specified.');
         END IF;

         IF (Cust_Ord_Customer_Address_API.Is_Valid(newrec_.deliver_to_customer_no, newrec_.ship_addr_no) = 0) THEN
            Error_SYS.Record_General(lu_name_, 'INVALIDDELADDR: Delivery address :P1 is invalid. Check the validity period.', newrec_.ship_addr_no);
         END IF;
      END IF;
  END IF;

   IF (newrec_.configuration_id != '*') THEN
       Order_Config_Util_API.Configuration_Exist(NVL(newrec_.part_no, newrec_.catalog_no), newrec_.configuration_id);
   END IF;

   -- Part Ownership validations
   IF (newrec_.part_ownership IS NOT NULL) THEN
      IF (newrec_.rental = Fnd_Boolean_API.DB_FALSE AND newrec_.part_ownership = Part_Ownership_API.DB_SUPPLIER_RENTED) THEN
         Error_SYS.Record_General(lu_name_, 'INVALIDNONRENTPARTOWN: Ownership :P1 is not allowed for the non-rental lines.', Part_Ownership_API.Decode(newrec_.part_ownership));
      END IF;
      IF (newrec_.rental = Fnd_Boolean_API.DB_TRUE AND newrec_.part_ownership NOT IN (Part_Ownership_API.DB_SUPPLIER_RENTED,
                                                                                      Part_Ownership_API.DB_COMPANY_RENTAL_ASSET)) THEN
         Error_SYS.Record_General(lu_name_, 'INVALIDRENTALPARTOWN: Ownership :P1 is not allowed for the rental lines.', Part_Ownership_API.Decode(newrec_.part_ownership));
      END IF;
      IF (newrec_.supply_code = 'IO') THEN
         IF (newrec_.part_ownership NOT IN (Part_Ownership_API.DB_COMPANY_OWNED,
                                            Part_Ownership_API.DB_CUSTOMER_OWNED,
                                            Part_Ownership_API.DB_SUPPLIER_LOANED,
                                            Part_Ownership_API.DB_SUPPLIER_RENTED,
                                            Part_Ownership_API.DB_COMPANY_RENTAL_ASSET)) THEN
            Error_SYS.Record_General(lu_name_,'INVALIDSUPPLYPARTOWN: Ownership :P1 is not allowed for this supply code.', Part_Ownership_API.Decode(newrec_.part_ownership));
         END IF;
      ELSIF (newrec_.supply_code IN ('SO', 'MRO', 'SEO')) THEN
         IF (newrec_.part_ownership NOT IN (Part_Ownership_API.DB_COMPANY_OWNED,
                                            Part_Ownership_API.DB_CUSTOMER_OWNED)) THEN
            Error_SYS.Record_General(lu_name_,'INVALIDSUPPLYPARTOWN: Ownership :P1 is not allowed for this supply code.', Part_Ownership_API.Decode(newrec_.part_ownership));
         END IF;
      ELSIF (newrec_.supply_code = 'ND') THEN
         IF (newrec_.part_ownership NOT IN (Part_Ownership_API.DB_COMPANY_OWNED,
                                            Part_Ownership_API.DB_SUPPLIER_RENTED,
                                            Part_Ownership_API.DB_COMPANY_RENTAL_ASSET)) THEN
            Error_SYS.Record_General(lu_name_,'INVALIDSUPPLYPARTOWN: Ownership :P1 is not allowed for this supply code.', Part_Ownership_API.Decode(newrec_.part_ownership));
         END IF;
      ELSIF (newrec_.supply_code = 'NO') THEN
         IF (newrec_.part_ownership NOT IN (Part_Ownership_API.DB_COMPANY_OWNED,
                                            Part_Ownership_API.DB_SUPPLIER_RENTED,
                                            Part_Ownership_API.DB_COMPANY_RENTAL_ASSET)) THEN
            Error_SYS.Record_General(lu_name_,'INVALIDSUPPLYPARTOWN: Ownership :P1 is not allowed for this supply code.', Part_Ownership_API.Decode(newrec_.part_ownership));
         END IF;
      ELSIF (newrec_.supply_code = 'PT') THEN
         IF (newrec_.part_ownership NOT IN (Part_Ownership_API.DB_COMPANY_OWNED,
                                            Part_Ownership_API.DB_SUPPLIER_RENTED,
                                            Part_Ownership_API.DB_COMPANY_RENTAL_ASSET)) THEN
            Error_SYS.Record_General(lu_name_,'INVALIDSUPPLYPARTOWN: Ownership :P1 is not allowed for this supply code.', Part_Ownership_API.Decode(newrec_.part_ownership));
         END IF;
      ELSIF (newrec_.supply_code = 'IPT') THEN
         IF (newrec_.part_ownership NOT IN (Part_Ownership_API.DB_COMPANY_OWNED,
                                            Part_Ownership_API.DB_SUPPLIER_RENTED)) THEN
            IF (company_ = supplier_company_) THEN
               --Company Rental Asset is allowed for inter-site in the same company.
               IF (newrec_.part_ownership != Part_Ownership_API.DB_COMPANY_RENTAL_ASSET) THEN
                  Error_SYS.Record_General(lu_name_,'INVALIDSUPPLYPARTOWN: Ownership :P1 is not allowed for this supply code.', Part_Ownership_API.Decode(newrec_.part_ownership));
               END IF;
            ELSE
               Error_SYS.Record_General(lu_name_,'INVALIDSUPPLYPARTOWN: Ownership :P1 is not allowed for this supply code.', Part_Ownership_API.Decode(newrec_.part_ownership));
            END IF;
         END IF;
      ELSIF (newrec_.supply_code IN ('PD', 'IPD')) THEN
         IF (newrec_.rental = Fnd_Boolean_API.DB_FALSE) THEN
            IF (newrec_.part_ownership NOT IN (Part_Ownership_API.DB_COMPANY_OWNED,
                                               Part_Ownership_API.DB_SUPPLIER_RENTED)) THEN
               Error_SYS.Record_General(lu_name_,'INVALIDSUPPLYPARTOWN: Ownership :P1 is not allowed for this supply code.', Part_Ownership_API.Decode(newrec_.part_ownership));
            END IF;
         ELSE
            Error_SYS.Record_General(lu_name_,'INVALIDSUPPLYPARTOWN: Ownership :P1 is not allowed for this supply code.', Part_Ownership_API.Decode(newrec_.part_ownership));
         END IF;
      ELSIF (newrec_.supply_code IN ('DOP', 'PKG','PS')) THEN
         IF (newrec_.part_ownership != Part_Ownership_API.DB_COMPANY_OWNED)THEN
            Error_SYS.Record_General(lu_name_,'INVALIDSUPPLYPARTOWN: Ownership :P1 is not allowed for this supply code.', Part_Ownership_API.Decode(newrec_.part_ownership));
         END IF;
      END IF;

      IF (newrec_.line_item_no > 0) THEN
         IF (newrec_.part_ownership != Part_Ownership_API.DB_COMPANY_OWNED) THEN
            Error_SYS.Record_General(lu_name_,'INVALIDCOMPART: Ownership :P1 is not allowed for component parts.', Part_Ownership_API.Decode(newrec_.part_ownership));
         END IF;
      END IF;

      IF (newrec_.consignment_stock = 'CONSIGNMENT STOCK') AND (newrec_.part_ownership != Part_Ownership_API.DB_COMPANY_OWNED) THEN
         Error_SYS.Record_General(lu_name_,'INVALIDCONOWNERSHIP: Only ownership company owned is allowed for consignment stock.');
      END IF;

      IF (newrec_.part_ownership = Part_Ownership_API.DB_CUSTOMER_OWNED) AND (newrec_.owning_customer_no IS NULL) THEN
         Error_SYS.Record_General(lu_name_,'OWNINGCUSNONULL: There should be a owning customer for customer owned stock.');
      END IF;

   END IF;

   IF (newrec_.supply_code = 'PKG') THEN
      IF (customer_company_= company_) AND (customer_contract_ IS NOT NULL) THEN
         Error_SYS.Record_General(lu_name_, 'NOPKGPART: Creation or delivery of internal customer order lines using a package part is not allowed for Inter-Site handling between two sites connected to the same company.');
      END IF;
   END IF;

   -- Non inventory Parts are not considered for Planning, therefore newrec_.rel_mtrl_planning should be 'FALSE'. But due to a technical limitation,
   -- we have to maintain the default check for newrec_.rel_mtrl_planning for Non Inventory Parts.
   IF (newrec_.supply_code = 'NO') AND (newrec_.rel_mtrl_planning = 'FALSE') THEN
      Error_SYS.Record_General(lu_name_, 'RELMTRLNOTUPDATE: The Release for Mtrl Planning check box cannot be updated for non inventory sales parts.');
   END IF;

   IF (newrec_.part_no IS NOT NULL) THEN
      IF (company_ = customer_company_) THEN
         IF (sales_part_rec_.part_no != Sales_Part_API.Get_Part_No(newrec_.contract, newrec_.original_part_no)) THEN
            Error_SYS.Record_General(lu_name_, 'REPARTEXISTS: You are not allowed to replace the sales part :P1 with the sales part :P2 since the intersite flow occurs within a single company.' ,newrec_.original_part_no, sales_part_rec_.part_no);
         ELSIF(cust_ord_cust_rec_.category = 'I' AND Part_Catalog_API.Get_Configurable_Db(nvl(newrec_.part_no, newrec_.catalog_no)) = 'CONFIGURED') THEN 
            Client_sys.Add_Info(lu_name_, 'CONFIGPARTSAVE: The configurable parts will remain in internal order transit upon delivery as internal purchase order information does not exist');
         END IF;
      END IF;

       IF (newrec_.supply_code = 'IPT' OR newrec_.supply_code = 'IPD') THEN
         IF (supplier_acquisition_site_ IS NOT NULL) THEN
            IF (supplier_company_ = company_) THEN
               IF (NOT Inventory_Part_API.Check_Exist(supplier_acquisition_site_, newrec_.part_no)) THEN
                  Error_SYS.Record_General(lu_name_, 'NOVENDPART: Creation of internal order lines are not allowed when inventory part :P1 does not exist in supplier site :P2.', newrec_.part_no, supplier_acquisition_site_);
               END IF;

               IF (newrec_.rental = Fnd_Boolean_API.DB_TRUE AND newrec_.supply_code = 'IPT' AND newrec_.part_ownership != Part_Ownership_API.DB_COMPANY_RENTAL_ASSET) THEN
                  Error_SYS.Record_General(lu_name_,'INVALIDRENTPARTCRA: Ownership Type :P1 is not allowed for this supply code if the supply site belongs to the same company.', Part_Ownership_API.Decode(newrec_.part_ownership));
               END IF;
            ELSE
               IF (newrec_.rental = Fnd_Boolean_API.DB_TRUE AND newrec_.supply_code = 'IPT' AND newrec_.part_ownership != Part_Ownership_API.DB_SUPPLIER_RENTED) THEN
                  Error_SYS.Record_General(lu_name_,'INVALIDRENTPARTSR: Ownership Type :P1 is not allowed for this supply code if the supply site belongs to a different company.', Part_Ownership_API.Decode(newrec_.part_ownership));
               END IF;
            END IF;
         END IF;
      END IF;

      IF (customer_company_= company_) AND (customer_contract_ IS NOT NULL) THEN
         IF (NOT Inventory_Part_API.Check_Exist(customer_contract_, newrec_.part_no)) THEN
            Error_SYS.Record_General(lu_name_, 'NOCUSTPART: Creation of Internal Order Lines are not allowed when Inventory Part :P1 does not exist in Customer Site :P2', newrec_.part_no, customer_contract_);
         END IF;
      END IF;
   END IF;
   IF (sales_part_rec_.activeind = 'N') THEN
      Error_SYS.Record_General(lu_name_, 'NOT_ACTIVE: The sales part :P1 is not active for sale', newrec_.catalog_no);
   END IF;

   IF NOT (Is_External_Service_Order___(newrec_.demand_code, newrec_.demand_order_ref1) = 'TRUE') THEN
      Check_Active_Part___(newrec_.contract, sales_part_rec_.part_no);
   END IF;
END Check_Before_Insert___;


PROCEDURE Check_Before_Update___ (
   attr_                  IN OUT NOCOPY VARCHAR2,
   newrec_                IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   oldrec_                IN     CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   header_curr_code_      IN     VARCHAR2,
   header_rowstate_       IN     VARCHAR2,
   delivery_date_changed_ IN     BOOLEAN )
IS
   sales_part_rec_               SALES_PART_API.Public_Rec;
   header_rec_                   CUSTOMER_ORDER_API.Public_Rec;
   consignment_stock_db_         VARCHAR2(20);
   company_                      VARCHAR2(20);
   supply_code_changed_          BOOLEAN;
   sup_object_status_            VARCHAR2(200);
   qty_refreshed_                NUMBER;
   price_source_refreshed_       NUMBER;
   objid_                        VARCHAR2(2000);
   suppcodeupd_                  BOOLEAN := FALSE;
   notdecided_                   BOOLEAN := FALSE;
   interim_header_id_            VARCHAR2(12);
   order_code_                   VARCHAR2(20);
   cust_ord_line_rec_            Public_Rec;
   qty_changed_                  BOOLEAN := FALSE;
   supplier_acquisition_site_    VARCHAR2(5);
   cust_acquisition_site_        VARCHAR2(5);
   customer_contract_            CUSTOMER_ORDER_LINE_TAB.contract%TYPE;
   cust_contract_connected_comp_ SITE_TAB.company%TYPE;
   capability_check_source_flag_ VARCHAR2(5);
   tax_customer_no_              CUSTOMER_ORDER_LINE_TAB.customer_no%TYPE;
   tax_ship_addr_no_             CUSTOMER_ORDER_LINE_TAB.ship_addr_no%TYPE;
   partca_condition_code_usage_  PART_CATALOG_TAB.condition_code_usage%TYPE;
   change_request_               VARCHAR2(5);
   server_data_change_           VARCHAR2(10);
   configuration_id_changed_     BOOLEAN := FALSE;
   expired_                      BOOLEAN := FALSE;
   insert_package_mode_          VARCHAR2(5);
   sales_price_type_db_          VARCHAR2(20);
   price_effective_date_         DATE;
   cond_update_error_            VARCHAR2(6);
   discount_freeze_db_           VARCHAR2(5);
   po_order_no_                  VARCHAR2(12);
   po_line_no_                   VARCHAR2(4);
   po_rel_no_                    VARCHAR2(4);
   purchase_type_                VARCHAR2(30);
   purchase_type_db_             VARCHAR2(1);
   cond_update_info_             VARCHAR2(6);
   allow_to_update_              VARCHAR2(5) := 'FALSE';
   connected_so_found_           VARCHAR2(5) := 'FALSE';
   connected_po_found_           NUMBER;
   unpeg_ipd_flag_               VARCHAR2(5);
   result_code_                  VARCHAR2(2000);
   available_qty_                NUMBER := 0;
   earliest_available_date_      DATE;
   
   CURSOR pkgpart_components IS
      SELECT line_item_no, qty_assigned, qty_shipped, buy_qty_due, qty_per_assembly, qty_on_order, conv_factor, inverted_conv_factor, supply_code
      FROM CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = newrec_.order_no
      AND line_no = newrec_.line_no
      AND rel_no = newrec_.rel_no
      AND line_item_no > 0
      ORDER BY line_item_no;

   CURSOR get_id(order_no_ IN VARCHAR2, line_no_ IN VARCHAR2,
                 rel_no_ IN VARCHAR2, line_item_no_ IN NUMBER) IS
      SELECT rowid
      FROM CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = order_no_
      AND line_no = line_no_
      AND rel_no = rel_no_
      AND line_item_no = line_item_no_;
BEGIN
   change_request_               := Client_SYS.Get_Item_Value('CHANGE_REQUEST', attr_);
   qty_refreshed_                := (NVL(Client_SYS.Get_Item_Value('QTY_REFRESHED', attr_), 0));
   price_source_refreshed_       := (NVL(Client_SYS.Get_Item_Value('PRICE_SOURCE_REFRESHED', attr_), 0));
   capability_check_source_flag_ := NVL(Client_SYS.Get_Item_Value('CAPABILITY_CHECK_SOURCE_FLAG', attr_), 'FALSE');
   supply_code_changed_          := (newrec_.supply_code != oldrec_.supply_code);
   unpeg_ipd_flag_               := NVL(Client_SYS.Get_Item_Value('UNPEG_IPD_FLAG', attr_), 'FALSE');
   -- Qty_changed is not set when the revised_qty_due is changed to equal the current shipped quantity.
   IF (newrec_.revised_qty_due > oldrec_.revised_qty_due) OR ((newrec_.revised_qty_due > oldrec_.qty_shipped) AND (newrec_.revised_qty_due < oldrec_.revised_qty_due)) THEN
     qty_changed_ := TRUE;
   END IF;
   server_data_change_           := NVL(Client_SYS.Get_Item_Value('SERVER_DATA_CHANGE', attr_), 0);
   insert_package_mode_          := NVL(Client_SYS.Get_Item_Value('INSERT_PACKAGE_MODE_', attr_), 'FALSE');
   IF (newrec_.rental = Fnd_Boolean_API.DB_FALSE) THEN
      sales_price_type_db_  := Sales_Price_Type_API.DB_SALES_PRICES;
      price_effective_date_ := newrec_.price_effectivity_date;
   ELSE
      sales_price_type_db_  := Sales_Price_Type_API.DB_RENTAL_PRICES;
      price_effective_date_ := Get_Planned_Rental_Start_Dt___(attr_, newrec_);
   END IF;

   IF ((Site_To_Site_Reserve_Setup_API.Exists(newrec_.supply_site, newrec_.contract)) AND
      (Site_To_Site_Reserve_Setup_API.Get_Rel_Mtrl_Planning_Db(newrec_.supply_site, newrec_.contract) = Rel_Mtrl_Planning_API.DB_NOT_VIS_PLANNED_RELEASED)) THEN
      allow_to_update_ := 'TRUE';
   END IF;      
      
   IF newrec_.activity_seq IS NOT NULL AND newrec_.job_id IS NOT NULL THEN
      Error_SYS.Record_General(lu_name_, 'JOBIDEXIST: A customer order line cannot be connected to both a project and a financial job.');
   END IF;

   IF (newrec_.rel_mtrl_planning != oldrec_.rel_mtrl_planning) THEN
      IF (newrec_.rowstate != 'Released') THEN
         Error_SYS.Record_General(lu_name_, 'RELMTRLCANNOTUPDATE: The Release for Mtrl Planning check box can be updated only when the order line is in the Released state.');
      ELSIF ((newrec_.qty_on_order > 0) AND (allow_to_update_ = 'FALSE')) THEN
         Error_SYS.Record_General(lu_name_, 'PEGLINECANNOTUPDATE: The Release for Mtrl planning check box cannot be cleared when pegged supplies are created.');
      END IF;

      IF (newrec_.supply_code = 'NO') THEN
         Error_SYS.Record_General(lu_name_, 'RELMTRLNOTUPDATE: The Release for Mtrl Planning check box cannot be updated for non inventory sales parts.');
      ELSIF (newrec_.supply_code = 'PKG') THEN
         Error_SYS.Record_General(lu_name_, 'RELMTRLPKGTUPDATE: The Release for Mtrl Planning check box cannot be updated for package parts. Please use the package part structure window to set it for component lines.');
      END IF;
   END IF;

   IF (oldrec_.self_billing != newrec_.self_billing) THEN
      IF (newrec_.qty_invoiced > 0) THEN
            Error_SYS.Record_General(lu_name_,'NOUPDATESELFBILL: It is not allowed to change self billing when the order line is invoiced.');
      ELSE
         IF (newrec_.customer_part_no IS NULL) THEN
            IF (newrec_.self_billing = 'SELF BILLING') THEN
               Error_SYS.Record_General(lu_name_, 'CUSTPARTNONEEDED: Customer''s part number is needed on the customer order line to enable self-billing.');
            END IF;
         ELSE
            IF (NVL(Sales_Part_Cross_Reference_API.Get_Self_Billing_Db(newrec_.customer_no, newrec_.contract, newrec_.customer_part_no), 'NOT SELF BILLING') = 'NOT SELF BILLING')
               AND (newrec_.self_billing = 'SELF BILLING') THEN
               Error_SYS.Record_General(lu_name_, 'EDITNOTALLOWEDSB: Cannot use self-billing on customer order line when there is no sales part cross reference record allowing self-billing for Sales part :P1 and Customer :P2 on site :P3 .',
                                        newrec_.catalog_no, newrec_.customer_no, newrec_.contract);
            END IF;
         END IF;
      END IF;
   END IF;

   IF (newrec_.qty_invoiced > 0) THEN
      IF (oldrec_.provisional_price != newrec_.provisional_price) THEN
         Error_SYS.Record_General(lu_name_,'NOTINVPROVPRICE: It is not allowed to change provisional price check when the order line is Invoiced.');
      END IF;
   END IF;

   IF (newrec_.line_item_no > 0) THEN
      IF (oldrec_.shipment_connected != newrec_.shipment_connected) THEN
         NULL;
      ELSIF (newrec_.shipment_connected = 'TRUE' AND newrec_.buy_qty_due != oldrec_.buy_qty_due) THEN
         Error_SYS.Record_General(lu_name_, 'EDIT_NOT_ALLOWED: Modifications to Component Part(s) not allowed when the Package Part is connected to a Shipment.');
      END IF;
   END IF;

   IF supply_code_changed_ THEN
      suppcodeupd_ := FALSE;
      IF (oldrec_.supply_code = 'SO') THEN
          connected_so_found_ := Customer_Order_Shop_Order_API.Connected_Orders_Found(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
       ELSIF (oldrec_.supply_code IN ('PT', 'PD', 'IPT', 'IPD')) THEN
          connected_po_found_ := Customer_Order_Pur_Order_API.Connected_Orders_Found(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
       END IF;
      IF (newrec_.supply_code = 'SRC') THEN
         Error_SYS.Record_General(lu_name_, 'AUTONOUPDATE: Supply code ":P1" can only be used on New order lines.', Order_Supply_Type_API.Decode('SRC'));
      END IF;
      IF (newrec_.rowstate = 'Reserved') THEN
         IF ((oldrec_.supply_code IN ('PI','PJD')) AND (newrec_.supply_code IN ('IO'))) OR ((oldrec_.supply_code IN ('IO')) AND (newrec_.supply_code IN ('PI','PJD'))) THEN
            Error_SYS.Record_General(lu_name_, 'NO_CHANGE_ALLOWED: Changing the supply code to ":P1" is not allowed for reserved line. Un-reserve the line before changing the supply code.', Order_Supply_Type_API.Decode(newrec_.supply_code));
         END IF;
      END IF;
      IF ((connected_so_found_ = 'TRUE' OR connected_po_found_ = 1 OR (connected_po_found_ = 0 AND unpeg_ipd_flag_ = 'TRUE')) AND (oldrec_.supply_code IN ('PT', 'PD', 'IPT', 'IPD', 'SO')) AND (newrec_.supply_code IN ('IO', 'NO'))) THEN
	      IF (server_data_change_ = 1) THEN
	         suppcodeupd_ := TRUE;
	      ELSE
	 	      Error_SYS.Record_General(lu_name_, 'NO_SUPPCODE_UPDATE2: Supply Code may not be updated if a pegged supply has been created. If applicable you may use the option to Unpeg instead.');
	      END IF;
	   END IF; 
      -- IF order has been released the supply code may be changed only if it was Not Decided...
      IF (header_rowstate_ = 'Planned') THEN
         suppcodeupd_ := TRUE;
         notdecided_  := (oldrec_.supply_code = 'ND');
      ELSIF ((oldrec_.supply_code = 'ND') AND (header_rowstate_ NOT IN ('Delivered', 'Invoiced', 'Cancelled'))) THEN
         suppcodeupd_ := TRUE;
         notdecided_  := TRUE;
      ELSIF (newrec_.rowstate = 'Released') THEN
         IF (Sales_Part_API.Get_Configurable_Db(newrec_.contract, newrec_.catalog_no) = 'CONFIGURED' AND newrec_.configuration_id = '*') THEN
            suppcodeupd_ := TRUE;
         ELSE
            -- When using Project Inventory functionality ( ACTIVITY_SEQ > 0 ) SUPPLY_CODE can be switched as follows (as long as the line state is Released)
            --   PI  <-> IO
            --   PRJ <-> NO
            IF (oldrec_.supply_code IN ('IO', 'NO', 'PI', 'PRJ', 'PJD' ) AND newrec_.supply_code IN ('IO', 'NO', 'PI', 'PRJ', 'PJD')) THEN
               suppcodeupd_ := TRUE;
            ELSIF ((oldrec_.supply_code IN ('SO', 'PT', 'PD', 'IPT', 'IPD')) AND (newrec_.supply_code IN ('PI', 'PRJ')) AND (newrec_.activity_seq IS NOT NULL)) THEN
               IF (server_data_change_ = 1) THEN
                  suppcodeupd_ := TRUE;
               END IF;
            ELSIF ((NVL(oldrec_.demand_code, Database_SYS.string_null_) != 'DO') AND (oldrec_.supply_code IN ('IO', 'PI')) AND (newrec_.supply_code IN ('SO', 'PT', 'PD', 'IPT', 'IPD', 'DOP'))) THEN
               suppcodeupd_ := TRUE;
            ELSIF ((oldrec_.supply_code IN ('PRJ', 'NO')) AND (newrec_.supply_code IN ('PT','PD', 'IPT', 'IPD'))) THEN
               suppcodeupd_ := TRUE;
            END IF;
         END IF;
      ELSIF ((newrec_.rowstate = 'Reserved') AND (oldrec_.supply_code IN ('IO', 'PI', 'PJD')) AND (newrec_.supply_code IN ('IO', 'PI', 'PJD'))) THEN
         suppcodeupd_ := TRUE;
      ELSIF (newrec_.activity_seq IS NULL AND oldrec_.activity_seq IS NOT NULL) THEN
         suppcodeupd_ := TRUE;
      END IF;

      IF suppcodeupd_ THEN
         -- Validate supply code so that it has the correct value depending on different data
         Check_Supply_Code___(newrec_);
      ELSE
         Error_SYS.Record_General(lu_name_, 'NO_SUPPCODE_UPDATE: Supply code may not be updated when the order has been Released.');
      END IF;
   END IF;

   Check_Purch_Supply_Code___(newrec_);-- prevent setting target date earlier than wanted delivery date

   --Note: Check whether supply site exists
   IF newrec_.supply_site IS NOT NULL THEN
      Site_API.Exist(newrec_.supply_site);
   END IF;

   IF ((newrec_.supply_code IN ('PD', 'IPD')) AND (newrec_.consignment_stock = 'CONSIGNMENT STOCK')) THEN
      Error_SYS.Record_General(lu_name_, 'SUPPLY_CODE: Not possible to have supply code Purchase Order Direct or Internal Purchase Order Direct for Consignment Stock parts');
   END IF;

   -- extended check on order header's delivery confirmation flag
   Validate_Delivery_Conf___(newrec_, FALSE, NULL, NULL);

   IF (newrec_.staged_billing = 'STAGED BILLING') THEN
      IF NOT ((newrec_.rowstate = 'Released' OR newrec_.rowstate = 'Invoiced') AND (newrec_.qty_shipped = 0) AND (newrec_.qty_invoiced > 0)) THEN
         IF (newrec_.qty_shipdiff > 0 ) THEN
            Error_SYS.Record_General(lu_name_, 'POSSHIPDIFF: Picking or delivering a qty greater than the Revised Qty of the Customer Order Line is not allowed when using Staged Billing. Please adjust the Sales Qty so that Revised Qty corresponds with the qty to be picked or delivered.');
         ELSIF (newrec_.qty_shipdiff < 0) THEN
            Error_SYS.Record_General(lu_name_, 'NEGSHIPDIFF: When using Staged Billing an order line may not be closed when picking or delivering a qty less than the Revised Qty of the Customer Order Line. Please adjust the Sales Qty so that Revised Qty corresponds with the qty to be picked or delivered before closing.');
         END IF;
      END IF;
   END IF;

   -- IF ship time is changed in customer order line.
   IF (to_char(newrec_.planned_ship_date,'HH24:MI') != to_char(oldrec_.planned_ship_date,'HH24:MI')) THEN
      IF (to_char(newrec_.planned_delivery_date, 'YYYY-MM-DD') != to_char(newrec_.planned_ship_date,'YYYY-MM-DD')) THEN
         IF (newrec_.delivery_leadtime = 0) THEN
            IF (to_char(newrec_.planned_ship_date,'HH24:MI') <= to_char( newrec_.planned_delivery_date , 'HH24:MI')) THEN
                newrec_.planned_delivery_date  := newrec_.planned_delivery_date - 1;
                newrec_.promised_delivery_date := newrec_.promised_delivery_date - 1;
            END IF;
         END IF;
       ELSE
          IF (to_char(newrec_.planned_delivery_date, 'YYYY-MM-DD') = to_char(newrec_.planned_ship_date,'YYYY-MM-DD')) THEN
            IF NOT ((to_char(newrec_.planned_delivery_date, 'HH24:MI') = '00:00') OR (to_char(newrec_.planned_ship_date, 'HH24:MI') = '00:00')) THEN
               IF (to_char(newrec_.planned_ship_date,'HH24:MI') > to_char( newrec_.planned_delivery_date , 'HH24:MI')) THEN
                  newrec_.planned_delivery_date  := newrec_.planned_delivery_date + 1;
                  newrec_.promised_delivery_date := newrec_.promised_delivery_date + 1;
               END IF;
            END IF;
         END IF;
       END IF;
   END IF;

   sales_part_rec_ := Sales_Part_API.Get(newrec_.contract, newrec_.catalog_no);
   configuration_id_changed_ := newrec_.configuration_id != oldrec_.configuration_id;

   -- Set release_planning flag according to supply_code, quantity and delivery date change. But only set it if the supply_code is IPT or IPD.
   -- Setting release_planning flag is done irrespective of checking the sourcing option. This code was place to facilitate availability check functionality.
   IF (((supply_code_changed_) OR (qty_changed_) OR (delivery_date_changed_) OR (configuration_id_changed_)) AND (newrec_.supply_code IN ('IPT', 'IPD'))) THEN   
      IF (NOT(Internal_Co_Line_Exists___(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no))) THEN
         newrec_.release_planning := 'RELEASED';
      END IF;
   END IF;

   -- override the value entered by the user for the ship date if the planned delivery date has changed
   -- Added qty_changed and supply_code_changed conditions
   IF configuration_id_changed_ OR delivery_date_changed_ OR supply_code_changed_ OR qty_changed_ OR
       (newrec_.part_ownership != oldrec_.part_ownership) OR (newrec_.rel_mtrl_planning != oldrec_.rel_mtrl_planning) THEN
      OPEN get_id(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
      FETCH get_id INTO objid_;
      CLOSE get_id;
      IF ((Client_SYS.Get_Item_Value('MOVE_DELIVERY_DATE_FORWARD', attr_) = 'TRUE') AND
         (newrec_.planned_delivery_date != oldrec_.planned_delivery_date) AND
         (Work_Time_Calendar_API.Is_Working_Day(newrec_.cust_calendar_id, newrec_.planned_delivery_date) = 0)) THEN
         newrec_.planned_delivery_date := Work_Time_Calendar_API.Get_Next_Work_Day(newrec_.cust_calendar_id, newrec_.planned_delivery_date);
      END IF;
      IF(newrec_.rowstate != 'Cancelled') THEN
         -- do not calculate the order dates if this line have just been updated from a capability checked sourced order line
         -- because we have already done forward date calculation that we do not want recalculated now
         IF (capability_check_source_flag_ = 'FALSE') THEN
            Calculate_Order_Line_Dates___(newrec_, oldrec_, objid_);
         END IF;
      END IF;
      
      -- This flag was set to RELEASE for all sourcing options if the supply code, quantity or deliver_date was changed. 
      -- From this code block release_planning flag will be reset for all the sourcing options except inventory order.
      IF ((newrec_.supply_code IN ('IPT', 'IPD')) AND (newrec_.release_planning = 'RELEASED')) THEN
         IF (NOT((Sales_part_API.Get_Valid_Sourcing_Option(newrec_.supply_site, newrec_.catalog_no) = 'INVENTORYORDER'))) THEN
            newrec_.release_planning := 'NOTRELEASED' ;
         END IF;
         IF (header_rowstate_ IN ('Planned', 'Released')) THEN
            IF ((supply_code_changed_) OR (newrec_.vendor_no != oldrec_.vendor_no)) THEN
               -- During update, rel_mtrl_planning is only set either supply code or vendor_no is changed. 
               -- set the rel_mtrl_planning flag in newrec_.
               Assign_Rel_Mtrl_Planning___(newrec_, header_rowstate_);
            END IF;
         END IF; 
      END IF;
      
      IF (newrec_.planned_delivery_date != oldrec_.planned_delivery_date) AND newrec_.qty_assigned > 0 THEN
         expired_ := Reserve_Customer_Order_API.Check_Expired(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, newrec_.contract, newrec_.catalog_no, newrec_.planned_delivery_date);
         IF (expired_) THEN
            Client_SYS.Add_Info(lu_name_, 'DATE_EXP: Please review the inventory part reservations as the change of planned delivery date resulted in the minimum required shelf life not being fulfilled for at least some of the inventory part reservations.');
         END IF;
      END IF;      
      -- Added extra condition to satisfy the previous execution
      IF (delivery_date_changed_ OR notdecided_) THEN
         IF ((newrec_.supply_code IN ('ND')) AND (oldrec_.qty_on_order != 0) AND (header_rowstate_ != 'Planned')) THEN
            Client_SYS.Add_Info(lu_name_, 'WRONGSUPPLY2: Since this is a supply from another order, the date on that order will not be updated automatically.');
         END IF;

         IF (newrec_.demand_code = 'PO') AND (NVL(Client_SYS.Get_Item_Value('PO_CHARGED_COMP_CHANGE', attr_), 'FALSE') = 'FALSE') THEN
            Client_SYS.Add_Info(lu_name_, 'CONNECTED_TO_PO: This order is connected to purchase order :P1/:P2/:P3 - which will not be updated automatically.', newrec_.demand_order_ref1, newrec_.demand_order_ref2, newrec_.demand_order_ref3);
         ELSIF (newrec_.demand_code = 'WO') THEN
            Client_SYS.Add_Info(lu_name_, 'CONNECTED_TO_WO: This order is connected to work order :P1/:P2/:P3 - which will not be updated automatically.', newrec_.demand_order_ref1, newrec_.demand_order_ref2, newrec_.demand_order_ref3);
         END IF;
      END IF;

      IF (newrec_.supply_code = 'PS' AND header_rowstate_ != 'Planned') THEN
         IF delivery_date_changed_ THEN
            Client_SYS.Add_Info(lu_name_, 'PS_EXISTLDATE: The customer order line delivery date has changed. Production schedule will not be updated automatically.');
         ELSIF qty_changed_ THEN
            Client_SYS.Add_Info(lu_name_, 'PS_EXISTLQTY: The customer order line quantity has changed. Production schedule will not be updated automatically.');
         END IF;
      END IF;

      IF (newrec_.demand_code = 'CRO') THEN
         IF (newrec_.part_ownership != oldrec_.part_ownership) THEN
            IF (newrec_.supply_code = 'CRO') THEN
               Error_Sys.Record_General(lu_name_, 'CRO_OWNERSHIP: Customer order line is created from a component repair order with ownership Customer-Owned. You cannot change the ownership.');
            END IF;
         END IF;

         IF (oldrec_.supply_code = 'CRO' AND supply_code_changed_) THEN
            Error_SYS.Record_General(lu_name_, 'COCREATEDFROMCRO: Customer order line is created from a component repair order. You cannot change the supply code.');
         ELSIF ((newrec_.supply_code NOT IN ('IO', 'SEO')) AND (newrec_.part_ownership = 'COMPANY OWNED')) THEN
            Error_SYS.Record_General(lu_name_, 'DEMCROSUPIOCOMPOWNED: The customer order line is created from a component repair order. For the Company-Owned ownership, only the :P1 and :P2 supply codes are applicable.', (Order_Supply_Type_API.Decode('IO')), (Order_Supply_Type_API.Decode('SEO')));
         END IF;
      END IF;
   -- Only changing the abnormal demand flag in orderline will update the MS level 1 
   ELSIF (oldrec_.abnormal_demand != newrec_.abnormal_demand) AND (Inventory_Part_API.Get_Forecast_Consump_Flag_Db(newrec_.contract, newrec_.part_no) = 'FORECAST') THEN 
      Reserve_Customer_Order_API.Control_Ms_Mrp_Consumption(result_code_, available_qty_, earliest_available_date_, newrec_.contract, newrec_.part_no, NVL(newrec_.activity_seq, 0),
                                                               newrec_.revised_qty_due, oldrec_.revised_qty_due, newrec_.planned_due_date, oldrec_.planned_due_date, 'CO', TRUE, newrec_.abnormal_demand,oldrec_.abnormal_demand);
   END IF;

   -- return the new supply_site_due_date to client
   IF (supply_code_changed_ AND newrec_.supply_code IN ('IPT', 'IPD')) THEN
      Client_SYS.Add_To_Attr('SUPPLY_SITE_DUE_DATE', newrec_.supply_site_due_date, attr_);
   ELSIF (supply_code_changed_ AND newrec_.supply_code NOT IN ('IPT', 'IPD')) THEN
      -- clear supply_site_due_date if its not a IPT/IPD
      newrec_.supply_site_due_date := NULL;
      Client_SYS.Add_To_Attr('SUPPLY_SITE_DUE_DATE', newrec_.supply_site_due_date, attr_);
   END IF;

   Client_SYS.Add_To_Attr('PLANNED_SHIP_PERIOD', newrec_.planned_ship_period, attr_);
   -- the column is mandatory in the database, but calculated from the delivery dates
   Error_SYS.Check_Not_Null(lu_name_, 'PLANNED_SHIP_DATE', newrec_.planned_ship_date);
   -- Check if right SUPPLY_CODE
   IF ((newrec_.price_list_no IS NOT NULL) AND (newrec_.price_list_no != NVL(oldrec_.price_list_no, ' '))) THEN
      -- Check if valid
      IF ((Sales_Price_List_API.Is_Valid(newrec_.price_list_no, newrec_.contract, newrec_.catalog_no, price_effective_date_, sales_price_type_db_) = FALSE) AND
          (Sales_Price_List_API.Is_Valid_Assort(newrec_.price_list_no, newrec_.contract, newrec_.catalog_no, newrec_.price_effectivity_date) = FALSE)) OR
          (Sales_Price_List_API.Get_Sales_Price_Group_Id(newrec_.price_list_no) != sales_part_rec_.sales_price_group_id) THEN
         Error_Sys.Record_General(lu_name_, 'INVALID_PRICELIST: The selected sales price list has no valid part-based line or a valid assortment-node-based line for the sales part.');
      END IF;
   END IF;

   IF (newrec_.supply_code = 'MRO') THEN
      Validate_Mro_Line___(newrec_.part_no, newrec_.buy_qty_due, newrec_.part_ownership);
   END IF;

   IF supply_code_changed_ THEN
      IF (oldrec_.supply_code IN ('IO','PS') AND oldrec_.qty_on_order > 0) THEN
           Error_SYS.Record_General(lu_name_,'PEG_SUPPLY_CODE: The customer order line is pegged to a supply. Remove the pegging first, then change the supply code.');
      END IF;
   END IF;

   -- create SM object option check
   IF (newrec_.create_sm_object_option != oldrec_.create_sm_object_option) THEN
      IF (newrec_.rowstate IN ('PartiallyDelivered', 'Delivered', 'Cancelled', 'Invoiced')) THEN
         Error_SYS.Record_General(lu_name_, 'SM_OPTION: The Create SM Object Option can not be changed when status is Partially Delivered or Delivered or Cancelled or Invoiced/Closed.');
      ELSIF (newrec_.part_no IS NULL) THEN
         Error_SYS.Record_General(lu_name_, 'SM_NOT_VALID1: The Create SM Object Option can not be set for none inventory parts.');
      ELSIF (newrec_.create_sm_object_option = 'CREATESMOBJECT') AND (Part_Catalog_API.Get_Rcpt_Issue_Serial_Track_Db(newrec_.part_no) = Fnd_Boolean_API.DB_FALSE) THEN
         Error_SYS.Record_General(lu_name_, 'SM_NOT_ALLOWED1: The Create SM Object Option can not be set on an item without serial tracking.');
      ELSIF (newrec_.sm_connection = 'CONNECTED') THEN
         Error_SYS.Record_General(lu_name_, 'SM_NOT_VALID3: The Create SM Object Option and SM Connection can not both be set at the same time.');
      END IF;
   END IF;

   IF (NVL(newrec_.Sup_Sm_Contract,' ') != NVL(oldrec_.Sup_Sm_Contract,' ') OR
       NVL(newrec_.Sup_Sm_Object,' ') != NVL(oldrec_.Sup_Sm_Object,' ')) AND
       (newrec_.rowstate IN ('PartiallyDelivered', 'Delivered', 'Cancelled', 'Invoiced')) THEN
      Error_SYS.Record_General(lu_name_, 'SUPOBJSTATE: The Superior Object can not be changed when status is Partially Delivered or Delivered or Cancelled or Invoiced/Closed.');
   END IF;

   -- check so sup_sm_object isnt NULL when sup_sm_contract has a value
   IF (newrec_.sup_sm_contract IS NOT NULL and newrec_.sup_sm_object IS NULL) THEN
      Raise_Sm_Object_Error___;
   END IF;

   -- check so sup_sm_contract isnt NULL when sup_sm_object has a value
   IF (newrec_.sup_sm_contract IS NULL and newrec_.sup_sm_object IS NOT NULL) THEN
      Error_SYS.Record_General(lu_name_, 'SMSITENULL: Superior SM Site cannot be empty when Superior SM Object have a value.');
   END IF;

   -- sup_sm_object status control
   IF (newrec_.sup_sm_contract IS NOT NULL) AND (newrec_.sup_sm_object IS NOT NULL) THEN
      $IF (Component_Equip_SYS.INSTALLED)$THEN
         sup_object_status_ := Equipment_Object_API.Get_Operational_Status_Db(newrec_.sup_sm_contract, newrec_.sup_sm_object);
         IF (sup_object_status_ = 'SCRAPPED') THEN
            Raise_Scrapped_Object_Error___(newrec_.sup_sm_object);
         END IF;
      $ELSE
         NULL;
      $END
   END IF;

   -- Consignment checks
   -- IF ship_addr_no change, get consignment delivery based on new order line ship_addr_noe
   IF NVL(newrec_.ship_addr_no,' ') != NVL(oldrec_.ship_addr_no,' ') THEN
      IF (newrec_.customer_no = newrec_.deliver_to_customer_no) THEN
         newrec_.consignment_stock := NVL(Consignment_Stock_API.Encode(Customer_Consignment_Stock_API.Get_Consignment_Stock(newrec_.contract, newrec_.catalog_no,
                                        newrec_.customer_no, newrec_.ship_addr_no)),newrec_.consignment_stock);
      ELSE
         newrec_.consignment_stock := 'NO CONSIGNMENT STOCK';
      END IF;
   END IF;

   IF (newrec_.consignment_stock = 'CONSIGNMENT STOCK') THEN
      IF (newrec_.configuration_id != '*') THEN
         Error_SYS.Record_General(lu_name_, 'NO_CONS_FOR_CONFIG: Consignment stock can not be used for configured parts');
      ELSIF (newrec_.exchange_item = 'EXCHANGED ITEM') THEN
         Error_SYS.Record_General(lu_name_, 'NO_CONS_FOR_EXCHANGE: Consignment Stock cannot be used when the Customer Order Line has been created from a Purchase Exchange Order.');
      END IF;
   END IF;

   IF (newrec_.consignment_stock != oldrec_.consignment_stock) THEN
      IF (newrec_.rowstate IN ('PartiallyDelivered', 'Delivered', 'Cancelled', 'Invoiced')) THEN
         Error_SYS.Record_General(lu_name_, 'CONSIGN_DELIV: The Consignment Stock can not be changed when status is Partially Delivered or Delivered or Cancelled or Invoiced/Closed.');
      END IF;

      IF (newrec_.consignment_stock = 'CONSIGNMENT STOCK') THEN
         IF (newrec_.catalog_type != 'INV') THEN
            Error_SYS.Record_General(lu_name_, 'ONLY_INV_ON_CONSIGN: Consignment stock can only be used together with inventory parts.');
         ELSE
            consignment_stock_db_ := Consignment_Stock_API.Encode(Customer_Consignment_Stock_API.Get_Consignment_Stock(newrec_.contract, newrec_.catalog_no,
                newrec_.customer_no, newrec_.ship_addr_no));

            IF (consignment_stock_db_ IS NULL) THEN
               -- Not specified consignment stock.
               Error_SYS.Record_General(lu_name_, 'NOT_SPECIF_CONSIGN: The consignment stock can not be used for specified Customer No - Sales Part - Ship Addr No combination.');
            ELSIF (consignment_stock_db_ = 'NO CONSIGNMENT STOCK') THEN
               -- Not active consignment stock.
               Error_SYS.Record_General(lu_name_, 'NOT_ACTIVE_CONSIGN: The consignment stock is not active for specified Customer No - Sales Part - Ship Addr No combination.');
            END IF;
         END IF;
      END IF;
   END IF;

   IF supply_code_changed_ THEN
      IF (newrec_.supply_code IN ('PD', 'IPD', 'PT', 'IPT', 'ND')) THEN
         IF (oldrec_.rowstate = 'Reserved') THEN
            Error_SYS.Record_General(lu_name_, 'CANTCHGSUPCODENW: Changing Supply code to Purch Order Dir,Purch Order Trans,Int Purch Dir,Int Purch Trans and Not Decided is not allowed for Reserved line. Unreserve it before changing supply code.');
         END IF;
      END IF;

      IF (newrec_.supply_code = 'PS')THEN
         IF(newrec_.rowstate = 'Reserved' AND newrec_.revised_qty_due = newrec_.qty_assigned) THEN
            Error_SYS.Record_General(lu_name_, 'CANTCHGSUPCODEPS: Changing Supply Code to Production Schedule is not allowed for fully reserved line. Unreserve it before changing Supply Code.');
         END IF;
      END IF;
   END IF;

   --supply site reservation is only allowed if its a IPD or IPT
   IF (newrec_.supply_site_reserve_type != 'NOTALLOWED' AND newrec_.supply_code NOT IN ('IPD','IPT')) THEN
      Error_SYS.Record_General(lu_name_, 'SCRWITHINVALIDSC: A :P1 Supply Site Reservation is only valid for supply codes ":P2" and ":P3".', Supply_Site_Reserve_Type_API.Decode(newrec_.supply_site_reserve_type), Order_Supply_Type_API.Decode('IPD'),Order_Supply_Type_API.Decode('IPT'));
   END IF;

   --you can only change the reservation type while the line is in status Released
   IF (newrec_.supply_site_reserve_type != oldrec_.supply_site_reserve_type AND newrec_.rowstate != 'Released') THEN
      Error_SYS.Record_General(lu_name_, 'SCRAFTERRELEASE: You are not allowed to change the supply site reservation type when the order line is not in status Released anymore');
   END IF;

   IF ((newrec_.buy_qty_due <= 0) AND (newrec_.supply_code != 'SEO')) THEN
      Error_SYS.Record_General(lu_name_, 'QTY_LESS_THAN_ZERO: Quantity must be greater than zero!');
   END IF;
      
   IF (newrec_.revised_qty_due != oldrec_.revised_qty_due) THEN
     -- Added a check to compare Revised_qty_due against, (Qty Assigned + Qty Shipped) of package part components.
     -- Changed the IF condition to take notice of Component Qty Per Assembly.
      IF (newrec_.supply_code = 'PKG') THEN
         FOR components_rec_ IN pkgpart_components LOOP
            IF (((newrec_.revised_qty_due  * components_rec_.conv_factor / components_rec_.inverted_conv_factor * (components_rec_.buy_qty_due/oldrec_.buy_qty_due)) < components_rec_.qty_assigned + components_rec_.qty_shipped) AND
               (components_rec_.qty_assigned + components_rec_.qty_shipped != 0)) THEN
               Raise_Sales_Qty_Less_Error___(newrec_.order_no, newrec_.line_no, newrec_.rel_no);
            END IF;
            IF (components_rec_.supply_code NOT IN ('PD','PT','IPD','IPT','SO','DOP') AND components_rec_.qty_on_order > 0) THEN
               IF(((newrec_.revised_qty_due * components_rec_.qty_per_assembly) - components_rec_.qty_assigned - components_rec_.qty_shipped - components_rec_.qty_on_order) < 0)THEN
                  Error_SYS.Record_General(lu_name_,'PEG_REV_QTY: There are manual peggings connected to this customer order line. Remove the pegging first, then modify the customer order line.');
               END IF;
            END IF;
         END LOOP;
      END IF;

      IF ((newrec_.revised_qty_due < newrec_.qty_assigned + newrec_.qty_shipped) AND
          (newrec_.qty_assigned + newrec_.qty_shipped != 0) AND
          (newrec_.supply_code NOT IN ('SEO','PKG'))) THEN
         Raise_Sales_Qty_Less_Error___(newrec_.order_no, newrec_.line_no, newrec_.rel_no);
      END IF;

      -- stop the process if there are manuly peggins exist and revised_qty_due decreased or else give the information message.
      IF (oldrec_.supply_code IN ('IO','PS') AND oldrec_.qty_on_order > 0) THEN
         IF (newrec_.revised_qty_due > oldrec_.revised_qty_due) THEN
            Client_SYS.Add_Info(lu_name_,'PEG_UNFULFILL: The pegged quantity does not fulfill all demand.');
         ELSIF ((newrec_.revised_qty_due - oldrec_.qty_assigned - oldrec_.qty_shipped - oldrec_.qty_on_order) < 0) THEN
            Error_SYS.Record_General(lu_name_,'PEG_REV_QTY: There are manual peggings connected to this customer order line. Remove the pegging first, then modify the customer order line.');
         END IF;
      END IF;
   END IF;

   IF ((newrec_.catalog_type = 'PKG') AND (newrec_.consignment_stock = 'CONSIGNMENT STOCK')) THEN
      Error_SYS.Record_General(lu_name_, 'NO_PKG_ON_CONSIGN: Consignment stock can not be used together with packages!');
   END IF;

   IF ((newrec_.close_tolerance < 0) OR NOT (newrec_.close_tolerance < 100)) THEN
      Error_SYS.Record_General(lu_name_, 'WRONG_CLOSE_TOL: The close tolerance must be less than 100!');
   END IF;

   IF ((newrec_.charged_item = 'ITEM NOT CHARGED') AND (newrec_.consignment_stock = 'CONSIGNMENT STOCK')) THEN
      Error_SYS.Record_General(lu_name_, 'CHARGED_CONSIGN: Consignment stock can not be used together with noncharge functionality.');
   END IF;

   company_           := Site_API.Get_Company(newrec_.contract);
   customer_contract_ := Cust_Ord_Customer_API.Get_Acquisition_Site(newrec_.customer_no);
   cust_contract_connected_comp_ := Site_API.Get_Company(customer_contract_);
   header_rec_ := Customer_Order_API.Get(newrec_.order_no);
   
   -- Make sure the specified ship address for the order line is valid.
   -- Make sure the tax information has been defined for the address of the ordering customer.
   IF (newrec_.ship_addr_no IS NOT NULL) THEN
      IF (newrec_.deliver_to_customer_no = newrec_.customer_no) THEN
         tax_customer_no_  := newrec_.deliver_to_customer_no;
         tax_ship_addr_no_ := newrec_.ship_addr_no;
      ELSE
         tax_customer_no_  := newrec_.customer_no;
         tax_ship_addr_no_ := header_rec_.ship_addr_no;
      END IF;

      IF ((NVL(cust_contract_connected_comp_, ' ') != company_) ) THEN
         IF ((newrec_.charged_item != 'ITEM NOT CHARGED') AND
          (newrec_.part_ownership NOT IN ('CUSTOMER OWNED', 'SUPPLIER LOANED')) AND
          (newrec_.exchange_item != 'EXCHANGED ITEM') AND 
           Customer_Delivery_Tax_Info_API.Check_Exist(tax_customer_no_, tax_ship_addr_no_, company_, header_rec_.supply_country) = 'FALSE') THEN
            Error_SYS.Record_General(lu_name_, 'NOTAXFORADDR: Customer Tax Information has not been defined for the delivery address.');
         END IF;
      ELSIF (newrec_.rental = Fnd_Boolean_API.DB_FALSE AND newrec_.part_ownership = Part_Ownership_API.DB_COMPANY_RENTAL_ASSET) THEN
         Error_SYS.Record_General(lu_name_,'IPTINTERNALDELERR: The part ownership Company Rental Asset is not allowed for internal deliveries.');
      END IF;

      IF ((newrec_.addr_flag = 'N') AND (NVL(newrec_.ship_addr_no, ' ') != NVL(oldrec_.ship_addr_no, ' ') OR (oldrec_.addr_flag = 'Y'))) THEN
         IF (Cust_Ord_Customer_Address_API.Is_Ship_Location(newrec_.deliver_to_customer_no, newrec_.ship_addr_no) = 0) THEN
            Error_SYS.Record_General(lu_name_, 'NOTDELADDR: Invalid delivery address specified.');
         END IF;

         IF (Cust_Ord_Customer_Address_API.Is_Valid(newrec_.deliver_to_customer_no, newrec_.ship_addr_no) = 0) THEN
            Error_SYS.Record_General(lu_name_, 'INVALIDDELADDR: Delivery address :P1 is invalid. Check the validity period.', newrec_.ship_addr_no);
         END IF;
      END IF;

      IF (NVL(newrec_.ship_addr_no, ' ') != NVL(oldrec_.ship_addr_no, ' ')) THEN
         -- check for consignment stock
         IF (newrec_.consignment_stock = 'CONSIGNMENT STOCK') THEN
            IF (NVL(Consignment_Stock_API.Encode(Customer_Consignment_Stock_API.Get_Consignment_Stock(newrec_.contract, newrec_.catalog_no,
                newrec_.customer_no, newrec_.ship_addr_no)), 'NO CONSIGNMENT STOCK') = 'NO CONSIGNMENT STOCK') THEN
               Error_SYS.Record_General(lu_name_, 'INVALID_CONS: The Consignment Stock flag has to be cleared for this order line before changing the delivery adress.');
            END IF;
         END IF;
      
         -- Added 'NON_DEFAULT_ADDR_CHANGE' check not to reset contact of lines on request to change line ship address with header Delivery address change
         IF (newrec_.default_addr_flag = 'N' AND NVL(Client_SYS.Get_Item_Value('NON_DEFAULT_ADDR_CHANGE', attr_), 'FALSE') = 'FALSE') THEN
            -- if not default values from order header, fetch new values from customer address
            -- Replaced with the deliver_to_customer_no
            IF ((newrec_.contact IS NULL) AND (NVL(change_request_, 'FALSE') = 'FALSE')) THEN
               newrec_.contact := Cust_Ord_Customer_Address_API.Get_Contact(newrec_.deliver_to_customer_no, newrec_.ship_addr_no);
               Client_SYS.Set_Item_Value('CONTACT', newrec_.contact, attr_);
            END IF;
         END IF;
      END IF;
   END IF;

   discount_freeze_db_ := Site_Discom_Info_API.Get_Discount_Freeze_Db(newrec_.contract);
   IF (newrec_.buy_qty_due != oldrec_.buy_qty_due) OR (NVL(newrec_.price_list_no, ' ') != NVL(oldrec_.price_list_no, ' ')) OR
       (NVL(to_char(newrec_.price_effectivity_date), '0') != NVL(to_char(oldrec_.price_effectivity_date), '0')
        OR (qty_refreshed_ = 1) OR (price_source_refreshed_ = 1)) THEN

      IF Cust_Order_Line_Discount_API.Check_Manual_Rows(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no) THEN
         IF NOT(newrec_.price_freeze = 'FROZEN' AND discount_freeze_db_ = 'TRUE') THEN
            Client_SYS.Add_Info(lu_name_, 'MANUAL: Manually entered discount exist. You may want to check the discount calculation.');
         END IF;
      END IF;
   END IF;

   IF (newrec_.configuration_id != '*') THEN
      Order_Config_Util_API.Configuration_Exist(NVL(newrec_.part_no, newrec_.catalog_no), newrec_.configuration_id);
   END IF;

   -- Added a condition to check for existing manual peggings.
   -- The information message is given if the planned_due_date is changed when there exist a manual pegging.
   IF ((newrec_.planned_due_date != oldrec_.planned_due_date) AND (oldrec_.supply_code IN ('IO','PS')) AND (oldrec_.qty_on_order > 0)) THEN
      Client_SYS.Add_Info(lu_name_, 'PEG_DUE_DATE: The customer order line planned due date has changed, review planned receipt date for pegged supply.');
   END IF;

   -- The information message is given if the condition_code is changed when there exist a manual pegging.
   IF ((newrec_.condition_code != oldrec_.condition_code) AND (oldrec_.supply_code IN ('IO','PS')) AND (oldrec_.qty_on_order > 0))THEN
      Error_SYS.Record_General(lu_name_, 'PEG_CON_CODE: The customer order line is pegged to a supply. Remove the pegging first, then change the condition code.');
   END IF;

   -- An error message is given if the configuration is changed when there exist a manual pegging.
   IF ((newrec_.configuration_id != oldrec_.configuration_id) AND (oldrec_.supply_code = 'IO') AND (oldrec_.qty_on_order > 0)) THEN
      Error_SYS.Record_General(lu_name_, 'PEG_CONFIG_ID: The customer order line is pegged to a supply. Remove the pegging first, then change the configuration.');
   END IF;

   IF ((newrec_.configuration_id != oldrec_.configuration_id) AND (newrec_.rowstate != 'Released')) THEN
      Error_SYS.Record_General(lu_name_, 'NOCONFIGCHANGE: Configuration cannot be updated when the customer order line is not in Released status.');
   END IF;

   -- send delivery info back to client if default_addr_flag has changed
   IF (newrec_.default_addr_flag != oldrec_.default_addr_flag) THEN
      Client_SYS.Set_Item_Value('DEFAULT_ADDR_FLAG_DB', newrec_.default_addr_flag, attr_);
      Client_SYS.Set_Item_Value('ADDR_FLAG_DB', newrec_.addr_flag, attr_);
      Client_SYS.Set_Item_Value('SHIP_ADDR_NO', newrec_.ship_addr_no, attr_);
      Client_SYS.Set_Item_Value('CONTACT', newrec_.contact, attr_);
      Client_SYS.Set_Item_Value('ROUTE_ID', newrec_.route_id, attr_);
      Client_SYS.Set_Item_Value('FORWARD_AGENT_ID', newrec_.forward_agent_id, attr_);
      Client_SYS.Set_Item_Value('SHIP_VIA_CODE', newrec_.ship_via_code, attr_);
      Client_SYS.Set_Item_Value('CUST_CALENDAR_ID', newrec_.cust_calendar_id, attr_);
      Client_SYS.Set_Item_Value('EXT_TRANSPORT_CALENDAR_ID', newrec_.ext_transport_calendar_id, attr_);
      Client_SYS.Set_Item_Value('DELIVERY_TERMS', newrec_.delivery_terms, attr_);
      Client_SYS.Set_Item_Value('DEL_TERMS_LOCATION', newrec_.del_terms_location, attr_);
      Client_SYS.Set_Item_Value('DELIVERY_LEADTIME', newrec_.delivery_leadtime, attr_);
      Client_SYS.Set_Item_Value('DISTRICT_CODE', newrec_.district_code, attr_);
      Client_SYS.Set_Item_Value('REGION_CODE', newrec_.region_code, attr_);
      Client_SYS.Set_Item_Value('TAX_LIABILITY', newrec_.tax_liability, attr_);
      Client_SYS.Set_Item_Value('INTRASTAT_EXEMPT_DB', newrec_.intrastat_exempt, attr_);
      Client_SYS.Set_Item_Value('SUPPLIER_SHIP_VIA_TRANSIT', newrec_.supplier_ship_via_transit, attr_);
      Client_SYS.Set_Item_Value('SUPPLIER_SHIP_VIA_TRANSIT_DESC', newrec_.supplier_ship_via_transit_desc, attr_);
      Client_SYS.Set_Item_Value('PICKING_LEADTIME', newrec_.picking_leadtime, attr_);
      Client_SYS.Set_Item_Value('SHIPMENT_TYPE', newrec_.shipment_type, attr_);
   END IF;

   IF ((newrec_.customer_part_no IS NOT NULL) AND (NVL(server_data_change_,'0') != '1')) THEN
      newrec_.customer_part_buy_qty := newrec_.buy_qty_due / NVL(newrec_.customer_part_conv_factor, 1) * NVL(newrec_.cust_part_invert_conv_fact, 1);
      Client_SYS.Set_Item_Value('CUSTOMER_PART_BUY_QTY', newrec_.customer_part_buy_qty, attr_);
   END IF;

   $IF (Component_Purch_SYS.INSTALLED)$THEN
      IF newrec_.demand_order_ref1 IS NOT NULL THEN
         order_code_ := Purchase_Order_API.Get_Order_Code(newrec_.demand_order_ref1);
      END IF;
   $END

   partca_condition_code_usage_ := Part_Catalog_API.Get_Condition_Code_Usage_Db(newrec_.part_no) ;
   IF ((newrec_.part_no IS NOT NULL) AND (NVL(server_data_change_,'0') != '1')) THEN
      IF (NVL(oldrec_.condition_code,'NOT_NULL') != NVL(newrec_.condition_code,'NOT_NULL')) THEN

         IF (header_rowstate_ NOT IN ('Planned')) THEN
            IF (newrec_.supply_code NOT IN ('PT', 'IPT', 'IO')) THEN
               cond_update_error_ := 'ERROR1';
            ELSIF (newrec_.rowstate != 'Released') THEN
               cond_update_error_ := 'ERROR2';
            ELSIF (newrec_.supply_code IN ('PT', 'IPT') AND newrec_.qty_on_order > 0) THEN
               Customer_Order_Pur_Order_API.Get_Purord_For_Custord(po_order_no_,
                                                                   po_line_no_,
                                                                   po_rel_no_,
                                                                   purchase_type_,
                                                                   newrec_.order_no,
                                                                   newrec_.line_no,
                                                                   newrec_.rel_no,
                                                                   newrec_.line_item_no);

               purchase_type_db_ := Purchase_Type_API.Encode(purchase_type_);
               IF (purchase_type_db_ = 'O') THEN 
                  cond_update_info_ := 'INFO1';
               ELSIF ( purchase_type_db_ = 'R') THEN
                  cond_update_info_ := 'INFO2';
               END IF;
            END IF;
         ELSIF (newrec_.rowstate != 'Released') THEN
            cond_update_error_ := 'ERROR2';
         END IF;

         IF cond_update_error_ = 'ERROR1' THEN
            Error_SYS.Record_General(lu_name_,'COND_UPD_NOTALLOW1: Condition code may not be changed after order is released.');
         ELSIF cond_update_error_ = 'ERROR2' THEN
            Error_SYS.Record_General(lu_name_,'COND_UPD_NOTALLOW2: Condition code may not be changed when order line is :P1.',newrec_.rowstate);
         ELSIF cond_update_info_ = 'INFO1' THEN
            Client_SYS.Add_Info(lu_name_,'COND_UPD_ALLOW1: The pegged purchase order line :P1 has a different condition code and will not be updated automatically.', po_order_no_);
         ELSIF cond_update_info_ = 'INFO2' THEN
            Client_SYS.Add_Info(lu_name_,'COND_UPD_ALLOW2: The pegged purchase requisition line :P1 has a different condition code and will not be updated automatically.', po_order_no_);
         END IF;

         IF (newrec_.condition_code IS NOT NULL) THEN
            IF (partca_condition_code_usage_= 'NOT_ALLOW_COND_CODE') THEN
               Error_SYS.Record_General(lu_name_,'COND_NOT_ALLOW: Condition code functionality is not enabled for this part. You cannot enter a condition code.');
            ELSE
               Condition_Code_API.Exist(newrec_.condition_code);
            END IF;

            IF (header_rowstate_ = 'Planned') THEN
               $IF (Component_Ordstr_SYS.INSTALLED)$THEN
                  IF (newrec_.ctp_planned = 'N') THEN
                      interim_header_id_ := Interim_Demand_Head_API.Get_Int_Head_By_Usage(
                                                   'CUSTOMERORDER', newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
                  ELSIF (newrec_.ctp_planned = 'Y') THEN
                      interim_header_id_ := Interim_Ctp_Manager_API.Get_Top_Int_Head_By_Usage(
                                                         'CUSTOMERORDER', newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
                  END IF;
               $END

               IF (interim_header_id_ IS NOT NULL) THEN
                   Error_SYS.Record_General(lu_name_,'CCUPDNOTALLWD: Condition code may not be changed, since Interim demand head :P1 exists.',
                                              interim_header_id_);
               END IF;
            END IF;
         ELSIF (partca_condition_code_usage_ = 'ALLOW_COND_CODE') THEN
            Error_SYS.Record_General(lu_name_,'COND_NOT_ALLOW0: Condition code functionality is enabled in the part catalog record for this part. You must enter a condition code.');
         END IF;
      END IF;
   ELSE
      IF (newrec_.condition_code IS NOT NULL) THEN
         IF (partca_condition_code_usage_ = 'NOT_ALLOW_COND_CODE') THEN
            Error_SYS.Record_General(lu_name_,'COND_NOT_ALLOW: Condition code functionality is not enabled for this part. You cannot enter a condition code.');
         ELSE
            Condition_Code_API.Exist(newrec_.condition_code);
         END IF;
      END IF;
   END IF;

   IF (newrec_.condition_code IS NOT NULL) THEN
      IF (newrec_.catalog_type = 'PKG') THEN
         Error_SYS.Record_General(lu_name_,'NO_COND_ON_PKG: Condition codes are not allowed for Package Parts.');
      ELSIF (newrec_.catalog_type = 'NON') THEN
         Error_SYS.Record_General(lu_name_,'NO_COND_ON_NON: Condition codes are not allowed for Non Inventory Sales Parts.');
      END IF;
   END IF;

   cust_ord_line_rec_ := Get(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);

   -- Part Ownership validations
   IF (newrec_.part_ownership IS NOT NULL) THEN
      IF (newrec_.rental = Fnd_Boolean_API.DB_FALSE AND newrec_.part_ownership = Part_Ownership_API.DB_SUPPLIER_RENTED) THEN
         Error_SYS.Record_General(lu_name_, 'INVALIDNONRENTPARTOWN: Ownership :P1 is not allowed for the non-rental lines.', Part_Ownership_API.Decode(newrec_.part_ownership));
      END IF;
      IF (newrec_.rental = Fnd_Boolean_API.DB_TRUE AND newrec_.part_ownership NOT IN (Part_Ownership_API.DB_SUPPLIER_RENTED,
                                                                                      Part_Ownership_API.DB_COMPANY_RENTAL_ASSET)) THEN
         Error_SYS.Record_General(lu_name_, 'INVALIDRENTALPARTOWN: Ownership :P1 is not allowed for the rental lines.', Part_Ownership_API.Decode(newrec_.part_ownership));
      END IF;
      IF (newrec_.supply_code = 'IO') THEN
         IF (newrec_.part_ownership NOT IN (Part_Ownership_API.DB_COMPANY_OWNED,
                                            Part_Ownership_API.DB_CUSTOMER_OWNED,
                                            Part_Ownership_API.DB_SUPPLIER_LOANED,
                                            Part_Ownership_API.DB_SUPPLIER_RENTED,
                                            Part_Ownership_API.DB_COMPANY_RENTAL_ASSET)) THEN
            Error_SYS.Record_General(lu_name_,'INVALIDSUPPLYPARTOWN: Ownership :P1 is not allowed for this supply code.', Part_Ownership_API.Decode(newrec_.part_ownership));
         END IF;
      ELSIF (newrec_.supply_code IN ('SO', 'MRO', 'SEO')) THEN
         IF (newrec_.part_ownership NOT IN (Part_Ownership_API.DB_COMPANY_OWNED,
                                            Part_Ownership_API.DB_CUSTOMER_OWNED)) THEN
            Error_SYS.Record_General(lu_name_,'INVALIDSUPPLYPARTOWN: Ownership :P1 is not allowed for this supply code.', Part_Ownership_API.Decode(newrec_.part_ownership));
         END IF;
      ELSIF (newrec_.supply_code = 'ND') THEN
         IF (newrec_.part_ownership NOT IN (Part_Ownership_API.DB_COMPANY_OWNED,
                                            Part_Ownership_API.DB_SUPPLIER_RENTED,
                                            Part_Ownership_API.DB_COMPANY_RENTAL_ASSET)) THEN
            Error_SYS.Record_General(lu_name_,'INVALIDSUPPLYPARTOWN: Ownership :P1 is not allowed for this supply code.', Part_Ownership_API.Decode(newrec_.part_ownership));
         END IF;
      ELSIF (newrec_.supply_code = 'NO') THEN
         IF (newrec_.part_ownership NOT IN (Part_Ownership_API.DB_COMPANY_OWNED,
                                            Part_Ownership_API.DB_SUPPLIER_RENTED,
                                            Part_Ownership_API.DB_COMPANY_RENTAL_ASSET)) THEN
            Error_SYS.Record_General(lu_name_,'INVALIDSUPPLYPARTOWN: Ownership :P1 is not allowed for this supply code.', Part_Ownership_API.Decode(newrec_.part_ownership));
         END IF;
      ELSIF (newrec_.supply_code IN ('PT', 'IPT')) THEN
         IF (newrec_.part_ownership NOT IN (Part_Ownership_API.DB_COMPANY_OWNED,
                                            Part_Ownership_API.DB_COMPANY_RENTAL_ASSET,
                                            Part_Ownership_API.DB_SUPPLIER_RENTED)) THEN
            Error_SYS.Record_General(lu_name_,'INVALIDSUPPLYPARTOWN: Ownership :P1 is not allowed for this supply code.', Part_Ownership_API.Decode(newrec_.part_ownership));
         END IF;
      ELSIF (newrec_.supply_code IN ('PD', 'IPD')) THEN
         IF (newrec_.rental = Fnd_Boolean_API.DB_FALSE) THEN
            IF (newrec_.part_ownership NOT IN (Part_Ownership_API.DB_COMPANY_OWNED,
                                               Part_Ownership_API.DB_SUPPLIER_RENTED)) THEN
               Error_SYS.Record_General(lu_name_,'INVALIDSUPPLYPARTOWN: Ownership :P1 is not allowed for this supply code.', Part_Ownership_API.Decode(newrec_.part_ownership));
            END IF;
         ELSE
            Error_SYS.Record_General(lu_name_,'INVALIDSUPPLYPARTOWN: Ownership :P1 is not allowed for this supply code.', Part_Ownership_API.Decode(newrec_.part_ownership));
         END IF;
      ELSIF (newrec_.supply_code IN ('DOP', 'PKG','PS')) THEN
         IF (newrec_.part_ownership != Part_Ownership_API.DB_COMPANY_OWNED) THEN
            Error_SYS.Record_General(lu_name_,'INVALIDSUPPLYPARTOWN: Ownership :P1 is not allowed for this supply code.', Part_Ownership_API.Decode(newrec_.part_ownership));
         END IF;
      END IF;

      IF (newrec_.supply_code = 'SO' AND NOT supply_code_changed_) THEN
         IF (header_rowstate_ != 'Planned') AND (newrec_.part_ownership != oldrec_.part_ownership) THEN
            Error_SYS.Record_General(lu_name_, 'PARTOWN_CHANGED: Ownership cannot be changed after order is released.');
         END IF;
      END IF;

      IF (newrec_.line_item_no > 0) THEN
         IF (newrec_.part_ownership != Part_Ownership_API.DB_COMPANY_OWNED) THEN
            Error_SYS.Record_General(lu_name_,'INVALIDCOMPART: Ownership :P1 is not allowed for component parts.', Part_Ownership_API.Decode(newrec_.part_ownership));
         END IF;
      END IF;

      -- Check if the part_ownership is changed in a way that affects peggings
      IF ((newrec_.part_ownership != cust_ord_line_rec_.part_ownership) AND (cust_ord_line_rec_.supply_code ='IO') AND (cust_ord_line_rec_.qty_on_order>0) AND (cust_ord_line_rec_.part_no IS NOT NULL)) THEN
         Error_SYS.Record_General(lu_name_, 'MANPEGOWNCODE: You are not allowed to change owner conditions for pegged customer order lines, remove the pegging first.');
      END IF;

      IF (newrec_.consignment_stock = 'CONSIGNMENT STOCK') AND (newrec_.part_ownership != Part_Ownership_API.DB_COMPANY_OWNED) THEN
         Error_SYS.Record_General(lu_name_,'INVALIDCONOWNERSHIP: Only ownership company owned is allowed for consignment stock.');
      END IF;

      IF (newrec_.part_ownership = Part_Ownership_API.DB_CUSTOMER_OWNED) AND (newrec_.owning_customer_no IS NULL) THEN
         Error_SYS.Record_General(lu_name_,'OWNINGCUSNONULL: There should be a owning customer for customer owned stock.');
      END IF;

   END IF;

   -- Check if the owner is changed in a way that affects peggings
   IF ((newrec_.owning_customer_no != cust_ord_line_rec_.owning_customer_no) AND (cust_ord_line_rec_.supply_code ='IO') AND (cust_ord_line_rec_.qty_on_order>0) AND (cust_ord_line_rec_.part_no IS NOT NULL)) THEN
      Error_SYS.Record_General(lu_name_, 'MANPEGOWNCODE: You are not allowed to change owner conditions for pegged customer order lines, remove the pegging first.');
   END IF;

   IF (newrec_.part_no IS NOT NULL) THEN
      IF (company_ = cust_contract_connected_comp_) THEN
         IF (sales_part_rec_.part_no != Sales_Part_API.Get_Part_No(newrec_.contract, newrec_.original_part_no)) THEN
            Error_SYS.Record_General(lu_name_, 'REPARTEXISTS: You are not allowed to replace the sales part :P1 with the sales part :P2 since the intersite flow occurs within a single company.' ,newrec_.original_part_no, sales_part_rec_.part_no);
         END IF;
      END IF;

      IF (newrec_.supply_code = 'IPT' OR newrec_.supply_code = 'IPD') THEN
         supplier_acquisition_site_ := Get_Vendor_Contract__(newrec_.vendor_no, NULL, NULL, NULL, newrec_.rental);

         IF (supplier_acquisition_site_ IS NOT NULL) THEN
            IF (Site_API.Get_Company(supplier_acquisition_site_) = company_) THEN

               IF (NOT Inventory_Part_API.Check_Exist(supplier_acquisition_site_, newrec_.part_no)) THEN
                  Error_SYS.Record_General(lu_name_, 'NOVENDPART: Creation of internal order lines are not allowed when inventory part :P1 does not exist in supplier site :P2.', newrec_.part_no, supplier_acquisition_site_);
               END IF;

               IF (newrec_.rental = Fnd_Boolean_API.DB_TRUE AND newrec_.supply_code = 'IPT' AND newrec_.part_ownership != Part_Ownership_API.DB_COMPANY_RENTAL_ASSET) THEN
                  Error_SYS.Record_General(lu_name_,'INVALIDRENTPARTCRA: Ownership Type :P1 is not allowed for this supply code if the supply site belongs to the same company.', Part_Ownership_API.Decode(newrec_.part_ownership));
               END IF;
            ELSE
               IF (newrec_.rental = Fnd_Boolean_API.DB_TRUE AND newrec_.supply_code = 'IPT' AND newrec_.part_ownership != Part_Ownership_API.DB_SUPPLIER_RENTED) THEN
                  Error_SYS.Record_General(lu_name_,'INVALIDRENTPARTSR: Ownership Type :P1 is not allowed for this supply code if the supply site belongs to a different company.', Part_Ownership_API.Decode(newrec_.part_ownership));
               END IF;
            END IF;
         END IF;
      END IF;

      cust_acquisition_site_ := customer_contract_;

      IF (Site_API.Get_Company(cust_acquisition_site_)= company_) AND (cust_acquisition_site_ IS NOT NULL) THEN
         IF (NOT Inventory_Part_API.Check_Exist(cust_acquisition_site_,
                                                newrec_.part_no)) THEN
            Error_SYS.Record_General(lu_name_, 'NOCUSTPART: Creation of Internal Order Lines are not allowed when Inventory Part :P1 does not exist in Customer Site :P2', newrec_.part_no, cust_acquisition_site_);
         END IF;
      END IF;
   END IF;

   -- Change the shipment creation to NO_AUTOMATIC if single occurence is ticked or supply code is IPD/PD/ND
   
   -- IF not package ('Supply PKG') and if supply from purchase direct or SEO or package component part supply is not decided then set the shipment creation to the 'NO_AUTOMATIC'
   IF ( newrec_.supply_code IN ( 'PD', 'SEO') OR (newrec_.supply_code = 'ND' AND newrec_.line_item_no >0) ) THEN
      IF (newrec_.shipment_creation != 'NO_AUTOMATIC') THEN
         newrec_.shipment_creation := 'NO_AUTOMATIC';
         Raise_Shipment_Chaged_New();
         IF newrec_.supply_code NOT IN ('IPD', 'PD') THEN
            IF (newrec_.line_item_no > 0) OR ((newrec_.line_item_no = 0) AND (newrec_.supply_code = 'SEO')) THEN
               Client_SYS.Add_Info(lu_name_, 'SHIPMENT_CHANGED: According to the shipment creation method, the line should be connected automatically to a shipment. This will not happen due to the supply code of the line.');
            END IF;
         END IF;
      END IF;
   ELSIF  ( (newrec_.supply_code != oldrec_.supply_code) AND (oldrec_.supply_code IN ( 'PD', 'SEO')) AND (newrec_.supply_code NOT IN ( 'PD', 'SEO')) ) THEN
      newrec_.shipment_creation := header_rec_.shipment_creation;    
   END IF;

   -- Added ELSIF condition to inform user about the modification in shipment creation does not transfer to the supply site.   
   IF ((newrec_.shipment_creation != oldrec_.shipment_creation ) AND (newrec_.supply_code != 'IPD')) THEN
      IF ( newrec_.shipment_creation = 'ORDER_RELEASE' AND  header_rowstate_ != 'Planned') THEN
         Error_SYS.Record_General(lu_name_,'INVALSHIPCREATION: Shipment creation cannot be :P1 when the customer order is in :P2 state.', Shipment_Creation_API.Decode (newrec_.shipment_creation), CUSTOMER_ORDER_API.Finite_State_Decode__(header_rowstate_) );
      END IF;
   END IF;

   IF( newrec_.shipment_type != oldrec_.shipment_type ) OR ( newrec_.shipment_creation != oldrec_.shipment_creation ) THEN
      -- Information message should not raise for the component part where package update will trigger this message.
      IF ( newrec_.supply_code = 'IPD' AND newrec_.line_item_no <= 0 AND header_rowstate_ != 'Planned' ) THEN
         Client_SYS.Add_Info(lu_name_, 'IPDSHIPTYPCRECHANGE: Changes to the shipment type/shipment creation method will not be reflected in the supplier site. The required changes will have to be manually updated in the customer order of the supply site.');
      END IF;
   END IF;

   -- Validate non-inventory part shipment creation.
   -- For non-inventory part used with IPD, it should be able to have any shipment creation. Else it does not need to have shipment creation as picklist creation.
   IF ((newrec_.catalog_type = 'NON' AND newrec_.supply_code != 'IPD' )OR
       -- For package part if all non invnetory part and not all supply though Int Purch Direct then reset package shipment creation to 'NO_AUTOMATIC' if shipment creation used when Pick list creation
       (newrec_.catalog_type = 'PKG' AND All_Non_Inv_Parts(newrec_.order_no, newrec_.line_no, newrec_.rel_no) AND NOT All_Components_Supply_Ipd (newrec_.order_no, newrec_.line_no, newrec_.rel_no) AND (insert_package_mode_ = 'FALSE')))
       AND (newrec_.shipment_creation = 'PICK_LIST_CREATION') AND (oldrec_.shipment_creation != newrec_.shipment_creation) THEN
         Raise_Info_Message___;
   END IF;

   IF (newrec_.provisional_price = 'TRUE' AND newrec_.price_freeze = 'FROZEN') THEN
      Error_SYS.Record_General(lu_name_, 'SALES_PRICE_TYPE: It is not allowed to select provisional price and price freeze together.');
   END IF;
END Check_Before_Update___;


PROCEDURE Pre_Unpack_Insert___ (
   attr_      IN OUT NOCOPY VARCHAR2,
   newrec_    IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE )
IS
   site_date_                 DATE;
   address_rec_               Cust_Ord_Customer_Address_API.Public_Rec;
   packrec_                   CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   company_                   VARCHAR2(20);
   customer_agreement_        VARCHAR2(20);
   delivery_terms_            VARCHAR2(5);
   price_source_              VARCHAR2(200);
   price_source_db_           CUSTOMER_ORDER_LINE_TAB.Price_Source%TYPE;
   demand_code_               CUSTOMER_ORDER_LINE_TAB.demand_code%TYPE;
   supply_code_db_            CUSTOMER_ORDER_LINE_TAB.supply_code%TYPE;
   line_item_no_              CUSTOMER_ORDER_LINE_TAB.line_item_no%TYPE;
   revised_qty_due_           NUMBER;
   inv_part_cost_level_db_    VARCHAR2(50);
   agreement_rec_             Customer_Agreement_API.Public_Rec;
   sales_part_rec_            Sales_Part_API.Public_Rec;
   default_addr_flag_db_      CUSTOMER_ORDER_LINE_TAB.default_addr_flag%TYPE;
   shipment_type_sent_        VARCHAR2(5):= 'FALSE';
   shipment_creation_sent_    VARCHAR2(5):= 'FALSE';
   packed_ship_cre_in_init_   VARCHAR2(5):= 'FALSE';
   order_rec_                 CUSTOMER_ORDER_API.Public_Rec;
   duplicate_line_            BOOLEAN := FALSE;
   temprec_                   CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   deliver_country_db_        VARCHAR2(2);
   tax_liability_             VARCHAR2(20);
   substitutable_part_        VARCHAR2(25);
   sprec_                     Sales_Part_API.Public_Rec; 
   new_attr_                  VARCHAR2(32000);
   discount_                  CUSTOMER_ORDER_LINE_TAB.discount%TYPE;
   copy_discount_             VARCHAR2(5);
   create_partial_sum_        CUST_ORDER_LINE_DISCOUNT_TAB.Create_Partial_Sum%TYPE;   
   auto_substitution_allowed_ BOOLEAN;
BEGIN
   newrec_.order_no               := Client_SYS.Get_Item_Value('ORDER_NO', attr_);
   newrec_.contract               := Client_SYS.Get_Item_Value('CONTRACT', attr_);
   newrec_.part_no                := Client_SYS.Get_Item_Value('PART_NO', attr_);
   newrec_.purchase_part_no       := Client_SYS.Get_Item_Value('PURCHASE_PART_NO', attr_);
   newrec_.sup_sm_contract        := Client_SYS.Get_Item_Value('SUP_SM_CONTRACT', attr_);
   newrec_.originating_rel_no     := Client_SYS.Get_Item_Value('ORIGINATING_REL_NO', attr_);
   newrec_.condition_code         := Client_SYS.Get_Item_Value('CONDITION_CODE', attr_);
   newrec_.deliver_to_customer_no := Client_SYS.Get_Item_Value('DELIVER_TO_CUSTOMER_NO', attr_);
   demand_code_                   := NVL(Client_SYS.Get_Item_Value('DEMAND_CODE_DB', attr_),
                                     Order_Supply_Type_Api.Encode(Client_SYS.Get_Item_Value('DEMAND_CODE', attr_)));
   supply_code_db_                := NVL(Client_SYS.Get_Item_Value('SUPPLY_CODE_DB', attr_),
                                     Order_Supply_Type_API.Encode(Client_SYS.Get_Item_Value('SUPPLY_CODE', attr_)));
   newrec_.addr_flag              := NVL(Client_SYS.Get_Item_Value('ADDR_FLAG_DB', attr_),
                                     Gen_Yes_No_API.Encode(Client_SYS.Get_Item_Value('ADDR_FLAG', attr_)));
   newrec_.part_ownership         := NVL(Client_SYS.Get_Item_Value('PART_OWNERSHIP_DB', attr_),
                                     Part_Ownership_API.Encode(Client_SYS.Get_Item_Value('PART_OWNERSHIP', attr_)));
   newrec_.buy_qty_due            := Client_SYS.Get_Item_Value('BUY_QTY_DUE', attr_);
   newrec_.configuration_id       := Client_SYS.Get_Item_Value('CONFIGURATION_ID', attr_);
   newrec_.catalog_no             := Client_SYS.Get_Item_Value('CATALOG_NO', attr_);
   sales_part_rec_                := Sales_Part_API.Get(newrec_.contract,newrec_.catalog_no);
   IF ((Client_SYS.Get_Item_Value('SHIPMENT_CREATION', attr_) IS NOT NULL) OR (Client_SYS.Get_Item_Value('SHIPMENT_CREATION_DB', attr_) IS NOT NULL)) THEN
      shipment_creation_sent_ := 'TRUE';
   END IF;
   IF (Client_SYS.Get_Item_Value('SHIPMENT_TYPE', attr_) IS NOT NULL) THEN
      shipment_type_sent_ :=  'TRUE';
   END IF;

   default_addr_flag_db_ := NVL(Client_SYS.Get_Item_Value('DEFAULT_ADDR_FLAG_DB', attr_),
                                Gen_Yes_No_API.Encode(Client_SYS.Get_Item_Value('DEFAULT_ADDR_FLAG', attr_)));
   newrec_.rental        := NVL(Client_SYS.Get_Item_Value('RENTAL_DB', attr_), Fnd_Boolean_API.DB_FALSE);
   
   newrec_.ctp_planned            := Client_SYS.Get_Item_Value('CTP_PLANNED_DB', attr_);
   IF newrec_.part_no IS NULL THEN
      newrec_.part_no := sales_part_rec_.part_no;
   END IF;
   -- Calculate and reset cost if supply code is not Service Order
   IF NVL(supply_code_db_, ' ') != 'SEO' THEN
      revised_qty_due_ := newrec_.buy_qty_due * sales_part_rec_.conv_factor / sales_part_rec_.inverted_conv_factor;

      -- (For configured parts cost should be calculated using the interim order functionality)
      inv_part_cost_level_db_ := Inventory_Part_API.Get_Invent_Part_Cost_Level_Db(newrec_.contract,newrec_.part_no);
      IF (inv_part_cost_level_db_ != 'COST PER CONFIGURATION') AND (newrec_.ctp_planned != 'Y') THEN
         IF (inv_part_cost_level_db_ != 'COST PER CONDITION') OR (newrec_.condition_code IS NOT NULL) THEN
            IF (revised_qty_due_ IS NOT NULL) THEN
               newrec_.cost := Sales_Cost_Util_API.Get_Cost_Incl_Sales_Overhead(newrec_.contract,
                                                                               newrec_.part_no,
                                                                               NVL(newrec_.configuration_id,'*'),
                                                                               newrec_.condition_code,
                                                                               revised_qty_due_,
                                                                               'CHARGED ITEM',
                                                                               supply_code_db_,
                                                                               order_rec_.customer_no,
                                                                               newrec_.part_ownership);

               Client_SYS.Set_Item_Value('COST', newrec_.cost, attr_);
            END IF;
         END IF;
      END IF;
   END IF;
   

   order_rec_                      := CUSTOMER_ORDER_API.Get(newrec_.order_no);
   newrec_.customer_no             := order_rec_.customer_no;
   newrec_.cust_calendar_id        := order_rec_.cust_calendar_id;
   newrec_.deliver_to_customer_no  := NVL(newrec_.deliver_to_customer_no, order_rec_.customer_no);
   newrec_.qty_invoiced            := 0;
   newrec_.qty_returned            := 0;
   newrec_.qty_shipdiff            := 0;
   newrec_.qty_on_order            := 0;
   newrec_.qty_to_ship             := 0;
   newrec_.line_total_weight       := 0;
   newrec_.line_total_qty          := 0;
   newrec_.qty_picked              := 0;
   site_date_                      := Site_API.Get_Site_Date(newrec_.contract);
   newrec_.date_entered            := site_date_;
   newrec_.planned_due_date        := TRUNC(site_date_);
   newrec_.qty_short               := 0;
   newrec_.order_discount          := 0;
   newrec_.charged_item            := 'CHARGED ITEM';
   newrec_.staged_billing          := 'NOT STAGED BILLING';
   newrec_.sm_connection           := 'NOT CONNECTED';
   newrec_.order_code              := order_rec_.order_code;
   newrec_.ctp_planned             := 'N';
   newrec_.release_planning        := 'NOTRELEASED';
   newrec_.qty_confirmeddiff       := 0;
   newrec_.line_total_weight_gross := 0;
   newrec_.adjusted_weight_net     := 0;
   newrec_.adjusted_weight_gross   := 0;
   newrec_.adjusted_volume         := 0;
   newrec_.qty_shipped             := 0;
   newrec_.open_shipment_qty       := 0;
   newrec_.shipment_connected      := 'FALSE';
   newrec_.delivery_confirmed      := 'FALSE';
   newrec_.conv_factor             := NVL(Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('CONV_FACTOR', attr_)),NVL(sales_part_rec_.conv_factor,1));
   newrec_.inverted_conv_factor    := NVL(Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('INVERTED_CONV_FACTOR', attr_)),NVL(sales_part_rec_.inverted_conv_factor,1));
   auto_substitution_allowed_      := Substitute_Sales_Part_API.Allow_Auto_Substitution(newrec_.contract, newrec_.customer_no);

   Client_SYS.Add_To_Attr('ORDER_CODE', newrec_.order_code, attr_);
   Client_SYS.Add_To_Attr('FREIGHT_FREE_DB', 'FALSE', attr_);

   -- Initialize desired_qty using buy_qty_due
   newrec_.desired_qty := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('BUY_QTY_DUE', attr_));
   line_item_no_       := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('LINE_ITEM_NO', attr_));

   IF (line_item_no_ > 0) THEN
      Trace_SYS.Message('Package component - fetch values from package header...');
      -- fetch package header line to assign the same values to the component.
      newrec_.order_no := Client_SYS.Get_Item_Value('ORDER_NO', attr_);
      newrec_.line_no  := Client_SYS.Get_Item_Value('LINE_NO', attr_);
      newrec_.rel_no   := Client_SYS.Get_Item_Value('REL_NO', attr_);
      packrec_         := Get_Object_By_Keys___(newrec_.order_no, newrec_.line_no, newrec_.rel_no, -1);

      IF (supply_code_db_ NOT IN ('IPD', 'PD')) OR (default_addr_flag_db_ IS NULL) THEN
         Client_SYS.Set_Item_Value('DEFAULT_ADDR_FLAG_DB', packrec_.default_addr_flag,   attr_);
      END IF;
      Client_SYS.Set_Item_Value('ADDR_FLAG_DB',         packrec_.addr_flag,           attr_);
      Client_SYS.Set_Item_Value('SHIP_ADDR_NO',         packrec_.ship_addr_no,        attr_);
      Client_SYS.Set_Item_Value('CONTACT',              packrec_.contact,             attr_);
      Client_SYS.Set_Item_Value('ROUTE_ID',             packrec_.route_id,            attr_);
      Client_SYS.Set_Item_Value('FORWARD_AGENT_ID',     packrec_.forward_agent_id,    attr_);
      Client_SYS.Set_Item_Value('DELIVERY_TERMS',       packrec_.delivery_terms,      attr_);
      Client_SYS.Set_Item_Value('DEL_TERMS_LOCATION',   packrec_.del_terms_location,  attr_);
      Client_SYS.Set_Item_Value('DISTRICT_CODE',        packrec_.district_code,       attr_);
      Client_SYS.Set_Item_Value('REGION_CODE',          packrec_.region_code,         attr_);
      Client_SYS.Set_Item_Value('TAX_LIABILITY',        packrec_.tax_liability,       attr_);
      Client_SYS.Set_Item_Value('INTRASTAT_EXEMPT_DB',  packrec_.intrastat_exempt,    attr_);
      Client_SYS.Set_Item_Value('RELEASE_PLANNING_DB',  packrec_.release_planning,    attr_);
      Client_SYS.Set_Item_Value('SHIPMENT_CREATION_DB', packrec_.shipment_creation,   attr_);
      Client_SYS.Set_Item_Value('TAX_ID_NO',            packrec_.tax_id_no,              attr_);
      Client_SYS.Set_Item_Value('TAX_ID_VALIDATED_DATE',packrec_.tax_id_validated_date,      attr_);
      Client_SYS.Set_Item_Value('REBATE_BUILDER_DB',    packrec_.rebate_builder,      attr_);
      IF (packrec_.activity_seq IS NOT NULL) THEN
         Client_SYS.Set_Item_Value('ACTIVITY_SEQ',      packrec_.activity_seq,        attr_);
      END IF;
      Client_SYS.Set_Item_Value('SHIPMENT_TYPE',        packrec_.shipment_type,       attr_);
      Client_SYS.Set_Item_Value('COUNTRY_CODE',         packrec_.country_code,        attr_);
      Client_SYS.Set_Item_Value('TAX_LIABILITY_TYPE_DB',packrec_.tax_liability_type,  attr_);
   ELSE
      Trace_SYS.Message('Package header or normal line - set values according to default addr flag.');

      -- Retrive the ship address if any
      newrec_.ship_addr_no := Client_SYS.Get_Item_Value('SHIP_ADDR_NO', attr_);
      
      -- IF no ship address was passed in, retrive the default to deliver to customer.
      IF (newrec_.ship_addr_no IS NULL) THEN
         newrec_.ship_addr_no := Cust_Ord_Customer_API.Get_Delivery_Address(newrec_.deliver_to_customer_no);
      END IF;
         
      IF (NVL(newrec_.ship_addr_no, ' ') != order_rec_.ship_addr_no) THEN
         -- The ship address for the line is different than the one on the order
         newrec_.default_addr_flag := 'N';
      ELSE
         IF (Client_SYS.Get_Item_Value('EVALUATE_DEFAULT_INFO', attr_) = 'TRUE') THEN
            duplicate_line_ := TRUE;
            attr_ := Client_SYS.Remove_Attr('EVALUATE_DEFAULT_INFO', attr_);
         END IF;
         IF (duplicate_line_ OR auto_substitution_allowed_) THEN
            temprec_.order_no           := Client_SYS.Get_Item_Value('ORDER_NO', attr_);
            temprec_.default_addr_flag  := Client_SYS.Get_Item_Value('DEFAULT_ADDR_FLAG_DB', attr_);
            temprec_.addr_flag          := Client_SYS.Get_Item_Value('ADDR_FLAG_DB', attr_);
            temprec_.ship_addr_no       := Client_SYS.Get_Item_Value('SHIP_ADDR_NO', attr_);
            
            temprec_.route_id           := Client_SYS.Get_Item_Value('ROUTE_ID', attr_);
            temprec_.forward_agent_id   := Client_SYS.Get_Item_Value('FORWARD_AGENT_ID', attr_);
            temprec_.ship_via_code      := Client_SYS.Get_Item_Value('SHIP_VIA_CODE', attr_);
            temprec_.delivery_terms     := Client_SYS.Get_Item_Value('DELIVERY_TERMS', attr_);
            temprec_.del_terms_location := Client_SYS.Get_Item_Value('DEL_TERMS_LOCATION', attr_);
            temprec_.delivery_leadtime  := Client_SYS.Get_Item_Value('DELIVERY_LEADTIME', attr_);
            temprec_.picking_leadtime   := Client_SYS.Get_Item_Value('PICKING_LEADTIME', attr_);
            temprec_.shipment_type      := Client_SYS.Get_Item_Value('SHIPMENT_TYPE', attr_);
            temprec_.ext_transport_calendar_id := Client_SYS.Get_Item_Value('EXT_TRANSPORT_CALENDAR_ID', attr_);
            temprec_.cust_calendar_id   := Client_SYS.Get_Item_Value('CUST_CALENDAR_ID', attr_);
            temprec_.district_code      := Client_SYS.Get_Item_Value('DISTRICT_CODE', attr_);
            temprec_.region_code        := Client_SYS.Get_Item_Value('REGION_CODE', attr_);
            temprec_.shipment_creation  := Shipment_Creation_API.Encode(Client_SYS.Get_Item_Value('SHIPMENT_CREATION', attr_));
            temprec_.contact            := Client_SYS.Get_Item_Value('CONTACT', attr_);
            temprec_.tax_liability      := Client_SYS.Get_Item_Value('TAX_LIABILITY', attr_);
            temprec_.freight_map_id     := Client_SYS.Get_Item_Value('FREIGHT_MAP_ID', attr_);
            temprec_.zone_id            := Client_SYS.Get_Item_Value('ZONE_ID', attr_);
            temprec_.freight_price_list_no := Client_SYS.Get_Item_Value('FREIGHT_PRICE_LIST_NO', attr_);
            temprec_.intrastat_exempt   := Client_SYS.Get_Item_Value('INTRASTAT_EXEMPT_DB', attr_);            
            temprec_.country_code       := Client_SYS.Get_Item_Value('COUNTRY_CODE', attr_);
            temprec_.tax_liability_type := Tax_Liability_API.Get_Tax_Liability_Type_Db(temprec_.tax_liability, temprec_.ship_addr_no);
        
            newrec_.default_addr_flag := Check_Default_Addr_Flag___(temprec_, temprec_.order_no, temprec_.default_addr_flag, duplicate_line_);
         ELSE
            -- Check the DB value for default address flag
            newrec_.default_addr_flag := Client_SYS.Get_Item_Value('DEFAULT_ADDR_FLAG_DB', attr_);
         END IF;   
      END IF;

      Trace_SYS.Field('DEFAULT_ADDR_FLAG', newrec_.default_addr_flag);

      --If IPD and no value is sent via ORDERS message copy tax_id_no from header.
      IF (NVL(demand_code_, Database_SYS.string_null_) != 'IPD' ) AND (Client_SYS.Get_Item_Value('TAX_ID_NO', attr_) IS NULL) THEN
         Client_SYS.Set_Item_Value('TAX_ID_NO', order_rec_.tax_id_no, attr_);
         Client_SYS.Set_Item_Value('TAX_ID_VALIDATED_DATE', order_rec_.tax_id_validated_date, attr_);
      END IF;

      IF (NVL(Client_SYS.Get_Item_Value('COPY_ORDER_LINE', attr_), 'FALSE') = 'FALSE') THEN
         -- if default flag is set, set order header values for the delivery address info
         IF (newrec_.default_addr_flag = 'Y') THEN
            Client_SYS.Set_Item_Value('ADDR_FLAG_DB',        order_rec_.addr_flag,           attr_);
            Client_SYS.Set_Item_Value('SHIP_ADDR_NO',        order_rec_.ship_addr_no,        attr_);
            Client_SYS.Set_Item_Value('CONTACT',             order_rec_.cust_ref,            attr_);
            Client_SYS.Set_Item_Value('ROUTE_ID',            order_rec_.route_id,            attr_);
            Client_SYS.Set_Item_Value('FORWARD_AGENT_ID',    order_rec_.forward_agent_id,    attr_);
            Client_SYS.Set_Item_Value('DISTRICT_CODE',       order_rec_.district_code,       attr_);
            Client_SYS.Set_Item_Value('REGION_CODE',         order_rec_.region_code,         attr_);
            Client_SYS.Set_Item_Value('TAX_LIABILITY',       order_rec_.tax_liability,       attr_);
            Client_SYS.Set_Item_Value('INTRASTAT_EXEMPT_DB', order_rec_.intrastat_exempt,    attr_);

            IF (NVL((Client_SYS.Get_Item_Value('DEMAND_CODE_DB', attr_)), 'IPT') != 'IPT') THEN
               Client_SYS.Set_Item_Value('DELIVERY_TERMS',      order_rec_.delivery_terms,      attr_);
               Client_SYS.Set_Item_Value('DEL_TERMS_LOCATION',  order_rec_.del_terms_location,  attr_);
            END IF;
            IF (shipment_creation_sent_ = 'FALSE') THEN
               Client_SYS.Set_Item_Value('SHIPMENT_CREATION_DB', order_rec_.shipment_creation, attr_);
            END IF;

            deliver_country_db_  := Customer_Order_Address_API.Get_Country_Code(newrec_.order_no);

            Client_SYS.Set_Item_Value('COUNTRY_CODE',          deliver_country_db_,        attr_);
            Client_SYS.Set_Item_Value('TAX_LIABILITY_TYPE_DB', Tax_Liability_API.Get_Tax_Liability_Type_Db(order_rec_.tax_liability, deliver_country_db_), attr_);
         -- otherwise fetch values from customer and customer address
         ELSE
            Trace_SYS.Field('Inherit values from ship address no', newrec_.ship_addr_no);

            address_rec_ := Cust_Ord_Customer_Address_API.Get(newrec_.deliver_to_customer_no, newrec_.ship_addr_no);

            -- IF it is an internal direct delivery, then don't alter attr_.
            IF ( NVL(demand_code_, Database_SYS.string_null_) != 'IPD' ) THEN
               -- When delivery terms for the line is different than the ones on the order
               IF (Client_SYS.Get_Item_Value('DELIVERY_TERMS', attr_) IS NULL) THEN
                  Client_SYS.Set_Item_Value('DELIVERY_TERMS', address_rec_.delivery_terms, attr_);
               END IF;
               IF (Client_SYS.Get_Item_Value('DEL_TERMS_LOCATION', attr_) IS NULL) THEN
                  Client_SYS.Set_Item_Value('DEL_TERMS_LOCATION', address_rec_.del_terms_location, attr_);
               END IF;
               Client_SYS.Set_Item_Value('INTRASTAT_EXEMPT_DB', address_rec_.intrastat_exempt, attr_);

               IF (Client_SYS.Get_Item_Value('DISTRICT_CODE', attr_) IS NULL) THEN
                  Client_SYS.Set_Item_Value('DISTRICT_CODE', address_rec_.district_code, attr_);
               END IF;
               IF (Client_SYS.Get_Item_Value('REGION_CODE', attr_) IS NULL) THEN
                  Client_SYS.Set_Item_Value('REGION_CODE', address_rec_.region_code, attr_);
               END IF;
            END IF;

            company_ := Site_API.Get_Company(newrec_.contract);

            IF (Client_SYS.Get_Item_Value('TAX_LIABILITY', attr_) IS NULL) THEN
               IF (order_rec_.customer_no = newrec_.deliver_to_customer_no) THEN
                  Client_SYS.Set_Item_Value('TAX_LIABILITY', Tax_Handling_Util_API.Get_Customer_Tax_Liability(newrec_.customer_no, newrec_.ship_addr_no, company_, order_rec_.supply_country), attr_);
               ELSE
                  Client_SYS.Set_Item_Value('TAX_LIABILITY', Tax_Handling_Util_API.Get_Customer_Tax_Liability(newrec_.customer_no, order_rec_.ship_addr_no, company_, order_rec_.supply_country), attr_);
               END IF;
            END IF;

            tax_liability_       := Client_SYS.Get_Item_Value('TAX_LIABILITY', attr_);
            deliver_country_db_  := Cust_Ord_Customer_Address_API.Get_Country_Code(newrec_.deliver_to_customer_no, newrec_.ship_addr_no);

            Client_SYS.Set_Item_Value('COUNTRY_CODE', deliver_country_db_, attr_);
            Client_SYS.Set_Item_Value('TAX_LIABILITY_TYPE_DB', Tax_Liability_API.Get_Tax_Liability_Type_Db(tax_liability_, deliver_country_db_), attr_);
         END IF;
      END IF;   
   END IF;

   price_source_    := Client_SYS.Get_Item_Value('PRICE_SOURCE', attr_);
   price_source_db_ := Pricing_Source_API.Encode(price_source_);
   IF (price_source_db_ IS NULL) THEN
      price_source_db_ := Client_SYS.Get_Item_Value('PRICE_SOURCE_DB', attr_);
   END IF;

   IF (price_source_db_ = 'AGREEMENT') THEN
      customer_agreement_ := Client_SYS.Get_Item_Value('PRICE_SOURCE_ID', attr_);
   ELSE
      customer_agreement_ := NULL;
   END IF;

   newrec_.demand_order_ref1 := Client_SYS.Get_Item_Value('DEMAND_ORDER_REF1', attr_);

   -- Check on line_item_no to make sure that this is not run for package components
   IF (line_item_no_ IS NULL) OR (line_item_no_ <= 0) THEN
      IF ((customer_agreement_ IS NOT NULL) AND (Order_Quotation_Line_API.Exist_Lines(newrec_.demand_order_ref1) = 'FALSE')) THEN
         agreement_rec_  := Customer_Agreement_API.Get(customer_agreement_);

         delivery_terms_ := agreement_rec_.delivery_terms;

         IF (NVL(demand_code_, Database_SYS.string_null_) NOT IN ('IPD', 'IPT', 'IPT_RO')) THEN
            IF (delivery_terms_ IS NOT NULL) THEN
               newrec_.delivery_terms      := delivery_terms_;
               newrec_.del_terms_location  := agreement_rec_.del_terms_location;
            ELSE
               newrec_.delivery_terms      := order_rec_.delivery_terms;
               newrec_.del_terms_location  := order_rec_.del_terms_location;
            END IF;
            Client_SYS.Set_Item_Value('DELIVERY_TERMS', newrec_.delivery_terms, attr_);
         END IF;
         Client_SYS.Set_Item_Value('DEFAULT_ADDR_FLAG_DB', newrec_.default_addr_flag, attr_);
      ELSE
         IF (NVL(demand_code_, Database_SYS.string_null_) NOT IN ('IPD', 'IPT', 'IPT_RO')) THEN
            IF (newrec_.default_addr_flag = 'Y') THEN
               newrec_.delivery_terms      := order_rec_.delivery_terms;
               newrec_.del_terms_location  := order_rec_.del_terms_location;
            ELSIF (newrec_.default_addr_flag = 'N') THEN
               newrec_.delivery_terms     := Client_SYS.Get_Item_Value('DELIVERY_TERMS', attr_);
               newrec_.del_terms_location := Client_SYS.Get_Item_Value('DEL_TERMS_LOCATION', attr_);
            END IF;
         END IF;
      END IF;
      IF (NVL(demand_code_, Database_SYS.string_null_) NOT IN ('IPD', 'IPT', 'IPT_RO')) THEN
         Client_SYS.Set_Item_Value('DELIVERY_TERMS', newrec_.delivery_terms, attr_);
         Client_SYS.Set_Item_Value('DEL_TERMS_LOCATION', newrec_.del_terms_location, attr_);
      END IF;
   END IF;

   IF (Client_SYS.Get_Item_Value('REBATE_BUILDER', attr_) IS NULL AND (Client_SYS.Get_Item_Value('REBATE_BUILDER_DB', attr_) IS NULL)) THEN
      Client_SYS.Set_Item_Value('REBATE_BUILDER_DB', 'TRUE', attr_);
   END IF;

   IF (Client_SYS.Get_Item_Value('SHIPMENT_CREATION', attr_) IS NOT NULL) OR (Client_SYS.Get_Item_Value('SHIPMENT_CREATION_DB', attr_) IS NOT NULL) THEN
      IF (shipment_creation_sent_ = 'FALSE') THEN
         packed_ship_cre_in_init_ := 'TRUE';
      END IF;
      shipment_creation_sent_ := 'TRUE';
   END IF;

   Client_SYS.Add_To_Attr('SHIPMENT_CREATION_SENT',  shipment_creation_sent_,  attr_);
   Client_SYS.Add_To_Attr('SHIPMENT_TYPE_SENT',      shipment_type_sent_,      attr_);
   Client_SYS.Add_To_Attr('PACKED_SHIP_CRE_IN_INIT', packed_ship_cre_in_init_, attr_);
   
   IF ((auto_substitution_allowed_) AND (supply_code_db_ = 'IO') AND (newrec_.part_ownership = 'COMPANY OWNED') AND (newrec_.rental = Fnd_Boolean_API.DB_FALSE)
            AND (Part_Catalog_API.Get_Configurable_Db(newrec_.part_no) = 'NOT CONFIGURED') 
            AND ((newrec_.demand_code NOT IN ('IPT', 'IPD')) OR (newrec_.demand_code IS NULL))) THEN
      
      substitutable_part_ := Substitute_Sales_Part_API.Find_Substitutable_Part(newrec_.contract, newrec_.catalog_no, newrec_.order_no, newrec_.line_no,
                                                                               newrec_.rel_no, newrec_.line_item_no, newrec_.customer_no, revised_qty_due_, 
                                                                               supply_code_db_, newrec_.picking_leadtime, newrec_.part_ownership );
      IF ((substitutable_part_ IS NOT NULL) AND (substitutable_part_ != newrec_.catalog_no)) THEN
         
         newrec_.original_part_no := newrec_.catalog_no;
         newrec_.catalog_no := substitutable_part_; 
         sprec_ := Sales_Part_API.Get(newrec_.contract, substitutable_part_);
         newrec_.catalog_desc := Sales_Part_API.Get_Catalog_Desc(newrec_.contract, newrec_.catalog_no, order_rec_.language_code);
         newrec_.part_no :=  sprec_.part_no;  
         
         Client_SYS.Add_To_Attr('CATALOG_NO',  newrec_.catalog_no,  attr_);
         Client_SYS.Add_To_Attr('ORIGINAL_PART_NO',  newrec_.original_part_no,  attr_);
         Client_SYS.Add_To_Attr('CATALOG_DESC',  newrec_.catalog_desc,  attr_);
         Client_SYS.Add_To_Attr('PART_NO',  newrec_.part_no,  attr_);
         Client_SYS.Add_To_Attr('REVISED_QTY_DUE',  revised_qty_due_,  attr_);         
         -- Removing the pricing information since those should be refetched for the substitute part.
         attr_ := Client_SYS.Remove_Attr('SALE_UNIT_PRICE', attr_);
         attr_ := Client_SYS.Remove_Attr('BASE_SALE_UNIT_PRICE', attr_);
         attr_ := Client_SYS.Remove_Attr('BASE_UNIT_PRICE_INCL_TAX', attr_);
         attr_ := Client_SYS.Remove_Attr('UNIT_PRICE_INCL_TAX', attr_);
         attr_ := Client_SYS.Remove_Attr('PART_PRICE', attr_);
         attr_ := Client_SYS.Remove_Attr('PRICE_SOURCE_ID', attr_);
         attr_ := Client_SYS.Remove_Attr('PRICE_LIST_NO', attr_);
         attr_ := Client_SYS.Remove_Attr('CURRENCY_RATE', attr_);
         attr_ := Client_SYS.Remove_Attr('COST', attr_);
         attr_ := Client_SYS.Remove_Attr('PURCHASE_PART_NO', attr_);
         attr_ := Client_SYS.Remove_Attr('PART_LEVEL', attr_);
         attr_ := Client_SYS.Remove_Attr('PART_LEVEL_DB', attr_);
         attr_ := Client_SYS.Remove_Attr('PART_LEVEL_ID', attr_);
         attr_ := Client_SYS.Remove_Attr('CUSTOMER_LEVEL', attr_);
         attr_ := Client_SYS.Remove_Attr('CUSTOMER_LEVEL_DB', attr_);
         attr_ := Client_SYS.Remove_Attr('CUSTOMER_LEVEL_ID', attr_);
         
         Build_Attr_For_New___(discount_, copy_discount_, create_partial_sum_, new_attr_, attr_);
         Client_SYS.Clear_Attr(attr_);
         attr_ := new_attr_;
         Client_SYS.Add_To_Attr('DISCOUNT', discount_, attr_);
         Client_SYS.Add_To_Attr('COPY_DISCOUNT', copy_discount_, attr_);
                                                    
      END IF;
      
   END IF;
END Pre_Unpack_Insert___;


PROCEDURE Pre_Unpack_Update___ (
   attr_      IN OUT NOCOPY VARCHAR2,
   newrec_    IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE )
IS
   oldrec_                        CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   ptr_                           NUMBER;
   name_                          VARCHAR2(30);
   value_                         VARCHAR2(4000);
   cancel_info_added_             BOOLEAN := FALSE;
   info_added_                    BOOLEAN := FALSE;
   order_rec_                     CUSTOMER_ORDER_API.Public_Rec;
   addr_flag_changed_in_client_   BOOLEAN := TRUE;
   default_addr_flag_             CUSTOMER_ORDER_LINE_TAB.default_addr_flag%TYPE;
   insert_package_mode_           VARCHAR2(5);
   deliver_country_db_            VARCHAR2(2);
   tax_liability_                 VARCHAR2(20);
   company_                       VARCHAR2(20);
BEGIN
   oldrec_              := newrec_;
   insert_package_mode_ :=  NVL(Client_SYS.Get_Item_Value('INSERT_PACKAGE_MODE_', attr_), 'FALSE');

   ptr_ := NULL;
   WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
      -- Not all attributes may be updated when the line has reached the status 'Invoiced'
      IF (newrec_.rowstate = 'Invoiced') THEN
         IF name_ NOT IN ('QTY_RETURNED', 'NOTE_TEXT', 'ORDER_DISCOUNT', 'QTY_ASSIGNED', 'QTY_SHIPPED', 'QTY_PICKED', 'QTY_SHIPDIFF', 'QTY_TO_SHIP',
                          'REAL_SHIP_DATE', 'QTY_ON_ORDER', 'DEFAULT_ADDR_FLAG', 'DEFAULT_ADDR_FLAG_DB', 'DELIVERY_TERMS',
                          'DEL_TERMS_LOCATION', 'DELIVERY_LEADTIME', 'DISTRICT_CODE', 'REGION_CODE', 'UPDATE_PRICE_EFFECTIVE_DATE',
                          'SM_CONNECTION','SM_CONNECTION_DB', 'COST', 'INTRASTAT_EXEMPT', 'INTRASTAT_EXEMPT_DB', 'CUST_CALENDAR_ID', 'EXT_TRANSPORT_CALENDAR_ID',
                          'DELIVERY_CONFIRMED', 'DELIVERY_CONFIRMED_DB', 'QTY_CONFIRMEDDIFF', 'FIRST_ACTUAL_SHIP_DATE', 'PICKING_LEADTIME', 'SHIPMENT_TYPE', 'PACKING_INSTRUCTION_ID',
                          'SHIPMENT_CONNECTED', 'SHIPMENT_CONNECTED_DB', 'TAX_ID_NO', 'TAX_ID_VALIDATED_DATE', 'CUSTOMS_VALUE', 'ABNORMAL_DEMAND', 'ABNORMAL_DEMAND_DB', 'OPEN_SHIPMENT_QTY',
                          'INSERT_PACKAGE_MODE_', 'ADD_INFO', 'DEFAULT_CHARGES', 'QTY_INVOICED', 'SET_TAX_FROM_ORIGINAL', 'MULTIPLE_TAX_LINES', 'FETCH_TAX_FROM_DEFAULTS','TAX_CLASS_ID') THEN

            IF (name_ IN ('PRICE_CONV_FACTOR')) THEN
               IF (Part_Catalog_API.Get_Catch_Unit_Enabled(oldrec_.part_no) = Fnd_Boolean_API.Decode('FALSE')) THEN
                  Error_SYS.Record_General(lu_name_, 'BILLED_ORD_LINE: Invoiced/Closed order line :P1-:P2-:P3 may not be modified', newrec_.order_no, newrec_.line_no, newrec_.rel_no);
               END IF;
            ELSE
               Error_SYS.Record_General(lu_name_, 'BILLED_ORD_LINE: Invoiced/Closed order line :P1-:P2-:P3 may not be modified', newrec_.order_no, newrec_.line_no, newrec_.rel_no);
            END IF;
         END IF;
      -- Buy_qty_due may not be updated if the line is delivered
      ELSIF ((newrec_.rowstate = 'Delivered') AND (name_ = 'BUY_QTY_DUE')) THEN
           Error_SYS.Record_General(lu_name_, 'DELIVERED_ORDER_LINE: Sales quantity may not be updated on Delivered order lines.');
        -- Buy_qty_due may not be updated if the export license is connected

      -- Inform user about changing delivery note information if order line has been pick reported
      ELSIF (newrec_.rowstate IN ('Picked', 'PartiallyDelivered', 'Delivered')) THEN
         IF ((newrec_.rowstate = 'PartiallyDelivered') AND (newrec_.qty_invoiced > 0) AND (name_  = 'SHIP_VIA_CODE') AND (oldrec_.ship_via_code != value_)
              AND ( (newrec_.freight_map_id IS NOT NULL) OR (newrec_.zone_id IS NOT NULL) OR (newrec_.freight_price_list_no IS NOT NULL) )) THEN
            Error_SYS.Record_General(lu_name_, 'FREIGHT_ORDER: Invoiced order lines connected to Freight functionality cannot be changed.');
         END IF;
         IF NOT info_added_ AND (name_ IN ('CONTACT', 'ROUTE_ID', 'FORWARD_AGENT_ID', 'SHIP_VIA_CODE', 'SHIP_ADDR_NO', 'ADDR_FLAG', 'ADDR_FLAG_DB',
                                           'DEFAULT_ADDR_FLAG', 'DEFAULT_ADDR_FLAG_DB', 'DELIVERY_TERMS','DEL_TERMS_LOCATION')) THEN
            Raise_Delnote_Info_Message___;
            info_added_ := TRUE;
         END IF;
      ELSIF (newrec_.rowstate = 'Cancelled') THEN
         IF ((NOT cancel_info_added_) AND
             (name_ IN ('CUSTOMER_PART_BUY_QTY', 'BUY_QTY_DUE', 'DESIRED_QTY', 'CATALOG_DESC',
                        'WANTED_DELIVERY_DATE', 'PLANNED_DELIVERY_DATE', 'PROMISED_DELIVERY_DATE', 'PLANNED_SHIP_DATE',
                        'PRICE_LIST_NO', 'SALE_UNIT_PRICE', 'UNIT_PRICE_INCL_TAX', 'PRICE_FREEZE_DB', 'BASE_SALE_UNIT_PRICE', 'BASE_UNIT_PRICE_INCL_TAX',
                        'PRICE_EFFECTIVITY_DATE', 'CLOSE_TOLERANCE', 'WARRANTY', 'DELIVERY_TYPE', 'DEFAULT_ADDR_FLAG_DB',
                        'SHIP_ADDR_NO', 'DOCK_CODE', 'SUB_DOCK_CODE', 'REF_ID', 'LOCATION_NO', 'SUPPLY_CODE', 'VENDOR_NO',
                        'SUPPLY_SITE', 'DOP_CONNECTION', 'SUP_SM_OBJECT', 'SUP_SM_CONTRACT', 'EARLIEST_START_DATE', 'CANCEL_REASON',
                        'PROVISIONAL_PRICE_DB', 'SHIPMENT_CREATION', 'CUSTOMER_PO_LINE_NO', 'CUSTOMER_PO_REL_NO', 'RECEIVING_ADVICE_TYPE', 'TARGET_DATE'))) THEN
            Client_SYS.Add_Info(lu_name_, 'CANCELLED_LINE: You are updating a Cancelled Customer Order Line.');
            cancel_info_added_ := TRUE;
         END IF;
      END IF;
   END LOOP;

   order_rec_ := CUSTOMER_ORDER_API.Get(newrec_.order_no);
   -- fetch new default flag from attr
   default_addr_flag_ := Client_SYS.Get_Item_Value('DEFAULT_ADDR_FLAG_DB', attr_);
   IF (default_addr_flag_ IS NULL) THEN
      default_addr_flag_ := Gen_Yes_No_API.Encode(Client_SYS.Get_Item_Value('DEFAULT_ADDR_FLAG', attr_));
   END IF;

   -- if not found, use old flag value
   IF (default_addr_flag_ IS NULL) THEN
      default_addr_flag_ := oldrec_.default_addr_flag;
      IF (newrec_.ship_addr_no != order_rec_.ship_addr_no ) AND (default_addr_flag_  = 'Y') THEN
         addr_flag_changed_in_client_ := TRUE;
      ELSE
         addr_flag_changed_in_client_ := FALSE;
      END IF;
   END IF;

   IF (default_addr_flag_ = 'Y') THEN
      -- if reset to using order header values, overwrite the client's values.
      -- IF so, client values should be overwritten with order header values.
      IF addr_flag_changed_in_client_ THEN
         Client_SYS.Set_Item_Value('ADDR_FLAG_DB', order_rec_.addr_flag, attr_);
         Client_SYS.Set_Item_Value('SHIP_ADDR_NO', order_rec_.ship_addr_no, attr_);
         Client_SYS.Set_Item_Value('CONTACT', order_rec_.cust_ref, attr_);
         Client_SYS.Set_Item_Value('ROUTE_ID', order_rec_.route_id, attr_);
         Client_SYS.Set_Item_Value('FORWARD_AGENT_ID', order_rec_.forward_agent_id, attr_);
         Client_SYS.Set_Item_Value('SHIP_VIA_CODE', order_rec_.ship_via_code, attr_);
         Client_SYS.Set_Item_Value('CUST_CALENDAR_ID', order_rec_.cust_calendar_id, attr_);
         Client_SYS.Set_Item_Value('EXT_TRANSPORT_CALENDAR_ID', order_rec_.ext_transport_calendar_id, attr_);
         Client_SYS.Set_Item_Value('DELIVERY_TERMS', order_rec_.delivery_terms, attr_);
         Client_SYS.Set_Item_Value('DEL_TERMS_LOCATION', order_rec_.del_terms_location, attr_);
         Client_SYS.Set_Item_Value('DELIVERY_LEADTIME', order_rec_.delivery_leadtime, attr_);
         Client_SYS.Set_Item_Value('DISTRICT_CODE', order_rec_.district_code, attr_);
         Client_SYS.Set_Item_Value('REGION_CODE', order_rec_.region_code, attr_);
         Client_SYS.Set_Item_Value('TAX_LIABILITY', order_rec_.tax_liability, attr_);
         Client_SYS.Set_Item_Value('INTRASTAT_EXEMPT_DB', order_rec_.intrastat_exempt, attr_);
         Client_SYS.Set_Item_Value('SHIPMENT_CREATION_DB', order_rec_.shipment_creation, attr_);
         Client_SYS.Set_Item_Value('FREIGHT_MAP_ID', order_rec_.freight_map_id, attr_);
         Client_SYS.Set_Item_Value('ZONE_ID', order_rec_.zone_id, attr_);
         Client_SYS.Set_Item_Value('FREIGHT_PRICE_LIST_NO', order_rec_.freight_price_list_no, attr_);
         Client_SYS.Set_Item_Value('PICKING_LEADTIME', order_rec_.picking_leadtime, attr_);
         Client_SYS.Set_Item_Value('SHIPMENT_TYPE', order_rec_.shipment_type, attr_);
         Client_SYS.Set_Item_Value('TAX_ID_NO', order_rec_.tax_id_no, attr_);
         Client_SYS.Set_Item_Value('TAX_ID_VALIDATED_DATE', order_rec_.tax_id_validated_date, attr_);
         
         deliver_country_db_  := Customer_Order_Address_API.Get_Country_Code(newrec_.order_no);
         Client_SYS.Set_Item_Value('COUNTRY_CODE', deliver_country_db_, attr_);
         Client_SYS.Set_Item_Value('TAX_LIABILITY_TYPE_DB', Tax_Liability_API.Get_Tax_Liability_Type_Db(order_rec_.tax_liability, deliver_country_db_), attr_);
      END IF;
   ELSE
      IF (Client_SYS.Get_Item_Value('TAX_LIABILITY', attr_) IS NULL) THEN
         IF (newrec_.tax_liability IS NULL) THEN
            company_ := Site_API.Get_Company(newrec_.contract);
            IF (order_rec_.customer_no = newrec_.deliver_to_customer_no) THEN
               Client_SYS.Set_Item_Value('TAX_LIABILITY', Tax_Handling_Util_API.Get_Customer_Tax_Liability(newrec_.customer_no, newrec_.ship_addr_no, company_, order_rec_.supply_country), attr_);
            ELSE
               Client_SYS.Set_Item_Value('TAX_LIABILITY', Tax_Handling_Util_API.Get_Customer_Tax_Liability(newrec_.customer_no, order_rec_.ship_addr_no, company_, order_rec_.supply_country), attr_);
            END IF;
         ELSE
            Client_SYS.Set_Item_Value('TAX_LIABILITY', newrec_.tax_liability, attr_);            
         END IF;
      END IF;
      
      tax_liability_       := Client_SYS.Get_Item_Value('TAX_LIABILITY', attr_);
      deliver_country_db_  := Cust_Ord_Customer_Address_API.Get_Country_Code(newrec_.deliver_to_customer_no, newrec_.ship_addr_no);   
      Client_SYS.Set_Item_Value('TAX_LIABILITY_TYPE_DB', Tax_Liability_API.Get_Tax_Liability_Type_Db(tax_liability_, deliver_country_db_), attr_);
      
   END IF;
END Pre_Unpack_Update___;


PROCEDURE Post_Insert_Actions___ (
   attr_   IN OUT NOCOPY VARCHAR2,
   newrec_ IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE)
IS
   rowid_                           VARCHAR2(2000);
   rowversion_                      VARCHAR2(2000);
   header_rowstate_                 CUSTOMER_ORDER_TAB.rowstate%TYPE;
   linerec_                         CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   order_rec_                       CUSTOMER_ORDER_API.Public_Rec;
   cust_rec_                        CUST_ORD_CUSTOMER_API.Public_Rec;
   company_tax_ctrl_rec_            COMPANY_TAX_CONTROL_API.Public_Rec;
   sales_part_rec_                  SALES_PART_API.Public_Rec;
   line_total_                      NUMBER;
   company_                         VARCHAR2(20);
   contract_                        CUSTOMER_ORDER_LINE_TAB.contract%TYPE;
   part_no_                         CUSTOMER_ORDER_LINE_TAB.part_no%TYPE;
   msg_text_                        VARCHAR2(200);
   local_site_reservation_exist_    NUMBER := 0;
   total_percentage_                NUMBER;
   create_connected_order_          BOOLEAN := TRUE;
   min_qty_                         NUMBER;
   add_status_                      BOOLEAN := FALSE;
   automatic_capability_check_      VARCHAR2(50);
   auto_cc_performed_               BOOLEAN := FALSE;
   calc_price_per_curr_             NUMBER;
   default_charges_                 VARCHAR2(5);
   planned_receipt_date_            DATE;
   shipment_id_                     NUMBER;
   shipment_creation_changed_       BOOLEAN := FALSE;
   dummy_                           Shipment_API.Shipment_Id_Tab;
   header_deliver_country_db_       VARCHAR2(2);
   deal_description_                VARCHAR2(200);
   insert_package_mode_             VARCHAR2(5);
   block_component_info_            VARCHAR2(5):= 'FALSE';
   rental_chargeable_days_          NUMBER;
   discount_type_                   VARCHAR2(25);
   proj_unique_sale_                VARCHAR2(5);
   order_project_id_                CUSTOMER_ORDER_TAB.project_id%TYPE;
   licensed_order_type_             VARCHAR2(25);
   copy_discount_                   VARCHAR2(5);
   ptr_                             VARCHAR2(2000);
   name_                            VARCHAR2(2000);
   value_                           VARCHAR2(4000);
   temp_info_                       VARCHAR2(2000);
   temp_insert_package_mode_        VARCHAR2(5);
   tax_from_defaults_               BOOLEAN;
   original_order_no_               VARCHAR2(12);
   original_line_no_                VARCHAR2(4);
   original_rel_no_                 VARCHAR2(4);
   original_line_item_no_           VARCHAR2(50);
   ctp_run_id_                      NUMBER;
   tax_class_id_                    VARCHAR2(20);
   quotation_no_                    VARCHAR2(12);
   quotation_line_no_               VARCHAR2(4);
   quotation_rel_no_                VARCHAR2(4);
   quotation_line_item_no_          NUMBER; 
   copy_order_line_                 BOOLEAN := NVL(Client_SYS.Get_Item_Value('COPY_ORDER_LINE', attr_), 'FALSE') = 'TRUE';
   tax_method_                      VARCHAR2(50);
   tax_from_external_system_        BOOLEAN := FALSE;
   update_required_                 BOOLEAN := FALSE;
   temp_sale_unit_price_            NUMBER;      
   temp_base_sale_unit_price_       NUMBER; 
   temp_currency_rate_              NUMBER;       
   discount_                        NUMBER;             
   temp_rebate_builder_db_          VARCHAR2(20);
   fetch_external_tax_              VARCHAR2(5) := 'TRUE';
BEGIN
   SELECT rowid
      INTO  rowid_
      FROM  CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = newrec_.order_no
      AND   line_no = newrec_.line_no
      AND   rel_no = newrec_.rel_no
      AND   line_item_no = newrec_.line_item_no;

   order_rec_ := CUSTOMER_ORDER_API.Get(newrec_.order_no);
   insert_package_mode_ := NVL(Client_SYS.Get_Item_Value('INSERT_PACKAGE_MODE_', attr_), 'FALSE');
   
   IF (newrec_.activity_seq IS NOT NULL) THEN 
      $IF (Component_Proj_SYS.INSTALLED) $THEN
         newrec_.project_id  := Activity_API.Get_Project_Id(newrec_.activity_seq);
         proj_unique_sale_   := Project_API.Get_Proj_Unique_Sale_Db(newrec_.project_id);

         IF (proj_unique_sale_ = 'TRUE') THEN
            order_project_id_ := order_rec_.project_id;
            IF (order_project_id_ IS NULL) THEN
               Customer_Order_API.Modify_Project_Id(newrec_.order_no, newrec_.project_id);
            END IF;
         END IF;
      $ELSE
         Error_SYS.Record_General(lu_name_, 'ACTIVITYNOTINST: Activity Sequence may not be set since Activity is not installed.');
      $END
      Handle_Activity_Seq___(newrec_, NULL);
   END IF;
      
   IF (((order_rec_.proposed_prepayment_amount >0) OR (Customer_Invoice_Pub_Util_API.Has_Adv_Inv(newrec_.order_no) = 'TRUE')) AND (newrec_.rental = Fnd_Boolean_API.DB_TRUE)) THEN
      Error_SYS.Record_General(lu_name_, 'CANNOTCREATRENTAL: You cannot create rental lines when prepayment invoices exist for the customer order.');
   END IF;

   -- Create a new history record.
   Customer_Order_Line_Hist_API.New(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);

   IF (newrec_.line_item_no <= 0) THEN
      calc_price_per_curr_ := newrec_.part_price + NVL(newrec_.calc_char_price, 0);
      -- Only create history record and event when the price has been manually changed
      IF (newrec_.sale_unit_price != calc_price_per_curr_) THEN
         Log_Price_Changes___(newrec_, order_rec_, calc_price_per_curr_ );
      END IF;
   END IF;

   $IF Component_Expctr_SYS.INSTALLED $THEN
      IF (Customer_Order_Flow_API.Get_License_Enabled(newrec_.order_no, 'INTERACT_CUST_ORD') = 'TRUE') THEN
         licensed_order_type_ := Get_Expctr_License_Order_Type(newrec_.demand_code, newrec_.demand_order_ref1, newrec_.demand_order_ref2, newrec_.demand_order_ref3);
         Exp_License_Connect_Util_API.Create_Exp_License_For_Src(licensed_order_type_, newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
      END IF;
   $END

   -- Set the block component info flag so we stop the component info messages generated from Change_Package_Structure___ later on
   IF (newrec_.supply_code = 'PKG') THEN
      block_component_info_ := 'TRUE';
   END IF;
   
   IF (newrec_.line_item_no <= 0) THEN
      -- if address is set to single occurance and is not used as the default from the header,
      -- insert it so that the user can modify it at any time later on...
      IF ((newrec_.default_addr_flag = 'N') AND (newrec_.addr_flag = 'Y') AND  NOT(copy_order_line_)) THEN
         Insert_Default_Address___(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, newrec_.customer_no, newrec_.ship_addr_no, newrec_.deliver_to_customer_no);
      END IF;
      Client_SYS.Set_Item_Value('DEFAULT_ADDR_FLAG_DB', newrec_.default_addr_flag, attr_);
      Client_SYS.Set_Item_Value('SHIP_ADDR_NO', newrec_.ship_addr_no, attr_);
      Client_SYS.Set_Item_Value('ADDR_FLAG_DB', newrec_.addr_flag, attr_);
   END IF;

   sales_part_rec_ := Sales_Part_API.Get(newrec_.contract, newrec_.catalog_no);
   IF (newrec_.line_item_no <= 0) THEN
      CUSTOMER_ORDER_API.Modify_Grp_Disc_Calc_Flag(newrec_.order_no, 'N');
      company_ := Site_API.Get_Company(order_rec_.contract);
      company_tax_ctrl_rec_ := Company_Tax_Control_API.Get(company_);
      tax_method_ := company_tax_ctrl_rec_.external_tax_cal_method;
      
      IF tax_method_ IN (External_Tax_Calc_Method_API.DB_AVALARA_SALES_TAX, External_Tax_Calc_Method_API.DB_AVALARA_TAX_BRAZIL)
         AND (company_tax_ctrl_rec_.fetch_tax_on_line_entry = Fnd_Boolean_API.DB_FALSE
              OR NVL(Client_SYS.Get_Item_Value('UPDATE_TAX', attr_), 'TRUE') = 'FALSE') THEN
         fetch_external_tax_ := 'FALSE';
      END IF;
      
      IF (tax_method_ != External_Tax_Calc_Method_API.DB_NOT_USED) THEN
         tax_from_defaults_ := TRUE;
         tax_from_external_system_ := TRUE;
      ELSE
         IF (NVL(Client_SYS.Get_Item_Value('FETCH_TAX_CODES', attr_), 'TRUE') = 'TRUE') THEN
            IF (newrec_.tax_calc_structure_id IS NULL) THEN
               IF (newrec_.tax_code IS NULL) THEN
                  tax_from_defaults_ := TRUE;
               ELSE
                  tax_from_defaults_ := FALSE;
               END IF;
            ELSE
               tax_from_defaults_ := FALSE;
            END IF;
         END IF;
      END IF;
      -- If the line is copied or duplicated, taxes should be copied from the original line.
      original_order_no_     := Client_SYS.Get_Item_Value('ORIGINAL_ORDER_NO', attr_);
      original_line_no_      := Client_SYS.Get_Item_Value('ORIGINAL_LINE_NO', attr_);
      original_rel_no_       := Client_SYS.Get_Item_Value('ORIGINAL_REL_NO', attr_);
      original_line_item_no_ := Client_SYS.Get_Item_Value('ORIGINAL_ITEM_NO', attr_);

      IF (Client_SYS.Get_Item_Value('SET_TAX_FROM_ORIGINAL', attr_) = 'TRUE') AND (NOT tax_from_external_system_) AND 
         (Customer_Order_API.Get_Customer_No(original_order_no_) = order_rec_.customer_no) THEN
         tax_class_id_ := Get_Tax_Class_Id(original_order_no_, 
                                           original_line_no_, 
                                           original_rel_no_, 
                                           original_line_item_no_);
         Tax_Handling_Order_Util_API.Transfer_Tax_lines(company_, 
                                                        Tax_Source_API.DB_CUSTOMER_ORDER_LINE, 
                                                        original_order_no_, 
                                                        original_line_no_, 
                                                        original_rel_no_, 
                                                        original_line_item_no_, 
                                                        '*',
                                                        Tax_Source_API.DB_CUSTOMER_ORDER_LINE, 
                                                        newrec_.order_no, 
                                                        newrec_.line_no, 
                                                        newrec_.rel_no, 
                                                        newrec_.line_item_no, 
                                                        '*',
                                                        'TRUE',
                                                        'FALSE');
      ELSIF ((NVL(Client_SYS.Get_Item_Value('FROM_ORDER_QUOTATION', attr_), 'FALSE') = 'TRUE') AND (NOT tax_from_external_system_)) THEN
         quotation_no_           := Client_SYS.Get_Item_Value('QUOTATION_NO', attr_);
         quotation_line_no_      := Client_SYS.Get_Item_Value('QUOTATION_LINE_NO', attr_);
         quotation_rel_no_       := Client_SYS.Get_Item_Value('QUOTATION_REL_NO', attr_);
         quotation_line_item_no_ := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('QUOTATION_ITEM_NO', attr_));
            Tax_Handling_Order_Util_API.Transfer_Tax_lines(company_, 
                                                           Tax_Source_API.DB_ORDER_QUOTATION_LINE, 
                                                           quotation_no_, 
                                                           quotation_line_no_, 
                                                           quotation_rel_no_, 
                                                           quotation_line_item_no_, 
                                                           '*',
                                                           Tax_Source_API.DB_CUSTOMER_ORDER_LINE, 
                                                           newrec_.order_no, 
                                                           newrec_.line_no, 
                                                           newrec_.rel_no, 
                                                           newrec_.line_item_no, 
                                                           '*');
      ELSIF (((copy_order_line_) AND (NVL(Client_SYS.Get_Item_Value('FETCH_TAX_FROM_DEFAULTS',attr_), 'TRUE') = 'FALSE')) 
            AND (NOT tax_from_external_system_)) THEN
         IF (NVL(Client_SYS.Get_Item_Value('RECALC_TAX_AMOUNTS', attr_), 'FALSE')='TRUE') THEN
            Tax_Handling_Order_Util_API.Transfer_Tax_lines(company_, 
                                                           Tax_Source_API.DB_CUSTOMER_ORDER_LINE, 
                                                           original_order_no_, 
                                                           original_line_no_, 
                                                           original_rel_no_, 
                                                           original_line_item_no_, 
                                                           '*',
                                                           Tax_Source_API.DB_CUSTOMER_ORDER_LINE, 
                                                           newrec_.order_no, 
                                                           newrec_.line_no, 
                                                           newrec_.rel_no, 
                                                           newrec_.line_item_no, 
                                                           '*',
                                                           'TRUE',
                                                           'TRUE');   
         ELSE
            Tax_Handling_Order_Util_API.Transfer_Tax_lines(company_, 
                                                           Tax_Source_API.DB_CUSTOMER_ORDER_LINE, 
                                                           original_order_no_, 
                                                           original_line_no_, 
                                                           original_rel_no_, 
                                                           original_line_item_no_, 
                                                           '*',
                                                           Tax_Source_API.DB_CUSTOMER_ORDER_LINE, 
                                                           newrec_.order_no, 
                                                           newrec_.line_no, 
                                                           newrec_.rel_no, 
                                                           newrec_.line_item_no, 
                                                           '*');  
         END IF;
      ELSE
         cust_rec_ := Cust_Ord_Customer_API.Get(order_rec_.customer_no);
         IF (tax_from_external_system_ AND newrec_.discount = 0 AND cust_rec_.discount_type IS NULL) THEN
            -- Execute the price logic and get the discount value, in order to know any discount involved for the line.
            Customer_Order_Pricing_API.Get_Order_Line_Price_Info(temp_sale_unit_price_,  temp_base_sale_unit_price_,  temp_currency_rate_,
                                                                 discount_,              temp_rebate_builder_db_,     newrec_.order_no,                                                                 
                                                                 newrec_.catalog_no,     newrec_.buy_qty_due,         newrec_.price_list_no,        
                                                                 newrec_.condition_code);
         END IF;

         -- When the tax is calculated from an external tax system and when there is a discount specified or applicable for the line, or on the customer,
         -- call to Add_Transaction_Tax_Info___ at this point will cause an unnecessary call to the external tax system where the tax is calculated for the un-discounted value.
         -- But this call is needed when there is no discount specified in the line or customer level, this also applies if there is a discount type specified on the customer that has the value 0%.
         IF (NOT tax_from_external_system_ OR (fetch_external_tax_ = 'TRUE' AND discount_ = 0 AND newrec_.discount = 0 AND cust_rec_.discount_type IS NULL) 
                                           OR (cust_rec_.discount_type IS NOT NULL AND cust_rec_.discount = 0)) THEN
            IF (newrec_.customer_no = newrec_.deliver_to_customer_no) THEN
               Add_Transaction_Tax_Info___ (newrec_,  
                                            company_,
                                            newrec_.customer_no,
                                            newrec_.ship_addr_no,                                      
                                            order_rec_.supply_country,
                                            order_rec_.use_price_incl_tax,
                                            order_rec_.currency_code,                                       
                                            tax_from_defaults_,                                      
                                            attr_  => NULL);
            ELSIF ((newrec_.demand_code IS NULL) OR (newrec_.demand_code != 'IPD') OR (newrec_.addr_flag = 'N')
                    OR (sales_part_rec_.tax_class_id IS NULL)) THEN
               Add_Transaction_Tax_Info___ (newrec_,  
                                            company_,                                      
                                            order_rec_.customer_no,
                                            order_rec_.ship_addr_no,                                      
                                            order_rec_.supply_country,                                        
                                            order_rec_.use_price_incl_tax,
                                            order_rec_.currency_code,                                       
                                            tax_from_defaults_,                                      
                                            attr_  => NULL);                                               
            END IF;
         END IF;
      END IF;
      newrec_ := Get_Object_By_Keys___(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
      IF (tax_class_id_ IS NOT NULL) THEN
         newrec_.tax_class_id := tax_class_id_;
      END IF;
      Calculate_Prices(newrec_);      
      update_required_ := TRUE;
   END IF;
   
   -- This flag was set in Check_Insert___() to facilitate availability check functionality.
   -- From this code block it will be reset for all the sourcing options except inventory order.
   IF (newrec_.supply_code IN ('IPT', 'IPD')) THEN
      IF (NOT((Sales_part_API.Get_Valid_Sourcing_Option(newrec_.supply_site, newrec_.catalog_no) = 'INVENTORYORDER'))) THEN         
         newrec_.release_planning := 'NOTRELEASED' ;
         update_required_ := TRUE;
      END IF;
   END IF;
   
   IF (update_required_) THEN 
      -- This needs to be called only when line_item_no <= 0. But for a special situation when setting the release_planning flag for 
      -- component parts also this needs to be called.
      Update_Line___(rowid_, newrec_);
      update_required_ := FALSE;
   END IF;
   
   IF NOT(copy_order_line_) THEN
      IF (newrec_.supply_code = 'PKG') AND (NVL(newrec_.demand_code, ' ') != 'CQ') THEN
         -- quotations will add the component lines that exist on quotation line separately.

         Add_Info___(insert_package_mode_);
         insert_package_mode_ := 'TRUE';
         Insert_Package___(newrec_.planned_delivery_date, newrec_.shipment_creation, newrec_.contract, newrec_.catalog_no, newrec_.order_no, newrec_.line_no, newrec_.rel_no,
                           newrec_.order_code, newrec_.tax_code, newrec_.tax_class_id, newrec_.currency_rate,
                           newrec_.revised_qty_due, newrec_.buy_qty_due, newrec_.sale_unit_price, newrec_.unit_price_incl_tax,
                           newrec_.base_sale_unit_price, newrec_.base_unit_price_incl_tax, newrec_.wanted_delivery_date, newrec_.target_date, insert_package_mode_);

         insert_package_mode_  := 'FALSE';
         Connect_Customer_Order_API.Release_Internal_Pur_Orders(newrec_.order_no, newrec_.line_no, newrec_.rel_no);
         -- to include the SALESGRPDELIVCONF3 info message added last in Insert_Package___...
         Add_Info___(insert_package_mode_);
         newrec_.default_addr_flag := Gen_Yes_No_API.Encode(Customer_Order_Line_API.Get_Default_Addr_Flag(newrec_.order_no, newrec_.line_no, newrec_.rel_no, -1));
         Update_Line___(rowid_, newrec_);
      END IF;
   END IF;

   IF (newrec_.line_item_no <= 0) THEN
      Check_Allow_Backorders___(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no,
                                newrec_.planned_delivery_date);
   END IF;

   -- only create priority / instant reservations when its not a CTP planned/reserved line
   IF (newrec_.ctp_planned = 'N') THEN

      IF (newrec_.supply_code = 'IPD') THEN
         contract_ := newrec_.supply_site;

         IF (Sales_Part_API.Check_Exist(newrec_.supply_site, newrec_.part_no) = 0) THEN
            part_no_ := Sales_Part_Cross_Reference_API.Get_Catalog_No(Cust_Ord_Customer_API.Get_Customer_No_From_Contract(newrec_.contract),
                                                                      contract_,
                                                                      newrec_.part_no);
         ELSE
            part_no_ := newrec_.part_no;
         END IF;
      ELSE
         contract_ := newrec_.contract;
         part_no_ := newrec_.part_no;
      END IF;

      local_site_reservation_exist_ := NVL(Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('LOCAL_SITE_RESERVATION_EXIST', attr_)), 0);

      IF (Reserve_Customer_Order_API.Is_Supply_Chain_Reservation(newrec_.order_no, newrec_.line_no, newrec_.rel_no,
                                                                 newrec_.line_item_no, NULL, 'INSTANT') = 1) THEN
         -- instant supply chain reservation
         Reserve_Customer_Order_API.Create_Instant_Reservation__(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no,
                                                                 NULL, NVL(part_no_,newrec_.purchase_part_no), newrec_.revised_qty_due,
                                                                 newrec_.qty_shipped, rowid_, newrec_.vendor_no);
      ELSIF (local_site_reservation_exist_= 0) THEN
         -- dont make any priority reservation if a local site reservation exist
         Reserve_Customer_Order_API.Create_Priority_Reservation__(newrec_.qty_assigned, contract_, part_no_,
                                                                  newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no,
                                                                  newrec_.revised_qty_due, newrec_.qty_shipped, newrec_.supply_code, rowid_);
      END IF;
   END IF;

   CUSTOMER_ORDER_API.New_Order_Line_Added(newrec_.order_no);
   header_rowstate_ := CUSTOMER_ORDER_API.Get_Objstate(newrec_.order_no);
   
   Generate_Next_Level_Demands___(header_rowstate_, newrec_);

   -- Modify cost and package structure only when package order line exist and
   -- the user inserts a new component or inserts the package order line.

   IF (insert_package_mode_ = 'FALSE') THEN
      IF (Check_Exist___(newrec_.order_no, newrec_.line_no, newrec_.rel_no, -1)) THEN
         IF ((newrec_.line_item_no > 0) OR (newrec_.supply_code = 'PKG')) THEN
            -- Modify cost for the order line

            IF (newrec_.line_item_no = -1) THEN
               linerec_ := newrec_;
            ELSE
               linerec_ := Get_Object_By_Keys___(newrec_.order_no, newrec_.line_no, newrec_.rel_no, -1);
            END IF;
            Update_Package_Cost___(linerec_.cost, linerec_.order_no, linerec_.line_no, linerec_.rel_no);
            IF (newrec_.free_of_charge = Fnd_Boolean_API.DB_TRUE) AND (newrec_.free_of_charge_tax_basis = 0) AND (linerec_.cost != 0) THEN 
               Tax_Handling_Order_Util_API.Calc_And_Save_Foc_Tax_Basis(linerec_.free_of_charge_tax_basis,
                                                                       Tax_Source_API.DB_CUSTOMER_ORDER_LINE,
                                                                       newrec_.order_no,
                                                                       newrec_.line_no, 
                                                                       newrec_.rel_no, 
                                                                       newrec_.line_item_no,
                                                                       '*',
                                                                       linerec_.cost,
                                                                       newrec_.part_price,
                                                                       newrec_.revised_qty_due, 
                                                                       NVL(order_rec_.customer_no_pay, newrec_.customer_no),
                                                                       newrec_.contract,
                                                                       order_rec_.currency_code,
                                                                       order_rec_.currency_rate_type,
                                                                       'FALSE');
            END IF;
            IF ((linerec_.shipment_creation = 'PICK_LIST_CREATION') AND
                (All_Non_Inv_Parts(linerec_.order_no, linerec_.line_no, linerec_.rel_no) AND NOT All_Components_Supply_Ipd (linerec_.order_no, linerec_.line_no, linerec_.rel_no))) THEN
               -- This is execute only if the shipment creation method is PICK_LIST_CREATION
               Raise_Info_Message___;
            END IF;

            Add_Info___(insert_package_mode_);
            Change_Package_Structure___(linerec_.promised_delivery_date, linerec_.planned_delivery_date,
                                        linerec_.planned_ship_date, linerec_.planned_due_date, linerec_, FALSE, TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, insert_package_mode_, block_component_info_, NULL);
            linerec_.qty_assigned :=  Reserve_Customer_Order_API.Get_No_Of_Packages_Reserved(newrec_.order_no, newrec_.line_no, newrec_.rel_no);
            Get_Id_Version_By_Keys___(rowid_, rowversion_, newrec_.order_no, newrec_.line_no, newrec_.rel_no, -1);
            linerec_.rowversion   := sysdate;

            Update_Line___(rowid_, linerec_);
            -- Add the new cost value to the attribute string and fetch new objversion
            -- if insert of package order line just has been made
            IF (newrec_.supply_code = 'PKG') THEN
               Client_SYS.Set_Item_Value('COST', linerec_.cost, attr_);
               Client_SYS.Set_Item_Value('FREE_OF_CHARGE_TAX_BASIS', linerec_.free_of_charge_tax_basis, attr_);
            END IF;
         END IF;
      END IF;
   END IF;

   -- Moved Create_Connected_Order_Line method call after the Change_Package_Structure___ method call.
   IF ((newrec_.supply_code IN ('SO', 'PT', 'PD', 'IPT', 'IPD', 'DOP','PS' )) AND
       (header_rowstate_ NOT IN ('Planned', 'Blocked'))) THEN

      -- When Purch is called in Connect_Customer_Order_API all info is lost
      Add_Info___(insert_package_mode_);

      -- Connected orders are normally created when the order is released,
      -- but if lines are added after releasing the work has to be done when the line is created.
      -- IF the order is credit blocked the connected orders will be created when the credit
      -- block is released.

      -- IF the part is configurable then configuration has to be defined to create a connected order
      IF (Sales_Part_API.Get_Configurable_Db(newrec_.contract, newrec_.catalog_no) = 'CONFIGURED'
          AND Order_Config_Util_API.Get_Config_Spec_Objstate(newrec_.part_no, newrec_.configuration_id) != 'Completed') THEN
         create_connected_order_ := FALSE;
      END IF;
      IF (create_connected_order_) THEN
         IF (insert_package_mode_ = 'TRUE') THEN
            Connect_Customer_Order_API.Create_Connected_Order_Line(newrec_.qty_on_order, newrec_.order_no, newrec_.line_no,
                                                                   newrec_.rel_no, newrec_.line_item_no, TRUE );
         ELSE
            Connect_Customer_Order_API.Create_Connected_Order_Line(newrec_.qty_on_order, newrec_.order_no, newrec_.line_no,
                                                                   newrec_.rel_no, newrec_.line_item_no, FALSE );
         END IF;
      END IF;
   END IF;

   -- if any of the component line's shipment creation is 'NO_AUTOMATIC' then change the value of pkg to the same
   IF (newrec_.line_item_no > 0 AND newrec_.shipment_creation = 'NO_AUTOMATIC') THEN
      Get_Id_Version_By_Keys___(rowid_, rowversion_, newrec_.order_no, newrec_.line_no, newrec_.rel_no, -1);
      linerec_ := Get_Object_By_Keys___(newrec_.order_no, newrec_.line_no, newrec_.rel_no, -1);
      IF (linerec_.shipment_creation != 'NO_AUTOMATIC') THEN
         linerec_.shipment_creation := 'NO_AUTOMATIC';
         linerec_.rowversion        := sysdate;
         temp_info_ := Client_SYS.Get_All_Info;
         temp_insert_package_mode_ := insert_package_mode_;
         insert_package_mode_ := 'FALSE';
         Raise_Shipment_Chaged_New();
         Add_Info___(insert_package_mode_);
         insert_package_mode_ := temp_insert_package_mode_;
         WHILE (Client_SYS.Get_Next_From_Attr(temp_info_, ptr_, name_, value_)) LOOP
            IF (name_ = 'INFO') THEN
               Client_SYS.Add_Info(lu_name_, value_);
            END IF;
         END LOOP;
         Update_Line___(rowid_, linerec_);
      END IF;
   END IF;

   -- Create the associated commission lines from the default commission receivers
   IF (newrec_.line_item_no <= 0) AND (newrec_.free_of_charge = Fnd_Boolean_API.DB_FALSE) THEN
      Order_Line_Commission_API.Create_Order_Commission_Lines(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, newrec_.contract, newrec_.customer_no);
   END IF;

   IF (newrec_.rental = Fnd_Boolean_API.DB_TRUE) THEN
      rental_chargeable_days_ := Get_Latest_Rent_Charge_Days___(attr_, newrec_);
   END IF;
    
   -- Save info created so far because it will be cleared if a new discount record is created.
   Add_Info___(insert_package_mode_);
   
   IF NOT (copy_order_line_)THEN 
      copy_discount_ := Client_SYS.Get_Item_Value('COPY_DISCOUNT', attr_);

      IF ((newrec_.discount > 0) AND (NVL(copy_discount_, 'TRUE') != 'FALSE'))  THEN
         discount_type_ := Site_Discom_Info_API.Get_Discount_Type(newrec_.contract);
         Cust_Order_Line_Discount_API.New(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, discount_type_, newrec_.discount, Discount_Source_API.DB_MANUAL, Create_Partial_Sum_API.DB_NOT_PARTIAL_SUM, 1, NULL, NULL,  NULL, NULL, NULL, NULL);
         Cust_Order_Line_Discount_API.Calc_Discount_Upd_Co_Line__(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
         -- At this point a call to Add_Transaction_Tax_Info___ is needed, since we avoided calculating tax when there is a discount specified in the line.
         -- This will calculate the tax for discounted amounts.
         IF (tax_from_external_system_ AND fetch_external_tax_ = 'TRUE') THEN
            Add_Transaction_Tax_Info___ (newrec_,  
                                         company_,
                                         newrec_.customer_no,
                                         newrec_.ship_addr_no,                                      
                                         order_rec_.supply_country,
                                         order_rec_.use_price_incl_tax,
                                         order_rec_.currency_code,                                       
                                         tax_from_defaults_,                                      
                                         attr_  => NULL);
         END IF; 
      ELSE
         -- Do not create discount lines for component part order lines, order lines created through Service Order and CRO.
         IF (newrec_.line_item_no <= 0)  AND NOT (newrec_.supply_code = 'SEO' AND newrec_.demand_code IN ('SEC', 'CRO', 'FSM')) THEN
            Customer_Order_Pricing_API.New_Default_Discount_Rec(newrec_.order_no,
                                                                newrec_.line_no,
                                                                newrec_.rel_no,
                                                                newrec_.line_item_no,
                                                                newrec_.contract,
                                                                newrec_.customer_no,
                                                                order_rec_.currency_code,
                                                                order_rec_.agreement_id,
                                                                newrec_.catalog_no,
                                                                newrec_.buy_qty_due,
                                                                newrec_.price_list_no,
                                                                newrec_.customer_level,
                                                                newrec_.customer_level_id,
                                                                rental_chargeable_days_,
                                                                fetch_external_tax_);
         END IF;
      END IF;
   END IF;

   newrec_.discount := Get_Discount(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
   Client_SYS.Add_To_Attr('DISCOUNT', newrec_.discount, attr_);
   -- gelr:disc_price_rounded, begin
   IF (Customer_Order_API.Get_Discounted_Price_Rounded(newrec_.order_no)) THEN
      newrec_.original_discount := Get_Original_Discount(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
   ELSE
      newrec_.original_discount := 0;
   END IF;
   -- gelr:disc_price_rounded, end
   
   IF NOT(copy_order_line_) THEN
      IF (order_rec_.staged_billing = Staged_Billing_Type_API.DB_STAGED_BILLING AND (newrec_.self_billing ='NOT SELF BILLING') AND (newrec_.rental = Fnd_Boolean_API.DB_FALSE)) THEN
         IF (order_rec_.use_price_incl_tax = 'TRUE') THEN
            line_total_ := Get_Sale_Price_Incl_Tax_Total(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
         ELSE
            line_total_ := Get_Sale_Price_Total(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
         END IF;
         Order_Line_Staged_Billing_API.Create_Stages_From_Template(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, line_total_);
         Client_SYS.Add_To_Attr('STAGED_BILLING_DB', 'STAGED BILLING', attr_);
      END IF;

      IF ((newrec_.line_item_no > 0) AND (newrec_.staged_billing = 'STAGED BILLING')) THEN
         total_percentage_:= Order_Line_Staged_Billing_API.Get_Total_Invoiced_Percentage(newrec_.order_no, newrec_.line_no, newrec_.rel_no, -1);
         IF (total_percentage_ > 0) THEN
            newrec_.qty_invoiced := round((newrec_.buy_qty_due*total_percentage_/100),12);
            CUSTOMER_ORDER_API.Set_Line_Qty_Invoiced(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, newrec_.qty_invoiced);
         END IF;
      END IF;
   END IF;

   IF (newrec_.originating_rel_no IS NOT NULL) THEN
      msg_text_ := SUBSTR(Language_SYS.Translate_Constant(lu_name_,'SRC_NEW: Line created from source lines with del no :P1, the new del no is :P2',NULL,newrec_.originating_rel_no , newrec_.rel_no ), 1, 200);
      Customer_Order_Line_Hist_API.New( newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, msg_text_);
   END IF;

   -- Refresh attribute string's values by appending them.
   IF (newrec_.supply_code = 'PKG') THEN
      newrec_ := Get_Object_By_Keys___(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
      add_status_ := TRUE;
   END IF;

   IF (newrec_.qty_assigned > 0) THEN
      -- IF reservation has been made send updated values to the client
      Client_SYS.Set_Item_Value('QTY_ASSIGNED', newrec_.qty_assigned, attr_);
      IF NOT add_status_ THEN -- if status hasn't been fetched in clause above...
         newrec_.rowstate := Get_Objstate(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
      END IF;
      add_status_ := TRUE;
   END IF;
   -- only run the automatic capability check when the ctp_planned flag is N, so lines created from Quotation or Distribution Order
   -- with the flag set to Y will not be valid for the automatic capability check (you have either run the manual
   -- capability check on the Quotation Line or the Distribution Order was created from a Order Line/Dop that have
   -- already done the capability check for the ctp_planned flag to be Y)
   IF (newrec_.ctp_planned = 'N') THEN
      automatic_capability_check_ := Get_Auto_Capability_Check___(newrec_.supply_code, newrec_.contract, newrec_.supply_site, newrec_.part_no);
      -- run the capability check if the inventory part is configured to use automatic capability check
      IF (automatic_capability_check_ IN ('RESERVE AND ALLOCATE','ALLOCATE ONLY','NEITHER RESERVE NOR ALLOCATE')) THEN
         Perform_Capability_Check___(newrec_, auto_cc_performed_, header_rowstate_, automatic_capability_check_);
         IF (auto_cc_performed_ = TRUE) THEN
            Update_Line___(rowid_, newrec_);
            $IF (Component_Ordstr_SYS.INSTALLED)$THEN 
               IF (App_Context_SYS.Find_Number_Value('CTP_RUN_ID') IS NOT NULL) THEN
                  ctp_run_id_ := App_Context_SYS.Get_Number_Value('CTP_RUN_ID');
                  IF (ctp_run_id_ > 0 ) THEN
                     Client_SYS.Add_To_Attr('CTP_RUN_ID', ctp_run_id_ , attr_);
                     Client_SYS.Add_To_Attr('IS_DELIVERABLE', Interim_Ctp_Critical_Path_API.Get_Is_Deliverable(ctp_run_id_) , attr_);
                  END IF;
               END IF;
               IF (App_Context_SYS.Find_Date_Value('OLD_REQUIRED_DATE') IS NOT NULL) THEN
                  Client_SYS.Add_To_Attr('OLD_REQUIRED_DATE', App_Context_SYS.Get_Date_Value('OLD_REQUIRED_DATE') , attr_);
               END IF;
         $ELSE
            NULL;
         $END
         END IF;
      END IF;
   END IF;

   -- Create a history record for Invoiced Blocked.
   IF (newrec_.blocked_for_invoicing = 'TRUE') THEN
      msg_text_ := Language_SYS.Translate_Constant(lu_name_, 'INVOICEBLOCEKD: Invoice Blocked');
      Customer_Order_Line_Hist_API.New( newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, msg_text_);
   END IF;

   -- The values added here are either the usual record or prior check on supply_code's result or calculated from the automatic capability check
   Client_SYS.Set_Item_Value('PLANNED_DELIVERY_DATE', newrec_.planned_delivery_date, attr_);
   Client_SYS.Set_Item_Value('PROMISED_DELIVERY_DATE', newrec_.promised_delivery_date, attr_);
   Client_SYS.Set_Item_Value('PLANNED_SHIP_DATE', newrec_.planned_ship_date, attr_);
   Client_SYS.Set_Item_Value('PLANNED_DUE_DATE', newrec_.planned_due_date, attr_);
   Client_SYS.Set_Item_Value('SUPPLY_SITE_DUE_DATE', newrec_.supply_site_due_date, attr_);
   Client_SYS.Set_Item_Value('OBJSTATE', newrec_.rowstate, attr_);
   Client_SYS.Set_Item_Value('SHIPMENT_CREATION_DB', newrec_.shipment_creation, attr_);
   Client_SYS.Set_Item_Value('SHIPMENT_CREATION', Shipment_Creation_API.Decode(newrec_.shipment_creation), attr_);

   IF add_status_ THEN
      Client_SYS.Set_Item_Value('__OBJSTATE', newrec_.rowstate, attr_);
      Client_SYS.Set_Item_Value('__OBJEVENTS', Finite_State_Events__(newrec_.rowstate), attr_);
      Client_SYS.Set_Item_Value('STATE', Finite_State_Decode__(newrec_.rowstate), attr_);
   END IF;

   -- Return the detected PROJECT_ID back to the client
   Client_SYS.Set_Item_Value('PROJECT_ID', newrec_.project_id, attr_);

   IF (newrec_.supply_code = 'PKG') THEN
      block_component_info_ := 'FALSE';
   END IF;

   -- Do not create/connect to shipment if delay requested through attribute 'DELAY_SHIPMENT_SINGLE_OCC' to wait till single occurrence line address is created
   IF (NVL(Client_SYS.Get_Item_Value('DELAY_SHIPMENT_SINGLE_OCC', attr_), 'FALSE') = 'FALSE') THEN
      Check_And_Add_To_Shipment___(newrec_,  header_rowstate_);
   END IF;

   default_charges_ := Client_SYS.Get_Item_Value('DEFAULT_CHARGES', attr_);
   IF ( default_charges_ IS NULL ) THEN
       default_charges_ := 'TRUE';
   END IF;
   IF (default_charges_ = 'TRUE') THEN
      IF newrec_.line_item_no IN (-1,0) THEN
         Customer_Order_Charge_API.Copy_From_Sales_Part_Charge(newrec_.order_no,
                                                               newrec_.line_no,
                                                               newrec_.rel_no,
                                                               newrec_.line_item_no);
      END IF;
   END IF;

   -- Add new CO charge lines.
   IF (newrec_.line_item_no <= 0) THEN
      IF ((default_charges_ = 'TRUE')OR(copy_order_line_ AND newrec_.free_of_charge = Fnd_Boolean_API.DB_FALSE)) THEN
         Customer_Order_Charge_Util_API.New_Cust_Order_Charge_Line(newrec_, FALSE);
      -- When a CO is created through a quotation default_charges_ will be FALSE
      -- we need to add only freight charges since the packsize charges will be transfered from the order quotation charges later
      ELSE
         Customer_Order_Charge_Util_API.New_Cust_Order_Charge_Line(newrec_, TRUE);
      END IF;
   END IF;

   Update_Freight_Free(newrec_);

   IF (newrec_.demand_code = 'DO') THEN
      $IF (Component_Disord_SYS.INSTALLED) $THEN
         Distribution_Order_API.Modify_From_Connected_Order(newrec_.demand_order_ref1,
                                                            newrec_.wanted_delivery_date,
                                                            newrec_.planned_due_date,
                                                            newrec_.planned_ship_date,
                                                            newrec_.planned_delivery_date,
                                                            planned_receipt_date_,
                                                            '',
                                                            '',
                                                            newrec_.forward_agent_id,
                                                            newrec_.delivery_terms,
                                                            newrec_.ship_via_code,
                                                            '',
                                                            newrec_.route_id,
                                                            'ORDER');
      $ELSE
         NULL;
      $END
   END IF;

   min_qty_ := sales_part_rec_.minimum_qty;
   IF (min_qty_ IS NOT NULL) THEN
      IF (min_qty_ > newrec_.buy_qty_due) THEN
         Client_SYS.Add_Info(lu_name_, 'LTMINIMUMQTY: The minimum quantity when ordering Sales Part No :P1 is :P2 :P3.', newrec_.catalog_no, min_qty_, newrec_.sales_unit_meas);
      END IF;
   END IF;

   IF Tax_Liability_Countries_API.Check_Valid_Info_Exist(company_, order_rec_.supply_country, Site_API.Get_Site_Date(order_rec_.contract)) = 'TRUE' THEN
      IF Tax_Liability_API.Get_Tax_Liability_Type_Db(order_rec_.tax_liability, newrec_.country_code) != 'EXM' AND newrec_.tax_liability_type = 'EXM' THEN
         Client_SYS.Add_Info(lu_name_, 'EXEMPTLIABILITY: Since the tax liability type is ''Exempt'' the Supply Country Tax ID No will be printed on the invoice.');
      ELSE
         header_deliver_country_db_ := Customer_Order_Address_API.Get_Country_Code(newrec_.order_no);
         -- if the line is not defaulted from header and is having a NON-single occurence address
         IF newrec_.default_addr_flag = 'N' AND newrec_.addr_flag = 'N' AND newrec_.country_code != header_deliver_country_db_ THEN
            Client_SYS.Add_Info(lu_name_, 'DIFFDELIVCOUNTRY: Since delivery address country is not the same as the header delivery address country the Supply Country Tax ID No will be printed on the invoice.');
         END IF;
      END IF;
   END IF;

   -- sales promotion check, if value on deal_description_ this order line have atleast one possible sales promotion deal
   IF (newrec_.free_of_charge = Fnd_Boolean_API.DB_FALSE) THEN
      deal_description_ := Get_Possible_Sales_Promo_Deal(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, newrec_.rowstate, newrec_.price_source_net_price, newrec_.charged_item, newrec_.exchange_item, newrec_.self_billing, newrec_.part_ownership, newrec_.rental);
   END IF;
   IF (deal_description_ = 'MULTIPLE_DEALS') THEN
      Client_SYS.Add_Info(lu_name_, 'MULTIPLESALESPROMOEXIST: The sales part is connected to multiple sales promotion deal, can be analyzed via operations menu Calculate and View Sales Promotions.');
   ELSIF (deal_description_ IS NOT NULL) THEN
      Client_SYS.Add_Info(lu_name_, 'POSSIBLESALESPROMOEXIST: The sales part is connected to a sales promotion deal :P1.', deal_description_);
   END IF;
   Customer_Order_Charge_Util_API.Recalc_Percentage_Charge_Taxes(newrec_.order_no, newrec_.line_no, tax_from_external_system_);
END Post_Insert_Actions___;


PROCEDURE Calculate_Order_Line_Dates___ (
   newrec_ IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   oldrec_ IN     CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   objid_  IN     VARCHAR2 )
IS
   contract_                   CUSTOMER_ORDER_LINE_TAB.contract%TYPE;
   calendar_id_                VARCHAR2(10);
   new_demand_qty_             NUMBER := NULL;
   old_demand_qty_             NUMBER := NULL;
   calculate_                  BOOLEAN := TRUE;   
   new_mrp_demand_qty_         NUMBER := NULL;
   old_mrp_demand_qty_         NUMBER := NULL;
   use_current_date_           VARCHAR2(5) := 'FALSE';
   fully_reserved_             NUMBER := 0;
   delivery_leadtime_          NUMBER;
   picking_leadtime_           NUMBER;
   internal_control_time_      NUMBER;
   vendor_delivery_leadtime_   NUMBER;
   internal_delivery_leadtime_ NUMBER;
   vendor_manuf_leadtime_      NUMBER;
   vendor_leadtime_            NUMBER;
   expected_leadtime_          NUMBER;
   order_conf_db_              VARCHAR2(1) := 'N';
   addr_flag_db_               VARCHAR2(1) := 'N';
   transport_leadtime_         NUMBER;
   arrival_route_id_           VARCHAR2(12);
   ship_via_code_changed_      VARCHAR2(5);
   ext_customer_order_no_      VARCHAR2(12);
   ext_line_no_                VARCHAR2(12);
   ext_rel_no_                 VARCHAR2(4);
   ext_line_item_no_           NUMBER;
   qty_reserved_               NUMBER;
BEGIN
   IF (newrec_.target_date != oldrec_.target_date) THEN
      use_current_date_ := 'TRUE';
   END IF;
   -- Demand Qty is used for ATP analysis (IO supply only)
   new_demand_qty_ := NVL(newrec_.revised_qty_due - (newrec_.qty_shipped - newrec_.qty_shipdiff) - newrec_.qty_assigned, 0);
   old_demand_qty_ := NVL(oldrec_.revised_qty_due - (oldrec_.qty_shipped - oldrec_.qty_shipdiff) - oldrec_.qty_assigned, 0);

   new_mrp_demand_qty_ := NVL(newrec_.revised_qty_due - (newrec_.qty_shipped - newrec_.qty_shipdiff), 0);
   old_mrp_demand_qty_ := NVL(oldrec_.revised_qty_due - (oldrec_.qty_shipped - oldrec_.qty_shipdiff), 0);

   -- old_demand_date need to change when there is a supply_code change (only ATP analysis considered)
   IF oldrec_.supply_code NOT IN ('IO', 'SO', 'DOP', 'PT', 'PD', 'IPT', 'IPD') THEN
      IF newrec_.supply_code IN ('IO', 'SO', 'DOP', 'PT', 'PD', 'IPT', 'IPD') THEN
         old_demand_qty_ := 0;
      END IF;
   END IF;

   IF ((newrec_.rowstate IS NULL) OR (newrec_.rowstate != 'Cancelled')) THEN
      IF (oldrec_.rel_mtrl_planning = 'TRUE') AND (newrec_.rel_mtrl_planning = 'FALSE') THEN
         new_mrp_demand_qty_ := 0;
      ELSIF (oldrec_.rel_mtrl_planning = 'FALSE') AND (newrec_.rel_mtrl_planning = 'TRUE') THEN
         old_mrp_demand_qty_ := 0;
      ELSIF (oldrec_.rel_mtrl_planning = 'FALSE') AND (newrec_.rel_mtrl_planning = 'FALSE') THEN
         old_mrp_demand_qty_ := 0;
         new_mrp_demand_qty_ := 0;
      ELSIF (oldrec_.rel_mtrl_planning IS NULL) AND (newrec_.rel_mtrl_planning = 'TRUE') THEN
         -- A new record is inserted with rel_mtrl_planning TRUE.
         old_mrp_demand_qty_ := 0;
      ELSIF (oldrec_.rel_mtrl_planning IS NULL) AND (newrec_.rel_mtrl_planning = 'FALSE') THEN
         -- A new record is inserted with rel_mtrl_planning FALSE.
         new_mrp_demand_qty_ := 0;
      END IF;
   ELSE
      new_mrp_demand_qty_ := 0;
      old_mrp_demand_qty_ := 0;
   END IF;

   -- don't calculate the dates if demand DO and CTP planned (for new records) - the dates have already been calculated in DisOrd.
   IF (newrec_.demand_code = 'DO') AND (newrec_.ctp_planned = 'Y') AND (objid_ IS NULL) THEN
      calculate_ := (newrec_.planned_ship_date IS NULL);
   END IF;

   IF calculate_ THEN      
      fully_reserved_ := Reserve_Customer_Order_API.Line_Is_Fully_Reserved(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no);
      
      IF (newrec_.demand_code IN ('IPT', 'DO')) AND (newrec_.ship_via_code != NVL(oldrec_.ship_via_code, Database_SYS.string_null_)) THEN
         delivery_leadtime_        := newrec_.delivery_leadtime;
         ship_via_code_changed_    := 'TRUE';
         
         Cust_Order_Leadtime_Util_API.Get_Default_Leadtimes(delivery_leadtime_, vendor_delivery_leadtime_, internal_delivery_leadtime_, 
                                                            picking_leadtime_, internal_control_time_, vendor_manuf_leadtime_, vendor_leadtime_, 
                                                            expected_leadtime_, transport_leadtime_, arrival_route_id_, newrec_.contract, newrec_.deliver_to_customer_no, newrec_.ship_addr_no, 
                                                            addr_flag_db_, newrec_.part_no, NVL(newrec_.part_no, newrec_.purchase_part_no), newrec_.supply_code,
                                                            newrec_.vendor_no, newrec_.ship_via_code, newrec_.supplier_ship_via_transit, ship_via_code_changed_);

         newrec_.delivery_leadtime := delivery_leadtime_;
      END IF;
      
      IF (newrec_.demand_code IN ('IPT', 'IPD') AND newrec_.demand_order_ref1 IS NOT NULL) THEN
         Customer_Order_Pur_Order_API.Get_Custord_For_Purord(ext_customer_order_no_, ext_line_no_, ext_rel_no_, ext_line_item_no_, newrec_.demand_order_ref1, newrec_.demand_order_ref2, newrec_.demand_order_ref3);
     
         IF (ext_customer_order_no_ IS NOT NULL) THEN 
               qty_reserved_ := Co_Supply_Site_Reservation_API.Get_Qty_Reserved(ext_customer_order_no_,ext_line_no_,ext_rel_no_,ext_line_item_no_);
               IF (qty_reserved_ > 0) THEN
                  new_demand_qty_ := new_demand_qty_ - qty_reserved_;
               END IF;
         END IF;
      END IF; 

      Cust_Ord_Date_Calculation_API.Calc_Order_Dates_Backwards(newrec_.planned_delivery_date,
         newrec_.planned_ship_date, newrec_.planned_due_date, newrec_.supply_site_due_date,
         newrec_.target_date, newrec_.date_entered, newrec_.order_no, newrec_.deliver_to_customer_no,
         newrec_.ship_addr_no, newrec_.vendor_no, newrec_.ship_via_code, newrec_.delivery_leadtime, newrec_.picking_leadtime, newrec_.ext_transport_calendar_id,
         newrec_.supplier_ship_via_transit, newrec_.supply_site_reserve_type, newrec_.route_id,
         newrec_.supply_code, newrec_.contract, newrec_.part_no,nvl(newrec_.part_no, newrec_.purchase_part_no),
         newrec_.configuration_id, newrec_.conv_factor, newrec_.inverted_conv_factor, newrec_.ctp_planned, new_demand_qty_, old_demand_qty_,
         objid_, oldrec_.supply_code, oldrec_.planned_due_date, FALSE, oldrec_.part_ownership, newrec_.part_ownership, newrec_.release_planning,
         newrec_.demand_order_ref1, newrec_.demand_code, new_mrp_demand_qty_, old_mrp_demand_qty_, newrec_.catalog_type, use_current_date_, fully_reserved_,
         newrec_.rowstate, newrec_.supply_site_part_no, newrec_.abnormal_demand , oldrec_.abnormal_demand);
   END IF;
   
   order_conf_db_ := Customer_Order_API.Get_Order_Conf_Db(newrec_.order_no);
   IF (order_conf_db_ = 'N' OR (newrec_.promised_delivery_date IS NULL)) THEN
      newrec_.promised_delivery_date := newrec_.planned_delivery_date;
   END IF;

   IF (newrec_.vendor_no IS NULL) THEN
      contract_ := newrec_.contract;
   ELSE
      contract_ := newrec_.supply_site;
   END IF;
   -- Added a condition only to fetch the planned_ship_period when the planned_ship_date is changed.
   IF (oldrec_.planned_ship_date != newrec_.planned_ship_date) THEN
      calendar_id_ := Site_API.Get_Dist_Calendar_Id(contract_);
      -- set shipment period
      newrec_.planned_ship_period := Work_Time_Calendar_API.Get_Period(calendar_id_, newrec_.planned_ship_date);
   END IF;
END Calculate_Order_Line_Dates___;


PROCEDURE Insert_Default_Address___ (
   order_no_               IN VARCHAR2,
   line_no_                IN VARCHAR2,
   rel_no_                 IN VARCHAR2,
   line_item_no_           IN NUMBER,
   customer_no_            IN VARCHAR2,
   ship_addr_no_           IN VARCHAR2,
   deliver_to_customer_no_ IN VARCHAR2 )
IS
   info_       VARCHAR2(2000);
   attr_       VARCHAR2(2000);
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
   addr_rec_   CUSTOMER_ORDER_ADDRESS_API.Cust_Ord_Addr_Rec;
   name_       VARCHAR2(100);
BEGIN
   Client_SYS.Add_To_Attr('ORDER_NO', order_no_, attr_);
   Client_SYS.Add_To_Attr('LINE_NO', line_no_, attr_);
   Client_SYS.Add_To_Attr('REL_NO', rel_no_, attr_);
   Client_SYS.Add_To_Attr('LINE_ITEM_NO', line_item_no_, attr_);
   -- fetch order header's address
   addr_rec_ := Customer_Order_Address_API.Get_Cust_Ord_Addr(order_no_);

   IF (customer_no_ = deliver_to_customer_no_) AND (addr_rec_.ship_addr_no = ship_addr_no_) THEN
      Client_SYS.Add_To_Attr('ADDR_1', addr_rec_.addr_1, attr_);
      Client_SYS.Add_To_Attr('ADDRESS1', addr_rec_.address1, attr_);
      Client_SYS.Add_To_Attr('ADDRESS2', addr_rec_.address2, attr_);
      Client_SYS.Add_To_Attr('ADDRESS3', addr_rec_.address3, attr_);
      Client_SYS.Add_To_Attr('ADDRESS4', addr_rec_.address4, attr_);
      Client_SYS.Add_To_Attr('ADDRESS5', addr_rec_.address5, attr_);
      Client_SYS.Add_To_Attr('ADDRESS6', addr_rec_.address6, attr_);
      Client_SYS.Add_To_Attr('ZIP_CODE', addr_rec_.zip_code, attr_);
      Client_SYS.Add_To_Attr('CITY', addr_rec_.city, attr_);
      Client_SYS.Add_To_Attr('STATE', addr_rec_.state, attr_);
      Client_SYS.Add_To_Attr('COUNTRY_CODE', addr_rec_.country_code, attr_);
      Client_SYS.Add_To_Attr('COUNTY', addr_rec_.county, attr_);
      Client_SYS.Add_To_Attr('IN_CITY', addr_rec_.in_city, attr_);
   ELSE
      -- if that addr no isn't the same as the line's - fetch address from Deliver to customer instead.
      name_ := Customer_Info_Address_API.Get_Name(deliver_to_customer_no_, ship_addr_no_);
      Client_SYS.Add_To_Attr('ADDR_1', name_, attr_);
      Client_SYS.Add_To_Attr('ADDRESS1', Cust_Ord_Customer_Address_API.Get_Address1(deliver_to_customer_no_, ship_addr_no_), attr_);
      Client_SYS.Add_To_Attr('ADDRESS2', Cust_Ord_Customer_Address_API.Get_Address2(deliver_to_customer_no_, ship_addr_no_), attr_);
      Client_SYS.Add_To_Attr('ADDRESS3', Cust_Ord_Customer_Address_API.Get_Address3(deliver_to_customer_no_, ship_addr_no_), attr_);
      Client_SYS.Add_To_Attr('ADDRESS4', Cust_Ord_Customer_Address_API.Get_Address4(deliver_to_customer_no_, ship_addr_no_), attr_);
      Client_SYS.Add_To_Attr('ADDRESS5', Cust_Ord_Customer_Address_API.Get_Address5(deliver_to_customer_no_, ship_addr_no_), attr_);
      Client_SYS.Add_To_Attr('ADDRESS6', Cust_Ord_Customer_Address_API.Get_Address6(deliver_to_customer_no_, ship_addr_no_), attr_);      
      Client_SYS.Add_To_Attr('ZIP_CODE', Cust_Ord_Customer_Address_API.Get_Zip_Code(deliver_to_customer_no_, ship_addr_no_), attr_);
      Client_SYS.Add_To_Attr('CITY', Cust_Ord_Customer_Address_API.Get_City(deliver_to_customer_no_, ship_addr_no_), attr_);
      Client_SYS.Add_To_Attr('STATE', Cust_Ord_Customer_Address_API.Get_State(deliver_to_customer_no_, ship_addr_no_), attr_);
      Client_SYS.Add_To_Attr('COUNTRY_CODE', Cust_Ord_Customer_Address_API.Get_Country_Code(deliver_to_customer_no_, ship_addr_no_), attr_);
      Client_SYS.Add_To_Attr('COUNTY', Cust_Ord_Customer_Address_API.Get_County(deliver_to_customer_no_, ship_addr_no_), attr_);
      Client_SYS.Add_To_Attr('IN_CITY',Customer_Info_Address_API.Get_In_City(deliver_to_customer_no_, ship_addr_no_), attr_);
   END IF;
   Cust_Order_Line_Address_API.New__(info_, objid_, objversion_, attr_, 'DO');
END Insert_Default_Address___;


PROCEDURE Exist_Purchase_Part___ (
   contract_         IN VARCHAR2,
   purchase_part_no_ IN VARCHAR2,
   inventory_part_   IN BOOLEAN,
   rental_db_        IN VARCHAR2 )
IS
   found_ NUMBER := 0;
   usage_ VARCHAR2(20);
BEGIN
   $IF (Component_Purch_SYS.INSTALLED)$THEN
      IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
         usage_ := Acquisition_Type_API.DB_PURCHASE_ONLY;
      ELSE
         usage_ := Acquisition_Type_API.DB_RENTAL_ONLY;
      END IF;
      Purchase_Part_API.Exist(contract_, purchase_part_no_, usage_);
      IF NOT inventory_part_ THEN
         found_ := Purchase_Part_API.Is_Inventory_Part(contract_, purchase_part_no_);
         IF (found_ = 1) THEN
            Error_SYS.Record_General(lu_name_, 'INVPURPART: The purchase part :P1 is an inventory part. Not allowed for non-inventory sales parts!', purchase_part_no_);
         END IF;
      END IF;
   $ELSE
      NULL;
   $END
END Exist_Purchase_Part___;


PROCEDURE Check_Supply_Code___ (
   newrec_ IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE )
IS
   sales_part_rec_        SALES_PART_API.Public_Rec;
   supply_code_cl_        VARCHAR2(200) := Order_Supply_Type_API.Decode(newrec_.supply_code);
   type_code_             VARCHAR2(20);
   inv_part_planning_rec_ Inventory_Part_Planning_API.Public_Rec;
   prod_structure_exist_  BOOLEAN := FALSE;
BEGIN
   -- Check if right SUPPLY_CODE
   IF (newrec_.supply_code NOT IN ('IO', 'SO', 'PT', 'PD', 'NO', 'PKG', 'IPT', 'IPD', 'SEO', 'DOP', 'ND', 'SRC', 'MRO', 'PI', 'PS', 'PRJ', 'PJD', 'CRO')) THEN
      Error_SYS.Record_General(lu_name_, 'WRONG_SUPPLY_CODE: Supply code ":P1" is not allowed for this part.', supply_code_cl_);
   END IF;

   sales_part_rec_ := Sales_Part_API.Get(newrec_.contract, newrec_.catalog_no);

   -- Automatic sourcing is only allowed if sales part is set up to Use Sourcing Rule.
   IF (newrec_.supply_code = 'SRC') AND (sales_part_rec_.sourcing_option != 'USESOURCINGRULE') THEN
      Error_SYS.Record_General(lu_name_, 'AUTOSOURCING: Supply Code ":P1" is only allowed when sales part is set up to Use Sourcing Rule.', supply_code_cl_);
   END IF;

   -- DOP
   -- IF inventory part is a DOP part, supply code may only be set to DOP or IO
   inv_part_planning_rec_ := Inventory_Part_Planning_API.Get(newrec_.contract, newrec_.part_no);
   IF (NVL(inv_part_planning_rec_.order_requisition, '*') = 'D') THEN
	  IF (newrec_.supply_code NOT IN('IO', 'DOP', 'MRO', 'SEO', 'PI', 'PJD', 'CRO', 'IPT', 'IPD')) THEN
         Error_SYS.Record_General(lu_name_, 'DOPSUPPLY: Supply code ":P1" is not allowed for DOP parts.', supply_code_cl_);
      END IF;
   END IF;
   IF (newrec_.supply_code = 'DOP') AND (inv_part_planning_rec_.planning_method ='N') THEN
      Error_SYS.Record_General(lu_name_, 'MRPCODEPNNOTALLOWED: Associated Inventory Part cannot have MRP order code ":P1" when using supply code ":P2".',
                          inv_part_planning_rec_.planning_method, supply_code_cl_);
   ELSIF (newrec_.dop_connection IS NOT NULL) AND (newrec_.supply_code != 'DOP') THEN
      Error_SYS.Record_General(lu_name_, 'NO_CONNECTION: DOP connection is only allowed when supply code is set to ":P1"!', Order_Supply_Type_API.Decode('DOP'));
   END IF;

   Trace_SYS.Field('catalog_type', newrec_.catalog_type);

   -- CTO
   -- IO is not allowed for Configured inventory parts.
   IF (Part_Catalog_API.Get_Configurable_Db(nvl(newrec_.part_no, newrec_.catalog_no)) = 'CONFIGURED') THEN
      IF (newrec_.supply_code NOT IN ('IO', 'NO', 'SO','PI','PT', 'PD', 'IPT', 'IPD', 'SEO', 'DOP', 'ND', 'SRC', 'MRO', 'PJD')) THEN
         Error_SYS.Record_General(lu_name_, 'CONFIGPART: Supply code ":P1" is not allowed for configured parts.', supply_code_cl_);
      END IF;
   END IF;

   IF (newrec_.activity_seq IS NOT NULL) THEN
      IF (sales_part_rec_.catalog_type = 'INV') THEN
         IF (newrec_.supply_code NOT IN ('IO', 'PI', 'PD', 'IPD', 'PJD', 'PT', 'IPT', 'SO', 'ND', 'DOP', 'SEO', 'SRC')) THEN
            Error_Sys.Record_General(lu_name_, 'NOTALLOWEDIP: Project connected Customer Order Lines for Inventory Parts can only have supply code :P1, :P2, :P3.',Order_Supply_Type_API.Decode('IO'),Order_Supply_Type_API.Decode('PI'),(Order_Supply_Type_API.Decode('PD')||', '|| Order_Supply_Type_API.Decode('PT')||', '|| Order_Supply_Type_API.Decode('IPT')||', '||Order_Supply_Type_API.Decode('IPD')||', ' || Order_Supply_Type_API.Decode('ND') || ', ' || Order_Supply_Type_API.Decode('PJD')||', '||Order_Supply_Type_API.Decode('SO') ||' or '||Order_Supply_Type_API.Decode('DOP')));
         END IF;
      ELSIF (sales_part_rec_.catalog_type = 'NON') THEN
         IF (newrec_.supply_code NOT IN ('NO','PRJ','PD','IPD','PT', 'IPT', 'ND', 'SEO')) THEN
            Error_Sys.Record_General(lu_name_, 'NOTALLOWEDNP: Project connected Customer Order Lines for Non Inventory Sales Parts can only have supply code :P1, :P2, :P3.',Order_Supply_Type_API.Decode('NO'), Order_Supply_Type_API.Decode('PRJ'), Order_Supply_Type_API.Decode('ND') || ', ' || (Order_Supply_Type_API.Decode('PD') || ', ' || Order_Supply_Type_API.Decode('IPD') || ', ' || Order_Supply_Type_API.Decode('PT') || ' or ' || Order_Supply_Type_API.Decode('IPT')));
         END IF;
      END IF;
   ELSE
      IF (newrec_.supply_code IN ('PI', 'PJD')) THEN
         Error_Sys.Record_General(lu_name_, 'NOTALLOWED_PI_PJD: Supply code :P1 is only allowed for project connected customer order lines for Inventory Parts.', Order_Supply_Type_API.Decode(newrec_.supply_code));
      ELSIF (newrec_.supply_code IN ('PRJ')) THEN
         Error_Sys.Record_General(lu_name_, 'NOTALLOWEIPPRJ: Supply code :P1 is only allowed for project connected customer order lines for Non Inventory Sales Parts.',Order_Supply_Type_API.Decode('PRJ'));
      END IF;
   END IF;

   -- Check if right SUPPLY_CODE depending on CATALOG_TYPE
   IF (sales_part_rec_.catalog_type = 'INV') THEN
      IF (newrec_.supply_code IN ('NO', 'PKG')) THEN
         Error_SYS.Record_General(lu_name_, 'INVPART: Supply code ":P1" is not allowed for inventory sales parts.', supply_code_cl_);
      ELSIF (newrec_.supply_code = 'SO') THEN
         -- IF Manufactured (1) or Manufactured Recipe (2), Shop Order must be supplied
         type_code_ := nvl(Inventory_Part_API.Get_Type_Code_Db(newrec_.contract, newrec_.part_no), '0');
         IF (type_code_ NOT IN ('1', '2')) THEN
            $IF (Component_Mfgstd_SYS.INSTALLED) $THEN
               IF(Prod_Structure_Head_API.Product_Exist(newrec_.contract, newrec_.part_no, 'M') = 1) THEN
                  prod_structure_exist_ := TRUE;
               END IF;
            $END
            IF(prod_structure_exist_ = FALSE)THEN
               Error_SYS.Record_General(lu_name_, 'MANUFPART: Supply code ":P1" is only allowed for manufactured parts.', supply_code_cl_); 
            END IF;
         END IF;        
      END IF;
   ELSIF (sales_part_rec_.catalog_type = 'NON') THEN
      IF (newrec_.supply_code NOT IN ('PT', 'PD', 'NO', 'IPT', 'IPD', 'SEO', 'ND', 'SRC', 'PRJ')) THEN
         Error_SYS.Record_General(lu_name_, 'NONINVENT: Supply code ":P1" is not allowed. You may only use purchase order supply or no supply for non-inventory parts.', supply_code_cl_);
      END IF;
   ELSIF (sales_part_rec_.catalog_type = 'PKG') THEN
      IF (newrec_.supply_code != 'PKG') THEN
         Error_SYS.Record_General(lu_name_, 'PACKAGEPART: Supply code ":P1" is not allowed for package parts.', supply_code_cl_);
      END IF;
   END IF;

   -- Production Schedule Check
   $IF (Component_Mfgstd_SYS.INSTALLED) $THEN
      IF newrec_.supply_code = 'PS' THEN
         Production_Line_Part_API.Production_Schedules_Enabled(newrec_.contract, newrec_.part_no);
      END IF;
   $END

   -- validate purchase part no only if supply code is Purchase Order
   IF ((newrec_.purchase_part_no IS NOT NULL) AND (newrec_.supply_code IN ('PD', 'PT', 'IPD', 'IPT'))) THEN
      Exist_Purchase_Part___(newrec_.contract, newrec_.purchase_part_no, (newrec_.part_no IS NOT NULL), newrec_.rental);
   END IF;

   -- Validate Supply Code 'CRO'
   IF (NVL(newrec_.demand_code, ' ') IN (Order_Supply_Type_API.DB_COMPONENT_REPAIR_ORDER, Order_Supply_Type_API.DB_COMPONENT_REPAIR_EXCHANGE) AND newrec_.demand_order_ref1 IS NOT NULL) THEN
      IF (newrec_.supply_code NOT IN ('CRO', 'SEO', 'IO')) THEN
         Error_SYS.Record_General(lu_name_, 'SUPPLYCODEFILTERCRO: The customer order line is created from a component repair order. Only :P1, :P2 or :P3 supply codes are allowed.', Order_Supply_Type_API.Decode('CRO'), Order_Supply_Type_API.Decode('IO'), Order_Supply_Type_API.Decode('SEO'));
      END IF;
   ELSE
      IF (newrec_.supply_code = 'CRO') THEN
         Error_SYS.Record_General(lu_name_, 'ONLYFROMCRO: This supply code is only allowed for Customer Order lines created from a Component Repair Order.');
      END IF;
   END IF;
   
   IF (NVL(newrec_.demand_code, ' ') = 'FSM' AND newrec_.supply_code != 'SEO') THEN
      Error_SYS.Record_General(lu_name_, 'SUPPLYCODEFILTERFSM: The customer order line is created from Field Service Management. Only :P1 supply codes is allowed.', Order_Supply_Type_API.Decode('SEO'));      
   END IF;
END Check_Supply_Code___;


PROCEDURE Check_Purch_Supply_Code___ (
   newrec_ IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE )
IS
   sales_part_rec_    SALES_PART_API.Public_Rec;
   supply_code_cl_    VARCHAR2(200) := Order_Supply_Type_API.Decode(newrec_.supply_code);
BEGIN
   sales_part_rec_ := Sales_Part_API.Get(newrec_.contract, newrec_.catalog_no);
   IF (sales_part_rec_.catalog_type IN ('NON', 'INV')) THEN
      IF ((newrec_.purchase_part_no IS NULL) AND (newrec_.supply_code IN ('PD', 'IPD', 'PT', 'IPT'))) THEN
         Error_SYS.Record_General(lu_name_, 'NOSUPPLY: Purchase part must be entered when supply code is ":P1".', supply_code_cl_);
      END IF;
   END IF;
END Check_Purch_Supply_Code___;


PROCEDURE Update_Config_Pricing_Info___ (
   newrec_ IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE )
IS
BEGIN
   IF ((newrec_.configuration_id != '*') AND (newrec_.configured_line_price_id IS NOT NULL)) THEN
      Configured_Line_Price_API.Get_Pricing_Totals(newrec_.char_price, newrec_.calc_char_price,
         newrec_.configured_line_price_id, newrec_.configuration_id);
   END IF;
END Update_Config_Pricing_Info___;


PROCEDURE Set_Job_Pre_Posting___ (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   job_id_       IN VARCHAR2,
   activity_seq_ IN NUMBER )
IS
   company_     VARCHAR2(20);
   ordrec_      Public_Rec;
BEGIN
   ordrec_ := Get(order_no_, line_no_, rel_no_, line_item_no_);
   company_ := Site_API.Get_Company(ordrec_.contract);

   -- set pre accounting for customer order line
   Pre_Accounting_API.Set_Project_Code_Part(ordrec_.pre_accounting_id,
      company_, ordrec_.contract, 'M104', job_id_, activity_seq_);
END Set_Job_Pre_Posting___;


PROCEDURE Validate_Mro_Line___ (
   part_no_        IN VARCHAR2,
   sales_quantity_ IN NUMBER,
   part_ownership_ IN VARCHAR2 )
IS
   inv_part_exists_      BOOLEAN;
BEGIN
   inv_part_exists_ := Part_Catalog_API.Check_Part_Exists(part_no_);
   IF (inv_part_exists_) THEN
      IF (Part_Catalog_API.Get_Rcpt_Issue_Serial_Track_Db(part_no_) = Fnd_Boolean_API.DB_FALSE) THEN
         Error_SYS.Record_General(lu_name_, 'MRONOTSERIAL: Only Serial handled parts can be used with Supply Code MRO');
      END IF;
   ELSE
      Error_SYS.Record_General(lu_name_, 'MRONOTSERIAL: Only Serial handled parts can be used with Supply Code MRO');
   END IF;

   IF (sales_quantity_ != 1)  THEN
      Error_SYS.Record_General(lu_name_, 'MROWRONGQUANTITY: Only Sales Quantity 1 can be used with Supply Code MRO');
   END IF;

   IF (part_ownership_ != 'CUSTOMER OWNED')  THEN
      Error_SYS.Record_General(lu_name_, 'MRONOTCUSTOMEROWNED: Only Customer Owned parts can be used with Supply Code MRO');
   END IF;
END Validate_Mro_Line___;


PROCEDURE Check_Qty_From_Repair_Order___ (
   demand_code_       IN VARCHAR2,
   demand_order_ref1_ IN VARCHAR2,
   part_no_           IN VARCHAR2 )
IS
BEGIN
   IF (Is_External_Service_Order___(demand_code_, demand_order_ref1_) = Fnd_Boolean_API.DB_TRUE) THEN
      -- IF sales part is serialized part raise the error to avoid quantity been modified.
      -- Otherwise allow the quantity to modify in the CO.
      IF (Part_Catalog_API.Get_Rcpt_Issue_Serial_Track_Db(part_no_) = Fnd_Boolean_API.DB_TRUE) THEN
         Error_SYS.Record_General(lu_name_, 'ERRORORDERQUANTITY: Customer Order created from an External Service Order, Quantity not modifyable.');
      END IF;
   END IF;
END Check_Qty_From_Repair_Order___;


PROCEDURE Get_Supply_Chain_Defaults___ (
   newrec_  IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   indrec_  IN     Indicator_Rec,
   oldrec_  IN     CUSTOMER_ORDER_LINE_TAB%ROWTYPE DEFAULT NULL )
IS
   ship_via_code_                CUSTOMER_ORDER_LINE_TAB.ship_via_code%TYPE;
   delivery_leadtime_            CUSTOMER_ORDER_LINE_TAB.delivery_leadtime%TYPE;
   pkg_rec_                      Public_Rec;
   default_ship_via_code_        CUSTOMER_ORDER_LINE_TAB.ship_via_code%TYPE;
   default_delivery_terms_       CUSTOMER_ORDER_LINE_TAB.delivery_terms%TYPE;
   default_del_terms_location_   CUSTOMER_ORDER_LINE_TAB.del_terms_location%TYPE;
   default_delivery_leadtime_    CUSTOMER_ORDER_LINE_TAB.delivery_leadtime%TYPE;
   order_rec_                    CUSTOMER_ORDER_API.Public_Rec;
   distance_                     NUMBER;
   expected_additional_cost_     NUMBER;
   cost_curr_code_               VARCHAR2(3);
   internal_leadtime_            NUMBER;
   agreement_id_                 VARCHAR2(10);
   supplier_ship_via_transit_    CUSTOMER_ORDER_LINE_TAB.supplier_ship_via_transit%TYPE;
   ext_transport_calendar_id_    CUSTOMER_ORDER_LINE_TAB.ext_transport_calendar_id%TYPE;
   default_ext_transport_cal_id_ CUSTOMER_ORDER_LINE_TAB.ext_transport_calendar_id%TYPE;
   default_forward_agent_id_     CUSTOMER_ORDER_LINE_TAB.forward_agent_id%TYPE;
   default_route_id_             CUSTOMER_ORDER_LINE_TAB.route_id%TYPE;
   picking_leadtime_             NUMBER;
   default_picking_leadtime_     NUMBER;
   route_id_                     CUSTOMER_ORDER_LINE_TAB.route_id%TYPE;
   forward_agent_id_             CUSTOMER_ORDER_LINE_TAB.forward_agent_id%TYPE;
   shipment_type_                VARCHAR2(3);
   default_shipment_type_        VARCHAR2(3);
   vendor_no_                    VARCHAR2(20);
   delivery_terms_               CUSTOMER_ORDER_LINE_TAB.delivery_terms%TYPE;
   del_terms_location_           CUSTOMER_ORDER_LINE_TAB.del_terms_location%TYPE;
   ship_addr_no_changed_         VARCHAR2(5) := 'FALSE';
BEGIN
   -- Any values passed in when the line was created should override the default values
   -- This could be the case when the order line is created via the New() method.
   -- Defaults could for example come from a quotation line
   IF (indrec_.ship_via_code) THEN
      ship_via_code_ := newrec_.ship_via_code;
   END IF;
   IF (indrec_.delivery_leadtime) THEN
      delivery_leadtime_ := newrec_.delivery_leadtime;
   END IF;
   IF (indrec_.ext_transport_calendar_id) THEN
      ext_transport_calendar_id_ := newrec_.ext_transport_calendar_id;
   END IF;
   IF (indrec_.supplier_ship_via_transit) THEN
      supplier_ship_via_transit_ := newrec_.supplier_ship_via_transit;
   END IF;
   IF (indrec_.picking_leadtime) THEN
      picking_leadtime_ := newrec_.picking_leadtime;
   END IF;
   IF (indrec_.route_id) THEN
      route_id_ := newrec_.route_id;
   END IF;
   IF (indrec_.forward_agent_id) THEN
      forward_agent_id_ :=  newrec_.forward_agent_id;
   END IF;
   IF (indrec_.shipment_type) THEN
      shipment_type_ := newrec_.shipment_type;
   END IF;
   IF (indrec_.vendor_no) THEN
      vendor_no_ := newrec_.vendor_no;
   END IF;
   IF (indrec_.delivery_terms) THEN
      delivery_terms_ := newrec_.delivery_terms;
   END IF;
   IF (indrec_.del_terms_location) THEN
      del_terms_location_ := newrec_.del_terms_location;
   END IF;

   IF (ship_via_code_ IS NOT NULL) THEN
      IF ((delivery_leadtime_ IS NULL) OR (supplier_ship_via_transit_ IS NULL) OR (picking_leadtime_ IS NULL) OR
          (shipment_type_ IS NULL) OR (route_id_ IS NULL) OR (delivery_terms_ IS NULL) OR (del_terms_location_ IS NULL)) THEN
         newrec_.ship_via_code := ship_via_code_;
         -- Retrive default delivery leadtime, picking leadtime and supplier_ship_via_transit for the
         -- specified ship via code
         Cust_Order_Leadtime_Util_API.Get_Ship_Via_Values(newrec_.route_id,
                                                          newrec_.forward_agent_id,
                                                          newrec_.delivery_leadtime,
                                                          newrec_.ext_transport_calendar_id,
                                                          distance_,
                                                          expected_additional_cost_,
                                                          cost_curr_code_,
                                                          internal_leadtime_,
                                                          newrec_.supplier_ship_via_transit,
                                                          newrec_.freight_map_id,
                                                          newrec_.zone_id,
                                                          newrec_.picking_leadtime,
                                                          newrec_.shipment_type,
                                                          newrec_.delivery_terms,
                                                          newrec_.del_terms_location,
                                                          newrec_.contract,
                                                          newrec_.deliver_to_customer_no,
                                                          newrec_.ship_addr_no,
                                                          newrec_.addr_flag,
                                                          newrec_.part_no,
                                                          newrec_.supply_code,
                                                          newrec_.vendor_no,
                                                          newrec_.ship_via_code,
                                                          NULL,
                                                          'TRUE');
         -- There can be exist records which has no delivery terms or delivery term location in supply chain matrix.
         IF newrec_.delivery_terms IS NULL THEN
            order_rec_ := CUSTOMER_ORDER_API.Get(newrec_.order_no);
            newrec_.delivery_terms := order_rec_.delivery_terms;
            newrec_.del_terms_location := order_rec_.del_terms_location;
         END IF;

         IF (delivery_leadtime_ IS NOT NULL) THEN
            -- IF a delivery leadtime was sent in the attribute string this should
            -- override the default value
            newrec_.delivery_leadtime := delivery_leadtime_;
         END IF;
         IF (supplier_ship_via_transit_ IS NOT NULL) THEN
            -- IF a value for supplier ship via transit was sent in this should override the default
            newrec_.supplier_ship_via_transit := supplier_ship_via_transit_;
         END IF;
         IF (ext_transport_calendar_id_ IS NOT NULL) THEN
            -- IF a external transport calendar was sent in the attribute string this should override the default
            newrec_.ext_transport_calendar_id := ext_transport_calendar_id_;
         END IF;
         IF (picking_leadtime_ IS NOT NULL) THEN
            -- IF a picking leadtime was sent in the attribute string this should override the default value
            newrec_.picking_leadtime := picking_leadtime_;
         END IF;
         IF (route_id_ IS NOT NULL) THEN
             -- IF route_id_ was sent in the attribute string this should override the default value
            newrec_.route_id := route_id_;
            newrec_.forward_agent_id := NVL(Delivery_Route_API.Get_Forward_Agent_Id(route_id_), forward_agent_id_);
      END IF;
         IF (forward_agent_id_ IS NOT NULL) THEN
            newrec_.forward_agent_id := forward_agent_id_;
         END IF;
         IF (shipment_type_ IS NOT NULL) THEN
            -- IF a shipment type was sent in the attribute string this should override the default value
            newrec_.shipment_type := shipment_type_;
         END IF;
         IF (delivery_terms_ IS NOT NULL) THEN
            -- IF a delivery term was sent in the attribute string this should override the default value
            newrec_.delivery_terms := delivery_terms_;
         END IF;
         IF (del_terms_location_ IS NOT NULL) THEN
            -- IF a del term location was sent in the attribute string this should override the default value
            newrec_.del_terms_location := del_terms_location_;
         END IF;
      END IF;
   ELSE
      -- Retrieve customer agrement for the part if any
      order_rec_ := CUSTOMER_ORDER_API.Get(newrec_.order_no);

      IF (newrec_.price_source = 'AGREEMENT') THEN
         agreement_id_ := newrec_.price_source_id;
      ELSE
         agreement_id_ := NULL;
      END IF;

      IF (newrec_.line_item_no > 0)  THEN
         -- The current line is a package component line, retrieve defaults from package header
         pkg_rec_                      := Get(newrec_.order_no, newrec_.line_no, newrec_.rel_no, -1);
         default_ship_via_code_        := pkg_rec_.ship_via_code;
         default_delivery_terms_       := pkg_rec_.delivery_terms;
         default_del_terms_location_   := pkg_rec_.del_terms_location;
         default_delivery_leadtime_    := pkg_rec_.delivery_leadtime;
         default_ext_transport_cal_id_ := pkg_rec_.ext_transport_calendar_id;
         default_route_id_             := pkg_rec_.route_id;
         default_forward_agent_id_     := pkg_rec_.forward_agent_id;
         default_picking_leadtime_     := pkg_rec_.picking_leadtime;
         default_shipment_type_        := pkg_rec_.shipment_type;
      ELSE
         IF (newrec_.addr_flag = 'Y' AND newrec_.default_addr_flag = 'N') THEN
            default_ship_via_code_        := NVL(newrec_.ship_via_code, order_rec_.ship_via_code);
            default_delivery_terms_       := NVL(newrec_.delivery_terms, order_rec_.delivery_terms);
            default_del_terms_location_   := NVL(newrec_.del_terms_location, order_rec_.del_terms_location);
            default_delivery_leadtime_    := NVL(newrec_.delivery_leadtime,order_rec_.delivery_leadtime);
            default_ext_transport_cal_id_ := NVL(newrec_.ext_transport_calendar_id, order_rec_.ext_transport_calendar_id);
            default_route_id_             := NVL(newrec_.route_id, order_rec_.route_id);
            default_forward_agent_id_     := NVL(newrec_.forward_agent_id, order_rec_.forward_agent_id);
            default_picking_leadtime_     := NVL(newrec_.picking_leadtime, order_rec_.picking_leadtime);
            default_shipment_type_        := NVL(newrec_.shipment_type, order_rec_.shipment_type);
         ELSE
            -- Retrieve defaults from order header
            default_ship_via_code_        := order_rec_.ship_via_code;
            default_delivery_terms_       := order_rec_.delivery_terms;
            default_del_terms_location_   := order_rec_.del_terms_location;
            default_delivery_leadtime_    := order_rec_.delivery_leadtime;
            default_ext_transport_cal_id_ := order_rec_.ext_transport_calendar_id;
            default_route_id_             := order_rec_.route_id;
            default_forward_agent_id_     := order_rec_.forward_agent_id;
            default_picking_leadtime_     := order_rec_.picking_leadtime;
            default_shipment_type_        := order_rec_.shipment_type;
         END IF;
      END IF;

      IF (NVL(oldrec_.ship_addr_no, newrec_.ship_addr_no) != newrec_.ship_addr_no) THEN
         -- Set TRUE only for delivery address update scenario.
         ship_addr_no_changed_         := 'TRUE';
         default_delivery_leadtime_    := NVL(newrec_.delivery_leadtime, default_delivery_leadtime_);
         default_picking_leadtime_     := NVL(newrec_.picking_leadtime, default_picking_leadtime_);
      END IF;

      newrec_.ship_via_code             := NULL;
      newrec_.delivery_terms            := NULL;
      newrec_.del_terms_location        := NULL;
      newrec_.supplier_ship_via_transit := NULL;
      newrec_.delivery_leadtime         := NULL;
      newrec_.ext_transport_calendar_id := NULL;
      newrec_.route_id                  := NULL;
      newrec_.forward_agent_id          := NULL;
      newrec_.picking_leadtime          := NULL;
      newrec_.shipment_type             := NULL;

      -- Get supply chain defaults
      -- Replaced with the deliver_to_customer_no
      Cust_Order_Leadtime_Util_API.Get_Supply_Chain_Defaults(newrec_.route_id,
                                                             newrec_.forward_agent_id,
                                                             newrec_.ship_via_code,
                                                             newrec_.delivery_terms,
                                                             newrec_.del_terms_location,
                                                             newrec_.supplier_ship_via_transit,
                                                             newrec_.delivery_leadtime,
                                                             newrec_.ext_transport_calendar_id,
                                                             newrec_.default_addr_flag,
                                                             newrec_.freight_map_id,
                                                             newrec_.zone_id,
                                                             newrec_.picking_leadtime,
                                                             newrec_.shipment_type,
                                                             newrec_.contract,
                                                             newrec_.deliver_to_customer_no,
                                                             newrec_.ship_addr_no,
                                                             newrec_.addr_flag,
                                                             newrec_.part_no,
                                                             newrec_.supply_code,
                                                             newrec_.vendor_no,
                                                             agreement_id_,
                                                             default_ship_via_code_,
                                                             default_delivery_terms_,
                                                             default_del_terms_location_,
                                                             default_delivery_leadtime_,
                                                             default_ext_transport_cal_id_, default_route_id_, default_forward_agent_id_,
                                                             default_picking_leadtime_, default_shipment_type_, order_rec_.vendor_no, order_rec_.ship_addr_no,
                                                             'FALSE', ship_addr_no_changed_);

      IF  (supplier_ship_via_transit_ IS NOT NULL) THEN
         -- IF a value for supplier ship via transit was sent in this should override the default
         newrec_.supplier_ship_via_transit := supplier_ship_via_transit_;
      END IF;
      IF (del_terms_location_ IS NOT NULL) THEN
         -- If a del term location was sent in the attribute string this should override the default value.
         newrec_.del_terms_location := del_terms_location_;
      END IF;
   END IF;

   IF (newrec_.supplier_ship_via_transit IS NOT NULL) THEN
      newrec_.supplier_ship_via_transit_desc := Mpccom_Ship_Via_API.Get_Description(newrec_.supplier_ship_via_transit, order_rec_.language_code);
   ELSE
      newrec_.supplier_ship_via_transit_desc := NULL;
   END IF;
END Get_Supply_Chain_Defaults___;


PROCEDURE Get_Def_Supplier_Ship_Via___ (
   supplier_ship_via_transit_     OUT VARCHAR2,
   supplier_ship_via_transit_dsc_ OUT VARCHAR2,
   vendor_no_                     IN  VARCHAR2,
   contract_                      IN  VARCHAR2,
   supply_site_                   IN  VARCHAR2,
   part_no_                       IN  VARCHAR2,
   supply_code_db_                IN  VARCHAR2,
   language_code_                 IN  VARCHAR2 )
IS
   supply_chain_part_group_         VARCHAR2(20);
   default_supplier_addr_no_        SUPPLIER_INFO_ADDRESS_PUBLIC.address_id%TYPE;
   default_supplier_ship_via_       VARCHAR2(3);
BEGIN
   -- fetching default supplier document address and default supplier ship via code
   $IF (Component_Purch_SYS.INSTALLED)$THEN
      Supplier_Address_API.Get_Addr_Ship_Via(default_supplier_addr_no_, default_supplier_ship_via_, vendor_no_);
   $END

   supply_chain_part_group_ := Inventory_Part_API.Get_Supply_Chain_Part_Group(contract_, part_no_);

   IF (supply_code_db_ = 'PT') THEN
      $IF (Component_Purch_SYS.INSTALLED)$THEN
         supplier_ship_via_transit_ := Supp_Addr_Part_Leadtime_API.Get_Default_Ship_Via_Code(vendor_no_, default_supplier_addr_no_,
                                                                                             supply_chain_part_group_, contract_);
      $ELSE
         NULL;
      $END
   ELSE -- IPT
      supplier_ship_via_transit_ := Site_To_Site_Part_Leadtime_API.Get_Default_Ship_Via_Code(contract_,
                                            supply_site_, supply_chain_part_group_);
   END IF;
   IF (supplier_ship_via_transit_ IS NULL) THEN
      IF (supply_code_db_ = 'PT') THEN
         $IF (Component_Purch_SYS.INSTALLED)$THEN
            supplier_ship_via_transit_ := Supplier_Address_Leadtime_API.Get_Default_Ship_Via_Code(vendor_no_, default_supplier_addr_no_, contract_);
         $ELSE
            NULL;
         $END
      ELSE -- IPT
         supplier_ship_via_transit_ := Site_To_Site_Leadtime_API.Get_Default_Ship_Via_Code(contract_,
                                               supply_site_);
      END IF;
   END IF;

   -- if still NULL fetch new ship via from supplier address
   IF (supplier_ship_via_transit_ IS NULL) THEN
      supplier_ship_via_transit_ := default_supplier_ship_via_;
   END IF;

   -- fetch the description
   supplier_ship_via_transit_dsc_ := Mpccom_Ship_Via_API.Get_Description(supplier_ship_via_transit_, language_code_);
END Get_Def_Supplier_Ship_Via___;


PROCEDURE Get_Activity_Info___ (
   planned_cost_elements_     OUT Mpccom_Accounting_API.Project_Cost_Element_Tab,
   committed_cost_elements_   OUT Mpccom_Accounting_API.Project_Cost_Element_Tab,
   used_cost_elements_        OUT Mpccom_Accounting_API.Project_Cost_Element_Tab,
   object_progress_           OUT NUMBER,
   rec_                       IN  CUSTOMER_ORDER_LINE_TAB%ROWTYPE )
IS
   order_status_                 VARCHAR2(20);   
   reserved_committed_elements_  Mpccom_Accounting_API.Project_Cost_Element_Tab;
   qty_due_                      NUMBER:=0;
   sales_oh_cost_elements_       Mpccom_Accounting_API.Project_Cost_Element_Tab;
   sales_qty_                    NUMBER;
   inventory_part_               BOOLEAN;
   active_forecast_part_         VARCHAR2(5):= 'FALSE';
   $IF (Component_Proj_SYS.INSTALLED)$THEN
      activity_rec_        Activity_API.Public_Rec;
   $END
BEGIN
   -- For rental lines cost reporting is prevented as a temporary measure.
   IF (Is_External_Service_Order___(rec_.demand_code, rec_.demand_order_ref1) = 'TRUE' OR rec_.rental = Fnd_Boolean_API.DB_TRUE) THEN
      RETURN;
   END IF;

   IF (rec_.demand_code = Order_Supply_Type_API.DB_REPLACEMENT_CUSTOMER_ORDER) THEN
      RETURN;
   END IF;

   object_progress_ := Get_Progress_Info___ (rec_.order_no,
                                             rec_.line_no,
                                             rec_.rel_no,
                                             rec_.line_item_no,
                                             rec_.rowstate);

   $IF (Component_Proj_SYS.INSTALLED)$THEN
      activity_rec_ := Activity_API.Get(rec_.activity_seq);      
      inventory_part_   := Inventory_Part_API.Check_Exist(rec_.contract, rec_.part_no);
      order_status_     := CUSTOMER_ORDER_API.Get_Objstate(rec_.order_no);

      $IF (Component_Massch_SYS.INSTALLED) $THEN
         active_forecast_part_ := Level_1_Part_API.Check_Part_Active_In_Activity(rec_.contract,
                                                                                      rec_.part_no,
                                                                                      activity_rec_.project_Id,
                                                                                      rec_.activity_seq);
      $END
      IF ((order_status_ != 'Cancelled') AND
          (rec_.rowstate != 'Cancelled') AND
          (active_forecast_part_ = 'FALSE') AND
          (rec_.part_ownership NOT IN ('CUSTOMER OWNED', 'SUPPLIER LOANED'))) THEN
         planned_cost_elements_ := Get_Activity_Planned_Cost___(rec_, inventory_part_);
      END IF;

      -- PI: Project Inventory, PJD: Project Deliverables, PRJ: Project, SO: Shop Order, ND: Not Decided, PT: Purch Order Trans, IPT:Int Purch Trans
      IF ((rec_.supply_code NOT IN ('PI', 'PJD', 'PRJ', 'SO', 'ND', 'PT', 'IPT', 'DOP')) AND (activity_rec_.rowstate <> 'Planned'))THEN
         -- Get project cost elements for committed cost

         IF ((order_status_ IN ('Released', 'Reserved', 'Picked', 'PartiallyDelivered'))
               AND (rec_.rowstate NOT IN ('Delivered', 'Cancelled', 'Invoiced')) AND (rec_.supply_code NOT IN ('PD', 'IPD'))) THEN
            IF (inventory_part_)THEN
            -- For Inventory Parts
               IF rec_.part_ownership NOT IN ('CUSTOMER OWNED', 'SUPPLIER LOANED') THEN
                  qty_due_ := (rec_.revised_qty_due - rec_.qty_assigned - (rec_.qty_shipped - rec_.qty_returned));

                  IF (qty_due_ > 0) THEN
                     -- Get Committed cost for unreserved, yet to be delivered parts
                     committed_cost_elements_ := Invent_Proj_Cost_Manager_API.Get_Project_Cost_Elements(
                                                                                    contract_            => rec_.contract,
                                                                                    part_no_             => rec_.part_no,
                                                                                    source_ref_type_db_  => 'CUST ORDER',
                                                                                    source_ref1_         => rec_.order_no,
                                                                                    source_ref2_         => rec_.line_no,
                                                                                    source_ref3_         => rec_.rel_no,
                                                                                    source_ref4_         => rec_.line_item_no,
                                                                                    quantity_            => qty_due_,
                                                                                    condition_code_      => rec_.condition_code,
                                                                                    part_related_        => TRUE );
                  END IF;

                  -- Get Committed cost for reserved quantity
                  IF (rec_.qty_assigned > 0) THEN
                     reserved_committed_elements_ := Invent_Proj_Cost_Manager_API.Get_Elements_For_Reservations(
                                                                                    source_ref1_         => rec_.order_no,
                                                                                    source_ref2_         => rec_.line_no,
                                                                                    source_ref3_         => rec_.rel_no,
                                                                                    source_ref4_         => rec_.line_item_no,
                                                                                    source_ref_type_db_  => 'CUST ORDER');
                     committed_cost_elements_ := Mpccom_Accounting_API.Get_Merged_Cost_Element_Tab(committed_cost_elements_,
                                                                                                   reserved_committed_elements_);
                  END IF;
               END IF;
            ELSE -- For Non Inventory Parts
               qty_due_                 := rec_.buy_qty_due - rec_.qty_shipped;
               committed_cost_elements_ := Get_Elements_Non_Inv___(rec_, qty_due_);
            END IF;
         END IF;

         -- Get project cost elements for Used cost
         IF ((rec_.rowstate IN ('PartiallyDelivered', 'Delivered', 'Invoiced')) AND
             ((rec_.supply_code IN ('IO', 'NO')) OR
             (rec_.supply_code IN ('PD', 'IPD') AND inventory_part_) OR
             ((NOT inventory_part_) AND (rec_.supply_code = 'IPD') AND
              (Site_API.Get_Company(rec_.contract) = Site_API.Get_Company(rec_.supply_site))))) THEN
            used_cost_elements_ := Inventory_Transaction_Hist_API.Get_Activity_Costs_By_Status(
                                       source_ref1_   => rec_.order_no,
                                       source_ref2_   => rec_.line_no,
                                       source_ref3_   => rec_.rel_no,
                                       source_ref4_   => rec_.line_item_no,
                                       status_        => 'NOT TRANSFERRED',
                                       source_ref_type_db_ => 'CUST ORDER');
         END IF;
      END IF;
      -- Get project cost elements for Commited Cost, Sales OH
      -- Get Committed project cost elements for Sales OH
      IF ((order_status_ IN ('Released', 'Reserved', 'Picked', 'PartiallyDelivered'))
            AND (rec_.rowstate NOT IN ('Delivered', 'Cancelled','Invoiced'))
            AND (inventory_part_)
            AND (rec_.part_ownership NOT IN ('CUSTOMER OWNED', 'SUPPLIER LOANED'))) THEN

         sales_qty_ := (rec_.revised_qty_due - (rec_.qty_shipped - rec_.qty_returned));

         IF (sales_qty_ > 0) THEN
            IF (rec_.charged_item = 'CHARGED ITEM') THEN
               sales_oh_cost_elements_ := Invent_Proj_Cost_Manager_API.Get_Elements_For_Sales_Oh(
                                                contract_        => rec_.contract,
                                                part_no_         => rec_.part_no,
                                                oe_order_no_     => rec_.order_no,
                                                oe_line_no_      => rec_.line_no,
                                                oe_rel_no_       => rec_.rel_no,
                                                oe_line_item_no_ => rec_.line_item_no,
                                                sales_qty_       => sales_qty_);
            END IF;
            -- PT: Purch Order Trans
            IF (rec_.supply_code IN ('PT', 'IPT', 'ND', 'PD', 'PI', 'PJD', 'IPD', 'DOP')) THEN
               committed_cost_elements_ := sales_oh_cost_elements_;
            ELSE
               committed_cost_elements_ := Mpccom_Accounting_API.Get_Merged_Cost_Element_Tab(committed_cost_elements_,
                                                                                             sales_oh_cost_elements_);
            END IF;
         END IF;
      END IF;

      -- Get project cost elements for Used Cost, Sales OH
      IF (rec_.rowstate IN ('PartiallyDelivered', 'Delivered', 'Invoiced') AND
          rec_.supply_code IN ('SO', 'PT', 'IPT', 'PI', 'PJD', 'DOP') AND (inventory_part_)) THEN
         used_cost_elements_ := Inventory_Transaction_Hist_API.Get_Activity_Costs_By_Status(
                                    source_ref1_   => rec_.order_no,
                                    source_ref2_   => rec_.line_no,
                                    source_ref3_   => rec_.rel_no,
                                    source_ref4_   => rec_.line_item_no,
                                    status_        => 'NOT TRANSFERRED',
                                    source_ref_type_db_ => 'CUST ORDER',
                                    event_code_    => 'SALES-OH');
      END IF;
   $END
END Get_Activity_Info___;


PROCEDURE Validate_Proj_Connect___ (
   project_id_               OUT    VARCHAR2,
   demand_code_db_           IN OUT NOCOPY VARCHAR2,
   supply_code_db_           IN OUT NOCOPY VARCHAR2,
   order_no_                 IN     VARCHAR2,
   contract_                 IN     VARCHAR2,
   rowstate_                 IN     VARCHAR2,
   consignment_stock_db_     IN     VARCHAR2,
   qty_on_order_             IN     NUMBER,
   new_activity_seq_         IN     NUMBER,
   old_activity_seq_         IN     NUMBER,
   planned_ship_date_        IN     DATE,
   catalog_no_               IN     VARCHAR2,
   new_pkg_component_line_   IN     BOOLEAN,
   catalog_type_             IN     VARCHAR2 )
IS
   activity_site_exist_    NUMBER;
   early_start_            DATE;
   early_finish_           DATE;
   activity_state_         VARCHAR2(30);
   order_project_id_       VARCHAR2(10);
   error_msg_              VARCHAR2(2000);
   material_allocation_    VARCHAR2(25);
   proj_unique_sale_       VARCHAR2(5);
   header_rec_             CUSTOMER_ORDER_API.Public_Rec;
   $IF (Component_Proj_SYS.INSTALLED)$THEN
      project_rec_         Project_API.Public_Rec;
      activity_rec_        Activity_API.Public_Rec;
   $END
BEGIN
   IF (old_activity_seq_ IS NOT NULL AND old_activity_seq_ > 0) THEN
      Error_Sys.Record_General(lu_name_, 'COLCONNEXIST: Project connection already exists');
   END IF;

   header_rec_ := Customer_Order_API.Get(order_no_);
   $IF (Component_Proj_SYS.INSTALLED)$THEN
      activity_rec_        := Activity_API.Get(new_activity_seq_);      
      project_id_          := activity_rec_.project_id;
      project_rec_         := Project_API.Get(project_id_);
      activity_site_exist_ := Project_Site_API.Project_Site_Exist(project_id_, contract_);
      material_allocation_ := project_rec_.material_allocation;
      early_start_         := activity_rec_.early_start;
      early_finish_        := activity_rec_.early_finish;
      activity_state_      := activity_rec_.rowstate;
   
      IF (activity_state_ != 'Released') THEN
         IF (header_rec_.rowstate = 'Released') THEN   
            Error_Sys.Record_General(lu_name_, 'ACTIVITYNOTRELEASED: Activity :P1 should be in the released state in order to be able to connect to a released customer order.', new_activity_seq_);
         END IF;
      END IF;

      IF (activity_state_ NOT IN ('Released', 'Planned') AND NOT(demand_code_db_ = Order_Supply_Type_API.DB_REPLACEMENT_CUSTOMER_ORDER AND activity_state_ NOT IN ('Closed', 'Cancelled')) ) THEN
         Error_SYS.Record_General(lu_name_, 'MATRACTNOTRELEASED: Cannot connect the object. The activity must be Planned or Released.');
      END IF;

      IF activity_site_exist_ = 0 THEN
         Error_SYS.Record_General(lu_name_,'COLSITENOTEXIS: Site :P1 does not exist as project site ', contract_);
      END IF;

      IF (Trunc(planned_ship_date_) NOT BETWEEN Trunc(early_start_) AND Trunc(early_finish_) AND (catalog_type_ != 'KOMP')) THEN
         Client_SYS.Add_Info('CustomerOrderLine','COLSHIPDATE: The planned ship date is not within life span of the connected project activity :P1.  '||
                             'Please review the dates',new_activity_seq_);
      END IF;

      proj_unique_sale_ := project_rec_.proj_unique_sale;

      IF (proj_unique_sale_ = 'TRUE') THEN
         IF (Diff_Proj_Exist___ ( order_no_, project_id_ )) THEN
            Error_SYS.Record_General(lu_name_,'DIFFPROJEXIST: Project :P1 is set for Project Unique Billing and cannot be connected to a customer order with lines connected to any other projects.', project_id_);
         END IF;
      END IF;
   $END

   IF (rowstate_ = 'Reserved') THEN
      IF (material_allocation_ = 'WITHIN_ACTIVITY') THEN
         Error_Sys.Record_General(lu_name_, 'COLRESMATALLOCCON: Project connection can only be made for a reserved customer order line/s when material allocation is within project.');
      END IF;
   ELSIF (rowstate_ != 'Released') THEN
      Error_Sys.Record_General(lu_name_, 'COLWRONGSTATUS: Customer order line must have status Released to make a project connection.');
   END IF;

   IF (supply_code_db_ NOT IN ('IO', 'NO', 'PD', 'IPD', 'PI', 'PJD', 'PKG', 'SO', 'PT', 'IPT', 'ND', 'DOP', 'SEO', 'PRJ')) THEN
      error_msg_ := '[' ||Order_Supply_Type_API.Decode('IO') || '], [' ||Order_Supply_Type_API.Decode('NO')|| '], [' ||Order_Supply_Type_API.Decode('PD')|| '], [' ||Order_Supply_Type_API.Decode('IPD')||'], [' ||Order_Supply_Type_API.Decode('PI')||'], [' ||Order_Supply_Type_API.Decode('PJD')||'], [' ||Order_Supply_Type_API.Decode('PKG')||'] , [' ||Order_Supply_Type_API.Decode('ND')|| '], [' ||Order_Supply_Type_API.Decode('PT')||'] or [' || Order_Supply_Type_API.Decode('IPT') || '] or [' || Order_Supply_Type_API.Decode('DOP') || '] or [' || Order_Supply_Type_API.Decode('SEO') || '] or [' || Order_Supply_Type_API.Decode('PRJ') || ']';
      Error_SYS.Record_General(lu_name_, 'COLDEMANDCODE: Project activity connections are allowed only for supply code :P1.', error_msg_);
   END IF;

   IF (supply_code_db_ IN ('IO','PS') AND (qty_on_order_ > 0 )) THEN
      Error_SYS.Record_General(lu_name_, 'COLUMBRELLAEXH1: Manually pegged order lines cannot have project connections');
   END IF;

   IF (consignment_stock_db_ = 'CONSIGNMENT STOCK') THEN
      Error_SYS.Record_General(lu_name_, 'COLCONSTOCK: Customer order lines for consignment stock delivery are not allowed to have project connections');
   END IF;

   order_project_id_ := header_rec_.project_id;

   IF ((order_project_id_ IS NOT NULL) AND (order_project_id_ != project_id_))  THEN
      Error_SYS.Record_General(lu_name_, 'COLPROJEXITS: It is not allowed to connect the order line to project [:P1], since the Customer Order Header is already connected to project [:P2].',project_id_,order_project_id_);
   END IF;

   IF ((supply_code_db_ NOT IN ('PD','IPD', 'SO', 'PT', 'ND', 'IPT', 'DOP','SEO')) AND (NOT new_pkg_component_line_)) THEN
      IF ((catalog_type_ ='INV') OR (catalog_type_ = 'KOMP' AND supply_code_db_ = 'IO')) THEN
         supply_code_db_ := 'PI';
      ELSIF ((catalog_type_ ='NON') OR (catalog_type_ = 'KOMP' AND supply_code_db_ = 'NO')) THEN
         supply_code_db_ := 'PRJ';
      END IF;
   END IF;
   IF (demand_code_db_ IS NULL) THEN
      demand_code_db_ := 'PI';
   END IF;
END Validate_Proj_Connect___;


PROCEDURE Validate_Proj_Disconnect___ (
   newrec_ IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE )
IS
   catalog_type_          VARCHAR2(16);
   material_allocation_   VARCHAR2(25);
   co_state_              VARCHAR2(20);
   header_rec_            Customer_Order_API.Public_Rec;
BEGIN
   header_rec_ := Customer_Order_API.Get(newrec_.order_no); 
   co_state_ := header_rec_.rowstate;
   IF ((co_state_ = 'Released') AND  ((newrec_.supply_code = 'DOP' AND newrec_.qty_on_order != 0))) THEN
      Error_SYS.Record_General(lu_name_,'SUPPLYOBJCREATED: Disconnecting the project from the customer order line is not allowed when supply objects have been created.');
   END IF;

   IF (header_rec_.project_Id IS NOT NULL) AND (co_state_ != 'Planned') AND  (newrec_.rowstate != 'Cancelled') THEN
      Error_SYS.Record_General(lu_name_,'DISCONPROJNOTALWD: Disconnecting lines from project is not allowed after releasing a customer order with a project specified in the customer order references tab.');
   END IF;

   $IF (Component_Proj_SYS.INSTALLED) $THEN
      material_allocation_ := Project_API.Get_Material_Allocation_Db(newrec_.project_id);
   $END

   IF ((newrec_.rowstate = 'Reserved') AND (material_allocation_ = 'WITHIN_PROJECT')) THEN
      NULL;
   ELSIF (newrec_.rowstate NOT IN ('Released', 'Cancelled')) THEN
      Error_Sys.Record_General(lu_name_, 'COLWORNGSTATUS: Customer Order line should have status Released to disconnect from project');
   END IF;

   $IF (Component_Deford_SYS.INSTALLED) $THEN
      IF (Def_Contract_Order_Item_API.CO_Line_On_Defense_Contract(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no)) THEN
         Error_SYS.Record_General(lu_name_,'DISCONPROJDEFORD: The line is connected to a defense contract order item. Disconnecting the line from the project is not allowed.');
      END IF;      
   $END
   
   IF newrec_.supply_code IN ('PI', 'PRJ', 'PJD') THEN
      catalog_type_:= Sales_Part_API.Get_Catalog_Type_Db(newrec_.contract, newrec_.catalog_no);

      IF (catalog_type_ ='INV') THEN
         newrec_.supply_code := 'IO';
      ELSIF (catalog_type_ ='NON') THEN
         newrec_.supply_code := 'NO';
      END IF;
   END IF;

   newrec_.project_id := NULL;
   IF (newrec_.demand_code NOT IN ('PO', 'IPT', 'IPD', 'IPT_RO', 'DO', 'CQ')) THEN
      newrec_.demand_code := NULL;
   END IF;
END Validate_Proj_Disconnect___;


PROCEDURE Handle_Activity_Seq___ (
   rec_              IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   old_activity_seq_ IN NUMBER )
IS
   system_ctrl_connection_       VARCHAR2(5) := 'TRUE';
   object_progress_              NUMBER;
   company_                      VARCHAR2(100);
   proj_code_value_              VARCHAR2(30);
   distr_proj_code_value_        VARCHAR2(30);
   committed_cost_elements_      Mpccom_Accounting_API.Project_Cost_Element_Tab;
   used_cost_elements_           Mpccom_Accounting_API.Project_Cost_Element_Tab;
   empty_tab_                    Mpccom_Accounting_API.Project_Cost_Element_Tab;
   planned_cost_elements_        Mpccom_Accounting_API.Project_Cost_Element_Tab;
   po_project_id_                VARCHAR2(20);
   transaction_currency_code_    VARCHAR2(3);
   base_to_trans_currency_rate_  NUMBER;
   inventory_part_               BOOLEAN;
   base_currency_code_           VARCHAR2(3);
   base_currency_type_           VARCHAR2(10);
   
   attributes_                   Public_Declarations_API.PROJ_Project_Conn_Attr_Type;
BEGIN
   company_ := Site_API.Get_Company(rec_.contract);
   Pre_Accounting_API.Get_Project_Code_Value(proj_code_value_,distr_proj_code_value_,company_,rec_.pre_accounting_id);
   IF proj_code_value_ IS NOT NULL AND proj_code_value_ != rec_.project_id THEN
      Error_SYS.Record_General(lu_name_, 'PROJECTCODEPARTEXIST: It is not allowed to connect an object with existing preposting on the Project code part ');
   END IF;

   $IF (Component_Purch_SYS.INSTALLED) $THEN
      -- IF incoming customer order
      IF (rec_.demand_code IN ('IPT', 'IPD', 'IPT_RO')) THEN
         po_project_id_ := Purchase_Order_Line_API.Get_Project_Id (rec_.demand_order_ref1,
                                                                   rec_.demand_order_ref2,
                                                                   rec_.demand_order_ref3);
         IF (NVL(po_project_id_, Database_Sys.String_Null_) = rec_.project_id) THEN
            Error_SYS.Record_General(lu_name_, 'SAMEDEMANDSITEPROJECT: Connecting the incoming Customer Order line to the same project as the demand, will result in the planned cost being added twice to the project. This operation is not allowed.');
         END IF;
      END IF;
   $END

   -- Make a new project connection.
   $IF (Component_Proj_SYS.INSTALLED) $THEN
      IF (rec_.supply_code IN ('IPT', 'IPD', 'SO', 'IO')) THEN -- We need to consider demand code 'IPT', 'IPD', 'SO' and 'IO'.
         attributes_.include_in_ev := 'TRUE';
      ELSE
         attributes_.include_in_ev := 'FALSE';
      END IF;
   
      -- Get the pre posting details.
      IF NOT((rec_.line_item_no > 0) OR (rec_.demand_code = 'WO' OR rec_.demand_code = 'PO')) THEN
         system_ctrl_connection_ := 'FALSE';
      END IF;

      IF ( rec_.demand_code <> 'WO' ) THEN
         Get_Activity_Info___(planned_cost_elements_,
                              committed_cost_elements_,
                              used_cost_elements_,
                              object_progress_,
                              rec_);
      END IF;
      -- PT: Purch Order Trans, PD: Purch Order Dir, IPT: Int Purch Trans, IPD: Int Purch Dir
      IF (rec_.supply_code IN ('PT', 'PD', 'IPT', 'IPD')) THEN
         inventory_part_   := Inventory_Part_API.Check_Exist(contract_ => rec_.contract,
                                                             part_no_  => rec_.part_no );
         IF (inventory_part_ = FALSE) THEN
            DECLARE
               project_id_ project_tab.Project_id%TYPE;
            BEGIN
               $IF (Component_Purch_SYS.INSTALLED) $THEN   
                  transaction_currency_code_ := Purchase_Part_Supplier_API.Get_Currency_Code (contract_     => rec_.contract,
                                                                                              part_no_      => rec_.purchase_part_no,
                                                                                              vendor_no_    => rec_.vendor_no);
               $END
               project_id_                := Activity_API.Get_Project_Id (activity_seq_ => rec_.activity_seq );
               base_currency_type_        := Project_API.Get_Currency_Type (project_id_, company_);
            END;

            IF (transaction_currency_code_ IS NOT NULL) THEN
               base_currency_code_ := Company_Finance_API.Get_Currency_Code(company_);
               Currency_Rate_API.Get_Project_Currency_Rate (base_to_trans_currency_rate_,
                                                            company_,
                                                            transaction_currency_code_,
                                                            base_currency_code_,
                                                            base_currency_type_,
                                                            Site_API.Get_Site_Date(rec_.contract) );
            END IF;
         END IF;
      END IF;

      Invent_Proj_Cost_Manager_API.Fill_Project_Cost_Element_Tmp( planned_cost_elements_,
                                                                  empty_tab_,
                                                                  committed_cost_elements_,
                                                                  used_cost_elements_ );
      DECLARE
         activity_info_tab_          Public_Declarations_API.PROJ_Project_Conn_Cost_Tab;
         activity_revenue_info_tab_  Public_Declarations_API.PROJ_Project_Conn_Revenue_Tab;
         count_                      PLS_INTEGER;
         transaction_currency_code_  VARCHAR2(3);
         transaction_currency_rate_  NUMBER;

         CURSOR get_project_cost_elements IS
            SELECT project_cost_element,
                   SUM(planned_amount)   planned_amount,
                   SUM(planned_hours)    planned_hours,
                   SUM(committed_amount) committed_amount,
                   SUM(used_amount)      used_amount
            FROM project_cost_element_tmp
            GROUP BY project_cost_element;
      BEGIN
         count_                     := activity_info_tab_.COUNT;
         transaction_currency_code_ := transaction_currency_code_;
         transaction_currency_rate_ := base_to_trans_currency_rate_;

         IF (rec_.demand_code NOT IN (Order_Supply_Type_API.DB_REPLACEMENT_CUSTOMER_ORDER,
                                      Order_Supply_Type_API.DB_INT_PURCH_REPLACEMENT_ORDER)) THEN
            FOR proj_cost_element_rec_ IN get_project_cost_elements LOOP
               activity_info_tab_(count_).control_category          := proj_cost_element_rec_.project_cost_element;
               activity_info_tab_(count_).planned                   := proj_cost_element_rec_.planned_amount;
               activity_info_tab_(count_).planned_hours             := proj_cost_element_rec_.planned_hours;
               activity_info_tab_(count_).committed                 := proj_cost_element_rec_.committed_amount;
               activity_info_tab_(count_).used                      := proj_cost_element_rec_.used_amount;
               activity_info_tab_(count_).transaction_currency_code := transaction_currency_code_;
               activity_info_tab_(count_).planned_transaction       := activity_info_tab_(count_).planned * transaction_currency_rate_;
               activity_info_tab_(count_).committed_transaction     := activity_info_tab_(count_).committed * transaction_currency_rate_;
               activity_info_tab_(count_).used_transaction          := activity_info_tab_(count_).used * transaction_currency_rate_;
               count_                                               := count_ + 1;
            END LOOP;
         END IF;

         Create_Project_Connection___ (
            order_no_                        => rec_.order_no,
            line_no_                         => rec_.line_no,
            rel_no_                          => rec_.rel_no,
            line_item_no_                    => rec_.line_item_no,
            proj_lu_name_                    => 'COLINE',
            system_ctrl_connection_          => system_ctrl_connection_,
            activity_info_tab_               => activity_info_tab_,
            activity_revenue_info_tab_       => activity_revenue_info_tab_,
            attributes_                      => attributes_);
      END;

   $END
END Handle_Activity_Seq___;


FUNCTION Is_Purch_Comp_Part_Line___ (
   rec_ IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE ) RETURN BOOLEAN
IS
   ref_order_no_  VARCHAR2(32000);
BEGIN
   $IF (Component_Purch_SYS.INSTALLED)$THEN
      -- Removed demand code check for 'PI' since there won't be such data with the rec_.demand_order_ref1 IS NOT NULL condition.
      IF ((rec_.demand_code = 'PO') AND (rec_.demand_order_ref1 IS NOT NULL)) THEN
         ref_order_no_ := Pur_Order_Cust_Order_Comp_API.Get_Cust_Order_No(rec_.demand_order_ref1, rec_.demand_order_ref2, rec_.demand_order_ref3);

         IF ( ref_order_no_ = rec_.order_no ) THEN
            -- When ref_order_no_ is null above condition is alway FALSE.
            RETURN TRUE;
         END IF;
      END IF;
   $END
   -- IF the above criteria is not met, we say no!!!
   RETURN FALSE;
END Is_Purch_Comp_Part_Line___;


PROCEDURE Calc_Dates_Forwards___ (
   planned_delivery_date_     IN OUT NOCOPY DATE,
   planned_ship_date_         IN OUT NOCOPY DATE,
   planned_due_date_          IN OUT NOCOPY DATE,
   supply_site_due_date_      IN OUT NOCOPY DATE,
   promised_delivery_date_    IN OUT NOCOPY DATE,
   planned_ship_period_       IN OUT NOCOPY VARCHAR2,
   target_date_               IN     DATE,
   contract_                  IN     VARCHAR2,
   supply_code_db_            IN     VARCHAR2,
   deliver_to_customer_no_    IN     VARCHAR2,
   vendor_no_                 IN     VARCHAR2,
   part_no_                   IN     VARCHAR2,
   purchase_part_no_          IN     VARCHAR2,
   ship_addr_no_              IN     VARCHAR2,
   ship_via_code_             IN     VARCHAR2,
   route_id_                  IN     VARCHAR2,
   delivery_leadtime_         IN     NUMBER,
   picking_leadtime_          IN     NUMBER,
   ext_transport_calendar_id_ IN     VARCHAR2,
   supplier_ship_via_transit_ IN     VARCHAR2,
   header_rowstate_           IN     VARCHAR2 )
IS
   old_ship_date_             DATE;
   timestamp_                 VARCHAR2(30);
BEGIN
   old_ship_date_ := planned_ship_date_;

   -- calculate ship date and delivery date forwards from due date.
   -- Also calculate manuf_start_date_ for 'SO', 'DOP' OR supply_site_due_date for other supply codes
   Cust_Ord_Date_Calculation_API.Calc_Order_Dates_Forwards(planned_delivery_date_, planned_ship_date_, planned_due_date_,
      supply_site_due_date_, target_date_, contract_, supply_code_db_, deliver_to_customer_no_,
      vendor_no_, part_no_, NVL(part_no_, purchase_part_no_), ship_addr_no_, ship_via_code_,
      route_id_, delivery_leadtime_, picking_leadtime_, ext_transport_calendar_id_, supplier_ship_via_transit_);


   IF (route_id_ IS NULL) THEN
      -- The time part of the planned ship date should not be changed
      planned_ship_date_ := TO_DATE(TO_CHAR(planned_ship_date_, 'YYYY-MM-DD') || ' ' ||
                            TO_CHAR(old_ship_date_, 'HH24:MI:SS'), 'YYYY-MM-DD HH24:MI:SS');
   END IF;

   planned_ship_period_ := Work_Time_Calendar_API.Get_Period(Site_API.Get_Dist_Calendar_Id(contract_), planned_ship_date_);

   -- calculate planned ship date's  time
   timestamp_ :=to_char(planned_ship_date_, Report_SYS.datetime_format_);

   -- replace with the old ship date's  time
   timestamp_ := replace(timestamp_, '00:00:00', to_char(old_ship_date_, 'HH24:MI:SS'));

   -- The time part of the planned delivery date should not be changed
   planned_ship_date_ := to_date(timestamp_, Report_SYS.datetime_format_);

   IF (header_rowstate_ = 'Planned') THEN
      promised_delivery_date_ := planned_delivery_date_;
   END IF;
END Calc_Dates_Forwards___;


FUNCTION Get_Auto_Capability_Check___ (
   supply_code_db_ IN VARCHAR2,
   contract_       IN VARCHAR2,
   supply_site_    IN VARCHAR2,
   part_no_        IN VARCHAR2 ) RETURN VARCHAR2
IS
   automatic_capability_check_      VARCHAR2(50);
BEGIN
   -- fetch the automatic_capability_check flag from the inventory part
   IF (supply_code_db_ IN ('DOP','SO')) THEN
      automatic_capability_check_ := NVL(Capability_Check_Allocate_API.Encode(Inventory_Part_API.Get_Automatic_Capability_Check(contract_, part_no_)),'NO AUTOMATIC CAPABILITY CHECK');
   ELSIF (supply_code_db_ IN ('IPT','IPD')) THEN
      -- fetch automatic_capability_check value for the inventory part on the supply_site
      automatic_capability_check_ := NVL(Capability_Check_Allocate_API.Encode(Inventory_Part_API.Get_Automatic_Capability_Check(supply_site_, part_no_)), 'NO AUTOMATIC CAPABILITY CHECK');
      IF (automatic_capability_check_ IN ('RESERVE AND ALLOCATE','ALLOCATE ONLY')) THEN
         -- the neither case is the only valid reserve/allocate case for IPT/IPD
         automatic_capability_check_ := 'NEITHER RESERVE NOR ALLOCATE';
      END IF;
   ELSE
      automatic_capability_check_ := 'NO AUTOMATIC CAPABILITY CHECK';
   END IF;

   Trace_SYS.Field('automatic_capability_check_', automatic_capability_check_);

   RETURN automatic_capability_check_;
END Get_Auto_Capability_Check___;


PROCEDURE Perform_Capability_Check___ (
   newrec_                     IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   auto_cc_performed_          OUT    BOOLEAN,
   header_rowstate_            IN     VARCHAR2,
   automatic_capability_check_ IN     VARCHAR2 )
IS
   ok_to_run_capability_check_ NUMBER;
   int_demand_usage_type_      VARCHAR2(20) := 'CUSTOMERORDER';
   completion_date_            DATE;
   latest_release_date_        DATE;
   error_msg_                  VARCHAR2(500) := NULL;
   supply_site_supply_code_db_ VARCHAR2(3);
   supply_site_dist_calendar_  SITE_TAB.dist_calendar_id%TYPE;
   type_code_db_               VARCHAR2(2);
   customer_name_              VARCHAR2(200);
   sourcing_option_db_         VARCHAR2(20);
   interim_id_                 VARCHAR2(12);
   temp_planned_due_date_      DATE;
   delivery_leadtime_          NUMBER;                                  -- only a dummy variable in this method
   vendor_delivery_leadtime_   NUMBER;
   internal_delivery_leadtime_ NUMBER;
   picking_leadtime_           NUMBER;                                  -- only a dummy variable in this method
   internal_control_time_      NUMBER;
   vendor_manuf_leadtime_      NUMBER;
   vendor_leadtime_            NUMBER;
   expected_leadtime_          NUMBER;
   old_delivery_date_          DATE;
   message_                    VARCHAR2(200);
   headrec_                    Customer_Order_API.public_rec;
   orig_order_no_              VARCHAR2(12);
   orig_line_no_               VARCHAR2(4);
   orig_rel_no_                VARCHAR2(4);
   orig_line_item_no_          NUMBER;
   cc_reset_flag_              VARCHAR2(1);  -- reset flag which tells if the cc-flag/latest_release_date needs reseting when receiving an error and there may exist old cc-data from an earlier try
   info_msg_                   VARCHAR2(2000);
   conv_revised_qty_due_       NUMBER;
   order_info_                 VARCHAR2(23);
   transport_leadtime_         NUMBER;
   arrival_route_id_           VARCHAR2(12);
   ctp_run_id_                 NUMBER;
BEGIN
   auto_cc_performed_ := FALSE;

   -- do not run the capability check when a part ownership other than COMPANY OWNED
   -- and line state should be released and head state should be planned
   IF (newrec_.part_ownership = 'COMPANY OWNED' AND
       NVL(newrec_.rowstate,'Released') = 'Released' AND header_rowstate_ = 'Planned') THEN
      IF (newrec_.supply_code IN ('IPT','IPD')) THEN
         sourcing_option_db_ := Sourcing_Option_API.Encode(Sales_Part_API.Get_Sourcing_Option(newrec_.supply_site, newrec_.part_no));
         IF (sourcing_option_db_ = 'DOPORDER') THEN
            supply_site_supply_code_db_ := 'DOP';
         ELSIF (sourcing_option_db_ = 'SHOPORDER') THEN
            supply_site_supply_code_db_ := 'SO';
            -- a sourcing option SHOPORDER part on supply site need to be a manufactured part
            type_code_db_ := Inventory_Part_API.Get_Type_Code_Db(newrec_.supply_site, newrec_.part_no);
            IF (type_code_db_ IN ('1','2')) THEN
               ok_to_run_capability_check_ := 1;
            ELSE
               ok_to_run_capability_check_ := 0;
            END IF;
         END IF;
      END IF;

      headrec_  := Customer_Order_API.Get(newrec_.order_no);
      -- if this is the internal customer order in an IPT/IPD flow get the original order line keys
      $IF (Component_Purch_SYS.INSTALLED)$THEN
         IF (headrec_.internal_po_no IS NOT NULL) THEN
            DECLARE
               poline_ Purchase_Order_Line_API.Public_Rec;
            BEGIN
               poline_ := Purchase_Order_Line_API.Get(headrec_.internal_po_no, newrec_.line_no, newrec_.rel_no);
               IF (poline_.demand_code IN ('ICD', 'ICT')) THEN
                  orig_order_no_     := poline_.demand_order_no;
                  orig_line_no_      := poline_.demand_release;
                  orig_rel_no_       := poline_.demand_sequence_no;
                  orig_line_item_no_ := poline_.demand_operation_no;
               END IF;
            END;
         END IF;
      $END
      -- Note: Dont start auto capability check if the any reservations exists
      IF (newrec_.qty_assigned > 0 OR Co_Supply_Site_Reservation_API.Get_Qty_Reserved(NVL(orig_order_no_,newrec_.order_no),
                                          NVL(orig_line_no_,newrec_.line_no), NVL(orig_rel_no_,newrec_.rel_no),
                                          NVL(orig_line_item_no_,newrec_.line_item_no)) > 0) THEN
         ok_to_run_capability_check_ := 0;
         Client_SYS.Add_Info(lu_name_, 'AUTO_CC_RESERV: Since reservations have been made, the Capability Check cannot start.');
         Trace_SYS.Message('CC>> automatic capability check will not be performed due to existing reservations');
      END IF;
      -- the capability check should not be run if a cto-part have no configuration
      IF (Part_Catalog_API.Get_Configurable_Db(newrec_.part_no) = 'CONFIGURED' AND newrec_.configuration_id = '*') THEN
         ok_to_run_capability_check_ := 0;
      ELSE
         -- do not set this flag to true if its already got a value earlier on (like in the IPT/IPD SHOPORDER case above)
         IF (ok_to_run_capability_check_ IS NULL) THEN
            ok_to_run_capability_check_ := 1;
         END IF;
      END IF;
   END IF;

   Trace_SYS.Field('CC>> ok_to_run_automatic_capability_check_', ok_to_run_capability_check_);

   -- Run the capability check engine
   $IF (Component_Ordstr_SYS.INSTALLED) $THEN
      IF (ok_to_run_capability_check_ = 1) THEN
         supply_site_dist_calendar_ := Site_API.Get_Dist_Calendar_Id(newrec_.supply_site);
         -- the engine needs the previous work day for planned due date
         IF (newrec_.supply_site_due_date IS NULL) THEN
            Trace_SYS.Field('CC>> original planned_due_date  ', newrec_.planned_due_date);
            temp_planned_due_date_ := newrec_.planned_due_date;
            Trace_SYS.Field('CC>> planned_due_date sent to the CC engine ', temp_planned_due_date_);
         ELSE
            Trace_SYS.Field('CC>> original supply_site_due_date_  ', newrec_.supply_site_due_date);
            temp_planned_due_date_ := newrec_.supply_site_due_date;
            Trace_SYS.Field('CC>> supply_site_due_date_ sent to the CC engine ', temp_planned_due_date_);
         END IF;
         App_Context_SYS.Set_Value('OLD_REQUIRED_DATE', temp_planned_due_date_);
         old_delivery_date_ := newrec_.planned_delivery_date;
         interim_id_ := Get_Interim_Order_No(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, newrec_.ctp_planned);
         customer_name_ := Cust_Ord_Customer_API.Get_Name(newrec_.customer_no);

         IF (newrec_.supply_site IS NOT NULL) THEN
            -- convert the qty from demand site inv uom to supply site inv oum
            conv_revised_qty_due_ := Inventory_Part_API.Get_Site_Converted_Qty(newrec_.contract, newrec_.part_no, newrec_.revised_qty_due, newrec_.supply_site, 'ADD');
         ELSE
            conv_revised_qty_due_ := newrec_.revised_qty_due;
         END IF;

         Interim_Ctp_Manager_API.Calculate_Ctp(cc_reset_flag_,
                                               completion_date_,
                                               latest_release_date_,
                                               error_msg_,
                                               info_msg_,                                               
                                               interim_id_,
                                               NVL(newrec_.supply_site,newrec_.contract),
                                               newrec_.part_no,
                                               newrec_.configuration_id,
                                               temp_planned_due_date_,
                                               conv_revised_qty_due_,
                                               int_demand_usage_type_,
                                               newrec_.order_no,
                                               newrec_.line_no,
                                               newrec_.rel_no,
                                               newrec_.line_item_no,
                                               newrec_.customer_no,
                                               customer_name_,
                                               automatic_capability_check_,
                                               NVL(supply_site_supply_code_db_, newrec_.supply_code),
                                               is_auto_cc_ => TRUE,
                                               planned_delivery_date_ => newrec_.planned_delivery_date);

         Trace_SYS.Field('CC>> completion_date_ (planned_due_date/supply_site_due_date received from CC engine)', completion_date_);


         IF (error_msg_ IS NULL) THEN
            -- we use the next work day from the completion_date/planned_due_date that engine have returned to us
            IF (newrec_.supply_site_due_date IS NULL) THEN -- this was a capability check performed on demand site
               -- getting next work day for DOP/SO planned_due_date will be done in method Calc_Order_Dates_Forwards later on
               temp_planned_due_date_ := completion_date_;
            ELSE -- this was a capability check performed on supply site
               newrec_.supply_site_due_date := Work_Time_Calendar_API.Get_Next_Work_Day(supply_site_dist_calendar_, completion_date_);
               Trace_SYS.Field('CC>> supply_site_due_date including next work day ', newrec_.supply_site_due_date);

               IF (completion_date_ != temp_planned_due_date_) THEN
                  -- fetching some default leadtimes values that we can use in the planned_due_date calculation
                  Cust_Order_Leadtime_Util_API.Get_Default_Leadtimes(delivery_leadtime_, vendor_delivery_leadtime_, internal_delivery_leadtime_,
                                                                     picking_leadtime_, internal_control_time_, vendor_manuf_leadtime_,
                                                                     vendor_leadtime_, expected_leadtime_, transport_leadtime_, arrival_route_id_,
                                                                     newrec_.contract, newrec_.deliver_to_customer_no, newrec_.ship_addr_no, newrec_.addr_flag,
                                                                     newrec_.part_no, newrec_.purchase_part_no, newrec_.supply_code, newrec_.vendor_no,
                                                                     newrec_.ship_via_code, newrec_.supplier_ship_via_transit);

                  -- count forwards from supply_site_due_date to planned_due_date
                  Cust_Ord_Date_Calculation_API.Calc_Due_Date_Forwards(temp_planned_due_date_, newrec_.supply_site_due_date,
                                                                    newrec_.contract, internal_control_time_, vendor_delivery_leadtime_,
                                                                    internal_delivery_leadtime_, vendor_manuf_leadtime_, vendor_leadtime_,
                                                                    expected_leadtime_, newrec_.supply_code, newrec_.vendor_no, newrec_.supply_site, newrec_.purchase_part_no,
                                                                    newrec_.supplier_ship_via_transit, transport_leadtime_, arrival_route_id_);
               END IF;
               Trace_SYS.Field('CC>> planned_due_date (calculated from supply_site_due_date) ', temp_planned_due_date_);
            END IF;

            newrec_.planned_due_date := temp_planned_due_date_;

            -- calculate planned_delivery_date, planned_ship_date, supply_site_due_date forwards from planned_due_date received from the cc engine
            Calc_Dates_Forwards___(newrec_.planned_delivery_date, newrec_.planned_ship_date, newrec_.planned_due_date,
               newrec_.supply_site_due_date, newrec_.promised_delivery_date, newrec_.planned_ship_period,
               newrec_.target_date, newrec_.contract, newrec_.supply_code, newrec_.deliver_to_customer_no,
               newrec_.vendor_no, newrec_.part_no, newrec_.purchase_part_no, newrec_.ship_addr_no, newrec_.ship_via_code,
            newrec_.route_id, newrec_.delivery_leadtime, newrec_.picking_leadtime, newrec_.ext_transport_calendar_id, newrec_.supplier_ship_via_transit, header_rowstate_);

            -- the capability check engine have returned a date and its one of the allocate/reserve cc alternatives, set the cc planned flag
            IF (latest_release_date_ IS NOT NULL AND automatic_capability_check_ IN ('RESERVE AND ALLOCATE','ALLOCATE ONLY')) THEN
               newrec_.latest_release_date := latest_release_date_;
               newrec_.ctp_planned := 'Y';
            -- for the neither case set the latest_release_date and set flag to false
            ELSIF (latest_release_date_ IS NOT NULL AND automatic_capability_check_ = 'NEITHER RESERVE NOR ALLOCATE') THEN
               newrec_.latest_release_date := latest_release_date_;
               newrec_.ctp_planned := 'N';
            END IF;
            auto_cc_performed_ := TRUE;
            order_info_        := newrec_.order_no||'-'||newrec_.line_no||'-'||newrec_.rel_no||'-'||newrec_.line_item_no;
            IF (App_Context_SYS.Find_Number_Value('CTP_RUN_ID') IS NOT NULL) THEN
               ctp_run_id_ := App_Context_SYS.Get_Number_Value('CTP_RUN_ID');
            END IF;
            IF (old_delivery_date_ != newrec_.planned_delivery_date) THEN
               message_ := SUBSTR(Language_SYS.Translate_Constant(lu_name_, 'DATESCHANGEDBYACC: Aut Capability Check. Planned Del Date changed from :P1 to :P2.',NULL,
                                                to_char(old_delivery_date_, 'YYYY-MM-DD'),
                                                to_char(newrec_.planned_delivery_date, 'YYYY-MM-DD')), 1, 200);
               Interim_Ctp_Critical_Path_API.Update_Is_Deliverable(ctp_run_id_, Fnd_Boolean_API.DB_FALSE);
            ELSE
               Interim_Ctp_Critical_Path_API.Update_Is_Deliverable(ctp_run_id_, Fnd_Boolean_API.DB_TRUE);
            END IF;
            IF (info_msg_ IS NOT NULL) THEN
               Client_SYS.Add_Info(lu_name_, 'CC_INFO: :P1', info_msg_);
            END IF;
         ELSE
            Trace_SYS.Message('Automatic capability check was performed but got the following error >>'|| error_msg_);
            Client_SYS.Add_Info(lu_name_, 'AUTO_CC_ERROR: Automatic Capability Check Error - :P1', error_msg_);
            IF (cc_reset_flag_ = 'Y') THEN  -- clear the cc flag/latest_release_date
               newrec_.latest_release_date   := NULL;
               newrec_.ctp_planned           := 'N';
               newrec_.planned_delivery_date := newrec_.target_date;
               auto_cc_performed_            := TRUE;  -- set this so the line will be modified and dates recalculated
            END IF;
         END IF;
      ELSE
         Trace_SYS.Message('No automatic capability check was performed');
      END IF;
   $ELSE
      Trace_SYS.Message('No automatic capability check was performed');
   $END

   IF (message_ IS NOT NULL) THEN
      Customer_Order_Line_Hist_API.New( newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no, message_);
   END IF;
END Perform_Capability_Check___;


PROCEDURE Validate_Delivery_Conf___ (
   newrec_                        IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   insert_mode_                   IN BOOLEAN,
   catalog_group_                 IN VARCHAR2,
   pkg_catalog_group_             IN VARCHAR2,
   confirm_deliveries_db_         IN VARCHAR2 DEFAULT NULL,
   check_sales_grp_deliv_conf_db_ IN VARCHAR2 DEFAULT NULL,
   triggered_by_header_           IN BOOLEAN DEFAULT FALSE,
   insert_package_mode_           IN VARCHAR2 DEFAULT 'FALSE')
IS
   headrec_        CUSTOMER_ORDER_API.Public_Rec;
   error_          BOOLEAN;
   deliv_conf_     VARCHAR2(20);
   pkg_deliv_conf_ VARCHAR2(20);
BEGIN
   -- if validation is triggered by Order Header... (nothing is saved yet)
   IF triggered_by_header_ THEN
      headrec_.confirm_deliveries         := confirm_deliveries_db_;
      headrec_.check_sales_grp_deliv_conf := check_sales_grp_deliv_conf_db_;
      -- fetch delay COGS from company, just like the header does
      headrec_.delay_cogs_to_deliv_conf   := Company_Order_Info_API.Get_Delay_Cogs_To_Deliv_Con_Db(Site_API.Get_Company(newrec_.contract));
   ELSE
      headrec_ := CUSTOMER_ORDER_API.Get(newrec_.order_no);
   END IF;

   -- CONFIRM DELIVERIES
   IF (headrec_.confirm_deliveries = 'TRUE') THEN
      -- customer consignment stock
      IF (newrec_.consignment_stock = 'CONSIGNMENT STOCK') THEN
         Error_SYS.Record_General(lu_name_, 'CONSIGNMENT_DC: Not possible to have Delivery Confirmation together with Consignment Stock parts.');

      -- non-charged items / repair orders
      ELSIF (newrec_.charged_item = 'ITEM NOT CHARGED') THEN
         Error_SYS.Record_General(lu_name_, 'CHARGEDITEM_DC: Only allowed to have charged items together with Delivery Confirmation.');

      -- exchange order line
      ELSIF (newrec_.exchange_item = 'EXCHANGED ITEM') THEN
         Error_SYS.Record_General(lu_name_, 'EXCHANGEITEM_DC: Exchanged Order Lines can not use Delivery Confirmation.');

      -- ownership: customer owned or supplier loaned
      ELSIF (newrec_.part_ownership IN ('SUPPLIER LOANED', 'CUSTOMER OWNED')) THEN
         IF triggered_by_header_ THEN
            Error_SYS.Record_General(lu_name_, 'OWNERSHIP_DC: Not possible to have order lines with other than Company Owned parts together with Delivery Confirmation.');
         ELSE
            Error_SYS.Record_General(lu_name_, 'OWNERSHIP_DC2: Only Company Owned parts can be used together with Delivery Confirmation.');
         END IF;
      END IF;
   END IF;

   -- CONFIRM DELIVERIES WITH "DELAY COGS" (delay COGS can't be set unless delivery confirmation is true)
   IF (headrec_.delay_cogs_to_deliv_conf = 'TRUE') THEN

      -- direct delivery
      IF (newrec_.supply_code IN ('PD', 'IPD')) THEN
         IF triggered_by_header_ THEN
            Error_SYS.Record_General(lu_name_, 'DIRECTDEL_DC: There are order lines using Direct Delivery. Not allowed when Cost of Goods Sold is delayed to Delivery Confirmation.');
         ELSE
            Error_SYS.Record_General(lu_name_, 'DIRECTDEL_DC2: Not possible to use Direct Delivery when Cost of Goods Sold is delayed to Delivery Confirmation.');
         END IF;

      -- order line is project connected (activity sequence)
      ELSIF (newrec_.activity_seq IS NOT NULL) THEN
         IF triggered_by_header_ THEN
            Error_SYS.Record_General(lu_name_, 'ACTIVITYSEQ_DC: There are Project connected order lines. This is not allowed when Cost of Goods Sold is delayed to Delivery Confirmation.');
         ELSE
            Error_SYS.Record_General(lu_name_, 'ACTIVITYSEQ_DC2: Project connected order lines are not allowed when Cost of Goods Sold is delayed to Delivery Confirmation.');
         END IF;
      -- inventory part cost level
      ELSIF (newrec_.part_no IS NOT NULL) THEN
         IF (Inventory_Part_API.Get_Invent_Part_Cost_Level_Db(newrec_.contract, newrec_.part_no) != 'COST PER PART') THEN
            IF triggered_by_header_ THEN
               Error_SYS.Record_General(lu_name_, 'COSTLEVEL_DC: There are order lines having parts with Inventory Part Cost Level other than :P1. This is not allowed when Cost of Goods Sold is delayed to Delivery Confirmation.', Inventory_Part_Cost_Level_API.Decode('COST PER PART'));
            ELSE
               Error_SYS.Record_General(lu_name_, 'COSTLEVEL_DC2: :P1 is the only Inventory Part Cost Level allowed when Cost of Goods Sold is delayed to Delivery Confirmation.', Inventory_Part_Cost_Level_API.Decode('COST PER PART'));
            END IF;
         END IF;
      END IF;
   END IF;

   -- CHECK SALES GROUP SETTING
   IF (insert_package_mode_ = 'FALSE')AND (headrec_.check_sales_grp_deliv_conf = 'TRUE') THEN

      -- sales part is not updateable - but flag must be checked if triggered from order header
      IF insert_mode_ OR triggered_by_header_ THEN

         deliv_conf_ := Sales_Group_API.Get_Delivery_Confirmation_Db(catalog_group_);
         Trace_SYS.Field('SALES GROUP - delivery_confirmation', deliv_conf_);

         IF (pkg_catalog_group_ IS NOT NULL) THEN -- i.e. a component is being inserted manually
            pkg_deliv_conf_ := Sales_Group_API.Get_Delivery_Confirmation_Db(pkg_catalog_group_);
            Trace_SYS.Field('PKG SALES GROUP - delivery_confirmation', pkg_deliv_conf_);
            -- for components Delivery Confirmation must be the same as their package parts - or Optional
            error_ := (deliv_conf_ NOT IN (pkg_deliv_conf_, 'OPTIONAL'));
         ELSIF (headrec_.confirm_deliveries = 'TRUE') THEN
            -- if Confirm Deliveries is set Delivery Confirmation must be Required or Optional
            error_ := (deliv_conf_ = 'NOTALLOWED');
         ELSE
            -- otherwise Delivery Confirmation must be Not Allowed or Optional
            error_ := (deliv_conf_ = 'REQUIRED');
         END IF;

         IF error_ THEN
            IF triggered_by_header_ THEN
               Error_SYS.Record_General(lu_name_, 'SALESGRPDELIVCONF: There are order lines using sales group :P1 which doesn''t match the settings on Customer Order.', catalog_group_);
            ELSIF (pkg_catalog_group_ IS NOT NULL) THEN -- component part
               Error_SYS.Record_General(lu_name_, 'SALESGRPDELIVCONF4: The delivery confirmation setting on sales group :P1 doesn''t match the setting for the package part''s sales group :P2.', catalog_group_, pkg_catalog_group_);
            ELSE                                        -- package or regular part
               Error_SYS.Record_General(lu_name_, 'SALESGRPDELIVCONF2: The delivery confirmation setting on sales group :P1 doesn''t match the settings for Delivery Confirmation on Customer Order.', catalog_group_);
            END IF;
         END IF;
      END IF;
   END IF;
END Validate_Delivery_Conf___;


PROCEDURE Validate_Block_For_Invoic___ (
   newrec_ IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE )
IS
BEGIN
   IF (newrec_.staged_billing = 'STAGED BILLING') THEN
      Error_SYS.Record_General(lu_name_, 'BLOCKINVOICESTOP2: It is not allowed to Block for Invoicing when the Order line is connected to a Staged Billing Profile');
   END IF;

   IF (newrec_.self_billing = 'SELF BILLING') THEN
      IF (Self_Billing_Item_API.Order_Line_Exist(newrec_.order_no, newrec_.line_no, newrec_.rel_no, newrec_.line_item_no) = 'TRUE') THEN
         Error_SYS.Record_General(lu_name_, 'BLOCKINVOICESTOP3: It is not allowed to Block for Invoicing when the Order line is connected to a Self Billing Invoice');
      END IF;
   END IF;
END Validate_Block_For_Invoic___;


PROCEDURE Log_Price_Changes___ (
   newrec_              IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   headrec_             IN CUSTOMER_ORDER_API.Public_Rec,
   calc_price_per_curr_ IN NUMBER )
IS
   price_diff_          NUMBER;
   curr_rate_           NUMBER;
   calc_price_per_base_ NUMBER;
BEGIN
   IF (calc_price_per_curr_ != 0) THEN
      IF (headrec_.use_price_incl_tax = 'TRUE') THEN
         price_diff_ := ((newrec_.unit_price_incl_tax - calc_price_per_curr_)/calc_price_per_curr_ )*100;
      ELSE
      price_diff_ := ((newrec_.sale_unit_price - calc_price_per_curr_)/calc_price_per_curr_ )*100;
      END IF;

      -- Retrieve the calculated price in base currency
      Customer_Order_Pricing_API.Get_Base_Price_In_Currency (calc_price_per_base_,
                                                             curr_rate_,
                                                             NVL(headrec_.customer_no_pay, headrec_.customer_no),
                                                             headrec_.contract,
                                                             headrec_.currency_code,
                                                             calc_price_per_curr_,
                                                             headrec_.currency_rate_type);
   ELSE
      price_diff_ := NULL;
      calc_price_per_base_ := 0;
   END IF;

   Cust_Order_Event_Creation_API.Cust_Ord_Line_Price_Changed(newrec_.order_no,
                                                             newrec_.line_no,
                                                             newrec_.rel_no,
                                                             newrec_.line_item_no,
                                                             calc_price_per_curr_,
                                                             calc_price_per_base_,
                                                             price_diff_);
   Cust_Ord_Price_Hist_API.New(newrec_.order_no,
                               newrec_.line_no,
                               newrec_.rel_no,
                               newrec_.line_item_no,
                               calc_price_per_curr_,
                               calc_price_per_base_,
                               price_diff_);
END Log_Price_Changes___;


PROCEDURE Validate_Prepayment___ (
   rec_     IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   action_  IN VARCHAR2)
IS
   gross_amount_     NUMBER;
   prepay_amount_    NUMBER;
   line_amount_      NUMBER;
   header_rec_       CUSTOMER_ORDER_API.Public_Rec;
BEGIN
   header_rec_ := Customer_Order_API.Get(rec_.order_no);
   $IF (Component_Payled_SYS.INSTALLED) $THEN
      prepay_amount_ := On_Account_Ledger_Item_API.Get_Payment_Amt_For_Order_Ref(Site_API.Get_Company(rec_.contract),
                                                                                 NVL(header_rec_.customer_no_pay, header_rec_.customer_no),
                                                                                 rec_.order_no);
   $END
   IF NVL(prepay_amount_, 0) > 0 THEN
      gross_amount_  := Customer_Order_API.Get_Gross_Amt_Incl_Charges(rec_.order_no);
      IF action_ = 'MODIFY' THEN
         IF (prepay_amount_ > gross_amount_) THEN
            Raise_Prepay_Amount_Error___;
         END IF;
      ELSIF action_ = 'DELETE' THEN
         -- Modified value assignment to line_amount_.
         IF (header_rec_.use_price_incl_tax = 'TRUE') THEN
            line_amount_   := Get_Sale_Price_Incl_Tax_Total(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no);
         ELSE
            line_amount_   := Get_Sale_Price_Total(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no);
            line_amount_   := line_amount_ + Get_Total_Tax_Amount_Curr(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no);
         END IF;

         IF (prepay_amount_ > (gross_amount_ - line_amount_)) THEN
            Raise_Prepay_Amount_Error___;
         END IF;
      END IF;
  END IF;
END Validate_Prepayment___;


PROCEDURE Handle_Replacement_Part___ (
   catalog_no_     IN OUT NOCOPY VARCHAR2,
   org_catalog_no_ IN OUT NOCOPY VARCHAR2,
   contract_       IN     VARCHAR2,
   by_info_        IN     BOOLEAN )
IS
   sales_part_rec_   Sales_Part_API.Public_Rec;
   base_part_no_     CUSTOMER_ORDER_LINE_TAB.catalog_no%TYPE;
   replace_part_     VARCHAR2(25);
   replace_date_     DATE;
   overload_count_   NUMBER := 0;
   replaced_         BOOLEAN := FALSE;
BEGIN
   sales_part_rec_  := Sales_Part_API.Get(contract_, catalog_no_);
   replace_part_    := sales_part_rec_.replacement_part_no;
   replace_date_    := sales_part_rec_.date_of_replacement;

   -- Check if the specified sales part has been superseded by a replacement part.
   LOOP
      IF (replace_part_ IS NOT NULL) AND (replace_date_ <= (Site_API.Get_Site_Date(contract_))) THEN
         IF (overload_count_ = 10) THEN
            Error_SYS.Record_General(lu_name_, 'REPOVERLOADED: No of Part Replacements are exceeded for the sales part :P1, Please check your sales part replacement data.', base_part_no_);
         ELSE
            IF (overload_count_ = 0) THEN
               base_part_no_ := catalog_no_;
            END IF;
            IF (by_info_) THEN
               Client_SYS.Add_Info(lu_name_, 'REPLACED: The sales part :P1 on the order line has been superseded by replacement part :P2.', catalog_no_, replace_part_);
            END IF;
            org_catalog_no_ := catalog_no_;
            catalog_no_     := replace_part_;
            replaced_       := TRUE;

            sales_part_rec_  := Sales_Part_API.Get(contract_, catalog_no_);
            -- Fetch new replcement part
            replace_part_ := sales_part_rec_.replacement_part_no;
            replace_date_ := sales_part_rec_.date_of_replacement;
         END IF;
      ELSE
          EXIT;
      END IF;
      overload_count_ := overload_count_ + 1;
   END LOOP;

   IF (sales_part_rec_.activeind = 'N' AND by_info_) THEN
      IF replaced_ THEN
         -- Replacement part is not active.
         Client_SYS.Clear_Info;
         Error_SYS.Record_General(lu_name_, 'NOT_ACTIVE2: The sales part :P1 has been superceded by a replacement part (:P2) that is not active for sale.', org_catalog_no_, catalog_no_ );
      ELSE
         Error_SYS.Record_General(lu_name_, 'NOT_ACTIVE: The sales part :P1 is not active for sale', catalog_no_);
      END IF;
   END IF;
END Handle_Replacement_Part___;


FUNCTION Get_Progress_Info___ (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   rowstate_     IN VARCHAR2 ) RETURN NUMBER
IS
   progress_       NUMBER;
BEGIN
   IF (Customer_Order_Milestone_API.Milestone_Exist(order_no_, line_no_, rel_no_, line_item_no_)= 'TRUE') THEN
      progress_ := Customer_Order_Milestone_API.Get_Max_Progress(order_no_, line_no_, rel_no_, line_item_no_);
   ELSIF (rowstate_ IN ('Delivered', 'Invoiced')) THEN
      progress_:= 1;
   ELSIF (rowstate_ = 'PartiallyDelivered') THEN
      progress_:= 0.75;
   ELSIF (rowstate_ = 'Picked') THEN
      progress_:= 0.50;
   ELSIF (rowstate_ =  'Reserved') THEN
      progress_:= 0.30;
   ELSIF (rowstate_ IN ('Cancelled', 'Released')) THEN
      progress_:= 0;
   END IF;
   RETURN progress_;
END Get_Progress_Info___;


FUNCTION Is_Number___ (
   string_   IN VARCHAR2 ) RETURN BOOLEAN
IS
   c_    NUMBER;
BEGIN
   FOR i_ IN 1..LENGTH( string_ ) LOOP
      c_ := ASCII( SUBSTR( string_, i_, 1 ) );
      IF ( c_ < ASCII( '0' ) OR c_ > ASCII( '9' ) ) THEN
         RETURN FALSE;
      END IF;
   END LOOP;
   RETURN TRUE;
END Is_Number___;


PROCEDURE Generate_Next_Level_Demands___ (
   header_rowstate_  IN VARCHAR2,
   newrec_           IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE )
IS
   planning_method_   VARCHAR2(1);
BEGIN
   IF (header_rowstate_ != 'Planned') THEN
        -- Check if MRP order code is 'N', if so generate next level demands
        -- The reason this is done even if the order is credit blocked is that there is no way
        -- of knowing whether demands have already been generated or not for a released order.
        -- IF the demands were generated when the credit blocked order is released then there is
        -- a risk that they would be generated more than once for the same order.

        IF (newrec_.supply_code = 'IO') THEN
           planning_method_ := Inventory_Part_Planning_API.Get_Planning_Method(newrec_.contract, newrec_.part_no);
           IF ((planning_method_ = 'N') AND (newrec_.part_ownership = Part_Ownership_API.DB_COMPANY_OWNED)) THEN
              -- 109943, Removed passing of planned quantiry on hand. Also passed newrec_.condition_code.
              Order_Supply_Demand_API.Generate_Next_Level_Demands (qty_ordered_      => newrec_.revised_qty_due,
                                                                   date_required_    => newrec_.planned_due_date,
                                                                   contract_         => newrec_.contract,
                                                                   part_no_          => newrec_.part_no,
                                                                   configuration_id_ =>  '*',
                                                                   condition_code_   => newrec_.condition_code);
           END IF;
        END IF;
     END IF;
END Generate_Next_Level_Demands___;


FUNCTION Get_Elements_From_Purch___ (
   contract_     IN VARCHAR2,
   part_no_      IN VARCHAR2,
   vendor_no_    IN VARCHAR2,
   quantity_     IN NUMBER,
   project_id_   IN VARCHAR2,
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN Mpccom_Accounting_API.Project_Cost_Element_Tab
IS
   planned_cost_elements_   Mpccom_Accounting_API.Project_Cost_Element_Tab;
BEGIN
   $IF (Component_Purch_SYS.INSTALLED)$THEN
      DECLARE
         planned_cost_elements_      Mpccom_Accounting_API.Project_Cost_Element_Tab;
         empty_tab_                  Mpccom_Accounting_API.Project_Cost_Element_Tab;
      BEGIN
         planned_cost_elements_ := Purchase_Part_Supplier_API.Get_Project_Cost_Elements(
                                                              contract_                     => contract_,
                                                              part_no_                      => part_no_,
                                                              vendor_no_                    => vendor_no_,
                                                              required_qty_                 => quantity_,
                                                              project_id_                   => project_id_,
                                                              stat_grp_                     => NULL,
                                                              assortment_                   => NULL,
                                                              expected_supplier_price_unit_ => NULL,
                                                              currency_code_                => NULL,
                                                              source_ref_type_db_           => 'CUST ORDER',
                                                              source_ref1_                  => order_no_,
                                                              source_ref2_                  => line_no_,
                                                              source_ref3_                  => rel_no_,
                                                              source_ref4_                  => line_item_no_ );

         Invent_Proj_Cost_Manager_API.Fill_Project_Cost_Element_Tmp(planned_cost_elements_,
                                                                    empty_tab_,
                                                                    empty_tab_,
                                                                    empty_tab_);

      END;

      planned_cost_elements_ := Invent_Proj_Cost_Manager_API.Get_From_Temporary_Table();
   $END

   RETURN planned_cost_elements_;
END Get_Elements_From_Purch___;


FUNCTION Get_Elements_From_Purch___ (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   contract_     IN VARCHAR2,
   part_no_      IN VARCHAR2,
   vendor_no_    IN VARCHAR2,
   quantity_     IN NUMBER,
   project_id_   IN VARCHAR2,
   charged_item_ IN VARCHAR2 ) RETURN Mpccom_Accounting_API.Project_Cost_Element_Tab
IS
   planned_cost_elements_      Mpccom_Accounting_API.Project_Cost_Element_Tab;
   sales_oh_cost_elements_     Mpccom_Accounting_API.Project_Cost_Element_Tab;
   project_cost_element_tab_   Mpccom_Accounting_API.Project_Cost_Element_Tab;
BEGIN
   project_cost_element_tab_ := Get_Elements_From_Purch___(contract_,
                                                           part_no_,
                                                           vendor_no_,
                                                           quantity_,
                                                           project_id_,
                                                           order_no_,
                                                           line_no_,
                                                           rel_no_,
                                                           line_item_no_);

   IF (charged_item_ = 'CHARGED ITEM') THEN
      sales_oh_cost_elements_   := Invent_Proj_Cost_Manager_API.Get_Elements_For_Sales_Oh(contract_,
                                                                                          part_no_,
                                                                                          order_no_,
                                                                                          line_no_,
                                                                                          rel_no_,
                                                                                          line_item_no_,
                                                                                          quantity_ );
   END IF;
   planned_cost_elements_    := Mpccom_Accounting_API.Get_Merged_Cost_Element_Tab(project_cost_element_tab_,
                                                                                  sales_oh_cost_elements_);
   RETURN planned_cost_elements_;
END Get_Elements_From_Purch___;


FUNCTION Get_Activity_Planned_Cost___ (
   rec_              IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   inventory_part_   IN BOOLEAN ) RETURN Mpccom_Accounting_API.Project_Cost_Element_Tab
IS
   planned_cost_elements_      Mpccom_Accounting_API.Project_Cost_Element_Tab;
BEGIN
   CASE rec_.supply_code
      WHEN 'IO' THEN
         -- Invent Order
         planned_cost_elements_ := Get_Elements_From_Invent___(rec_.order_no,
                                                               rec_.line_no,
                                                               rec_.rel_no,
                                                               rec_.line_item_no,
                                                               rec_.contract,
                                                               rec_.part_no,
                                                               rec_.condition_code,
                                                               rec_.buy_qty_due,
                                                               rec_.charged_item );
      WHEN 'PD' THEN
         -- Purch Order Direct
         IF inventory_part_ THEN
            planned_cost_elements_ := Get_Elements_From_Purch___(rec_.order_no,
                                                                 rec_.line_no,
                                                                 rec_.rel_no,
                                                                 rec_.line_item_no,
                                                                 rec_.contract,
                                                                 rec_.part_no,
                                                                 rec_.vendor_no,
                                                                 rec_.buy_qty_due,
                                                                 rec_.project_id,
                                                                 rec_.charged_item );
         ELSE
            planned_cost_elements_ := Get_Elements_From_Purch___(rec_.contract,
                                                                 rec_.purchase_part_no,
                                                                 rec_.vendor_no,
                                                                 rec_.buy_qty_due,
                                                                 rec_.project_id,
                                                                 rec_.order_no,
                                                                 rec_.line_no,
                                                                 rec_.rel_no,
                                                                 rec_.line_item_no);
         END IF;
      WHEN 'NO' THEN
         -- Non-Inventory
         planned_cost_elements_ := Get_Elements_Non_Inv___(rec_, rec_.buy_qty_due);
      WHEN 'IPD' THEN
         -- Int Purch Dir
         IF inventory_part_ THEN
            IF (Site_API.Get_Company(rec_.contract) = Site_API.Get_Company(rec_.supply_site)) THEN
               planned_cost_elements_ := Get_Elements_From_Invent___(rec_.order_no,
                                                                     rec_.line_no,
                                                                     rec_.rel_no,
                                                                     rec_.line_item_no,
                                                                     rec_.contract,
                                                                     rec_.part_no,
                                                                     rec_.condition_code,
                                                                     rec_.buy_qty_due,
                                                                     rec_.charged_item );
            ELSE
               planned_cost_elements_ := Get_Elements_From_Purch___(rec_.order_no,
                                                                    rec_.line_no,
                                                                    rec_.rel_no,
                                                                    rec_.line_item_no,
                                                                    rec_.contract,
                                                                    rec_.part_no,
                                                                    rec_.vendor_no,
                                                                    rec_.buy_qty_due,
                                                                    rec_.project_id,
                                                                    rec_.charged_item );
            END IF;
         ELSE
            planned_cost_elements_ := Get_Elements_From_Purch___(rec_.contract,
                                                                 rec_.purchase_part_no,
                                                                 rec_.vendor_no,
                                                                 rec_.buy_qty_due,
                                                                 rec_.project_id,
                                                                 rec_.order_no,
                                                                 rec_.line_no,
                                                                 rec_.rel_no,
                                                                 rec_.line_item_no);
         END IF;
      WHEN 'PI' THEN
         -- Project Inventory
         planned_cost_elements_ := Get_Elements_Project_Inv___(rec_, rec_.buy_qty_due);

      WHEN 'PJD' THEN
         -- Project Deliverables
         IF (rec_.charged_item = 'CHARGED ITEM') THEN
            planned_cost_elements_ := Invent_Proj_Cost_Manager_API.Get_Elements_For_Sales_Oh(rec_.contract,
                                                                                             rec_.part_no,
                                                                                             rec_.order_no,
                                                                                             rec_.line_no,
                                                                                             rec_.rel_no,
                                                                                             rec_.line_item_no,
                                                                                             rec_.buy_qty_due );
         END IF;
      WHEN 'PT' THEN
         -- Purch Order Trans
         IF inventory_part_ THEN
            planned_cost_elements_ := Get_Elements_From_Purch___(rec_.order_no,
                                                                 rec_.line_no,
                                                                 rec_.rel_no,
                                                                 rec_.line_item_no,
                                                                 rec_.contract,
                                                                 rec_.part_no,
                                                                 rec_.vendor_no,
                                                                 rec_.buy_qty_due,
                                                                 rec_.project_id,
                                                                 rec_.charged_item );
         ELSE
            planned_cost_elements_ := Get_Elements_From_Purch___(rec_.contract,
                                                                 rec_.purchase_part_no,
                                                                 rec_.vendor_no,
                                                                 rec_.buy_qty_due,
                                                                 rec_.project_id,
                                                                 rec_.order_no,
                                                                 rec_.line_no,
                                                                 rec_.rel_no,
                                                                 rec_.line_item_no);
         END IF;
      WHEN 'IPT' THEN
         -- Int Purch Trans
         IF inventory_part_ THEN
            IF (Site_API.Get_Company(rec_.contract) = Site_API.Get_Company(rec_.supply_site)) THEN
               planned_cost_elements_ := Get_Elements_From_Invent___(rec_.order_no,
                                                                     rec_.line_no,
                                                                     rec_.rel_no,
                                                                     rec_.line_item_no,
                                                                     rec_.contract,
                                                                     rec_.part_no,
                                                                     rec_.condition_code,
                                                                     rec_.buy_qty_due,
                                                                     rec_.charged_item );
            ELSE
               planned_cost_elements_ := Get_Elements_From_Purch___(rec_.order_no,
                                                                    rec_.line_no,
                                                                    rec_.rel_no,
                                                                    rec_.line_item_no,
                                                                    rec_.contract,
                                                                    rec_.part_no,
                                                                    rec_.vendor_no,
                                                                    rec_.buy_qty_due,
                                                                    rec_.project_id,
                                                                    rec_.charged_item );
            END IF;
         ELSE
            planned_cost_elements_ := Get_Elements_From_Purch___(rec_.contract,
                                                                 rec_.purchase_part_no,
                                                                 rec_.vendor_no,
                                                                 rec_.buy_qty_due,
                                                                 rec_.project_id,
                                                                 rec_.order_no,
                                                                 rec_.line_no,
                                                                 rec_.rel_no,
                                                                 rec_.line_item_no);
         END IF;
      WHEN 'ND' THEN
         IF inventory_part_ THEN
            planned_cost_elements_ := Get_Elements_From_Invent___(rec_.order_no,
                                                                  rec_.line_no,
                                                                  rec_.rel_no,
                                                                  rec_.line_item_no,
                                                                  rec_.contract,
                                                                  rec_.part_no,
                                                                  rec_.condition_code,
                                                                  rec_.buy_qty_due,
                                                                  rec_.charged_item );
         ELSE
            planned_cost_elements_ := Get_Elements_Non_Inv___(rec_, rec_.buy_qty_due);
         END IF;
      WHEN 'SO' THEN
         planned_cost_elements_ := Get_Elements_From_Manuf_Ord___(rec_, 'COLSO', rec_.buy_qty_due);
      WHEN 'DOP' THEN
         planned_cost_elements_ := Get_Elements_From_Manuf_Ord___(rec_, 'DOP', rec_.buy_qty_due);
      ELSE
         NULL;
   END CASE;

   RETURN planned_cost_elements_;
END Get_Activity_Planned_Cost___;


FUNCTION Get_Elements_From_Invent___ (
   order_no_         IN VARCHAR2,
   line_no_          IN VARCHAR2,
   rel_no_           IN VARCHAR2,
   line_item_no_     IN NUMBER,
   contract_         IN VARCHAR2,
   part_no_          IN VARCHAR2,
   condition_code_   IN VARCHAR2,
   quantity_         IN VARCHAR2,
   charged_item_     IN VARCHAR2 ) RETURN Mpccom_Accounting_API.Project_Cost_Element_Tab
IS
   planned_cost_elements_      Mpccom_Accounting_API.Project_Cost_Element_Tab;
   sales_oh_cost_elements_     Mpccom_Accounting_API.Project_Cost_Element_Tab;
   project_cost_element_tab_   Mpccom_Accounting_API.Project_Cost_Element_Tab;
BEGIN
   project_cost_element_tab_ := Invent_Proj_Cost_Manager_API.Get_Project_Cost_Elements(contract_,
                                                                                       part_no_,
                                                                                       'CUST ORDER',
                                                                                       order_no_,
                                                                                       line_no_,
                                                                                       rel_no_,
                                                                                       line_item_no_,
                                                                                       quantity_,
                                                                                       condition_code_,
                                                                                       TRUE );
   IF (charged_item_ = 'CHARGED ITEM') THEN
      sales_oh_cost_elements_  :=  Invent_Proj_Cost_Manager_API.Get_Elements_For_Sales_Oh(contract_,
                                                                                          part_no_,
                                                                                          order_no_,
                                                                                          line_no_,
                                                                                          rel_no_,
                                                                                          line_item_no_,
                                                                                          quantity_ );
   END IF;
   planned_cost_elements_ := Mpccom_Accounting_API.Get_Merged_Cost_Element_Tab(project_cost_element_tab_,
                                                                               sales_oh_cost_elements_);
   RETURN planned_cost_elements_;
END Get_Elements_From_Invent___;


FUNCTION Get_Elements_Non_Inv___ (
   rec_             IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   quantity_        IN NUMBER ) RETURN Mpccom_Accounting_API.Project_Cost_Element_Tab
IS
   project_cost_elements_      Mpccom_Accounting_API.Project_Cost_Element_Tab;
   sales_part_cost_            NUMBER:=0;
BEGIN
   sales_part_cost_ := Sales_Part_API.Get_Cost(rec_.contract, rec_.catalog_no);

   IF ((quantity_ > 0) AND (NVL(sales_part_cost_, 0) != 0)) THEN

      project_cost_elements_(1).project_cost_element := Mpccom_Accounting_API.Get_Project_Cost_Element (
                                                                                 part_no_            => rec_.catalog_no,
                                                                                 contract_           => rec_.contract,
                                                                                 source_ref_type_db_ => 'CUST ORDER',
                                                                                 source_ref1_        => rec_.order_no,
                                                                                 source_ref2_        => rec_.line_no,
                                                                                 source_ref3_        => rec_.rel_no,
                                                                                 source_ref4_        => rec_.line_item_no,
                                                                                 part_related_       => FALSE);

      project_cost_elements_(1).amount := sales_part_cost_ * quantity_;

   END IF;

   RETURN project_cost_elements_;
END Get_Elements_Non_Inv___;


FUNCTION Get_Elements_Project_Inv___ (
   rec_             IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   quantity_        IN NUMBER ) RETURN Mpccom_Accounting_API.Project_Cost_Element_Tab
IS
   project_cost_elements_          Mpccom_Accounting_API.Project_Cost_Element_Tab;
   merged_project_cost_elements_   Mpccom_Accounting_API.Project_Cost_Element_Tab;
   sales_oh_cost_elements_         Mpccom_Accounting_API.Project_Cost_Element_Tab;
   stmt_                           VARCHAR2(2000);
   type_code_db_                   VARCHAR2(2);
   primary_vendor_no_              CUSTOMER_ORDER_LINE_TAB.vendor_no%TYPE;
BEGIN
   type_code_db_ := Inventory_Part_API.Get_Type_Code_Db(rec_.contract, rec_.part_no);

   IF (type_code_db_ IN ('3','4','6')) THEN

      stmt_ :=
      'BEGIN
         :primary_vendor_no_ := Purchase_Part_Supplier_API.Get_Primary_Supplier_No(:contract, :catalog_no);
      END;' ;
      --@ApproveDynamicStatement(2009-08-25,RoJalk)
      EXECUTE IMMEDIATE stmt_ USING OUT primary_vendor_no_,
                                    IN  rec_.contract,
                                    IN  rec_.part_no;

      project_cost_elements_ := Get_Elements_From_Purch___(rec_.contract,
                                                           rec_.part_no,
                                                           primary_vendor_no_,
                                                           quantity_,
                                                           rec_.project_id,
                                                           rec_.order_no,
                                                           rec_.line_no,
                                                           rec_.rel_no,
                                                           rec_.line_item_no);
   ELSE
      $IF (Component_Cost_SYS.INSTALLED)$THEN
         DECLARE
            project_cost_elements_tab_      Mpccom_Accounting_API.Project_Cost_Element_Tab;
            empty_tab_                      Mpccom_Accounting_API.Project_Cost_Element_Tab;
         BEGIN
            project_cost_elements_tab_   := Part_Cost_Bucket_One_API.Get_Project_Cost_Elements(
                                                       contract_           => rec_.contract,
                                                       part_no_            => rec_.part_no,
                                                       source_ref_type_db_ => 'CUST ORDER',
                                                       source_ref1_        => rec_.order_no,
                                                       source_ref2_        => rec_.line_no,
                                                       source_ref3_        => rec_.rel_no,
                                                       source_ref4_        => rec_.line_item_no,
                                                       required_qty_       => quantity_,
                                                       supply_option_      => 'PMRP',
                                                       activity_seq_       => rec_.activity_seq);

            Invent_Proj_Cost_Manager_API.Fill_Project_Cost_Element_Tmp(project_cost_elements_tab_,
                                                                       empty_tab_,
                                                                       empty_tab_,
                                                                       empty_tab_);
         END;

         project_cost_elements_ := Invent_Proj_Cost_Manager_API.Get_From_Temporary_Table();
      $ELSE
         NULL;
      $END
   END IF;

   IF (rec_.charged_item = 'CHARGED ITEM') THEN
      sales_oh_cost_elements_       :=  Invent_Proj_Cost_Manager_API.Get_Elements_For_Sales_Oh(rec_.contract,
                                                                                               rec_.part_no,
                                                                                               rec_.order_no,
                                                                                               rec_.line_no,
                                                                                               rec_.rel_no,
                                                                                               rec_.line_item_no,
                                                                                               quantity_ );
   END IF;


   merged_project_cost_elements_ := Mpccom_Accounting_API.Get_Merged_Cost_Element_Tab(project_cost_elements_,
                                                                                      sales_oh_cost_elements_);

   RETURN merged_project_cost_elements_;
END Get_Elements_Project_Inv___;


FUNCTION Diff_Proj_Exist___ (
   order_no_     IN VARCHAR2,
   project_id_   IN VARCHAR2 ) RETURN BOOLEAN
IS
   dummy_        NUMBER;
   CURSOR get_diff_proj IS
      SELECT 1
      FROM  CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = order_no_
      AND   project_id != project_id_
      AND   project_id IS NOT NULL;
BEGIN
   OPEN get_diff_proj;
   FETCH get_diff_proj INTO dummy_;
   IF (get_diff_proj%FOUND) THEN
      CLOSE get_diff_proj;
      RETURN TRUE;
   END IF;
   CLOSE get_diff_proj;

   RETURN FALSE;
END Diff_Proj_Exist___;


FUNCTION Project_Connection_Exist___ (
   order_no_       IN VARCHAR2,
   line_no_        IN VARCHAR2,
   rel_no_         IN VARCHAR2,
   line_item_no_   IN NUMBER,
   activity_seq_   IN NUMBER,
   proj_lu_name_   IN VARCHAR2 ) RETURN VARCHAR2
IS
   exist_connection_   VARCHAR2(5) := 'FALSE';
BEGIN
   $IF (Component_Proj_SYS.INSTALLED)$THEN
      exist_connection_ := Project_Connection_Util_API.Exist_Project_Connection(activity_seq_,
                                                                                order_no_,
                                                                                line_no_,
                                                                                rel_no_,
                                                                                line_item_no_,
                                                                                NULL,
                                                                                NULL,
                                                                                proj_lu_name_);
   $END

   RETURN exist_connection_;
END Project_Connection_Exist___;


PROCEDURE Remove_Project_Connection___ (
   order_no_          IN VARCHAR2,
   line_no_           IN VARCHAR2,
   rel_no_            IN VARCHAR2,
   line_item_no_      IN NUMBER,
   old_activity_seq_  IN NUMBER )
IS
   rec_   CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   exist_component_lines_        NUMBER := 0;
  
   CURSOR exist_component_lines IS
     SELECT  1
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  rowstate     != 'Cancelled'
      AND    line_item_no != line_item_no_
      AND    line_item_no > 0
      AND    rel_no       = rel_no_
      AND    line_no      = line_no_
      AND    order_no     = order_no_;
BEGIN
   IF line_item_no_ > 0 THEN
      OPEN exist_component_lines;
      FETCH exist_component_lines INTO exist_component_lines_;
      CLOSE exist_component_lines;
   END IF;
   IF exist_component_lines_ = 0 THEN
      rec_ := Get_Object_By_Keys___(order_no_, line_no_, rel_no_, line_item_no_);
     
      Pre_Accounting_API.Remove_Proj_Pre_Posting(rec_.pre_accounting_id,
                                                 rec_.contract,
                                                 'M104',
                                                 TRUE);

   END IF;
   Connect_Customer_Order_API.Remove_Project_Connection(order_no_,
                                                        line_no_,
                                                        rel_no_,
                                                        line_item_no_,
                                                        old_activity_seq_ );
END Remove_Project_Connection___;


PROCEDURE Calculate_Revenue___ (
   order_no_              IN  VARCHAR2,
   line_no_               IN  VARCHAR2,
   rel_no_                IN  VARCHAR2,
   line_item_no_          IN  NUMBER)
IS
   activity_info_tab_         Public_Declarations_API.PROJ_Project_Conn_Cost_Tab;
   activity_revenue_info_tab_ Public_Declarations_API.PROJ_Project_Conn_Revenue_Tab;
   attributes_                Public_Declarations_API.PROJ_Project_Conn_Attr_Type;
BEGIN
   $IF Component_Proj_SYS.INSTALLED $THEN
      Refresh_Project_Connection (activity_info_tab_         => activity_info_tab_,
                                  activity_revenue_info_tab_ => activity_revenue_info_tab_,
                                  attributes_                => attributes_,
                                  activity_seq_              => NULL,
                                  keyref1_                   => order_no_,
                                  keyref2_                   => line_no_,
                                  keyref3_                   => rel_no_,
                                  keyref4_                   => line_item_no_,
                                  keyref5_                   => '*',
                                  keyref6_                   => '*',
                                  refresh_old_data_          => 'FALSE',
                                  proj_lu_name_              => 'COLINEREV');
   $ELSE
       NULL;
   $END
END Calculate_Revenue___;


PROCEDURE Update_Proj_Ms_Forecast___ (
   contract_         IN VARCHAR2,
   part_no_          IN VARCHAR2,
   qty_shipped_      IN NUMBER,
   planned_due_date_ IN DATE,
   activity_seq_     IN NUMBER )
IS
BEGIN
   $IF (Component_Massch_SYS.INSTALLED)$THEN
      IF (NVL(activity_seq_, 0) > 0) THEN
         -- Update PMPS forecast consumption
         Level_1_Forecast_Util_API.Shipment_Update(contract_, part_no_, activity_seq_, qty_shipped_, planned_due_date_, FALSE );
      END IF;
   $ELSE
      NULL;
   $END
END Update_Proj_Ms_Forecast___;


FUNCTION Is_External_Service_Order___ (
   demand_code_       IN VARCHAR2,
   demand_order_ref1_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   external_service_order_   VARCHAR2(5) := 'FALSE';
   order_code_               VARCHAR2(20);
BEGIN
   $IF Component_Purch_SYS.INSTALLED $THEN
      IF ((NVL(demand_code_, Database_SYS.string_null_) = 'PO') AND (demand_order_ref1_ IS NOT NULL)) THEN
         order_code_ := Purchase_Order_API.Get_Order_Code(demand_order_ref1_);
         IF (order_code_ = 6) THEN
            external_service_order_ := 'TRUE';
         END IF;
      END IF;
   $END

   RETURN external_service_order_;
END Is_External_Service_Order___;


PROCEDURE Check_Demand_Code___ (
   demand_code_         IN VARCHAR2,
   confirm_deliveries_  IN VARCHAR2,
   consignment_stock_   IN VARCHAR2 )
IS
BEGIN
   IF (NVL(demand_code_, '*') = Order_Supply_Type_API.DB_COMPONENT_REPAIR_EXCHANGE) THEN
      IF (confirm_deliveries_ = 'TRUE') THEN
         Error_SYS.Record_General(lu_name_, 'NO_PARTEXCH: Delivery confirmation cannot be handled for Part Exchange CRO lines.');
      ELSIF (consignment_stock_ = 'CONSIGNMENT STOCK') THEN
         Error_SYS.Record_General(lu_name_, 'NO_CON_STOCK: Customer Consignment Stock cannot be handled for Part Exchange CRO lines.');
      END IF;
   END IF;
END Check_Demand_Code___;


PROCEDURE Prepare_Rental___ (
   attr_ IN OUT NOCOPY VARCHAR2)
IS
BEGIN
   Client_SYS.Add_To_Attr('PART_OWNERSHIP', Part_Ownership_API.Decode(Part_Ownership_API.DB_COMPANY_RENTAL_ASSET), attr_);

   $IF Component_Rental_SYS.INSTALLED $THEN
      Rental_Object_API.Prepare(attr_,
                                Rental_Type_API.DB_CUSTOMER_ORDER);
   $END
END Prepare_Rental___;


PROCEDURE New_Rental___ (
   attr_   IN VARCHAR2,
   newrec_ IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE)
IS
BEGIN
   $IF Component_Rental_SYS.INSTALLED $THEN
      Rental_Object_API.New(newrec_.order_no,
                            newrec_.line_no,
                            newrec_.rel_no,
                            newrec_.line_item_no,
                            Rental_Type_API.DB_CUSTOMER_ORDER,
                            newrec_.contract,
                            attr_);
   $ELSE
      Error_SYS.Component_Not_Exist('RENTAL');
   $END
END New_Rental___;


PROCEDURE Modify_Rental___ (
   attr_   IN VARCHAR2,
   newrec_ IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE)
IS
BEGIN
   $IF Component_Rental_SYS.INSTALLED $THEN
       Rental_Object_API.Modify(newrec_.order_no,
                                newrec_.line_no,
                                newrec_.rel_no,
                                newrec_.line_item_no,
                                Rental_Type_API.DB_CUSTOMER_ORDER,
                                attr_);
    $ELSE
       Error_SYS.Component_Not_Exist('RENTAL');
    $END
END Modify_Rental___;


PROCEDURE Remove_Rental___ (
   remrec_ IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE)
IS
BEGIN
   $IF Component_Rental_SYS.INSTALLED $THEN
      Rental_Object_API.Remove(remrec_.order_no,
                               remrec_.line_no,
                               remrec_.rel_no,
                               remrec_.line_item_no,
                               Rental_Type_API.DB_CUSTOMER_ORDER);
   $ELSE
      Error_SYS.Component_Not_Exist('RENTAL');
   $END
END Remove_Rental___;


PROCEDURE Add_Rental_Info_To_Attr___ (
   attr_         IN OUT NOCOPY VARCHAR2,
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER )
IS
   order_rec_              Customer_Order_API.Public_Rec;
BEGIN
   $IF (Component_Rental_SYS.INSTALLED) $THEN
      order_rec_ := Customer_Order_API.Get(order_no_);
      Rental_Object_Manager_API.Add_Rental_Info_To_Attr(attr_,
                                                        Rental_Object_API.Get_Rental_No(order_no_,
                                                                                        line_no_,
                                                                                        rel_no_,
                                                                                        line_item_no_,
                                                                                        Rental_Type_API.DB_CUSTOMER_ORDER));
   $ELSE
      Error_SYS.Component_Not_Exist('RENTAL');
   $END
END Add_Rental_Info_To_Attr___;


FUNCTION Get_Latest_Rent_Charge_Days___ (
   attr_    IN VARCHAR2,
   newrec_  IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE) RETURN NUMBER
IS
   rental_chargeable_days_ NUMBER;
BEGIN
   $IF Component_Rental_SYS.INSTALLED $THEN
      rental_chargeable_days_ := Rental_Object_API.Get_Rental_Chargeable_Days(newrec_.order_no,
                                                                              newrec_.line_no,
                                                                              newrec_.rel_no,
                                                                              newrec_.line_item_no,
                                                                              Rental_Type_API.DB_CUSTOMER_ORDER,
                                                                              attr_);
   $END
   RETURN NVL(rental_chargeable_days_, 1);
END Get_Latest_Rent_Charge_Days___;


FUNCTION Get_Rental_Chargeable_Days___ (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN NUMBER
IS
   rental_chargeable_days_ NUMBER;
BEGIN
   $IF Component_Rental_SYS.INSTALLED $THEN
      rental_chargeable_days_ := Rental_Object_API.Get_Rental_Chargeable_Days(order_no_,
                                                                              line_no_,
                                                                              rel_no_,
                                                                              line_item_no_,
                                                                              Rental_Type_API.DB_CUSTOMER_ORDER);
   $END
   RETURN rental_chargeable_days_;
END Get_Rental_Chargeable_Days___;


PROCEDURE Validate_Pack_Instr_Id___ (
   attr_   IN OUT NOCOPY VARCHAR2,
   newrec_ IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   oldrec_ IN     CUSTOMER_ORDER_LINE_TAB%ROWTYPE )
IS
BEGIN
   IF (newrec_.shipment_type IS NULL AND NVL(newrec_.packing_instruction_id, Database_Sys.string_null_) = NVL(oldrec_.packing_instruction_id, Database_Sys.string_null_)
       AND newrec_.packing_instruction_id IS NOT NULL AND newrec_.shipment_connected = 'FALSE') THEN
      newrec_.packing_instruction_id := NULL;
      Client_SYS.Add_To_Attr('PACKING_INSTRUCTION_ID', newrec_.packing_instruction_id, attr_);
   END IF;

   IF (newrec_.shipment_type IS NULL AND newrec_.packing_instruction_id IS NOT NULL AND newrec_.shipment_connected = 'FALSE') THEN
      Error_SYS.Record_General(lu_name_, 'PACKINSTRIDNOTALLOWED: Packing Instruction cannot have a value when shipment type is NULL.');
   END IF;

   IF (newrec_.shipment_connected = 'FALSE' AND newrec_.shipment_type IS NOT NULL) THEN
      IF ((NVL(newrec_.ship_addr_no, Database_Sys.string_null_) != NVL(oldrec_.ship_addr_no, Database_Sys.string_null_)) AND
          NVL(newrec_.packing_instruction_id, Database_Sys.string_null_) = NVL(oldrec_.packing_instruction_id, Database_Sys.string_null_)) THEN
         newrec_.packing_instruction_id := Def_Pack_Instruct_Shipment_API.Get_Packing_Instruction_Id(newrec_.contract, newrec_.catalog_no, newrec_.customer_no, newrec_.ship_addr_no);
         IF (newrec_.packing_instruction_id IS NULL AND oldrec_.packing_instruction_id IS NOT NULL) THEN
            newrec_.packing_instruction_id := oldrec_.packing_instruction_id;
         END IF;
         Client_SYS.Add_To_Attr('PACKING_INSTRUCTION_ID', newrec_.packing_instruction_id, attr_);
      ELSE
         IF ((NVL(newrec_.addr_flag, Database_Sys.string_null_) != NVL(oldrec_.addr_flag, Database_Sys.string_null_)) AND
             (NVL(newrec_.packing_instruction_id, Database_Sys.string_null_) = NVL(oldrec_.packing_instruction_id, Database_Sys.string_null_))) THEN
            IF (newrec_.addr_flag = 'Y' AND oldrec_.addr_flag = 'N') THEN
               newrec_.packing_instruction_id := Def_Pack_Instruct_Shipment_API.Get_Packing_Instruction_Id(newrec_.contract, newrec_.catalog_no, newrec_.customer_no, NULL);
               Client_SYS.Add_To_Attr('PACKING_INSTRUCTION_ID', newrec_.packing_instruction_id, attr_);
            ELSE
               IF (newrec_.addr_flag = 'N' AND oldrec_.addr_flag = 'Y') THEN
                  newrec_.packing_instruction_id := Def_Pack_Instruct_Shipment_API.Get_Packing_Instruction_Id(newrec_.contract, newrec_.catalog_no, newrec_.customer_no, newrec_.ship_addr_no);
                  Client_SYS.Add_To_Attr('PACKING_INSTRUCTION_ID', newrec_.packing_instruction_id, attr_);
               END IF;
            END IF;
         END IF;
      END IF;
   END IF;

   IF (newrec_.shipment_connected = 'FALSE' AND newrec_.shipment_type IS NOT NULL AND oldrec_.shipment_type IS NULL AND
       NVL(newrec_.packing_instruction_id, Database_Sys.string_null_) = NVL(oldrec_.packing_instruction_id, Database_Sys.string_null_)) THEN
      IF (newrec_.addr_flag = 'Y') THEN
         newrec_.packing_instruction_id := Def_Pack_Instruct_Shipment_API.Get_Packing_Instruction_Id(newrec_.contract, newrec_.catalog_no, newrec_.customer_no, NULL);
         Client_SYS.Add_To_Attr('PACKING_INSTRUCTION_ID', newrec_.packing_instruction_id, attr_);
      ELSE
         newrec_.packing_instruction_id := Def_Pack_Instruct_Shipment_API.Get_Packing_Instruction_Id(newrec_.contract, newrec_.catalog_no, newrec_.customer_no, newrec_.ship_addr_no);
         Client_SYS.Add_To_Attr('PACKING_INSTRUCTION_ID', newrec_.packing_instruction_id, attr_);
      END IF;
   END IF;

   IF (NVL(newrec_.packing_instruction_id, Database_Sys.string_null_) != NVL(oldrec_.packing_instruction_id, Database_Sys.string_null_) AND
      (newrec_.packing_instruction_id IS NOT NULL)) THEN
      Part_Handling_Unit_API.Check_Combination(newrec_.catalog_no,
                                               newrec_.sales_unit_meas,
                                               newrec_.packing_instruction_id);
   END IF;
END Validate_Pack_Instr_Id___;


PROCEDURE Close_Financial_Project___ (
   company_ IN VARCHAR2,
   job_id_  IN VARCHAR2 )
IS
BEGIN
   $IF Component_Genled_SYS.INSTALLED $THEN
      Accounting_Project_Util_API.Co_Finally_Invoiced(company_, job_id_);
   $ELSE
      Error_SYS.Component_Not_Exist('GENLED');
   $END
END Close_Financial_Project___;


FUNCTION Get_Elements_From_Manuf_Ord___ (
   rec_              IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   supply_option_    IN VARCHAR2,
   quantity_         IN NUMBER ) RETURN Mpccom_Accounting_API.Project_Cost_Element_Tab
IS
   inv_part_rec_                    Inventory_Part_API.Public_Rec;
   project_cost_elements_tab_       Mpccom_Accounting_API.Project_Cost_Element_Tab;
   empty_tab_                       Mpccom_Accounting_API.Project_Cost_Element_Tab;
   interim_header_id_               VARCHAR2(12);
   project_cost_elements_           Mpccom_Accounting_API.Project_Cost_Element_Tab;
   merged_project_cost_elements_    Mpccom_Accounting_API.Project_Cost_Element_Tab;
   sales_oh_cost_elements_          Mpccom_Accounting_API.Project_Cost_Element_Tab;
   so_order_no_                     customer_order_shop_order_tab.so_order_no%TYPE;
   so_release_no_                   customer_order_shop_order_tab.so_release_no%TYPE;
   so_sequence_no_                  customer_order_shop_order_tab.so_sequence_no%TYPE;
BEGIN
   IF supply_option_ = 'COLSO' THEN
      -- If Shop order is project connected, we can fetch the cost from Shop_Order_Project_Cost_API.Get_Plan_Project_Cost_Elements().
      IF (rec_.demand_order_ref1 IS NULL) THEN

         -- fetch the order ref details if null
         Customer_Order_Shop_Order_API.Get_Shop_Order(so_order_no_,
                                                      so_release_no_,
                                                      so_sequence_no_,
                                                      rec_.order_no,
                                                      rec_.line_no,
                                                      rec_.rel_no,
                                                      rec_.line_item_no);
      ELSE
         so_order_no_    := rec_.demand_order_ref1;
         so_release_no_  := rec_.demand_order_ref2;
         so_sequence_no_ := rec_.demand_order_ref3;   
      END IF;  

      $IF Component_Shpord_SYS.INSTALLED $THEN          
         IF so_order_no_ IS NOT NULL THEN

            project_cost_elements_tab_ :=  Shop_Order_Project_Cost_API.Get_Plan_Project_Cost_Elements(so_order_no_, so_release_no_, so_sequence_no_);
         END IF;
      $ELSE
         NULL;
      $END
   ELSE   
      inv_part_rec_ := Inventory_Part_API.Get(rec_.contract, rec_.part_no);
      IF NOT ((inv_part_rec_.inventory_valuation_method = 'ST') AND
         (inv_part_rec_.inventory_part_cost_level = 'COST PER PART')) THEN      
         $IF Component_Ordstr_SYS.INSTALLED $THEN
            interim_header_id_ := Get_Interim_Order_No(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no, rec_.ctp_planned);   
            IF supply_option_ = 'DOP' AND interim_header_id_ IS NOT NULL THEN
               project_cost_elements_tab_ := Interim_Order_Cost_API.Get_Project_Cost_Elements(interim_header_id_, rec_.buy_qty_due);
            END IF;
         $ELSE
            NULL;
         $END

      END IF;   
   END IF; 

   IF (project_cost_elements_tab_.COUNT > 0) THEN
      Invent_Proj_Cost_Manager_API.Fill_Project_Cost_Element_Tmp(project_cost_elements_tab_,
                                                                 empty_tab_,
                                                                 empty_tab_,
                                                                 empty_tab_);
      project_cost_elements_ := Invent_Proj_Cost_Manager_API.Get_From_Temporary_Table();
   END IF;

   -- if no project cost element found in above calls then try to get cost from PartCostBucketOne
   -- this is potentially slower to execute...
   IF project_cost_elements_.COUNT = 0 THEN
      $IF Component_Cost_SYS.INSTALLED $THEN         
         BEGIN
            project_cost_elements_tab_ := Part_Cost_Bucket_One_API.Get_Project_Cost_Elements(
                                             contract_           => rec_.contract,
                                             part_no_            => rec_.part_no,
                                             source_ref_type_db_ => 'CUST ORDER',
                                             source_ref1_        => rec_.order_no,
                                             source_ref2_        => rec_.line_no,
                                             source_ref3_        => rec_.rel_no,
                                             source_ref4_        => rec_.line_item_no,
                                             required_qty_       => rec_.buy_qty_due,
                                             supply_option_      => supply_option_, -- 'COLSO' or 'DOP'
                                             activity_seq_       => rec_.activity_seq);
            Invent_Proj_Cost_Manager_API.Fill_Project_Cost_Element_Tmp(project_cost_elements_tab_,
                                                                       empty_tab_,
                                                                       empty_tab_,
                                                                       empty_tab_);
         END;
         project_cost_elements_ := Invent_Proj_Cost_Manager_API.Get_From_Temporary_Table();
      $ELSE
         NULL;
      $END
   END IF; 
         
   IF (rec_.charged_item = 'CHARGED ITEM') THEN
      sales_oh_cost_elements_  :=  Invent_Proj_Cost_Manager_API.Get_Elements_For_Sales_Oh(rec_.contract,
                                                                                          rec_.part_no,
                                                                                          rec_.order_no,
                                                                                          rec_.line_no,
                                                                                          rec_.rel_no,
                                                                                          rec_.line_item_no,
                                                                                          rec_.buy_qty_due );
   END IF;

   merged_project_cost_elements_ := Mpccom_Accounting_API.Get_Merged_Cost_Element_Tab(project_cost_elements_,
                                                                                      sales_oh_cost_elements_);
   RETURN merged_project_cost_elements_;
END Get_Elements_From_Manuf_Ord___;


FUNCTION Is_Rental_Dates_Changed___ (
   attr_    IN VARCHAR2,
   newrec_  IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE) RETURN BOOLEAN
IS
   rental_dates_changed_ BOOLEAN := FALSE;
BEGIN
   $IF Component_Rental_SYS.INSTALLED $THEN
      rental_dates_changed_ := Rental_Object_API.Is_Rental_Dates_Changed(newrec_.order_no,
                                                                         newrec_.line_no,
                                                                         newrec_.rel_no,
                                                                         newrec_.line_item_no,
                                                                         Rental_Type_API.DB_CUSTOMER_ORDER,
                                                                         attr_);
   $END
   RETURN rental_dates_changed_;
END Is_Rental_Dates_Changed___;


PROCEDURE Validate_Update_Service_Con___ (
   attr_                IN VARCHAR2,
   demand_code_         IN VARCHAR2 )
IS
   raise_error_          BOOLEAN := FALSE;
   ptr_                  NUMBER;
   name_                 VARCHAR2(30);
   value_                VARCHAR2(4000);
BEGIN
   IF (demand_code_ = 'FSM') THEN
      raise_error_ := TRUE;
   ELSE
      IF (Client_Sys.Item_Exist('BASE_SALE_UNIT_PRICE', attr_) OR Client_Sys.Item_Exist('BASE_UNIT_PRICE_INCL_TAX', attr_) OR
         Client_Sys.Item_Exist('SALE_UNIT_PRICE', attr_) OR Client_Sys.Item_Exist('UNIT_PRICE_INCL_TAX', attr_)) THEN
         -- Price changed are allowed only when tax changes.
         IF (NOT(Client_Sys.Item_Exist('TAX_LIABILITY' , attr_) OR Client_Sys.Item_Exist('TAX_CODE' , attr_))) THEN
            raise_error_ := TRUE;
         END IF;
      END IF;
      IF (NOT raise_error_) THEN
         WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
            IF (NOT (name_ IN ('TAX_CODE', 'BLOCKED_FOR_INVOICING_DB', 'TAX_LIABILITY', 'DEFAULT_ADDR_FLAG_DB', 'TAX_CLASS_ID', 'CUSTOMER_PO_LINE_NO', 'CUSTOMER_PO_REL_NO', 'CUSTOMS_VALUE', 'TAX_CALC_STRUCTURE_ID', 
               'SET_TAX_FROM_ORIGINAL', 'FETCH_TAX_FROM_DEFAULTS', 'MULTIPLE_TAX_LINES', 'DELIVERY_TERMS', 'DEL_TERMS_LOCATION', 'CATALOG_DESC', 'NOTE_TEXT'))) THEN
               IF (name_ NOT IN ('BASE_SALE_UNIT_PRICE', 'BASE_UNIT_PRICE_INCL_TAX', 'SALE_UNIT_PRICE', 'UNIT_PRICE_INCL_TAX')) THEN
                  raise_error_ := TRUE;
                  EXIT;
               END IF;
            END IF;   
         END LOOP;
       END IF;    
   END IF;
   
   IF (raise_error_) THEN
      IF (demand_code_ != 'FSM') THEN
         Raise_No_Update_Error___();
      ELSE   
         Raise_No_Update_Fsm_Error___();
      END IF;
   END IF;
END Validate_Update_Service_Con___;


PROCEDURE Create_Project_Connection___ (
   order_no_                        IN  VARCHAR2,
   line_no_                         IN  VARCHAR2,
   rel_no_                          IN  VARCHAR2,
   line_item_no_                    IN  NUMBER,
   proj_lu_name_                    IN  VARCHAR2,
   system_ctrl_connection_          IN  VARCHAR2,
   activity_info_tab_               IN  Public_Declarations_API.PROJ_Project_Conn_Cost_Tab,
   activity_revenue_info_tab_       IN  Public_Declarations_API.PROJ_Project_Conn_Revenue_Tab,
   attributes_                      IN  Public_Declarations_API.PROJ_Project_Conn_Attr_Type)
IS
   rec_                             customer_order_line_tab%ROWTYPE;
   proj_code_value_                 VARCHAR2(30);
   distr_proj_code_value_           VARCHAR2(30);
   company_                         VARCHAR2(20);
   codeno_b_                        VARCHAR2(40);
   codeno_c_                        VARCHAR2(40);
   codeno_d_                        VARCHAR2(40);
   codeno_e_                        VARCHAR2(40);
   codeno_f_                        VARCHAR2(40);
   codeno_g_                        VARCHAR2(40);
   codeno_h_                        VARCHAR2(40);
   codeno_i_                        VARCHAR2(40);
   codeno_j_                        VARCHAR2(40);
BEGIN
   -- skip the revenue calculation for PKG part component lines
   IF ((proj_lu_name_ = 'COLINEREV') AND (line_item_no_ > 0)) THEN
      RETURN;
   END IF;
   
   rec_ := Get_Object_By_Keys___ (order_no_, line_no_, rel_no_, line_item_no_);
   
   IF (Project_Connection_Exist___ (order_no_, line_no_, rel_no_, line_item_no_, rec_.activity_seq, proj_lu_name_) = 'FALSE') THEN
      company_ := Site_API.Get_Company (rec_.contract);
      Pre_Accounting_API.Get_Project_Code_Value(proj_code_value_, distr_proj_code_value_, company_, rec_.pre_accounting_id);
      IF (proj_code_value_ IS NOT NULL AND proj_code_value_ != rec_.project_id) THEN
         Error_SYS.Record_General(lu_name_, 'PROJECTCODEPARTEXIST: It is not allowed to connect an object with existing preposting on the Project code part ');
      END IF;
      
      $IF Component_Proj_SYS.INSTALLED $THEN
      IF(Transaction_Sys.Is_Session_Deferred AND (Activity_API.Check_Activity_Seq(rec_.activity_seq) = 'FALSE')) THEN
         RETURN;
      END IF;
      
      Project_Connection_Util_API.Create_Connection ( proj_lu_name_              => proj_lu_name_,
                                                      activity_seq_              => rec_.activity_seq,
                                                      system_ctrl_conn_          => system_ctrl_connection_,
                                                      keyref1_                   => rec_.order_no,
                                                      keyref2_                   => rec_.line_no,
                                                      keyref3_                   => rec_.rel_no,
                                                      keyref4_                   => rec_.line_item_no,
                                                      keyref5_                   =>  '*',
                                                      keyref6_                   =>  '*',
                                                      object_description_        => lu_name_,
                                                      activity_info_tab_         => activity_info_tab_,
                                                      activity_revenue_info_tab_ => activity_revenue_info_tab_,
                                                      attributes_                => attributes_);
      
      Project_Pre_Accounting_API.Get_Pre_Accounting3 (codeno_b_,
                                                      codeno_c_,
                                                      codeno_d_,
                                                      codeno_e_,
                                                      codeno_f_,
                                                      codeno_g_,
                                                      codeno_h_,
                                                      codeno_i_,
                                                      codeno_j_,
                                                      rec_.activity_seq);
      $ELSE
      NULL;
      $END         

      Pre_Accounting_API.Set_Pre_Posting(rec_.pre_accounting_id,
                                         rec_.contract,
                                         'M104',
                                         NULL,
                                         codeno_b_,
                                         codeno_c_,
                                         codeno_d_,
                                         codeno_e_,
                                         codeno_f_,
                                         codeno_g_,
                                         codeno_h_,
                                         codeno_i_,
                                         codeno_j_,
                                         rec_.activity_seq,
                                         'TRUE',
                                         'TRUE' );
   
   END IF;
END Create_Project_Connection___;


PROCEDURE Get_Backord_Value_Base_Curr___ (
   net_amount_   OUT VARCHAR2,
   gross_amount_ OUT VARCHAR2,
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER )
IS
   company_               VARCHAR2(20);
   currency_code_         VARCHAR2(3);
   rounding_              NUMBER;
   rental_chargable_days_ NUMBER;
   header_rec_            CUSTOMER_ORDER_API.Public_Rec;
   
   CURSOR get_line_data IS
      SELECT (buy_qty_due + ((qty_shipdiff - qty_shipped) / conv_factor * inverted_conv_factor))  quantity, price_conv_factor, currency_rate,
             sale_unit_price, unit_price_incl_tax, order_discount, additional_discount, rental
      FROM  CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;

   line_discount_         NUMBER;
   rec_line_              get_line_data%ROWTYPE;
   curr_rounding_         NUMBER;
   line_disc_no_tax_      NUMBER;
   total_disc_no_tax_     NUMBER;
   tax_percentage_        NUMBER;
   total_gross_amt_       NUMBER;
BEGIN
   header_rec_ := Customer_Order_API.Get(order_no_);
   company_       := Site_API.Get_Company(header_rec_.contract);
   currency_code_ := Company_Finance_API.Get_Currency_Code(company_);
   rounding_      := Currency_Code_API.Get_Currency_Rounding(company_, currency_code_);

   curr_rounding_ := Currency_Code_API.Get_Currency_Rounding(company_, header_rec_.currency_code);
   OPEN get_line_data;
   FETCH get_line_data INTO rec_line_;
   CLOSE get_line_data;
   rental_chargable_days_ := Get_Rental_Chargeable_Days(order_no_, line_no_, rel_no_, line_item_no_, rec_line_.rental);
   tax_percentage_        := Source_Tax_Item_API.Get_Total_Tax_Percentage(company_, Tax_Source_API.DB_CUSTOMER_ORDER_LINE, 
                                                                          order_no_, line_no_, rel_no_, TO_CHAR(line_item_no_), '*');
   line_discount_         := Cust_Order_Line_Discount_API.Get_Total_Line_Discount(order_no_, line_no_, rel_no_, line_item_no_,
                                                                               rec_line_.quantity, rec_line_.price_conv_factor, curr_rounding_);
   
   IF (header_rec_.use_price_incl_tax  = 'TRUE') THEN   
      line_disc_no_tax_   := Cust_Order_Line_Discount_API.Get_Total_Line_Discount(order_no_, line_no_, rel_no_, line_item_no_,
                                                                               rec_line_.quantity, rec_line_.price_conv_factor,  curr_rounding_, tax_percentage_ => NVL(tax_percentage_, 0));
      total_gross_amt_    := rec_line_.quantity * rec_line_.price_conv_factor * rec_line_.unit_price_incl_tax * rental_chargable_days_;

      total_disc_no_tax_  := line_disc_no_tax_;
      total_disc_no_tax_  := total_disc_no_tax_ + ROUND (ROUND((total_gross_amt_ - line_discount_) * rec_line_.order_discount, curr_rounding_)/(1+ (tax_percentage_/100)) * rec_line_.currency_rate, curr_rounding_); -- Calculating Order discount
      total_disc_no_tax_  := total_disc_no_tax_ + ROUND (ROUND((total_gross_amt_ - line_discount_) * rec_line_.additional_discount, curr_rounding_)/(1+ (tax_percentage_/100)) * rec_line_.currency_rate, curr_rounding_); -- Calculating Additional discount

      net_amount_         := NVL((ROUND( total_gross_amt_ /(1+ (tax_percentage_/100)), curr_rounding_ ) - total_disc_no_tax_), 0);
      gross_amount_       := NVL((ROUND( total_gross_amt_ , curr_rounding_ ) - total_disc_no_tax_), 0);
   ELSE
      net_amount_         := NVL(ROUND(((rec_line_.quantity * rec_line_.price_conv_factor * rec_line_.sale_unit_price * rental_chargable_days_) - line_discount_)
                                 * (1 - (rec_line_.order_discount + rec_line_.additional_discount) / 100) * rec_line_.currency_rate, curr_rounding_), 0);
      gross_amount_       := NVL(ROUND((((rec_line_.quantity * rec_line_.price_conv_factor * rec_line_.sale_unit_price * rental_chargable_days_) - line_discount_) * (1 + (tax_percentage_/100)))
                                 * (1 - (rec_line_.order_discount + rec_line_.additional_discount) / 100) * rec_line_.currency_rate, curr_rounding_), 0);
  
   END IF;
END Get_Backord_Value_Base_Curr___;


PROCEDURE Get_Backlog_Value_Ord_Curr___ (
   net_amount_   OUT NUMBER,
   gross_amount_ OUT NUMBER,
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER )
IS
   rec_                   CUSTOMER_ORDER_API.Public_Rec;
   rounding_              NUMBER;
   rental_chargable_days_ NUMBER;

   CURSOR get_line_data IS
      SELECT (buy_qty_due + (qty_shipdiff / conv_factor * inverted_conv_factor) - qty_invoiced) quantity,
             price_conv_factor, currency_rate, sale_unit_price, unit_price_incl_tax,
             order_discount, additional_discount, rental
      FROM  CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;

   line_discount_         NUMBER;
   rec_line_              get_line_data%ROWTYPE;
   line_disc_no_tax_      NUMBER;
   total_disc_no_tax_     NUMBER;
   tax_percentage_        NUMBER;
   total_gross_amt_       NUMBER;
   company_               VARCHAR2(20);
BEGIN
   rec_      := CUSTOMER_ORDER_API.Get(order_no_);
   company_  := Site_API.Get_Company(rec_.contract);
   rounding_ := Currency_Code_API.Get_Currency_Rounding(company_, rec_.currency_code);
   
   OPEN get_line_data;
   FETCH get_line_data INTO rec_line_;
   CLOSE get_line_data;

   tax_percentage_  := NVL(Source_Tax_Item_API.Get_Total_Tax_Percentage(company_, Tax_Source_API.DB_CUSTOMER_ORDER_LINE, 
                                                                        order_no_, line_no_, rel_no_, TO_CHAR(line_item_no_), '*'), 0);
   line_discount_   := Cust_Order_Line_Discount_API.Get_Total_Line_Discount(order_no_, line_no_, rel_no_, line_item_no_,
                                                                            rec_line_.quantity, rec_line_.price_conv_factor, rounding_);

   rental_chargable_days_ := Get_Rental_Chargeable_Days(order_no_, line_no_, rel_no_, line_item_no_, rec_line_.rental);
   IF (rec_.use_price_incl_tax = 'TRUE') THEN
      line_disc_no_tax_   := Cust_Order_Line_Discount_API.Get_Total_Line_Discount(order_no_, line_no_, rel_no_, line_item_no_,
                                                                               rec_line_.quantity, rec_line_.price_conv_factor,  rounding_, tax_percentage_ => NVL(tax_percentage_, 0));
      total_gross_amt_    := rec_line_.quantity * rec_line_.price_conv_factor * rec_line_.unit_price_incl_tax * rental_chargable_days_;

      total_disc_no_tax_  := line_disc_no_tax_;
      total_disc_no_tax_  := total_disc_no_tax_ + ROUND (ROUND((total_gross_amt_ - line_discount_) * rec_line_.order_discount, rounding_)/(1+ (tax_percentage_/100)), rounding_); -- Calculating Order discount
      total_disc_no_tax_  := total_disc_no_tax_ + ROUND (ROUND((total_gross_amt_ - line_discount_) * rec_line_.additional_discount, rounding_)/(1+ (tax_percentage_/100)), rounding_); -- Calculating Additional discount

      net_amount_ := NVL((ROUND( total_gross_amt_ /(1+ (tax_percentage_/100)), rounding_) - total_disc_no_tax_), 0);
      gross_amount_ := NVL((ROUND( total_gross_amt_ , rounding_) - total_disc_no_tax_), 0);

   ELSE
      net_amount_ := NVL(ROUND(((rec_line_.quantity * rec_line_.price_conv_factor * rec_line_.sale_unit_price * rental_chargable_days_) - line_discount_)
                             * (1 - (rec_line_.order_discount + rec_line_.additional_discount) / 100), rounding_) ,0);
      gross_amount_ := NVL(ROUND((((rec_line_.quantity * rec_line_.price_conv_factor * rec_line_.sale_unit_price * rental_chargable_days_) - line_discount_) * (1 + (tax_percentage_/100)) )
                               * (1 - (rec_line_.order_discount + rec_line_.additional_discount) / 100), rounding_) ,0);
   END IF;
END Get_Backlog_Value_Ord_Curr___;


PROCEDURE Get_Backlog_Value_Base_Curr___ (
   net_amount_   OUT NUMBER,
   gross_amount_ OUT NUMBER,
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER )
IS
   CURSOR get_curr_rate IS
      SELECT currency_rate
      FROM  CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = order_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      AND   line_item_no = line_item_no_;

   curr_rate_     NUMBER;
   base_rounding_ NUMBER;
   company_       VARCHAR2(20);
BEGIN
   company_       := Site_API.Get_Company(CUSTOMER_ORDER_API.Get_Contract(order_no_));
   base_rounding_ := Currency_Code_API.Get_Currency_Rounding(company_, Company_Finance_API.Get_Currency_Code(company_));

   OPEN get_curr_rate;
   FETCH get_curr_rate INTO curr_rate_;
   CLOSE get_curr_rate;
   
   Get_Backlog_Value_Ord_Curr___(net_amount_, gross_amount_, order_no_, line_no_, rel_no_, line_item_no_);
   net_amount_ := ROUND( net_amount_*curr_rate_, base_rounding_);
   gross_amount_ := ROUND( gross_amount_*curr_rate_, base_rounding_);
END Get_Backlog_Value_Base_Curr___;


FUNCTION Check_Default_Addr_Flag___(
   line_rec_          IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   order_no_          IN VARCHAR2,
   default_addr_flag_ IN VARCHAR2,
   duplicate_line_    IN BOOLEAN DEFAULT FALSE ) RETURN VARCHAR2
IS
   head_rec_               Customer_Order_API.public_rec;
   head_addr_rec_          Customer_Order_Address_API.Cust_Ord_Addr_Rec;
   line_addr_rec_          Cust_Order_Line_Address_API.Co_Line_Addr_rec;
   string_null_            VARCHAR2(15) := Database_SYS.string_null_;
   line_default_addr_flag_ VARCHAR2(1);
BEGIN
   line_default_addr_flag_ := default_addr_flag_;
   head_rec_               := Customer_Order_API.Get(order_no_);
   
   IF (default_addr_flag_ = 'N') AND (line_rec_.vendor_no = head_rec_.vendor_no ) THEN
      line_default_addr_flag_ := 'Y';
   END IF;
   
   IF (Validate_SYS.Is_Equal(head_rec_.route_id, line_rec_.route_id) AND
       Validate_SYS.Is_Equal(head_rec_.forward_agent_id, line_rec_.forward_agent_id) AND
       Validate_SYS.Is_Equal(head_rec_.ship_via_code, line_rec_.ship_via_code) AND
       Validate_SYS.Is_Equal(head_rec_.delivery_terms, line_rec_.delivery_terms) AND
       Validate_SYS.Is_Equal(head_rec_.del_terms_location, line_rec_.del_terms_location) AND
       Validate_SYS.Is_Equal(head_rec_.delivery_leadtime, line_rec_.delivery_leadtime) AND
       Validate_SYS.Is_Equal(head_rec_.picking_leadtime, line_rec_.picking_leadtime) AND          
       Validate_SYS.Is_Equal(head_rec_.shipment_type, line_rec_.shipment_type) AND
       Validate_SYS.Is_Equal(head_rec_.ext_transport_calendar_id, line_rec_.ext_transport_calendar_id) AND
       Validate_SYS.Is_Equal(head_rec_.cust_calendar_id, line_rec_.cust_calendar_id) AND
       Validate_SYS.Is_Equal(head_rec_.district_code, line_rec_.district_code) AND
       Validate_SYS.Is_Equal(head_rec_.region_code, line_rec_.region_code) AND
       Validate_SYS.Is_Equal(head_rec_.shipment_creation, line_rec_.shipment_creation) AND
       Validate_SYS.Is_Equal(head_rec_.cust_ref, line_rec_.contact) AND
       Validate_SYS.Is_Equal(Customer_Order_API.Get_Tax_Liability_Type_Db(order_no_), line_rec_.tax_liability_type) AND
       Validate_SYS.Is_Equal(head_rec_.tax_liability, line_rec_.tax_liability) AND
       Validate_SYS.Is_Equal(head_rec_.freight_map_id, line_rec_.freight_map_id) AND
       Validate_SYS.Is_Equal(head_rec_.zone_id, line_rec_.zone_id) AND
       Validate_SYS.Is_Equal(head_rec_.freight_price_list_no, line_rec_.freight_price_list_no) AND
       Validate_SYS.Is_Equal(head_rec_.intrastat_exempt, line_rec_.intrastat_exempt)) THEN 

      line_default_addr_flag_ := 'Y';
   ELSE
      line_default_addr_flag_ := 'N';
   END IF;
   
   
   IF (line_default_addr_flag_ = 'Y') THEN
      -- Check the customer order addr flag
      IF (head_rec_.addr_flag = 'Y') AND (line_rec_.addr_flag = 'Y') THEN
         -- Single Occurence address
         -- Surrounded with if condition as data from Cust_Order_Line_Address_API.Get is not yet available 
         -- by the time this method is called through Pre_Unpack_Insert___ during line duplication.        
         IF (NOT duplicate_line_) THEN
            head_addr_rec_       := Customer_Order_Address_API.Get_Cust_Ord_Addr(order_no_);
            line_addr_rec_       := Cust_Order_Line_Address_API.Get_Co_Line_Addr(order_no_, line_rec_.line_no, line_rec_.rel_no, line_rec_.line_item_no);

            IF(Validate_SYS.Is_Different(head_addr_rec_.addr_1, line_addr_rec_.addr_1) OR            
               Validate_SYS.Is_Different(head_addr_rec_.country_code, line_addr_rec_.country_code) OR
               Validate_SYS.Is_Different(head_addr_rec_.address1, line_addr_rec_.address1) OR
               Validate_SYS.Is_Different(head_addr_rec_.address2, line_addr_rec_.address2) OR
               Validate_SYS.Is_Different(head_addr_rec_.address3, line_addr_rec_.address3) OR
               Validate_SYS.Is_Different(head_addr_rec_.address4, line_addr_rec_.address4) OR
               Validate_SYS.Is_Different(head_addr_rec_.address5, line_addr_rec_.address5) OR
               Validate_SYS.Is_Different(head_addr_rec_.address6, line_addr_rec_.address6) OR            
               Validate_SYS.Is_Different(head_addr_rec_.zip_code, line_addr_rec_.zip_code) OR
               Validate_SYS.Is_Different(head_addr_rec_.city, line_addr_rec_.city) OR
               Validate_SYS.Is_Different(head_addr_rec_.state, line_addr_rec_.state) OR
               Validate_SYS.Is_Different(head_addr_rec_.county, line_addr_rec_.county) OR
               Validate_SYS.Is_Different(head_addr_rec_.in_city, line_addr_rec_.in_city)) THEN

              line_default_addr_flag_ := 'N';
            END IF;
         END IF; 
      ELSIF (head_rec_.addr_flag = 'N') AND (line_rec_.addr_flag = 'N') THEN

         IF (NVL(head_rec_.ship_addr_no, string_null_) != NVL(line_rec_.ship_addr_no, string_null_)) THEN
            line_default_addr_flag_ := 'N';
         END IF;
      ELSE
         -- Address Flag has been changed.
         line_default_addr_flag_ := 'N';
      END IF;
   END IF; 

   RETURN (line_default_addr_flag_);
END Check_Default_Addr_Flag___;


PROCEDURE Build_Attr_For_New___ (
   discount_            OUT    CUSTOMER_ORDER_LINE_TAB.discount%TYPE,
   copy_discount_       OUT    VARCHAR2,
   create_partial_sum_  OUT    CUST_ORDER_LINE_DISCOUNT_TAB.Create_Partial_Sum%TYPE,   
	new_attr_            OUT    VARCHAR2,
   attr_                IN     VARCHAR2  )
IS
   ptr_                      NUMBER;
   name_                     VARCHAR2(30);
   value_                    VARCHAR2(4000);
   order_no_                 CUSTOMER_ORDER_LINE_TAB.order_no%TYPE;
   contract_                 VARCHAR2(5);
   wanted_delivery_date_     DATE;
   price_effectivity_date_   DATE;
   timestamp_                VARCHAR2(35);
   target_date_              DATE;
   rental_db_                CUSTOMER_ORDER_LINE_TAB.rental%TYPE;
   deliver_to_customer_no_   CUSTOMER_ORDER_LINE_TAB.deliver_to_customer_no%TYPE;
   price_source_             CUSTOMER_ORDER_LINE_TAB.price_source%TYPE;
   insert_package_mode_      VARCHAR2(5);
   free_of_charge_           CUSTOMER_ORDER_LINE_TAB.free_of_charge%TYPE;
   free_of_charge_tax_basis_ CUSTOMER_ORDER_LINE_TAB.free_of_charge_tax_basis%TYPE;
   customer_no_              VARCHAR2(20);
   packing_instruction_id_   VARCHAR2(20);
   sales_unit_price_        NUMBER;
   curr_rate_               NUMBER;
   order_rec_               Customer_Order_API.Public_Rec;
   base_unit_price_         NUMBER;
BEGIN
   -- Retrieve the default attribute values, order_no must be passed to Prepare_Insert___
   order_no_ := Client_SYS.Get_Item_Value('ORDER_NO', attr_);
   order_rec_ := Customer_Order_API.Get(order_no_);
   Client_SYS.Add_To_Attr('ORDER_NO', order_no_, new_attr_);
   rental_db_ := NVL(Client_SYS.Get_Item_Value('RENTAL_DB', attr_), Fnd_Boolean_API.DB_FALSE);
   Client_SYS.Add_To_Attr('RENTAL_DB', rental_db_, new_attr_);
   deliver_to_customer_no_ := Client_SYS.Get_Item_Value('DELIVER_TO_CUSTOMER_NO', attr_);
   Client_SYS.Add_To_Attr('DELIVER_TO_CUSTOMER_NO', deliver_to_customer_no_, new_attr_);

   Prepare_Insert___(new_attr_);

   -- Replace the default attribute values with the ones passed in the in parameter string
   ptr_ := NULL;
   WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
      -- Attribute values passed in the parameter string do not include DB values. This is taken care of here.
      IF (name_ = 'CONSIGNMENT_STOCK') THEN
         Client_SYS.Set_Item_Value('CONSIGNMENT_STOCK_DB', Consignment_Stock_API.Encode(value_), new_attr_);
      ELSIF (name_ = 'CHARGED_ITEM') THEN
         Client_SYS.Set_Item_Value('CHARGED_ITEM_DB', Charged_Item_API.Encode(value_), new_attr_);
      ELSIF (name_ = 'SUPPLY_CODE') THEN
         Client_SYS.Set_Item_Value('SUPPLY_CODE_DB', Order_Supply_Type_API.Encode(value_), new_attr_);
      -- Parameter string from quotation does not include price_source.
      ELSIF (name_ = 'PRICE_SOURCE_DB') THEN
         Client_SYS.Set_Item_Value('PRICE_SOURCE', Pricing_Source_API.Decode(value_), new_attr_);
      ELSIF (name_ = 'DISCOUNT') THEN
         discount_ := Client_SYS.Attr_Value_To_Number(value_);
      ELSIF name_ ='WANTED_DELIVERY_DATE' THEN
         -- store this value to set price effectivity date
         wanted_delivery_date_ := Client_SYS.Attr_Value_To_Date(value_);
      ELSIF name_ ='TARGET_DATE' THEN
         target_date_ := Client_SYS.Attr_Value_To_Date(value_);
      ELSIF name_ ='BASE_SALE_UNIT_PRICE' THEN
         base_unit_price_ := Client_SYS.Attr_Value_To_Number(value_);
         Client_SYS.Set_Item_Value('BASE_SALE_UNIT_PRICE', Client_SYS.Attr_Value_To_Number(value_), new_attr_);
      ELSIF name_ ='SALE_UNIT_PRICE' THEN
         Client_SYS.Set_Item_Value('SALE_UNIT_PRICE', Client_SYS.Attr_Value_To_Number(value_), new_attr_);
      ELSIF name_ ='PART_PRICE' THEN
         Client_SYS.Set_Item_Value('PART_PRICE', Client_SYS.Attr_Value_To_Number(value_), new_attr_);
      ELSIF name_ ='PRICE_FREEZE_DB' THEN
         Client_SYS.Set_Item_Value('PRICE_FREEZE', Freeze_Flag_API.Decode(value_), new_attr_);
      ELSIF name_ ='PRICE_SOURCE' THEN
         Client_SYS.Set_Item_Value('PRICE_SOURCE', value_, new_attr_);
      ELSIF name_ ='CREATE_PARTIAL_SUM' THEN
         create_partial_sum_ := value_;
      ELSIF name_ ='COPY_DISCOUNT' THEN
         copy_discount_ := value_;
      ELSIF name_ = 'FREE_OF_CHARGE_DB' THEN
         free_of_charge_ := value_;
      ELSIF name_ = 'FREE_OF_CHARGE_TAX_BASIS' THEN
         free_of_charge_tax_basis_ := value_;
      ELSIF name_ = 'VAT_NO' THEN
         Client_SYS.Set_Item_Value('TAX_ID_NO', value_, new_attr_);
      ELSIF name_ = 'SM_CONNECTION_DB' THEN
         Client_SYS.Set_Item_Value('SM_CONNECTION', Service_Management_Connect_API.Decode(value_), new_attr_);
      ELSE
         Client_SYS.Set_Item_Value(name_, value_, new_attr_);
      END IF;
   END LOOP;

   IF free_of_charge_ IS NOT NULL THEN
      Client_SYS.Set_Item_Value('FREE_OF_CHARGE_DB', free_of_charge_, new_attr_);      
   END IF;
   IF free_of_charge_tax_basis_ IS NOT NULL THEN
      Client_SYS.Set_Item_Value('FREE_OF_CHARGE_TAX_BASIS', free_of_charge_tax_basis_, new_attr_);
   END IF;
   contract_ := order_rec_.contract;
   customer_no_ := order_rec_.customer_no;   
   
   price_effectivity_date_ := Client_SYS.Attr_Value_To_Date(Client_SYS.Get_Item_Value('PRICE_EFFECTIVITY_DATE', new_attr_));

   IF (wanted_delivery_date_ IS NOT NULL) AND (price_effectivity_date_  IS NOT NULL) THEN
      IF (Cust_Order_Pricing_Method_API.Encode(Site_Discom_Info_API.Get_Cust_Order_Pricing_Method(contract_)) = 'DELIVERY_DATE') THEN
         Client_SYS.Set_Item_Value('PRICE_EFFECTIVITY_DATE', wanted_delivery_date_, new_attr_);
      END IF;
   END IF;

   -- Add dummy attribut CREATED_BY_SERVER to indicate that the line was created
   -- using the public New method and not from the client.
   Client_SYS.Add_To_Attr('CREATED_BY_SERVER', 1, new_attr_);
   -- Adding dummy attribute to pass INSERT_PACKAGE_MODE_ information.
   insert_package_mode_ := 'FALSE';
   Client_SYS.Add_To_Attr('INSERT_PACKAGE_MODE_', insert_package_mode_, new_attr_);

   IF (Substitute_Sales_Part_API.Allow_Auto_Substitution(contract_, customer_no_))THEN
      Client_SYS.Add_To_Attr('BUY_QTY_DUE', Client_SYS.Get_Item_Value('BUY_QTY_DUE', attr_), new_attr_);      
   END IF;
   -- Add the default attributes for the sales part
   Get_Default_Part_Attributes___(new_attr_, Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('PART_REPLACEMENT_ALLOWED', attr_)));

   -- Reapply the attributes passed as parameters in case these were replaced by default values.
   ptr_ := NULL;
   WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
      -- Append Time part to Wanted Delivery Date
      IF (name_ = 'WANTED_DELIVERY_DATE') THEN
         -- calculate Default Wanted Delivery date's time
         timestamp_            := to_char(Client_SYS.Attr_Value_To_Date(value_), Report_SYS.datetime_format_);
         -- replace with the Wanted Delivery date's time
         timestamp_            := replace(timestamp_, '00:00:00', to_char(wanted_delivery_date_, 'HH24:MI:SS'));
         wanted_delivery_date_ := to_date(timestamp_, Report_SYS.datetime_format_);
         Client_SYS.Set_Item_Value('WANTED_DELIVERY_DATE', wanted_delivery_date_, new_attr_);
         IF target_date_ IS NULL THEN
            Client_SYS.Set_Item_Value('TARGET_DATE', wanted_delivery_date_ , new_attr_);
         END IF;
      ELSIF (name_ = 'TARGET_DATE') THEN
         -- calculate Default Target date's time
         timestamp_   := to_char(Client_SYS.Attr_Value_To_Date(value_), Report_SYS.datetime_format_);
         -- replace with the Target date's time
         timestamp_   := replace(timestamp_, '00:00:00', to_char(target_date_, 'HH24:MI:SS'));
         target_date_ := to_date(timestamp_, Report_SYS.datetime_format_);
         Client_SYS.Set_Item_Value('TARGET_DATE', target_date_, new_attr_);
      ELSIF (name_ = 'PRICE_SOURCE') THEN
         price_source_ := Client_SYS.Get_Item_Value('PRICE_SOURCE', new_attr_);
         IF (price_source_ IS NULL) THEN
            Client_SYS.Set_Item_Value(name_, value_, new_attr_);
         END IF;
      ELSIF (name_ = 'PACKING_INSTRUCTION_ID') THEN                 
         IF (value_ IS NOT NULL) THEN
            Client_SYS.Set_Item_Value(name_, value_, new_attr_); 
         END IF;
      ELSIF ((name_ = 'SALE_UNIT_PRICE') AND (copy_discount_ = 'TRUE')) THEN
         Customer_Order_Pricing_API.Get_Sales_Price_In_Currency(sales_unit_price_, curr_rate_, customer_no_, contract_, order_rec_.currency_code,
                                                                  base_unit_price_, order_rec_.currency_rate_type);         
         Client_SYS.Set_Item_Value('SALE_UNIT_PRICE', sales_unit_price_, new_attr_); 
         
      -- CATALOG no could have been replaced by a replacement part
      -- DISCOUNT should not be passed when a new line is created
      -- the discount on the order line should always be the sum of the discount
      -- for all discount records connected to the order line.
      ELSIF (name_ NOT IN ('CATALOG_NO', 'DISCOUNT')) THEN
         Client_SYS.Set_Item_Value(name_, value_, new_attr_);
      END IF;
   END LOOP;
END Build_Attr_For_New___;


PROCEDURE Build_Attr_Sourced_Co_Lines___ (
	   attr_                      OUT    VARCHAR2,
      sourced_lines_             IN OUT NOCOPY sourced_cust_order_line_tab%ROWTYPE,
      old_attr_                  IN     VARCHAR2,
      orglinerec_                IN     CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
      first_row_                 IN     BOOLEAN,
      sourced_reservation_exist_ IN     NUMBER,
      language_code_             IN     VARCHAR2,
      order_no_                  IN     VARCHAR2,
      line_no_                   IN     VARCHAR2,
      rel_no_                    IN     VARCHAR2,
      line_item_no_              IN     NUMBER )
IS
   buy_qty_due_               NUMBER;
   supply_site_reserve_type_  VARCHAR2(20);
   source_line_count_         NUMBER;
   ship_via_code_             VARCHAR2(3);
   supplier_ship_via_transit_ VARCHAR2(3);
   planned_delivery_date_     DATE;
   planned_ship_date_         DATE;
   new_line_no_               VARCHAR2(4);
   new_rel_no_                VARCHAR2(4);
   new_line_item_no_          NUMBER;
   order_rec_                 CUSTOMER_ORDER_API.Public_Rec;

     -- Count the no of souced lines
   CURSOR sourced_lines_count IS
      SELECT  COUNT(*)
      FROM  sourced_cust_order_line_tab
      WHERE  order_no     = order_no_
      AND  line_no      = line_no_
      AND  rel_no       = rel_no_
      AND  line_item_no = line_item_no_;
BEGIN
   -- Update the existing line first
   IF first_row_ THEN
      Client_SYS.Clear_Attr(attr_);
   ELSE
      attr_ := old_attr_;
   END IF;

   supply_site_reserve_type_ := 'NOTALLOWED';        

   IF (sourced_lines_.vendor_no IS NULL) THEN
      -- Sourced from own inventory
      IF (orglinerec_.catalog_type = 'NON') THEN
         -- supply code = 'NO' when the purchase_part is non inventory part
         Client_SYS.Set_Item_Value('SUPPLY_CODE_DB', 'NO', attr_);
      ELSE
         -- supply code = 'IO' or 'SO' when the purchase_part is inventory part
         IF (sourced_lines_.supply_code = 'SO') THEN
            Client_SYS.Set_Item_Value('SUPPLY_CODE_DB', 'SO', attr_);
         ELSE
            Client_SYS.Set_Item_Value('SUPPLY_CODE_DB', 'IO', attr_);
         END IF;

         IF (sourced_reservation_exist_ = 1) THEN
            -- we have local site reservation and dont want a priority reservation to take place
            -- when CO line is created or updated from this sourced line
            Client_SYS.Set_Item_Value('LOCAL_SITE_RESERVATION_EXIST', 1, attr_);
         END IF;
      END IF;

      Client_SYS.Set_Item_Value('SHIP_VIA_CODE', sourced_lines_.ship_via_code, attr_);
      ship_via_code_ := sourced_lines_.ship_via_code;
      supplier_ship_via_transit_ := NULL;

      IF (orglinerec_.ship_via_code = sourced_lines_.ship_via_code) THEN
         -- IF the ship via code is the same as the one on the original order line
         -- the inherit delivery leadtime and picking leadtime as well
         Client_SYS.Set_Item_Value('DELIVERY_LEADTIME', orglinerec_.delivery_leadtime, attr_);
         Client_SYS.Set_Item_Value('CUST_CALENDAR_ID', orglinerec_.cust_calendar_id, attr_);
         Client_SYS.Set_Item_Value('EXT_TRANSPORT_CALENDAR_ID', orglinerec_.ext_transport_calendar_id, attr_);
         Client_SYS.Set_Item_Value('PICKING_LEADTIME', orglinerec_.picking_leadtime, attr_);
         Client_SYS.Set_Item_Value('SHIPMENT_TYPE', orglinerec_.shipment_type, attr_);
         Client_SYS.Set_Item_Value('ROUTE_ID', orglinerec_.route_id, attr_);
      END IF;

   ELSIF (sourced_lines_.supply_code IN ('IPD', 'PD', 'IPT', 'PT')) THEN
      Client_SYS.Set_Item_Value('SUPPLY_CODE_DB', sourced_lines_.supply_code, attr_);
      Client_SYS.Set_Item_Value('VENDOR_NO', sourced_lines_.vendor_no, attr_);

      IF (sourced_lines_.supply_code IN ('IPD', 'IPT')) THEN
         IF (sourced_lines_.supply_site_due_date IS NOT NULL) THEN
            Client_SYS.Set_Item_Value('SUPPLY_SITE_DUE_DATE', sourced_lines_.supply_site_due_date, attr_);
         END IF;
         IF (sourced_reservation_exist_ = 1) THEN
            supply_site_reserve_type_ := 'SOURCED';
         END IF;
      END IF;

      -- Set ship via code and supplier ship via transit
      IF (sourced_lines_.supply_code IN ('PD', 'IPD')) THEN
         -- Direct delivery from supplier
         Client_SYS.Set_Item_Value('SHIP_VIA_CODE', sourced_lines_.ship_via_code, attr_);
         ship_via_code_ := sourced_lines_.ship_via_code;
         supplier_ship_via_transit_ := NULL;
      ELSE
         -- Transit delivery from supplier to us
         Client_SYS.Set_Item_Value('SHIP_VIA_CODE', orglinerec_.ship_via_code, attr_);
         Client_SYS.Set_Item_Value('SUPPLIER_SHIP_VIA_TRANSIT', sourced_lines_.ship_via_code, attr_);
         Client_SYS.Set_Item_Value('SUPPLIER_SHIP_VIA_TRANSIT_DESC', Mpccom_Ship_Via_API.Get_Description(sourced_lines_.ship_via_code, language_code_), attr_);
         -- Inherit delivery leadtime from original order line
         Client_SYS.Set_Item_Value('DELIVERY_LEADTIME', orglinerec_.delivery_leadtime, attr_);
         Client_SYS.Set_Item_Value('CUST_CALENDAR_ID', orglinerec_.cust_calendar_id, attr_);
         Client_SYS.Set_Item_Value('EXT_TRANSPORT_CALENDAR_ID', orglinerec_.ext_transport_calendar_id, attr_);
         Client_SYS.Set_Item_Value('PICKING_LEADTIME', orglinerec_.picking_leadtime, attr_);
         Client_SYS.Set_Item_Value('SHIPMENT_TYPE', orglinerec_.shipment_type, attr_);
         Client_SYS.Set_Item_Value('ROUTE_ID', orglinerec_.route_id, attr_);
         ship_via_code_ := orglinerec_.ship_via_code;
         supplier_ship_via_transit_ := sourced_lines_.ship_via_code;
      END IF;

   ELSE
      Error_SYS.Record_General(lu_name_, 'WRONGPURCHASEFLAG: Wrong Sourcing method.');
   END IF;


   Client_SYS.Set_Item_Value('SUPPLY_SITE_RESERVE_TYPE_DB', supply_site_reserve_type_, attr_);
   Client_SYS.Set_Item_Value('SUPPLY_SITE_RESERVE_TYPE', Supply_Site_Reserve_Type_API.Decode(supply_site_reserve_type_), attr_);
   Client_SYS.Set_Item_Value('REVISED_QTY_DUE', sourced_lines_.sourced_qty, attr_);
   -- conversion factor cannot be zero..
   buy_qty_due_ := sourced_lines_.sourced_qty / orglinerec_.conv_factor * orglinerec_.inverted_conv_factor;
   Client_SYS.Set_Item_Value('BUY_QTY_DUE', buy_qty_due_, attr_);
   Client_SYS.Set_Item_Value('DESIRED_QTY', buy_qty_due_, attr_);
   Client_SYS.Set_Item_Value('WANTED_DELIVERY_DATE', sourced_lines_.wanted_delivery_date, attr_);
   Client_SYS.Set_Item_Value('TARGET_DATE', sourced_lines_.wanted_delivery_date, attr_);

   IF (sourced_lines_.latest_release_date IS NOT NULL) THEN   -- a capability checked sourced line
      Client_SYS.Set_Item_Value('LATEST_RELEASE_DATE', sourced_lines_.latest_release_date, attr_);
      -- calculate the dates forwards from the planned_due_date that the capability check engine have returned
      Cust_Ord_Date_Calculation_API.Calc_Order_Dates_Forwards(planned_delivery_date_, planned_ship_date_,
                                          sourced_lines_.planned_due_date, sourced_lines_.supply_site_due_date,
                                          sourced_lines_.wanted_delivery_date, orglinerec_.contract,
                                          sourced_lines_.supply_code, orglinerec_.deliver_to_customer_no, sourced_lines_.vendor_no,
                                          orglinerec_.part_no, orglinerec_.purchase_part_no, orglinerec_.ship_addr_no,
                                          ship_via_code_, orglinerec_.route_id,
                                          orglinerec_.delivery_leadtime, orglinerec_.picking_leadtime, orglinerec_.ext_transport_calendar_id, supplier_ship_via_transit_);

      Trace_SYS.Field('planned_due_date after forward calculation ', sourced_lines_.planned_due_date);

      -- send the newly calculated dates to co
      Client_SYS.Set_Item_Value('PLANNED_DELIVERY_DATE', planned_delivery_date_, attr_);
      Client_SYS.Set_Item_Value('PROMISED_DELIVERY_DATE', planned_delivery_date_, attr_);
      Client_SYS.Set_Item_Value('PLANNED_DUE_DATE', sourced_lines_.planned_due_date, attr_);
      Client_SYS.Set_Item_Value('PLANNED_SHIP_DATE', planned_ship_date_, attr_);
      -- send the capability check source flag so the customer order line do not start the backwards date calculations since we have already done a forward calculations for these dates
      Client_SYS.Set_Item_Value('CAPABILITY_CHECK_SOURCE_FLAG', 'TRUE', attr_);

   ELSE  -- a normal sourced line
      Client_SYS.Set_Item_Value('PLANNED_DELIVERY_DATE', sourced_lines_.wanted_delivery_date, attr_);
      Client_SYS.Set_Item_Value('PLANNED_DUE_DATE', sourced_lines_.planned_due_date, attr_);
   END IF;


   IF first_row_ THEN
      OPEN sourced_lines_count;
      FETCH sourced_lines_count INTO source_line_count_;
      CLOSE sourced_lines_count;
      Client_SYS.Set_Item_Value('SOURCING_FLAG','TRUE', attr_);
      IF (source_line_count_ != 1) THEN
         Client_SYS.Set_Item_Value('ORIGINATING_REL_NO', rel_no_, attr_);
         Client_SYS.Set_Item_Value('ORIGINATING_LINE_ITEM_NO', line_item_no_, attr_);
      END IF;
         Client_SYS.Set_Item_Value('INPUT_QTY','', attr_);
         Client_SYS.Set_Item_Value('INPUT_UNIT_MEAS','', attr_);
         Client_SYS.Set_Item_Value('INPUT_CONV_FACTOR','', attr_);
         Client_SYS.Set_Item_Value('INPUT_VARIABLE_VALUES','', attr_);
      ELSE
         -- Get new line numbers for customer order lines created.
         IF (sourced_lines_.line_item_no != -1 AND sourced_lines_.line_item_no != 0 ) THEN
            Get_Next_Line_Item_No(new_line_item_no_, order_no_, line_no_, rel_no_);
            new_line_no_ := line_no_;
            new_rel_no_  := rel_no_;
         ELSE
            CUSTOMER_ORDER_API.Get_Next_Line_No(new_rel_no_, new_line_item_no_, new_line_no_, order_no_, orglinerec_.contract, orglinerec_.catalog_no, NULL, orglinerec_.rental);
         END IF;
         Client_SYS.Set_Item_Value('ORDER_NO', order_no_ , attr_);
         Client_SYS.Set_Item_Value('LINE_NO', new_line_no_, attr_);
         Client_SYS.Set_Item_Value('REL_NO', new_rel_no_, attr_);
         Client_SYS.Set_Item_Value('LINE_ITEM_NO', new_line_item_no_, attr_);
      END IF;

      IF (((orglinerec_.ship_via_code != sourced_lines_.ship_via_code) OR (NVL(orglinerec_.vendor_no, Database_SYS.string_null_) != NVL(sourced_lines_.vendor_no, Database_SYS.string_null_)))
         AND sourced_lines_.supply_code NOT IN ('IPT', 'PT')) THEN
         order_rec_ := CUSTOMER_ORDER_API.Get(order_no_);
         IF (sourced_lines_.supply_code IN ('IPD', 'PD')) AND (sourced_lines_.vendor_no = order_rec_.vendor_no AND sourced_lines_.ship_via_code = order_rec_.ship_via_code) THEN
            Client_SYS.Set_Item_Value('DEFAULT_ADDR_FLAG_DB', Gen_Yes_No_API.DB_YES, attr_);
            Client_SYS.Set_Item_Value('DEFAULT_ADDR_FLAG', Gen_Yes_No_API.Decode(Gen_Yes_No_API.DB_YES), attr_);
         ELSE
            Client_SYS.Set_Item_Value('DEFAULT_ADDR_FLAG_DB', Gen_Yes_No_API.DB_NO, attr_);
            Client_SYS.Set_Item_Value('DEFAULT_ADDR_FLAG', Gen_Yes_No_API.Decode(Gen_Yes_No_API.DB_NO), attr_);
         END IF;
         -- Client value is added to attribute string not to replace default_addr_flag with the default value with later method calls from New
         Client_SYS.Set_Item_Value('DEFAULT_ADDR_FLAG', Gen_Yes_No_API.Decode('N'), attr_);
      END IF;

      -- include order line in planning / supply demand view if supply site reservations exists.
      IF (sourced_reservation_exist_ = 1) THEN
         Client_SYS.Set_Item_Value('RELEASE_PLANNING_DB', 'RELEASED', attr_);
      ELSE
         Client_SYS.Set_Item_Value('RELEASE_PLANNING_DB', 'NOTRELEASED', attr_);
      END IF;
END Build_Attr_Sourced_Co_Lines___;


PROCEDURE Add_Transaction_Tax_Info___ (
   newrec_              IN customer_order_line_tab%ROWTYPE,    
   company_             IN VARCHAR2,   
   customer_no_         IN VARCHAR2,
   ship_addr_no_        IN VARCHAR2,
   supply_country_db_   IN VARCHAR2,     
   use_price_incl_tax_  IN VARCHAR2,
   currency_code_       IN VARCHAR2,
   tax_from_defaults_   IN BOOLEAN,
   attr_                IN VARCHAR2)
IS
   line_amount_rec_       Tax_Handling_Util_API.line_amount_rec;
   source_key_rec_        Tax_Handling_Util_API.source_key_rec;
   tax_line_param_rec_    Tax_Handling_Order_Util_API.tax_line_param_rec;
   multiple_tax_          VARCHAR2(20);
   tax_info_table_        Tax_Handling_Util_API.tax_information_table;
BEGIN
   source_key_rec_     := Tax_Handling_Util_API.Create_Source_Key_Rec(Tax_Source_API.DB_CUSTOMER_ORDER_LINE,
                                                                      newrec_.order_no, 
                                                                      newrec_.line_no, 
                                                                      newrec_.rel_no, 
                                                                      newrec_.line_item_no,
                                                                      '*', 
                                                                      attr_);
   
   tax_line_param_rec_ := Tax_Handling_Order_Util_API.Create_Tax_Line_Param_Rec (company_,
                                                                                 newrec_.contract,
                                                                                 customer_no_,
                                                                                 ship_addr_no_,
                                                                                 newrec_.planned_ship_date,
                                                                                 supply_country_db_,
                                                                                 NVL(newrec_.delivery_type, '*'),
                                                                                 newrec_.catalog_no,
                                                                                 use_price_incl_tax_,
                                                                                 currency_code_,
                                                                                 newrec_.currency_rate,                                                                                       
                                                                                 NULL,
                                                                                 tax_from_defaults_,
                                                                                 newrec_.tax_code,
                                                                                 newrec_.tax_calc_structure_id,
                                                                                 newrec_.tax_class_id,
                                                                                 newrec_.tax_liability,
                                                                                 newrec_.tax_liability_type,
                                                                                 newrec_.country_code,
                                                                                 add_tax_lines_             => TRUE,
                                                                                 net_curr_amount_           => NULL,
                                                                                 gross_curr_amount_         => NULL,
                                                                                 ifs_curr_rounding_         => NULL,
                                                                                 free_of_charge_tax_basis_  => newrec_.free_of_charge_tax_basis,
                                                                                 attr_                      => attr_);
   
   Tax_Handling_Order_Util_API.Add_Transaction_Tax_Info (line_amount_rec_,
                                                         multiple_tax_,
                                                         tax_info_table_,
                                                         tax_line_param_rec_,
                                                         source_key_rec_,
                                                         attr_);
END Add_Transaction_Tax_Info___;


PROCEDURE Recalculate_Tax_Lines___ (
   newrec_             IN customer_order_line_tab%ROWTYPE,
   company_            IN VARCHAR2,
   customer_no_        IN VARCHAR2,
   ship_addr_no_       IN VARCHAR2,
   supply_country_db_  IN VARCHAR2,
   use_price_incl_tax_ IN VARCHAR2,
   currency_code_      IN VARCHAR2,
   tax_from_defaults_  IN BOOLEAN,
   attr_               IN VARCHAR2)
IS
   source_key_rec_      Tax_Handling_Util_API.source_key_rec;
   tax_line_param_rec_  Tax_Handling_Order_Util_API.tax_line_param_rec;
BEGIN
   source_key_rec_     := Tax_Handling_Util_API.Create_Source_Key_Rec(Tax_Source_API.DB_CUSTOMER_ORDER_LINE,
                                                                      newrec_.order_no, 
                                                                      newrec_.line_no, 
                                                                      newrec_.rel_no, 
                                                                      newrec_.line_item_no,
                                                                      '*',
                                                                      attr_); 
                                   
   tax_line_param_rec_ := Tax_Handling_Order_Util_API.Create_Tax_Line_Param_Rec (company_,
                                                                                 newrec_.contract,
                                                                                 customer_no_,
                                                                                 ship_addr_no_,
                                                                                 newrec_.planned_ship_date,
                                                                                 supply_country_db_,
                                                                                 newrec_.delivery_type,
                                                                                 newrec_.catalog_no,
                                                                                 use_price_incl_tax_,
                                                                                 currency_code_,
                                                                                 newrec_.currency_rate,                                                                                       
                                                                                 NULL,
                                                                                 tax_from_defaults_,
                                                                                 newrec_.tax_code,
                                                                                 newrec_.tax_calc_structure_id,
                                                                                 newrec_.tax_class_id,
                                                                                 newrec_.tax_liability,
                                                                                 newrec_.tax_liability_type,
                                                                                 newrec_.country_code,
                                                                                 add_tax_lines_             => TRUE,
                                                                                 net_curr_amount_           => NULL,
                                                                                 gross_curr_amount_         => NULL,
                                                                                 ifs_curr_rounding_         => NULL,
                                                                                 free_of_charge_tax_basis_  => newrec_.free_of_charge_tax_basis,
                                                                                 attr_                      => attr_);

   Tax_Handling_Order_Util_API.Recalculate_Tax_Lines (source_key_rec_,
                                                      tax_line_param_rec_,
                                                      attr_);
END Recalculate_Tax_Lines___;


PROCEDURE Build_Rec_For_Copy_Line___ (
   newrec_                      OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   indrec_                      IN OUT NOCOPY Indicator_Rec,
   attr_                        IN OUT NOCOPY VARCHAR2,
   order_line_rec_              IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   copy_order_adresses_         IN BOOLEAN,
   copy_misc_order_info_        IN BOOLEAN,
   copy_delivery_info_          IN BOOLEAN,
   copy_tax_detail_             IN BOOLEAN,
   copy_pricing_                IN BOOLEAN,
   copy_document_texts_         IN BOOLEAN,
   copy_notes_                  IN BOOLEAN,
   same_customer_               IN BOOLEAN,
   use_price_incl_tax_db_       IN VARCHAR2,
   language_code_               IN VARCHAR2)
IS
BEGIN
   Unpack___(newrec_, indrec_,attr_);

   newrec_.supply_site := order_line_rec_.supply_site;

   ----------------------   SM Objects  ------------------------------------------
   newrec_.create_sm_object_option := order_line_rec_.create_sm_object_option;
   newrec_.equipment_object_seq := order_line_rec_.equipment_object_seq;
   newrec_.sup_sm_contract := order_line_rec_.sup_sm_contract;
   newrec_.sup_sm_object := order_line_rec_.sup_sm_object;
   --------------------------------------------------------------------------------

   newrec_.sales_unit_meas := order_line_rec_.sales_unit_meas;
   newrec_.input_qty := order_line_rec_.input_qty;            
   newrec_.input_unit_meas := order_line_rec_.input_unit_meas; 
   newrec_.input_conv_factor := order_line_rec_.input_conv_factor;
   newrec_.input_variable_values := order_line_rec_.input_variable_values;
   newrec_.qty_per_assembly := order_line_rec_.qty_per_assembly;  
   newrec_.revised_qty_due := order_line_rec_.revised_qty_due;

   newrec_.part_ownership := order_line_rec_.part_ownership;  
   IF(newrec_.part_ownership = 'CUSTOMER OWNED')THEN
      newrec_.owning_customer_no := newrec_.customer_no;
   END IF;   
   newrec_.packing_instruction_id := order_line_rec_.packing_instruction_id;
   newrec_.vendor_no := order_line_rec_.vendor_no; 
   newrec_.cust_warranty_id := order_line_rec_.cust_warranty_id;

   IF (same_customer_) THEN      
      -- Sales Part Cross reference Information
      newrec_.catalog_desc := order_line_rec_.catalog_desc;
      newrec_.customer_part_no := order_line_rec_.customer_part_no;
      newrec_.customer_part_unit_meas := order_line_rec_.customer_part_unit_meas;
      newrec_.customer_part_conv_factor :=  order_line_rec_.customer_part_conv_factor;
      newrec_.cust_part_invert_conv_fact := order_line_rec_.cust_part_invert_conv_fact;
      newrec_.customer_part_buy_qty :=  order_line_rec_.customer_part_buy_qty;

      newrec_.conv_factor := order_line_rec_.conv_factor;
      newrec_.classification_standard :=  order_line_rec_.classification_standard;
      newrec_.country_code := order_line_rec_.country_code;   
      newrec_.dock_code := order_line_rec_.dock_code;
      newrec_.sub_dock_code := order_line_rec_.sub_dock_code;

      newrec_.deliver_to_customer_no := order_line_rec_.deliver_to_customer_no;
      newrec_.consignment_stock := order_line_rec_.consignment_stock;

      newrec_.customs_value := order_line_rec_.customs_value;
      newrec_.manufacturing_department := order_line_rec_.manufacturing_department;
      newrec_.delivery_sequence := order_line_rec_.delivery_sequence;
      newrec_.end_customer_id := order_line_rec_.end_customer_id;
      newrec_.location_no := order_line_rec_.location_no;
      newrec_.rel_mtrl_planning := order_line_rec_.rel_mtrl_planning;
      newrec_.receiving_advice_type := order_line_rec_.receiving_advice_type;
      newrec_.self_billing := order_line_rec_.self_billing;
      newrec_.blocked_for_invoicing := order_line_rec_.blocked_for_invoicing;
      newrec_.contact := order_line_rec_.contact;
   END IF;

   -- Copy Address Infomation retated attributes.
   IF (copy_order_adresses_) THEN  
      newrec_.default_addr_flag := order_line_rec_.default_addr_flag;
      newrec_.ship_addr_no := order_line_rec_.ship_addr_no;        
      newrec_.addr_flag := order_line_rec_.addr_flag;  
   END IF;
   
   -- Copy Misc Order Information related attributes
   IF (copy_misc_order_info_) THEN
      newrec_.region_code := order_line_rec_.region_code;  
      newrec_.district_code := order_line_rec_.district_code;         
   END IF;
   
   -- Copy Delivery Information
   IF (copy_delivery_info_) THEN
      newrec_.ship_via_code := order_line_rec_.ship_via_code;
      newrec_.delivery_terms := order_line_rec_.delivery_terms;        
      newrec_.del_terms_location := order_line_rec_.del_terms_location;
      newrec_.route_id := order_line_rec_.route_id;
      newrec_.forward_agent_id := order_line_rec_.forward_agent_id;
      newrec_.delivery_leadtime := order_line_rec_.delivery_leadtime;
      newrec_.picking_leadtime := order_line_rec_.picking_leadtime;         
      newrec_.cust_calendar_id := order_line_rec_.cust_calendar_id;
      newrec_.ext_transport_calendar_id := order_line_rec_.ext_transport_calendar_id;
      newrec_.shipment_type := order_line_rec_.shipment_type;
      newrec_.shipment_creation := order_line_rec_.shipment_creation;
      newrec_.intrastat_exempt := order_line_rec_.intrastat_exempt;
      newrec_.supplier_ship_via_transit := order_line_rec_.supplier_ship_via_transit;
      newrec_.supplier_ship_via_transit_desc := Mpccom_Ship_Via_API.Get_Description(newrec_.supplier_ship_via_transit, language_code_);    
   END IF;
   
   -- Copy Tax Related Attributes
   IF (copy_tax_detail_) THEN
      newrec_.tax_id_no := order_line_rec_.tax_id_no;
      newrec_.tax_id_validated_date := order_line_rec_.tax_id_validated_date;
      newrec_.tax_class_id := order_line_rec_.tax_class_id;
      newrec_.tax_code := order_line_rec_.tax_code;
      newrec_.tax_liability := order_line_rec_.tax_liability;
      newrec_.tax_liability_type := order_line_rec_.tax_liability_type;
      newrec_.tax_calc_structure_id := order_line_rec_.tax_calc_structure_id;
   END IF;
   -- Copy Pricing related attributes
   IF (copy_pricing_) THEN
      newrec_.calc_char_price := order_line_rec_.calc_char_price;
      newrec_.char_price := order_line_rec_.char_price;
      newrec_.provisional_price := order_line_rec_.provisional_price;
      newrec_.price_freeze := order_line_rec_.price_freeze;
      newrec_.free_of_charge_tax_basis := order_line_rec_.free_of_charge_tax_basis;
      newrec_.rebate_builder := order_line_rec_.rebate_builder;
      newrec_.price_effectivity_date := order_line_rec_.price_effectivity_date;
      newrec_.price_unit_meas := order_line_rec_.price_unit_meas;
      newrec_.price_source := Pricing_source_API.DB_COPIED;
      newrec_.price_source_id := NULL;
      newrec_.price_source_net_price := order_line_rec_.price_source_net_price;
      newrec_.customer_level := order_line_rec_.customer_level;
      newrec_.customer_level_id := order_line_rec_.customer_level_id;
      newrec_.part_level := order_line_rec_.part_level;
      newrec_.part_level_id := order_line_rec_.part_level_id;
      newrec_.free_of_charge := order_line_rec_.free_of_charge;
      newrec_.part_price := order_line_rec_.part_price;
      newrec_.discount := 0;
      IF (newrec_.free_of_charge = Fnd_Boolean_API.DB_TRUE) THEN
         newrec_.part_price:= 0;
         newrec_.sale_unit_price := 0;
         newrec_.base_sale_unit_price:=0;
         newrec_.base_unit_price_incl_tax := 0;
         newrec_.unit_price_incl_tax := 0;
      ELSE
         IF (use_price_incl_tax_db_ = Fnd_Boolean_API.DB_TRUE) THEN
            newrec_.unit_price_incl_tax := order_line_rec_.unit_price_incl_tax;
         ELSE
            newrec_.sale_unit_price := order_line_rec_.sale_unit_price;
         END IF;
      END IF;
   END IF;
   

   IF (copy_document_texts_) THEN
      newrec_.note_id := order_line_rec_.note_id;
   END IF;

   IF (copy_notes_) THEN
      newrec_.note_text := order_line_rec_.note_text;
   END IF;
END Build_Rec_For_Copy_Line___;


PROCEDURE Copy_Order_Line_Address___ (from_order_no_     IN VARCHAR2,
                                   from_line_no_      IN VARCHAR2,
                                   from_rel_no_       IN VARCHAR2,
                                   from_line_item_no_ IN NUMBER,
                                   to_order_no_       IN VARCHAR2,
                                   to_line_no_        IN VARCHAR2,
                                   to_rel_no_         IN VARCHAR2,
                                   to_line_item_no_   IN NUMBER)
IS
   line_addr_rec_      cust_order_line_address_tab%ROWTYPE;
   attr_               VARCHAR2(2000);
   info_               VARCHAR2(2000);
   objid_              VARCHAR2(2000);
   objversion_         VARCHAR2(2000);
   line_rec_           customer_order_line_tab%ROWTYPE;
 
   CURSOR get_order_line_address IS
      SELECT *
      FROM cust_order_line_address_tab
      WHERE order_no = from_order_no_
      AND   line_no = from_line_no_
      AND   rel_no = from_rel_no_
      AND   line_item_no = from_line_item_no_;
BEGIN
   OPEN get_order_line_address;
   FETCH get_order_line_address INTO line_addr_rec_;
   IF (get_order_line_address%FOUND) THEN
      Client_SYS.Add_To_Attr('ORDER_NO', to_order_no_, attr_);
      Client_SYS.Add_To_Attr('LINE_NO', to_line_no_, attr_);
      Client_SYS.Add_To_Attr('REL_NO', to_rel_no_, attr_);
      Client_SYS.Add_To_Attr('LINE_ITEM_NO', to_line_item_no_, attr_);
      Client_SYS.Add_To_Attr('ADDR_1', line_addr_rec_.addr_1, attr_);
      Client_SYS.Add_To_Attr('ADDRESS1', line_addr_rec_.address1, attr_);
      Client_SYS.Add_To_Attr('ADDRESS2', line_addr_rec_.address2, attr_);
      Client_SYS.Add_To_Attr('ADDRESS3', line_addr_rec_.address3, attr_);
      Client_SYS.Add_To_Attr('ADDRESS4', line_addr_rec_.address4, attr_);
      Client_SYS.Add_To_Attr('ADDRESS5', line_addr_rec_.address5, attr_);
      Client_SYS.Add_To_Attr('ADDRESS6', line_addr_rec_.address6, attr_);      
      Client_SYS.Add_To_Attr('ZIP_CODE', line_addr_rec_.zip_code, attr_);
      Client_SYS.Add_To_Attr('CITY', line_addr_rec_.city, attr_);
      Client_SYS.Add_To_Attr('STATE', line_addr_rec_.state, attr_);
      Client_SYS.Add_To_Attr('COUNTRY_CODE', line_addr_rec_.country_code, attr_);
      Client_SYS.Add_To_Attr('COUNTY', line_addr_rec_.county, attr_);
      Cust_Order_Line_Address_API.New__(info_, objid_, objversion_, attr_, 'DO'); 
      CLOSE get_order_line_address;
   ELSE
      CLOSE get_order_line_address;
      line_rec_ := Get_Object_By_Keys___(to_order_no_, to_line_no_, to_rel_no_, to_line_item_no_);
      Insert_Default_Address___(line_rec_.order_no, line_rec_.line_no, line_rec_.rel_no, line_rec_.line_item_no, line_rec_.customer_no, line_rec_.ship_addr_no, line_rec_.deliver_to_customer_no);
   END IF;
END Copy_Order_Line_Address___;


PROCEDURE Copy_Staged_Billing___ (
   order_no_             IN VARCHAR2,
   line_no_              IN VARCHAR2,
   rel_no_               IN VARCHAR2,
   line_item_no_         IN NUMBER,
   con_order_no_         IN VARCHAR2,   
   con_line_no_          IN VARCHAR2,
   con_rel_no_           IN VARCHAR2,
   con_line_item_no_     IN NUMBER,
   copy_document_texts_  IN BOOLEAN,
   copy_notes_           IN BOOLEAN )
IS
   -- values for stage billing from newly created customer order lines
  CURSOR get_new_line_rec IS
       SELECT buy_qty_due, discount, order_discount, price_conv_factor, base_sale_unit_price, base_unit_price_incl_tax, additional_discount,
              sale_unit_price,unit_price_incl_tax, currency_rate
       FROM  customer_order_line_tab
       WHERE order_no = order_no_
       AND   line_no = line_no_
       AND   rel_no = rel_no_
       AND   line_item_no = line_item_no_;
 
   order_rec_                 Customer_Order_API.Public_Rec;
   company_                   SITE_TAB.company%TYPE;
   rounding_                  NUMBER := 0;
   curr_rounding_             NUMBER := 0;
   line_discount_             NUMBER := 0;
   sale_price_incl_tax_       NUMBER := 0;
   sales_price_               NUMBER := 0;
   discount_amount_           NUMBER := 0;
   line_gross_                NUMBER := 0;   
   line_net_                  NUMBER := 0;
   line_qty_                  NUMBER ;
BEGIN
   Order_Line_Staged_Billing_API.Copy_Stages_From_Co_line(order_no_,
                                                         line_no_,
                                                         rel_no_,
                                                         line_item_no_,
                                                         con_order_no_,   
                                                         con_line_no_,
                                                         con_rel_no_,
                                                         con_line_item_no_,
                                                         copy_document_texts_,
                                                         copy_notes_);
   order_rec_  := Customer_Order_API.Get(order_no_);
   company_ := Site_API.Get_Company(order_rec_.contract);
   rounding_      := Currency_Code_API.Get_Currency_Rounding(company_, Company_Finance_API.Get_Currency_Code(company_));
   curr_rounding_ := Currency_Code_API.Get_Currency_Rounding(company_, order_rec_.currency_code);
   -- For all new lines recalculate the stage billing values.
   FOR stage_rec_ IN get_new_line_rec LOOP        
      line_discount_ := Cust_Order_Line_Discount_API.Get_Total_Line_Discount(order_no_, line_no_, rel_no_, line_item_no_,
                                                             stage_rec_.buy_qty_due, stage_rec_.price_conv_factor,  curr_rounding_);
      IF order_rec_.use_price_incl_tax = 'TRUE' THEN
         -- NOTE: Calculations are done using order currency, then final values are converted to base currency.
         sale_price_incl_tax_ := stage_rec_.buy_qty_due * stage_rec_.price_conv_factor * stage_rec_.unit_price_incl_tax;
         discount_amount_     := ROUND(sale_price_incl_tax_,curr_rounding_) - ROUND(( sale_price_incl_tax_ -line_discount_) * (1-(stage_rec_.order_discount + stage_rec_.additional_discount)), curr_rounding_);
         sale_price_incl_tax_ := ROUND(sale_price_incl_tax_, curr_rounding_);
         line_gross_          := ROUND((sale_price_incl_tax_ - discount_amount_) * stage_rec_.currency_rate, rounding_);
      ELSE
      -- NOTE: Calculations are done using order currency, then final values are converted to base currency.
         sales_price_     := stage_rec_.buy_qty_due * stage_rec_.price_conv_factor * stage_rec_.sale_unit_price;

         discount_amount_ := ROUND(sales_price_,curr_rounding_) - ROUND(( sales_price_ - line_discount_) * (1-(stage_rec_.order_discount + stage_rec_.additional_discount)),curr_rounding_);
         sales_price_     := ROUND(sales_price_, curr_rounding_);
         line_net_        := ROUND((sales_price_ - discount_amount_) * stage_rec_.currency_rate, rounding_);
      END IF;
      line_qty_ := stage_rec_.buy_qty_due;

      Order_Line_Staged_Billing_API.Recalculate(order_no_, line_no_, rel_no_, line_item_no_,
                                                line_net_, line_net_, line_gross_, line_gross_, line_qty_, line_qty_, order_rec_.use_price_incl_tax);
   END LOOP;
END Copy_Staged_Billing___;


FUNCTION Internal_Co_Line_Exists___(
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER ) RETURN BOOLEAN
IS
   po_order_no_    VARCHAR2(12);
   po_line_no_     VARCHAR2(4);
   po_rel_no_      VARCHAR2(4);
   purchase_type_  VARCHAR2(30);
   dummy_          NUMBER;
      
   CURSOR internal_co_exists(po_order_no_ IN VARCHAR2, po_line_no_ IN VARCHAR2, po_rel_no_ IN VARCHAR2) IS
      SELECT 1
        FROM customer_order_line_tab
       WHERE demand_order_ref1 = po_order_no_
         AND demand_order_ref2 = po_line_no_
         AND demand_order_ref3 = po_rel_no_
         AND rowstate != 'Cancelled';
BEGIN
   Customer_Order_Pur_Order_API.Get_Purord_For_Custord(po_order_no_,
                                                       po_line_no_,
                                                       po_rel_no_,
                                                       purchase_type_,
                                                       order_no_,
                                                       line_no_,
                                                       rel_no_,
                                                       line_item_no_);

   IF (po_order_no_ IS NOT NULL) THEN
      OPEN internal_co_exists (po_order_no_, po_line_no_, po_rel_no_);
      FETCH internal_co_exists INTO dummy_;
      IF (internal_co_exists%FOUND) THEN
         CLOSE internal_co_exists;
         RETURN (TRUE);
      END IF;
      CLOSE internal_co_exists;      
   END IF;   
   RETURN (FALSE);
END Internal_Co_Line_Exists___;


PROCEDURE Raise_No_Update_Error___
IS
BEGIN
   Error_SYS.Record_General(lu_name_, 'UPDATE_NOT_ALLOWED: Updates are not allowed, as any alteration should be handled either from the Service itself or by creating a credit invoice.');
END Raise_No_Update_Error___;


PROCEDURE Raise_No_Update_Fsm_Error___
IS
BEGIN
   Error_SYS.Record_General(lu_name_, 'UPDATE_NOT_ALLOWED_FSM: Updates are not allowed on the order lines created from Field Service Management.');
END Raise_No_Update_Fsm_Error___;


PROCEDURE Raise_Sm_Object_Error___
IS
BEGIN
   Error_SYS.Record_General(lu_name_, 'SMOBJNULL: Superior SM Object cannot be empty when Superior SM Site have a value.');
END Raise_Sm_Object_Error___;


PROCEDURE Raise_Scrapped_Object_Error___ (
   sup_sm_object_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Record_General(lu_name_, 'SMSCRAPPED: It is not possible to add objects belonging to a scrapped object :P1.', sup_sm_object_);
END Raise_Scrapped_Object_Error___;


PROCEDURE Raise_Sales_Qty_Less_Error___ (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Record_General(lu_name_, 'NOLESSQTYCOL: The sales quantity may not be less than the sum of the reserved/picked quantity and the delivered quantity of customer order :P1-:P2-:P3.', order_no_, line_no_, rel_no_);
END Raise_Sales_Qty_Less_Error___;


PROCEDURE Raise_Prepay_Amount_Error___
IS
BEGIN
   Error_SYS.Record_General(lu_name_, 'PREPAYEXCEED: The prepayment amount is larger than the CO gross amount/curr including charges.');
END Raise_Prepay_Amount_Error___;


PROCEDURE Raise_Info_Message___
IS
BEGIN
   Client_SYS.Add_Info(lu_name_, 'SETNOAUTOCREATION: According to the shipment creation method, the line should be connected to a shipment at pick list creation. '||
                        'This will not happen for a non-inventory part, since it is never included in a pick list. A non-inventory part must be manually connected to a Shipment.');
END Raise_Info_Message___;


PROCEDURE Raise_Delnote_Info_Message___
IS
BEGIN
   Client_SYS.Add_Info(lu_name_, 'PREL_DELNOTE_CREATE1: Preliminary Delivery Note is already created. IF the Delivery Note is already printed the delivery information needs to be updated manually.');
END Raise_Delnote_Info_Message___;


--@IgnoreMissingSysinit
FUNCTION Get_Price_Total___ (
   order_no_              IN VARCHAR2,
   line_no_               IN VARCHAR2,
   rel_no_                IN VARCHAR2,
   line_item_no_          IN NUMBER,
   rental_chargable_days_ IN NUMBER,
   exclude_item_          IN VARCHAR2,
   price_in_base_curr_    IN BOOLEAN ) RETURN NUMBER
IS
   currency_code_             VARCHAR2(3);
   company_                   VARCHAR2(20);
   total_net_amount_          NUMBER;
   net_amount_                NUMBER := 0;
   net_amount_sum_            NUMBER := 0;
   new_rental_chargable_days_ NUMBER;
   total_discount_amount_     NUMBER;
   rounding_                  NUMBER;
   gross_curr_amount_         NUMBER;
   total_gross_amount_        NUMBER;
   line_discount_amount_      NUMBER;
   additional_disc_amount_    NUMBER;
   order_discount_amount_     NUMBER;
   total_amount_              NUMBER;
   tax_amount_                NUMBER := 0;
   contract_                  customer_order_line_tab.contract%TYPE;
   free_of_charge_            customer_order_line_tab.free_of_charge%TYPE;
   rental_                    customer_order_line_tab.rental%TYPE;
   buy_qty_due_               customer_order_line_tab.buy_qty_due%TYPE;
   price_conv_factor_         customer_order_line_tab.price_conv_factor%TYPE;
   additional_discount_       customer_order_line_tab.additional_discount%TYPE;
   order_discount_            customer_order_line_tab.order_discount%TYPE;
   tax_liability_type_        customer_order_line_tab.tax_liability_type%TYPE;
   use_price_incl_tax_        customer_order_tab.use_price_incl_tax%TYPE;   
   currency_rate_             NUMBER;
   base_rounding_             NUMBER;
   fetched_line_no_           CUSTOMER_ORDER_LINE_TAB.line_no%TYPE;
   fetched_rel_no_            CUSTOMER_ORDER_LINE_TAB.rel_no%TYPE;
   fetched_line_item_no_      CUSTOMER_ORDER_LINE_TAB.line_item_no%TYPE;
   rental_db_                 CUSTOMER_ORDER_LINE_TAB.rental%TYPE;
  
   CURSOR get_co_header_info IS
      SELECT contract, use_price_incl_tax, currency_code       
      FROM   customer_order_tab
      WHERE  order_no = order_no_;
   
   CURSOR get_co_line_info IS
      SELECT buy_qty_due * price_conv_factor * sale_unit_price total_net_amount, buy_qty_due * price_conv_factor * unit_price_incl_tax total_gross_amount,
             rental, buy_qty_due, price_conv_factor, additional_discount, order_discount, tax_liability_type,
             currency_rate, line_no, rel_no, line_item_no, rental
      FROM   customer_order_line_tab
      WHERE  order_no     = order_no_
      AND    (line_no = line_no_ OR line_no_ IS NULL)
      AND    (rel_no = rel_no_ OR rel_no_ IS NULL)
      AND    (line_item_no = line_item_no_ 
              OR (line_item_no_ IS NULL AND line_item_no <= 0 AND rowstate != 'Cancelled'))
      AND    (exclude_item_ = 'FALSE' OR (exclude_item_ = 'TRUE' AND charged_item != 'ITEM NOT CHARGED' AND exchange_item != 'EXCHANGED ITEM'))
      AND    free_of_charge != free_of_charge_;
BEGIN
   free_of_charge_ := Fnd_Boolean_API.DB_TRUE;
   OPEN  get_co_line_info;
   FETCH get_co_line_info  INTO total_net_amount_, total_gross_amount_, rental_, buy_qty_due_, price_conv_factor_,
                                additional_discount_, order_discount_, tax_liability_type_,
                                currency_rate_, fetched_line_no_, fetched_rel_no_, fetched_line_item_no_, rental_db_;
   WHILE get_co_line_info%FOUND LOOP
      IF (currency_code_ IS NULL) THEN
         OPEN  get_co_header_info;
         FETCH get_co_header_info INTO contract_, use_price_incl_tax_, currency_code_;
         CLOSE get_co_header_info;
         company_       := Site_API.Get_Company(contract_);
         rounding_      := Currency_Code_API.Get_Currency_Rounding(company_, currency_code_);
         base_rounding_ := Currency_Code_API.Get_Currency_Rounding(company_, Company_Finance_API.Get_Currency_Code(company_));
      END IF;
      new_rental_chargable_days_ := Get_Rental_Chargeable_Days(order_no_, fetched_line_no_, fetched_rel_no_, fetched_line_item_no_, rental_db_);

      IF (use_price_incl_tax_  = 'TRUE') THEN
         total_gross_amount_  := ROUND((total_gross_amount_ * new_rental_chargable_days_), rounding_);
         total_amount_        := total_gross_amount_;        
      ELSE
         new_rental_chargable_days_ := NVL(rental_chargable_days_, new_rental_chargable_days_);
         total_net_amount_    := total_net_amount_ * new_rental_chargable_days_;
         total_amount_        := total_net_amount_;        
      END IF;     

      -- fetch discount amounts
      line_discount_amount_   := Cust_Order_Line_Discount_API.Get_Total_Line_Discount( order_no_, 
                                                                                       fetched_line_no_, 
                                                                                       fetched_rel_no_, 
                                                                                       fetched_line_item_no_, 
                                                                                       buy_qty_due_, 
                                                                                       price_conv_factor_, 
                                                                                       rounding_ );
      additional_disc_amount_ := ROUND(((total_amount_ - line_discount_amount_) * additional_discount_/100 ), rounding_);
      order_discount_amount_  := ROUND(((total_amount_ - line_discount_amount_) * order_discount_/100), rounding_);
      total_discount_amount_  := line_discount_amount_ + additional_disc_amount_ +  order_discount_amount_;

      -- calculate net_amount_
      IF (use_price_incl_tax_  = 'TRUE') THEN
         gross_curr_amount_   := total_gross_amount_ - total_discount_amount_;
         IF (tax_liability_type_ = 'EXM') THEN
            -- No tax paid for this order line
            tax_amount_ := 0;
         ELSE
            tax_amount_ := Source_Tax_Item_API.Get_Total_Tax_Curr_Amount(company_, 
                                                                         Tax_Source_API.DB_CUSTOMER_ORDER_LINE,
                                                                         order_no_,
                                                                         fetched_line_no_,
                                                                         fetched_rel_no_,
                                                                         TO_CHAR(fetched_line_item_no_),
                                                                         '*');
         END IF;      
         tax_amount_ := ROUND(tax_amount_, rounding_);     
         net_amount_ := gross_curr_amount_ - NVL(tax_amount_, 0);
      ELSE 
         total_net_amount_  := ROUND(total_net_amount_, rounding_);
         net_amount_        := total_net_amount_ - total_discount_amount_;
      END IF;
      IF price_in_base_curr_ THEN
            net_amount_ := ROUND(net_amount_ * currency_rate_, base_rounding_);
      END IF;
      net_amount_sum_ := net_amount_sum_ + net_amount_;

      FETCH get_co_line_info  INTO total_net_amount_, total_gross_amount_, rental_, buy_qty_due_, price_conv_factor_,
                                additional_discount_, order_discount_, tax_liability_type_,
                                currency_rate_, fetched_line_no_, fetched_rel_no_, fetched_line_item_no_, rental_db_;

   END LOOP;
   CLOSE get_co_line_info;
   RETURN net_amount_sum_;
END Get_Price_Total___;


PROCEDURE Check_And_Add_To_Shipment___(
   line_rec_        IN CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   header_rowstate_ IN VARCHAR2)
IS
   shipment_id_     NUMBER;
   shipment_id_tab_ Shipment_API.Shipment_Id_Tab;
BEGIN
   IF (line_rec_.shipment_connected = 'FALSE' AND header_rowstate_ IN ('Released','Reserved','Picked','PartiallyDelivered') AND line_rec_.line_item_no <=0 AND
      line_rec_.shipment_creation NOT IN ('NO_AUTOMATIC', 'PICK_LIST_CREATION') AND line_rec_.supply_code NOT IN ('ND', 'IPD') AND (line_rec_.rowstate != 'Cancelled'))
      THEN
      Shipment_Handling_Utility_API.Add_Source_Line_To_Shipment(shipment_id_              => shipment_id_,
                                                                source_ref1_              => line_rec_.order_no,
                                                                source_ref2_              => line_rec_.line_no,
                                                                source_ref3_              => line_rec_.rel_no,
                                                                source_ref4_              => line_rec_.line_item_no,
                                                                source_ref_type_db_       => Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER,
                                                                receiver_type_db_         => Sender_Receiver_Type_API.DB_CUSTOMER,
                                                                shipment_id_tab_          => shipment_id_tab_,
                                                                ignore_existing_shipment_ => 'FALSE');
   END IF;
END Check_And_Add_To_Shipment___;


PROCEDURE Assign_Rel_Mtrl_Planning___ (
   newrec_            IN OUT NOCOPY CUSTOMER_ORDER_LINE_TAB%ROWTYPE,
   header_rowstate_   IN VARCHAR2 )
IS
   rel_mtrl_planning_ SITE_TO_SITE_RESERVE_SETUP_TAB.rel_mtrl_planning%TYPE;
BEGIN
   IF (Site_To_Site_Reserve_Setup_API.Exists(newrec_.supply_site, newrec_.contract)) THEN  
      rel_mtrl_planning_ := Site_To_Site_Reserve_Setup_API.Get_Rel_Mtrl_Planning_Db(newrec_.supply_site, newrec_.contract);
      IF (rel_mtrl_planning_ = Rel_Mtrl_Planning_API.DB_VISIBLE_PLANNED) THEN
         newrec_.rel_mtrl_planning := 'TRUE';
      ELSIF (header_rowstate_ = 'Released' AND (rel_mtrl_planning_ = Rel_Mtrl_Planning_API.DB_VISIBLE_RELEASED)) THEN
         newrec_.rel_mtrl_planning := 'TRUE';
      ELSE
         newrec_.rel_mtrl_planning := 'FALSE';
      END IF;      
   ELSE
      newrec_.rel_mtrl_planning := 'TRUE';
   END IF;
END Assign_Rel_Mtrl_Planning___;


FUNCTION Get_Amt_Ratio_Per_Tax_Deliv___ (
   order_no_      IN VARCHAR2,
   tax_code_      IN VARCHAR2,
   delivery_type_ IN VARCHAR2 DEFAULT NULL) RETURN NUMBER
IS
   gross_amount_ratio_     NUMBER;
   line_count_             NUMBER;
   rec_count_              NUMBER;
   ratio_sum_              NUMBER;
   rounding_               NUMBER;
   ordrec_                 Customer_Order_API.Public_Rec;
   ord_gross_amount_       NUMBER;
   string_null_            VARCHAR2(15) := Database_SYS.string_null_;
   
   CURSOR get_total_lines IS
      SELECT COUNT(COUNT(tax_code))
        FROM PREPAY_TAX_INFO
       WHERE order_no = order_no_
    GROUP BY tax_code, delivery_type;

   CURSOR get_gross_amount IS
      SELECT tax_code,
             delivery_type,
             (SUM(Get_Sale_Price_Total(order_no, line_no, rel_no, line_item_no)) +
              SUM(Get_Total_Tax_Amount_Curr(order_no, line_no, rel_no, line_item_no))) gross_amount
      FROM PREPAY_TAX_INFO
      WHERE order_no = order_no_
      GROUP BY tax_code, delivery_type
      ORDER BY tax_code, delivery_type;
BEGIN
   OPEN get_total_lines;
   FETCH get_total_lines INTO line_count_;
   CLOSE get_total_lines;

   ordrec_           := Customer_Order_API.Get(order_no_);
   rounding_         := Currency_Code_API.Get_Currency_Rounding(Site_API.Get_Company(ordrec_.contract), ordrec_.currency_code);

   rec_count_        := 0;
   ratio_sum_        := 0;
   ord_gross_amount_ := Customer_Order_API.Get_Ord_Gross_Amount(order_no_);
   FOR rec_ IN get_gross_amount LOOP
      rec_count_ := rec_count_ + 1;
      -- Comparison of delivery_type was added to the condition
      IF ((rec_.tax_code = tax_code_) AND 
          NVL(rec_.delivery_type, string_null_) = NVL(delivery_type_, string_null_)) THEN
         IF (rec_count_ != line_count_) THEN
            gross_amount_ratio_ := rec_.gross_amount / ord_gross_amount_;
            RETURN gross_amount_ratio_;
         ELSE
            -- This is to avoid miscalculation of rounding error.
            gross_amount_ratio_ := (1 - ratio_sum_);
            RETURN gross_amount_ratio_;
         END IF;
      END IF;
      ratio_sum_ := ratio_sum_ + (rec_.gross_amount / ord_gross_amount_);
   END LOOP;
END Get_Amt_Ratio_Per_Tax_Deliv___;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------


--@IgnoreMissingSysinit
PROCEDURE Language_Refreshed
IS
BEGIN
   Domain_SYS.Language_Refreshed(lu_name_, Get_Client_Values___, Get_Db_Values___, 'STATE');
END Language_Refreshed;


--@IgnoreMissingSysinit
PROCEDURE Init
IS
BEGIN
   Domain_SYS.Load_State(lu_name_, Get_Client_Values___, Get_Db_Values___);
END Init;

PROCEDURE Post_Installation_View
IS
   stmt_ CLOB;
   eol_  VARCHAR2(2) := chr(13)||chr(10);
BEGIN
   General_SYS.Init_Method(Customer_Order_Line_API.lu_name_, 'Customer_Order_Line_API', 'Post_Installation_View');
      stmt_ := 'CREATE OR REPLACE VIEW DELIVERED_SERIALS_TO_REGISTER AS'||eol_;
      stmt_ := stmt_ || 'SELECT DISTINCT ith.serial_no             serial_no,'||eol_;
      stmt_ := stmt_ || '                col.demand_order_ref1     demand_order_ref1,'||eol_;
      stmt_ := stmt_ || '                col.demand_order_ref2     demand_order_ref2,'||eol_;
      stmt_ := stmt_ || '                col.demand_order_ref3     demand_order_ref3,       '||eol_;
      stmt_ := stmt_ || '                col.rowid                 objid,'||eol_;
      stmt_ := stmt_ || '                ltrim(lpad(to_char(col.rowversion,''YYYYMMDDHH24MISS''),2000))    objversion,'||eol_;
      stmt_ := stmt_ || '                col.rowkey                objkey'||eol_;
      stmt_ := stmt_ || 'FROM   customer_order_line_tab col, inventory_transaction_hist_pub ith'||eol_;
      stmt_ := stmt_ || 'WHERE  ith.source_ref1     = col.order_no'||eol_;
      stmt_ := stmt_ || 'AND    ith.source_ref2     = col.line_no'||eol_;
      stmt_ := stmt_ || 'AND    ith.source_ref3     = col.rel_no'||eol_;
      stmt_ := stmt_ || 'AND    ith.source_ref4     = col.line_item_no'||eol_;
      stmt_ := stmt_ || 'AND    ith.source_ref_type = ''CUST ORDER'''||eol_;
      stmt_ := stmt_ || 'AND    col.demand_code     = ''IPD'''||eol_;
      stmt_ := stmt_ || 'AND    ith.qty_reversed    = 0'||eol_;
      stmt_ := stmt_ || 'AND    ith.direction IN (''-'', ''0'')'||eol_;
      stmt_ := stmt_ || 'AND    ith.source_ref5 IS NOT NULL'||eol_;
      stmt_ := stmt_ || 'AND    ((ith.serial_no != ''*'' AND  ith.serial_no NOT IN (SELECT serial_no'||eol_;
      stmt_ := stmt_ || '                              FROM   inventory_transaction_hist_pub ith'||eol_;
      stmt_ := stmt_ || '                              WHERE  ith.alt_source_ref1     = col.demand_order_ref1                             '||eol_;
      stmt_ := stmt_ || '                              AND    ith.alt_source_ref2     = col.demand_order_ref2'||eol_;
      stmt_ := stmt_ || '                              AND    ith.alt_source_ref3     = col.demand_order_ref3'||eol_;
      stmt_ := stmt_ || '                              AND    ith.alt_source_ref_type = ''CUSTOMER ORDER DIRECT''                             '||eol_;
      stmt_ := stmt_ || '                              AND    ith.source_ref_type     = ''CUST ORDER''                             '||eol_;
      stmt_ := stmt_ || '                              AND    ith.qty_reversed        = 0))'||eol_;
      stmt_ := stmt_ || '      OR (ith.serial_no = ''*''))'||eol_;
   IF(Dictionary_SYS.Component_Is_Active('PURCH')) THEN
      stmt_ := stmt_ || 'AND    (EXISTS (SELECT 1 FROM user_allowed_site_pub WHERE col.contract = site) OR '||eol_;
      stmt_ := stmt_ || '        EXISTS (SELECT 1 FROM user_allowed_site_pub WHERE site IN (SELECT contract FROM purchase_order_tab p WHERE p.order_no = col.demand_order_ref1)))'||eol_;
   ELSE
      stmt_ := stmt_ || 'AND   EXISTS (SELECT 1 FROM user_allowed_site_pub WHERE col.contract = site)'||eol_;
   END IF;
      stmt_ := stmt_ || 'WITH READ ONLY';
      
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE stmt_;
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON TABLE DELIVERED_SERIALS_TO_REGISTER
         IS ''LU=CustomerOrderLine^PROMPT=Delivered serials to be registered^MODULE=ORDER^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN DELIVERED_SERIALS_TO_REGISTER.serial_no
         IS ''FLAGS=A---L^DATATYPE=STRING(50)^PROMPT=Serial No^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN DELIVERED_SERIALS_TO_REGISTER.demand_order_ref1
         IS ''FLAGS=A---L^DATATYPE=STRING(15)^PROMPT=Demand Order Ref1^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN DELIVERED_SERIALS_TO_REGISTER.demand_order_ref2
         IS ''FLAGS=A---L^DATATYPE=STRING(10)^PROMPT=Demand Order Ref2^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN DELIVERED_SERIALS_TO_REGISTER.demand_order_ref3
         IS ''FLAGS=A---L^DATATYPE=STRING(4)^PROMPT=Demand Order Ref3^''';
      stmt_ := 'CREATE OR REPLACE VIEW CUSTOMER_ORDER_JOIN AS'||eol_;
      stmt_ := stmt_ || 'SELECT co.order_no                              order_no,'||eol_;
      stmt_ := stmt_ || '       col.line_no                              line_no,'||eol_;
      stmt_ := stmt_ || '       col.rel_no                               rel_no,'||eol_;
      stmt_ := stmt_ || '       col.line_item_no                         line_item_no,'||eol_;
      stmt_ := stmt_ || '       co.authorize_code                        authorize_code,'||eol_;
      stmt_ := stmt_ || '       co.contract                              contract,'||eol_;
      stmt_ := stmt_ || '       co.customer_no                           customer_no,'||eol_;
      stmt_ := stmt_ || '       Customer_Info_API.Get_Name(co.customer_no) customer_name,'||eol_;
      stmt_ := stmt_ || '       co.customer_no_pay                       customer_no_pay,'||eol_;
      stmt_ := stmt_ || '       co.customer_po_no                        customer_po_no,'||eol_;
      stmt_ := stmt_ || '       Gen_Yes_No_API.Decode(col.default_addr_flag) default_addr_flag,'||eol_;
      stmt_ := stmt_ || '       col.default_addr_flag                    default_addr_flag_db,'||eol_;
      stmt_ := stmt_ || '       Gen_Yes_No_API.Decode(col.addr_flag)     addr_flag,'||eol_;
      stmt_ := stmt_ || '       col.addr_flag                            addr_flag_db,'||eol_;
      stmt_ := stmt_ || '       co.agreement_id                          agreement_id,'||eol_;
      stmt_ := stmt_ || '       Customer_Backorder_Option_API.Decode(co.backorder_option) backorder_option,'||eol_;
      stmt_ := stmt_ || '       co.backorder_option                      backorder_option_db,'||eol_;
      stmt_ := stmt_ || '       co.country_code                          country_code,       '||eol_;
      stmt_ := stmt_ || '       co.currency_code                         currency_code,'||eol_;
      stmt_ := stmt_ || '       col.delivery_leadtime                    delivery_leadtime,'||eol_;
      stmt_ := stmt_ || '       col.picking_leadtime                     picking_leadtime,'||eol_;
      stmt_ := stmt_ || '       col.delivery_terms                       delivery_terms,'||eol_;
      stmt_ := stmt_ || '       Order_Delivery_Term_API.Get_Description(col.delivery_terms) delivery_terms_desc,'||eol_;
      stmt_ := stmt_ || '       col.del_terms_location                   del_terms_location,'||eol_;
      stmt_ := stmt_ || '       col.district_code                        district_code,'||eol_;
      stmt_ := stmt_ || '       col.forward_agent_id                     forward_agent_id,'||eol_;
      stmt_ := stmt_ || '       Order_Delivery_Type_API.Decode(co.internal_delivery_type) internal_delivery_type,'||eol_;
      stmt_ := stmt_ || '       co.internal_delivery_type                internal_delivery_type_db,'||eol_;
      stmt_ := stmt_ || '       co.internal_po_no                        internal_po_no,'||eol_;
      stmt_ := stmt_ || '       co.language_code                         language_code,'||eol_;
      stmt_ := stmt_ || '       co.market_code                           market_code,'||eol_;
      stmt_ := stmt_ || '       co.order_code                            order_code,'||eol_;
      stmt_ := stmt_ || '       Order_Confirmation_Printed_API.Decode(co.order_conf) order_conf,'||eol_;
      stmt_ := stmt_ || '       co.order_conf                            order_conf_db,'||eol_;
      stmt_ := stmt_ || '       co.order_id                              order_id,'||eol_;
      stmt_ := stmt_ || '       co.pay_term_id                           pay_term_id,'||eol_;
      stmt_ := stmt_ || '       co.pre_accounting_id                     pre_accounting_id,'||eol_;
      stmt_ := stmt_ || '       col.price_list_no                        price_list_no,'||eol_;
      stmt_ := stmt_ || '       col.region_code                          region_code,'||eol_;
      stmt_ := stmt_ || '       col.route_id                             route_id,'||eol_;
      stmt_ := stmt_ || '       co.salesman_code                         salesman_code,'||eol_;
      stmt_ := stmt_ || '       col.ship_addr_no                         ship_addr_no,'||eol_;
      stmt_ := stmt_ || '       col.ship_via_code                        ship_via_code,'||eol_;
      stmt_ := stmt_ || '       Mpccom_Ship_Via_API.Get_Description(col.ship_via_code)        ship_via_desc,'||eol_;
      stmt_ := stmt_ || '       col.wanted_delivery_date                 wanted_delivery_date,'||eol_;
      stmt_ := stmt_ || '       col.tax_liability                        tax_liability,'||eol_;
      stmt_ := stmt_ || '       col.catalog_no                           catalog_no,'||eol_;
      stmt_ := stmt_ || '       col.catalog_desc                         catalog_desc,'||eol_;
      stmt_ := stmt_ || '       col.purchase_part_no                     purchase_part_no,'||eol_;
      stmt_ := stmt_ || '       Sales_Part_Type_API.Decode(col.catalog_type) catalog_type,'||eol_;
      stmt_ := stmt_ || '       col.catalog_type                         catalog_type_db,'||eol_;
      stmt_ := stmt_ || '       col.buy_qty_due                          buy_qty_due,'||eol_;
      stmt_ := stmt_ || '       col.desired_qty                          desired_qty,'||eol_;
      stmt_ := stmt_ || '       col.base_sale_unit_price                 base_sale_unit_price,'||eol_;
      stmt_ := stmt_ || '       col.base_unit_price_incl_tax             base_unit_price_incl_tax,'||eol_;
      stmt_ := stmt_ || '       col.conv_factor                          conv_factor,'||eol_;
      stmt_ := stmt_ || '       col.cost                                 cost,'||eol_;
      stmt_ := stmt_ || '       col.customer_part_no                     customer_part_no,'||eol_;
      stmt_ := stmt_ || '       col.customer_part_conv_factor            customer_part_conv_factor,'||eol_;
      stmt_ := stmt_ || '       col.customer_part_unit_meas              customer_part_unit_meas,'||eol_;
      stmt_ := stmt_ || '       col.customer_part_buy_qty                customer_part_buy_qty,'||eol_;
      stmt_ := stmt_ || '       col.date_entered                         date_entered,'||eol_;
      stmt_ := stmt_ || '       col.delivery_type                        line_delivery_type,'||eol_;
      stmt_ := stmt_ || '       col.discount                             discount,'||eol_;
      stmt_ := stmt_ || '       col.vendor_no                            vendor_no,'||eol_;
      stmt_ := stmt_ || '       col.tax_code                             tax_code,'||eol_;
      stmt_ := stmt_ || '       col.tax_class_id                         tax_class_id,'||eol_;
      stmt_ := stmt_ || '       col.note_text                            note_text,'||eol_;
      stmt_ := stmt_ || '       col.order_discount                       order_discount,'||eol_;
      stmt_ := stmt_ || '       col.currency_rate                        currency_rate,'||eol_;
      stmt_ := stmt_ || '       col.part_no                              part_no,'||eol_;
      stmt_ := stmt_ || '       col.configuration_id                     configuration_id,'||eol_;
      stmt_ := stmt_ || '       col.configured_line_price_id             configured_line_price_id,'||eol_;
      stmt_ := stmt_ || '       col.planned_delivery_date                planned_delivery_date,'||eol_;
      stmt_ := stmt_ || '       col.planned_due_date                     planned_due_date,'||eol_;
      stmt_ := stmt_ || '       col.supply_site_due_date                 supply_site_due_date,'||eol_;
      stmt_ := stmt_ || '       col.promised_delivery_date               promised_delivery_date,'||eol_;
      stmt_ := stmt_ || '       col.pre_accounting_id                    line_pre_accounting_id,'||eol_;
      stmt_ := stmt_ || '       col.price_conv_factor                    price_conv_factor,'||eol_;
      stmt_ := stmt_ || '       col.qty_assigned                         qty_assigned,'||eol_;
      stmt_ := stmt_ || '       col.qty_invoiced                         qty_invoiced,'||eol_;
      stmt_ := stmt_ || '       col.qty_on_order                         qty_on_order,'||eol_;
      stmt_ := stmt_ || '       col.qty_picked                           qty_picked,'||eol_;
      stmt_ := stmt_ || '       col.qty_returned                         qty_returned,'||eol_;
      stmt_ := stmt_ || '       col.qty_shipdiff                         qty_shipdiff,'||eol_;
      stmt_ := stmt_ || '       col.qty_shipped                          qty_shipped,'||eol_;
      stmt_ := stmt_ || '       col.qty_short                            qty_short,'||eol_;
      stmt_ := stmt_ || '       col.real_ship_date                       real_ship_date,'||eol_;
      stmt_ := stmt_ || '       col.qty_to_ship                          qty_to_ship,'||eol_;
      stmt_ := stmt_ || '       col.revised_qty_due                      revised_qty_due,'||eol_;
      stmt_ := stmt_ || '       col.sale_unit_price                      sale_unit_price,'||eol_;
      stmt_ := stmt_ || '       col.unit_price_incl_tax                  unit_price_incl_tax,'||eol_;
      stmt_ := stmt_ || '       col.sales_unit_meas                      sales_unit_meas,'||eol_;
      stmt_ := stmt_ || '       Order_Supply_Type_API.Decode(col.supply_code) supply_code,'||eol_;
      stmt_ := stmt_ || '       col.supply_code                          supply_code_db,'||eol_;
      stmt_ := stmt_ || '       col.planned_ship_date                    planned_ship_date,'||eol_;
      stmt_ := stmt_ || '       col.planned_ship_period                  planned_ship_period,'||eol_;
      stmt_ := stmt_ || '       col.line_total_qty                       line_total_qty,'||eol_;
      stmt_ := stmt_ || '       col.line_total_weight_gross              line_total_weight_gross,'||eol_;
      stmt_ := stmt_ || '       col.line_total_weight                    line_total_weight,'||eol_;
      stmt_ := stmt_ || '       Consignment_Stock_API.Decode(col.consignment_stock) consignment_stock,'||eol_;
      stmt_ := stmt_ || '       col.consignment_stock                    consignment_stock_db,'||eol_;
      stmt_ := stmt_ || '       col.close_tolerance                      close_tolerance,'||eol_;
      stmt_ := stmt_ || '       Charged_Item_API.Decode(col.charged_item) charged_item,'||eol_;
      stmt_ := stmt_ || '       col.charged_item                         charged_item_db,'||eol_;
      stmt_ := stmt_ || '       col.demand_order_ref1                    demand_order_ref1,'||eol_;
      stmt_ := stmt_ || '       col.demand_order_ref2                    demand_order_ref2,'||eol_;
      stmt_ := stmt_ || '       col.demand_order_ref3                    demand_order_ref3,'||eol_;
      stmt_ := stmt_ || '       Order_Supply_Type_API.Decode(col.demand_code) demand_code,'||eol_;
      stmt_ := stmt_ || '       col.demand_code                          demand_code_db,'||eol_;
      stmt_ := stmt_ || '       Dop_Connection_API.Decode(col.dop_connection) dop_connection,'||eol_;
      stmt_ := stmt_ || '       col.dop_connection                       dop_connection_db,'||eol_;
      stmt_ := stmt_ || '       Create_Sm_Object_Option_API.Decode(col.create_sm_object_option) create_sm_object_option,'||eol_;
      stmt_ := stmt_ || '       col.create_sm_object_option              create_sm_object_option_db,'||eol_;
      stmt_ := stmt_ || '       Staged_Billing_Type_API.Decode(col.staged_billing)  staged_billing,'||eol_;
      stmt_ := stmt_ || '       col.staged_billing                       staged_billing_db,'||eol_;
      stmt_ := stmt_ || '       col.original_part_no                     original_part_no,'||eol_;
      stmt_ := stmt_ || '       Service_Management_Connect_API.Decode(col.sm_connection)  sm_connection,'||eol_;
      stmt_ := stmt_ || '       col.sm_connection                        sm_connection_db,'||eol_;
      stmt_ := stmt_ || '       col.sup_sm_contract                      sup_sm_contract,'||eol_;
      stmt_ := stmt_ || '       col.sup_sm_object                        sup_sm_object,'||eol_;
      stmt_ := stmt_ || '       co.priority                              priority,'||eol_;
      stmt_ := stmt_ || '       col.input_unit_meas                      input_unit_meas,'||eol_;
      stmt_ := stmt_ || '       col.input_qty                            input_qty,'||eol_;
      stmt_ := stmt_ || '       col.input_conv_factor                    input_conv_factor,'||eol_;
      stmt_ := stmt_ || '       col.input_variable_values                input_variable_values,'||eol_;
      stmt_ := stmt_ || '       col.part_price                           part_price,'||eol_;
      stmt_ := stmt_ || '       col.calc_char_price                      calc_char_price,'||eol_;
      stmt_ := stmt_ || '       col.char_price                           char_price,'||eol_;
      stmt_ := stmt_ || '       Pricing_Source_API.Decode(col.price_source) price_source,'||eol_;
      stmt_ := stmt_ || '       col.price_source                         price_source_db,'||eol_;
      stmt_ := stmt_ || '       Freeze_Flag_API.Decode(col.price_freeze) price_freeze,'||eol_;
      stmt_ := stmt_ || '       col.price_freeze                         price_freeze_db,'||eol_;
      stmt_ := stmt_ || '       col.dock_code                            dock_code,'||eol_;
      stmt_ := stmt_ || '       col.sub_dock_code                        sub_dock_code,'||eol_;
      stmt_ := stmt_ || '       col.ref_id                               ref_id,'||eol_;
      stmt_ := stmt_ || '       col.location_no                          location_no,'||eol_;
      stmt_ := stmt_ || '       col.price_effectivity_date               price_effectivity_date,'||eol_;
      stmt_ := stmt_ || '       col.latest_release_date                  latest_release_date,'||eol_;
      stmt_ := stmt_ || '       Gen_Yes_No_API.Decode(col.ctp_planned)   ctp_planned,'||eol_;
      stmt_ := stmt_ || '       col.ctp_planned                          ctp_planned_db,'||eol_;
      stmt_ := stmt_ || '       col.cust_warranty_id                     cust_warranty_id,'||eol_;
      stmt_ := stmt_ || '       col.job_id                               job_id,'||eol_;
      stmt_ := stmt_ || '       col.price_source_id                      price_source_id,'||eol_;
      stmt_ := stmt_ || '       col.condition_code                       condition_code,'||eol_;
      stmt_ := stmt_ || '       col.additional_discount                  additional_discount,'||eol_;
      stmt_ := stmt_ || '       Part_Ownership_API.Decode(col.part_ownership) part_ownership,'||eol_;
      stmt_ := stmt_ || '       col.part_ownership                       part_ownership_db,'||eol_;
      stmt_ := stmt_ || '       col.owning_customer_no                   owning_customer_no,'||eol_;
      stmt_ := stmt_ || '       Exchange_Item_API.Decode(col.exchange_item) exchange_item,'||eol_;
      stmt_ := stmt_ || '       col.exchange_item                        exchange_item_db,'||eol_;
      stmt_ := stmt_ || '       Supply_Site_Reserve_Type_API.Decode(col.supply_site_reserve_type) supply_site_reserve_type,'||eol_;
      stmt_ := stmt_ || '       col.supply_site_reserve_type             supply_site_reserve_type_db,'||eol_;
      stmt_ := stmt_ || '       col.originating_rel_no                   originating_rel_no,'||eol_;
      stmt_ := stmt_ || '       col.originating_line_item_no             originating_line_item_no,'||eol_;
      stmt_ := stmt_ || '       Release_Planning_API.Decode(col.release_planning) release_planning,'||eol_;
      stmt_ := stmt_ || '       col.release_planning                     release_planning_db,'||eol_;
      stmt_ := stmt_ || '       supplier_ship_via_transit                supplier_ship_via_transit,'||eol_;
      stmt_ := stmt_ || '       supplier_ship_via_transit_desc           supplier_ship_via_transit_desc,'||eol_;
      stmt_ := stmt_ || '       col.supply_site                          supply_site,'||eol_;
      stmt_ := stmt_ || '       NULL                                     replicate_changes,'||eol_;
      stmt_ := stmt_ || '       NULL                                     change_request,'||eol_;
      stmt_ := stmt_ || '       Fnd_Boolean_API.Decode(col.shipment_connected) shipment_connected,'||eol_;
      stmt_ := stmt_ || '       col.shipment_connected                   shipment_connected_db,'||eol_;
      stmt_ := stmt_ || '       Self_Billing_Type_API.Decode(col.self_billing) self_billing,'||eol_;
      stmt_ := stmt_ || '       col.self_billing                         self_billing_db,'||eol_;
      stmt_ := stmt_ || '       col.activity_seq                         activity_seq,'||eol_;
      stmt_ := stmt_ || '       col.project_id                           project_id,'||eol_;
      stmt_ := stmt_ || '       col.deliver_to_customer_no               deliver_to_customer_no,'||eol_;
      stmt_ := stmt_ || '       col.shipment_type                        shipment_type,'||eol_;
      stmt_ := stmt_ || '       Shipment_Creation_API.Decode(col.shipment_creation) shipment_creation,'||eol_;
      stmt_ := stmt_ || '       col.shipment_creation                    shipment_creation_db,'||eol_;
      stmt_ := stmt_ || '       col.cancel_reason                        cancel_reason,'||eol_;
      stmt_ := stmt_ || '       Fnd_Boolean_API.Decode(co.confirm_deliveries) confirm_deliveries,'||eol_;
      stmt_ := stmt_ || '       co.confirm_deliveries                    confirm_deliveries_db,'||eol_;
      stmt_ := stmt_ || '       Fnd_Boolean_API.Decode(co.check_sales_grp_deliv_conf) check_sales_grp_deliv_conf,'||eol_;
      stmt_ := stmt_ || '       co.check_sales_grp_deliv_conf            check_sales_grp_deliv_conf_db,'||eol_;
      stmt_ := stmt_ || '       Fnd_Boolean_API.Decode(co.delay_cogs_to_deliv_conf) delay_cogs_to_deliv_conf,'||eol_;
      stmt_ := stmt_ || '       co.delay_cogs_to_deliv_conf              delay_cogs_to_deliv_conf_db,'||eol_;
      stmt_ := stmt_ || '       Fnd_Boolean_API.Decode(col.delivery_confirmed) delivery_confirmed,'||eol_;
      stmt_ := stmt_ || '       col.delivery_confirmed                   delivery_confirmed_db,'||eol_;
      stmt_ := stmt_ || '       col.qty_confirmeddiff                    qty_confirmeddiff,'||eol_;
      stmt_ := stmt_ || '       Fnd_Boolean_API.Decode(col.provisional_price) provisional_price,'||eol_;
      stmt_ := stmt_ || '       col.provisional_price                    provisional_price_db,'||eol_;
      stmt_ := stmt_ || '       col.customer_po_line_no                  customer_po_line_no,'||eol_;
      stmt_ := stmt_ || '       col.customer_po_rel_no                   customer_po_rel_no,'||eol_;
      stmt_ := stmt_ || '       Fnd_Boolean_API.Decode(col.blocked_for_invoicing) blocked_for_invoicing,'||eol_;
      stmt_ := stmt_ || '       col.blocked_for_invoicing                blocked_for_invoicing_db,       '||eol_;
      stmt_ := stmt_ || '       blocked_reason                           blocked_reason,'||eol_;
      stmt_ := stmt_ || '       sales_contract_no                        sales_contract_no,'||eol_;
      stmt_ := stmt_ || '       contract_rev_seq                         contract_rev_seq,'||eol_;
      stmt_ := stmt_ || '       contract_line_no                         contract_line_no,'||eol_;
      stmt_ := stmt_ || '       contract_item_no                         contract_item_no,'||eol_;
      stmt_ := stmt_ || '       col.note_id                              note_id,'||eol_;
      stmt_ := stmt_ || '       col.load_id                              load_id,'||eol_;
      stmt_ := stmt_ || '       col.rowid                               objid,'||eol_;
      stmt_ := stmt_ || '       ltrim(lpad(to_char(col.rowversion,''YYYYMMDDHH24MISS''),2000))                           objversion,'||eol_;
      stmt_ := stmt_ || '       co.rowstate                              order_objstate,'||eol_;
      stmt_ := stmt_ || '       CUSTOMER_ORDER_API.Finite_State_Decode__(co.rowstate) order_state,'||eol_;
      stmt_ := stmt_ || '       col.rowstate                             objstate,'||eol_;
      stmt_ := stmt_ || '       CUSTOMER_ORDER_LINE_API.Finite_State_Decode__(col.rowstate) state,'||eol_;
      stmt_ := stmt_ || '       col.first_actual_ship_date               first_actual_ship_date,'||eol_;
      stmt_ := stmt_ || '       co.proposed_prepayment_amount            proposed_prepayment_amount,'||eol_;
      stmt_ := stmt_ || '       Fnd_Boolean_API.Decode(co.prepayment_approved) prepayment_approved,'||eol_;
      stmt_ := stmt_ || '       co.prepayment_approved                   prepayment_approved_db,'||eol_;
      stmt_ := stmt_ || '       co.use_pre_ship_del_note                 use_pre_ship_del_note_db,'||eol_;
      stmt_ := stmt_ || '       col.tax_id_no                            tax_id_no,'||eol_;
      stmt_ := stmt_ || '       col.tax_id_validated_date                tax_id_validated_date,'||eol_;
      stmt_ := stmt_ || '       Fnd_Boolean_API.Decode(col.price_source_net_price) price_source_net_price,'||eol_;
      stmt_ := stmt_ || '       col.price_source_net_price               price_source_net_price_db,'||eol_;
      stmt_ := stmt_ || '       NULL                                     dop_new_qty_demand,'||eol_;
      stmt_ := stmt_ || '       target_date                              target_date,'||eol_;
      stmt_ := stmt_ || '       Fnd_Boolean_API.Decode(col.rebate_builder)  rebate_builder,'||eol_;
      stmt_ := stmt_ || '       col.rebate_builder                       rebate_builder_db,'||eol_;
      stmt_ := stmt_ || '       co.rebate_customer                       rebate_customer,'||eol_;
      stmt_ := stmt_ || '       col.adjusted_weight_net                  adjusted_weight_net,'||eol_;
      stmt_ := stmt_ || '       col.adjusted_weight_gross                adjusted_weight_gross,'||eol_;
      stmt_ := stmt_ || '       col.adjusted_volume                      adjusted_volume,'||eol_;
      stmt_ := stmt_ || '       Price_Discount_Part_Level_API.Decode(col.part_level) part_level,'||eol_;
      stmt_ := stmt_ || '       col.part_level                           part_level_db,'||eol_;
      stmt_ := stmt_ || '       col.part_level_id                        part_level_id,'||eol_;
      stmt_ := stmt_ || '       Price_Discount_Cust_Level_API.Decode(col.customer_level) customer_level,'||eol_;
      stmt_ := stmt_ || '       col.customer_level                       customer_level_db,'||eol_;
      stmt_ := stmt_ || '       col.customer_level_id                    customer_level_id,'||eol_;
      stmt_ := stmt_ || '       col.customs_value                        customs_value,'||eol_;
      stmt_ := stmt_ || '       col.abnormal_demand                      abnormal_demand_db,'||eol_;
      stmt_ := stmt_ || '       col.cust_calendar_id                     cust_calendar_id,'||eol_;
      stmt_ := stmt_ || '       col.ext_transport_calendar_id            ext_transport_calendar_id,'||eol_;
      stmt_ := stmt_ || '       col.rel_mtrl_planning                    rel_mtrl_planning,'||eol_;
      stmt_ := stmt_ || '       col.inverted_conv_factor                 inverted_conv_factor,'||eol_;
      stmt_ := stmt_ || '       col.open_shipment_qty                    open_shipment_qty,  '||eol_;
      stmt_ := stmt_ || '       col.packing_instruction_id               packing_instruction_id,'||eol_;
      stmt_ := stmt_ || '       col.rental                               rental_db,'||eol_;
      stmt_ := stmt_ || '       Fnd_Boolean_API.Decode(co.use_price_incl_tax) use_price_incl_tax,'||eol_;
      stmt_ := stmt_ || '       co.use_price_incl_tax                    use_price_incl_tax_db,'||eol_;
      stmt_ := stmt_ || '       col.end_customer_id                      end_customer_id,'||eol_;
      stmt_ := stmt_ || '       col.cust_part_invert_conv_fact           cust_part_invert_conv_fact,'||eol_;
      stmt_ := stmt_ || '       NULL                                     changed_attrib_not_in_pol,'||eol_;
      stmt_ := stmt_ || '       col.tax_liability_type                   tax_liability_type_db,'||eol_;
      stmt_ := stmt_ || '       Fnd_Boolean_API.Decode(col.free_of_charge)  free_of_charge,'||eol_;
      stmt_ := stmt_ || '       col.free_of_charge                          free_of_charge_db,'||eol_;
      stmt_ := stmt_ || '       col.free_of_charge_tax_basis                free_of_charge_tax_basis,'||eol_;
      stmt_ := stmt_ || '       col.tax_calc_structure_id                tax_calc_structure_id,'||eol_;
      stmt_ := stmt_ || '       Customer_Order_Block_Type_API.Decode(co.blocked_type) blocked_type,'||eol_;
      stmt_ := stmt_ || '       co.blocked_type                          blocked_type_db,'||eol_;
      stmt_ := stmt_ || '       Site_API.Get_Company(co.contract)        company,'||eol_;
          IF(Dictionary_SYS.Component_Is_Active('RENTAL')) THEN
      stmt_ := stmt_ || '          Rental_Object_API.Get_Rental_No(col.order_no, col.line_no, col.rel_no, col.line_item_no, ''CUST ORDER'') rental_no,'||eol_;
          ELSE
      stmt_ := stmt_ || '          NULL                                  rental_no,'||eol_;
          END IF;
      stmt_ := stmt_ || '       col.rowkey                               objkey,'||eol_;
      stmt_ := stmt_ || '       Pre_Accounting_API.Get_Account_No(col.pre_accounting_id)  code_a,'||eol_;
      stmt_ := stmt_ || '       Pre_Accounting_API.Get_Codeno_B(col.pre_accounting_id)    code_b,'||eol_;
      stmt_ := stmt_ || '       Pre_Accounting_API.Get_Codeno_C(col.pre_accounting_id)    code_c,'||eol_;
      stmt_ := stmt_ || '       Pre_Accounting_API.Get_Codeno_D(col.pre_accounting_id)    code_d,'||eol_;
      stmt_ := stmt_ || '       Pre_Accounting_API.Get_Codeno_E(col.pre_accounting_id)    code_e,'||eol_;
      stmt_ := stmt_ || '       Pre_Accounting_API.Get_Codeno_F(col.pre_accounting_id)    code_f,'||eol_;
      stmt_ := stmt_ || '       Pre_Accounting_API.Get_Codeno_G(col.pre_accounting_id)    code_g,'||eol_;
      stmt_ := stmt_ || '       Pre_Accounting_API.Get_Codeno_H(col.pre_accounting_id)    code_h,'||eol_;
      stmt_ := stmt_ || '       Pre_Accounting_API.Get_Codeno_I(col.pre_accounting_id)    code_i,'||eol_;
      stmt_ := stmt_ || '       Pre_Accounting_API.Get_Codeno_J(col.pre_accounting_id)    code_j,'||eol_;
      stmt_ := stmt_ || '       co.limit_sales_to_assortments            limit_sales_to_assortments_db,'||eol_;
      stmt_ := stmt_ || '       col.classification_part_no               classification_part_no,'||eol_;
      stmt_ := stmt_ || '       col.classification_standard              classification_standard,'||eol_;
      stmt_ := stmt_ || '       col.classification_unit_meas             classification_unit_meas,'||eol_;
      stmt_ := stmt_ || '       col.supply_site_part_no                  supply_site_part_no,'||eol_;
      stmt_ := stmt_ || '       -- gelr: acquisition_origin, begin'||eol_;
      stmt_ := stmt_ || '       col.acquisition_origin                   acquisition_origin,'||eol_;
      stmt_ := stmt_ || '       -- gelr: acquisition_origin, end'||eol_;
      stmt_ := stmt_ || '       -- gelr:good_service_statistical_code, begin'||eol_;
      stmt_ := stmt_ || '       col.statistical_code                     statistical_code,'||eol_;
      stmt_ := stmt_ || '       -- gelr:good_service_statistical_code, end'||eol_;
      stmt_ := stmt_ || '       -- gelr:disc_price_rounded, begin'||eol_;
      stmt_ := stmt_ || '       co.disc_price_round                      disc_price_round,'||eol_;
      stmt_ := stmt_ || '       col.original_discount                    original_discount,'||eol_;
      stmt_ := stmt_ || '       col.original_add_discount                original_add_discount,'||eol_;
      stmt_ := stmt_ || '       col.original_order_discount              original_order_discount,'||eol_;
      stmt_ := stmt_ || '       -- gelr:disc_price_rounded, end'||eol_;
      stmt_ := stmt_ || '       -- gelr:brazilian_specific_attributes, begin'||eol_;
      stmt_ := stmt_ || '       col.acquisition_reason_id                acquisition_reason_id,'||eol_;
      stmt_ := stmt_ || '       -- gelr:brazilian_specific_attributes, end'||eol_;
      stmt_ := stmt_ || '       co.invoiced_closed_date                  order_closed_date'||eol_;
      stmt_ := stmt_ || 'FROM   CUSTOMER_ORDER_TAB co, CUSTOMER_ORDER_LINE_TAB col'||eol_;
      stmt_ := stmt_ || 'WHERE  col.order_no = co.order_no'||eol_;
      stmt_ := stmt_ || 'AND    co.order_no IN (SELECT * FROM customer_order_usg)'||eol_;
      stmt_ := stmt_ || 'AND    co.customer_no IN (SELECT * FROM customer_info_usg)'||eol_;
      stmt_ := stmt_ || 'AND    EXISTS (SELECT 1 FROM user_allowed_site_pub WHERE co.contract = site)'||eol_;
      stmt_ := stmt_ || 'WITH READ ONLY';
      
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE stmt_;
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON TABLE CUSTOMER_ORDER_JOIN
         IS ''LU=CustomerOrderLine^PROMPT=Customer Order Line^MODULE=ORDER^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.order_no
         IS ''FLAGS=PMI-L^REF=CustomerOrder/NOCHECK^DATATYPE=STRING(12)/UPPERCASE^PROMPT=Order No^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.authorize_code
         IS ''DATATYPE=STRING(5)/UPPERCASE^PROMPT=Authorize Code^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.contract
         IS ''FLAGS=AMI--^DATATYPE=STRING(5)/UPPERCASE^PROMPT=Site^REF=Site/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.customer_no
         IS ''FLAGS=AMI--^DATATYPE=STRING(20)/UPPERCASE^PROMPT=Customer No^REF=CustOrdCustomer/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.agreement_id
         IS ''DATATYPE=STRING(10)^REF=CustomerAgreementLov(CUSTOMER_NO, CONTRACT, CURRENCY_CODE)/NOCHECK^PROMPT=Agreement Id^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.forward_agent_id
         IS ''REF=PartyTypeForwarder/NOCHECK^FLAGS=A-IU-^DATATYPE=STRING(20)/UPPERCASE^PROMPT=Forward Agent ID^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.internal_delivery_type
         IS ''FLAGS=AMIUL^DATATYPE=STRING^PROMPT=Internal Delivery Type^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.pay_term_id
         IS ''REF=PaymentTerm(COMPANY)/NOCHECK^PROMPT=Pay Term Id^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.ship_addr_no
         IS ''REF=CustOrdCustomerAddress(CUSTOMER_NO)/NOCHECK^FLAGS=AMIU-^DATATYPE=STRING(50)^PROMPT=Ship Addr No^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.wanted_delivery_date
         IS ''DATATYPE=DATE/DATE^FLAGS=AMIU-^PROMPT=Wanted Delivery Date^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.date_entered
         IS ''FLAGS=A----^DATATYPE=DATE/DATETIME^PROMPT=Date Entered^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.vendor_no
         IS ''FLAGS=A-IU-^PROMPT=Supplier^DATATYPE=STRING(20)/UPPERCASE^REF=Supplier/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.staged_billing_db
         IS ''REF=StagedBillingType/NOCHECK^FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Staged Billing^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.additional_discount
         IS ''FLAGS=A----^DATATYPE=NUMBER^PROMPT=Additional Discount^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.self_billing
         IS ''FLAGS=A----^DATATYPE=STRING(200)^ENUMERATION=SelfBillingType^PROMPT=Self Billing^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.project_id
         IS ''FLAGS=A----^DATATYPE=STRING(10)^PROMPT=Project Id^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.shipment_type
         IS ''DATATYPE=STRING(3)/UPPERCASE^FLAGS=AMIU-^PROMPT=Shipment Type^REF=ShipmentType/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.shipment_creation
         IS ''FLAGS=AMIUL^DATATYPE=STRING(200)^ENUMERATION=ShipmentCreation^PROMPT=Shipment Creation^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.shipment_creation_db
         IS ''DATATYPE=STRING(25)^FLAGS=A----^PROMPT=Shipment Creation^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.proposed_prepayment_amount
         IS ''FLAGS=A---L^DATATYPE=STRING^PROMPT=Required prepayment amount^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.prepayment_approved
         IS ''FLAGS=A---L^DATATYPE=STRING^PROMPT=Prepayment approved^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.cust_calendar_id
         IS ''FLAGS=A-IUL^DATATYPE=STRING(10)^PROMPT=Cust Calendar Id^REF=WorkTimeCalendar/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.ext_transport_calendar_id
         IS ''FLAGS=A-IUL^DATATYPE=STRING(10)^PROMPT=External Transport Calendar Id^REF=WorkTimeCalendar/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.rental_db
         IS ''FLAGS=A----^DATATYPE=STRING(5)^PROMPT=Rental^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.code_a
         IS ''FLAGS=A----^PROMPT=@A^DATATYPE=STRING(10)^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.code_b
         IS ''FLAGS=A----^PROMPT=@B^DATATYPE=STRING(10)^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.code_c
         IS ''FLAGS=A----^PROMPT=@C^DATATYPE=STRING(10)^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.code_d
         IS ''FLAGS=A----^PROMPT=@D^DATATYPE=STRING(10)^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.code_e
         IS ''FLAGS=A----^PROMPT=@E^DATATYPE=STRING(10)^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.code_f
         IS ''FLAGS=A----^PROMPT=@F^DATATYPE=STRING(10)^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.code_g
         IS ''FLAGS=A----^PROMPT=@G^DATATYPE=STRING(10)^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.code_h
         IS ''FLAGS=A----^PROMPT=@H^DATATYPE=STRING(10)^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.code_i
         IS ''FLAGS=A----^PROMPT=@I^DATATYPE=STRING(10)^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.code_j
         IS ''FLAGS=A----^PROMPT=@J^DATATYPE=STRING(10)^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.company
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Company^COLUMN=Site_API.Get_Company(contract)^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.rental_no
         IS ''FLAGS=A----^DATATYPE=NUMBER^PROMPT=Rental No^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.supply_site_part_no
         IS ''FLAGS=A----^DATATYPE=STRING(25)^PROMPT=Supply Site Part No^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.disc_price_round
         IS ''DATATYPE=STRING^FLAGS=A-IU-^PROMPT=Disc Price Round^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.original_discount
         IS ''DATATYPE=NUMBER(5)/DECIMAL^FLAGS=A-IU-^PROMPT=Original Discount^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.original_add_discount
         IS ''DATATYPE=NUMBER(5)/DECIMAL^FLAGS=A----^PROMPT=Original Add Discount^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.original_order_discount
         IS ''DATATYPE=NUMBER(5)/DECIMAL^FLAGS=A----^PROMPT=Original Order Discount^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.order_closed_date
         IS ''FLAGS=A----^PROMPT=Order Closed Date^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.line_no
         IS ''FLAGS=KMI-L^DATATYPE=STRING(4)^PROMPT=Line No^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.rel_no
         IS ''FLAGS=KMI-L^DATATYPE=STRING(4)^PROMPT=Rel No^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.line_item_no
         IS ''FLAGS=KMI--^DATATYPE=NUMBER^PROMPT=Line Item No^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.customer_po_no
         IS ''FLAGS=A---L^DATATYPE=STRING(50)^PROMPT=Customer PO No^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.default_addr_flag
         IS ''FLAGS=AMIU-^DATATYPE=STRING(200)^ENUMERATION=GenYesNo^PROMPT=Default Address Flag^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.default_addr_flag_db
         IS ''FLAGS=A----^DATATYPE=STRING(1)^PROMPT=Default Address Flag^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.addr_flag
         IS ''FLAGS=AMIU-^DATATYPE=STRING(200)^ENUMERATION=GenYesNo^PROMPT=Addr Flag^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.addr_flag_db
         IS ''FLAGS=A----^DATATYPE=STRING(1)^PROMPT=Addr Flag^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.country_code
         IS ''FLAGS=AMIU-^DATATYPE=STRING(2)/UPPERCASE^PROMPT=Country Code^REF=IsoCountry/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.currency_code
         IS ''FLAGS=P----^DATATYPE=STRING(3)^PROMPT=Currency Code^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.delivery_leadtime
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER(3)^PROMPT=External Transport Lead Time^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.picking_leadtime
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Picking Lead Time^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.delivery_terms
         IS ''FLAGS=AMIU-^DATATYPE=STRING(5)/UPPERCASE^PROMPT=Delivery Terms^REF=OrderDeliveryTerm/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.del_terms_location
         IS ''FLAGS=A-IU-^DATATYPE=STRING(100)^PROMPT=Del Terms Location^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.district_code
         IS ''FLAGS=A-IU-^DATATYPE=STRING(10)/UPPERCASE^PROMPT=District Code^REF=SalesDistrict/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.order_code
         IS ''FLAGS=AMIU-^DATATYPE=STRING(3)/UPPERCASE^PROMPT=Order Code^REF=CustomerOrderCode/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.pre_accounting_id
         IS ''FLAGS=A-I--^DATATYPE=NUMBER^PROMPT=Pre Accounting ID^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.price_list_no
         IS ''FLAGS=A-IU-^DATATYPE=STRING(10)/UPPERCASE^PROMPT=Price List No^REF=SalesPriceList/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.region_code
         IS ''FLAGS=A-IU-^DATATYPE=STRING(10)/UPPERCASE^PROMPT=Region Code^REF=SalesRegion/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.route_id
         IS ''FLAGS=A-IU-^DATATYPE=STRING(12)^PROMPT=Route ID^REF=DeliveryRoute/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.ship_via_code
         IS ''FLAGS=AMIU-^DATATYPE=STRING(3)/UPPERCASE^PROMPT=Ship Via Code^REF=MpccomShipVia/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.tax_liability
         IS ''FLAGS=AMIU-^DATATYPE=STRING(20)/UPPERCASE^PROMPT=Tax Liability^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.catalog_no
         IS ''FLAGS=AMI--^DATATYPE=STRING(25)/UPPERCASE^PROMPT=Sales Part Number^REF=SalesPart(contract)/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.catalog_desc
         IS ''FLAGS=A-IU-^DATATYPE=STRING(200)^PROMPT=Catalog Desc^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.purchase_part_no
         IS ''FLAGS=A-IU-^DATATYPE=STRING(25)/UPPERCASE^PROMPT=Purchase Part No^REF=PurchasePart(contract)/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.catalog_type
         IS ''FLAGS=AMIU-^DATATYPE=STRING(200)^ENUMERATION=SalesPartType^PROMPT=Catalog Type^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.catalog_type_db
         IS ''FLAGS=A----^DATATYPE=STRING(4)^PROMPT=Catalog Type^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.buy_qty_due
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Buy Qty Due^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.desired_qty
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Desired Qty^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.base_sale_unit_price
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER/DECIMAL^PROMPT=Base Sale Unit Price^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.base_unit_price_incl_tax
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER/DECIMAL^PROMPT=Base Sale Unit Price Incl Tax^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.conv_factor
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Conv Factor^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.cost
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER/DECIMAL^PROMPT=Cost^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.customer_part_no
         IS ''FLAGS=A-I--^DATATYPE=STRING(45)^PROMPT=Customer Part No^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.customer_part_conv_factor
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Customer Part Conv Factor^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.customer_part_unit_meas
         IS ''FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=Customer Part Unit Meas^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.customer_part_buy_qty
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Customer Part Buy Qty^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.discount
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Discount^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.tax_code
         IS ''FLAGS=A-IU-^DATATYPE=STRING(20)/UPPERCASE^PROMPT=Tax Code^REF=StatutoryFee(company)/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.tax_class_id
         IS ''FLAGS=A-IU-^DATATYPE=STRING(20)/UPPERCASE^PROMPT=Tax Class Id^REF=TaxClass(company)/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.note_text
         IS ''FLAGS=A-IU-^DATATYPE=STRING(2000)^PROMPT=Note^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.order_discount
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Order Discount^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.currency_rate
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER/DECIMAL^PROMPT=Currency Rate^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.part_no
         IS ''FLAGS=A-I--^DATATYPE=STRING(25)/UPPERCASE^PROMPT=Part No^REF=InventoryPart(contract)/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.configuration_id
         IS ''FLAGS=AMIU-^DATATYPE=STRING(50)^PROMPT=Configuration ID^REF=ConfigurationSpec(part_no)/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.configured_line_price_id
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Configured Line Price ID^REF=ConfiguredLinePrice/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.planned_delivery_date
         IS ''FLAGS=AMIU-^DATATYPE=DATE/DATETIME^PROMPT=Planned Delivery Date^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.planned_due_date
         IS ''FLAGS=AMIU-^DATATYPE=DATE/DATETIME^PROMPT=Planned Due Date^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.supply_site_due_date
         IS ''FLAGS=A-IU-^DATATYPE=DATE/DATE^PROMPT=Supply Site Due Date^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.promised_delivery_date
         IS ''FLAGS=AMIU-^DATATYPE=DATE/DATETIME^PROMPT=Promised Delivery Date^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.price_conv_factor
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Price Conv Factor^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.qty_assigned
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Qty Assigned^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.qty_invoiced
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Qty Invoiced^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.qty_on_order
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Qty On Order^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.qty_picked
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Qty Picked^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.qty_returned
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Qty Returned^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.qty_shipdiff
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Qty Shipdiff^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.qty_shipped
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Qty Shipped^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.qty_short
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Qty Short^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.real_ship_date
         IS ''FLAGS=A-IU-^DATATYPE=DATE/DATE^PROMPT=Real Ship Date^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.qty_to_ship
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Qty To Ship^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.revised_qty_due
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Revised Qty Due^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.sale_unit_price
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER/DECIMAL^PROMPT=Sale Unit Price^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.unit_price_incl_tax
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER/DECIMAL^PROMPT=Sale Unit Price Incl Tax^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.sales_unit_meas
         IS ''FLAGS=AMIU-^DATATYPE=STRING(10)^PROMPT=Sales Unit Measure^REF=IsoUnit/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.supply_code
         IS ''FLAGS=AMIU-^DATATYPE=STRING(200)^ENUMERATION=OrderSupplyType^PROMPT=Supply Code^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.supply_code_db
         IS ''FLAGS=A----^DATATYPE=STRING(3)^PROMPT=Supply Code^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.planned_ship_date
         IS ''FLAGS=A-IU-^DATATYPE=DATE/DATETIME^PROMPT=Planned Ship Date^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.planned_ship_period
         IS ''FLAGS=A----^DATATYPE=STRING(10)/UPPERCASE^PROMPT=Planned Ship Period^REF=WorkTimePeriod/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.line_total_qty
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Line Total Qty^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.line_total_weight_gross
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Line Total Gross Weight^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.line_total_weight
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Line Total Weight^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.consignment_stock
         IS ''FLAGS=AMIU-^DATATYPE=STRING(200)^ENUMERATION=ConsignmentStock^PROMPT=Consignment Stock^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.consignment_stock_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Consignment Stock^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.close_tolerance
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Close Tolerance^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.charged_item
         IS ''FLAGS=AMIUL^DATATYPE=STRING(200)^ENUMERATION=ChargedItem^PROMPT=Charged Item^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.charged_item_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Charged Item^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.demand_order_ref1
         IS ''FLAGS=A-IU-^DATATYPE=STRING(15)^PROMPT=Demand Order Ref1^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.demand_order_ref2
         IS ''FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=Demand Order Ref2^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.demand_order_ref3
         IS ''FLAGS=A-IU-^DATATYPE=STRING(4)^PROMPT=Demand Order Ref3^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.demand_code
         IS ''FLAGS=A-IU-^DATATYPE=STRING(200)^ENUMERATION=OrderSupplyType^PROMPT=Demand Code^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.demand_code_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Demand Code^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.dop_connection
         IS ''FLAGS=A-IU-^DATATYPE=STRING(200)^ENUMERATION=DopConnection^PROMPT=Dop Connection^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.dop_connection_db
         IS ''FLAGS=A----^DATATYPE=STRING(3)^PROMPT=Dop Connection^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.create_sm_object_option
         IS ''FLAGS=AMIU-^DATATYPE=STRING(200)^ENUMERATION=CreateSmObjectOption^PROMPT=Create Sm Object Option^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.create_sm_object_option_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Create Sm Object Option^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.staged_billing
         IS ''FLAGS=AMIU-^DATATYPE=STRING(200)^ENUMERATION=StagedBillingType^PROMPT=Staged Billing^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.original_part_no
         IS ''FLAGS=A-IU-^DATATYPE=STRING(25)/UPPERCASE^PROMPT=Original Part No^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.sm_connection
         IS ''FLAGS=AMIU-^DATATYPE=STRING(200)^ENUMERATION=ServiceManagementConnect^PROMPT=SM Connection^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.sm_connection_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=SM Connection^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.sup_sm_contract
         IS ''FLAGS=A-IU-^DATATYPE=STRING(5)/UPPERCASE^PROMPT=Superior SM Contract^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.sup_sm_object
         IS ''FLAGS=A-IU-^DATATYPE=STRING(100)/UPPERCASE^PROMPT=Superior SM Object^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.input_unit_meas
         IS ''FLAGS=A-IU-^DATATYPE=STRING(30)^PROMPT=Input Unit Meas^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.input_qty
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Input Qty^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.input_conv_factor
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Input Conv Factor^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.input_variable_values
         IS ''FLAGS=A-IU-^DATATYPE=STRING(2000)^PROMPT=Input Variable Values^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.part_price
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Part Price^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.calc_char_price
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Calc Char Price^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.char_price
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Char Price^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.price_source
         IS ''FLAGS=AMIU-^DATATYPE=STRING(200)^ENUMERATION=PricingSource^PROMPT=Price Source^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.price_source_db
         IS ''FLAGS=A----^DATATYPE=STRING(25)^PROMPT=Price Source^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.price_freeze
         IS ''FLAGS=AMIU-^DATATYPE=STRING(200)^ENUMERATION=FreezeFlag^PROMPT=Price Freeze^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.price_freeze_db
         IS ''FLAGS=A----^DATATYPE=STRING(6)^PROMPT=Price Freeze^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.dock_code
         IS ''FLAGS=A-IU-^DATATYPE=STRING(35)^PROMPT=Dock Code^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.sub_dock_code
         IS ''FLAGS=A-IU-^DATATYPE=STRING(35)^PROMPT=Sub Dock Code^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.ref_id
         IS ''FLAGS=A-IU-^DATATYPE=STRING(35)^PROMPT=Ref ID^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.location_no
         IS ''FLAGS=A-IU-^DATATYPE=STRING(35)^PROMPT=Location No^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.price_effectivity_date
         IS ''FLAGS=A-IU-^DATATYPE=DATE/DATE^PROMPT=Price Effectivity Date^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.latest_release_date
         IS ''FLAGS=A-IU-^DATATYPE=DATE/DATE^PROMPT=Latest Release Date^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.ctp_planned
         IS ''FLAGS=AMIU-^DATATYPE=STRING(200)^ENUMERATION=GenYesNo^PROMPT=Ctp Planned^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.ctp_planned_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Ctp Planned^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.cust_warranty_id
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Customer Warranty ID^REF=CustWarranty/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.job_id
         IS ''FLAGS=A-IU-^DATATYPE=STRING(10)/UPPERCASE^PROMPT=Job ID^REF=AccountingProject(company)/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.price_source_id
         IS ''FLAGS=A-IU-^DATATYPE=STRING(25)^PROMPT=Price Source ID^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.condition_code
         IS ''FLAGS=A-IUL^DATATYPE=STRING(10)/UPPERCASE^PROMPT=Condition Code^REF=ConditionCode/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.part_ownership
         IS ''FLAGS=AMIUL^DATATYPE=STRING(200)^ENUMERATION=PartOwnership^PROMPT=Part Ownership^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.part_ownership_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Part Ownership^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.owning_customer_no
         IS ''FLAGS=A-IUL^DATATYPE=STRING(20)/UPPERCASE^PROMPT=Owning Customer No^REF=CustOrdCustomer/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.exchange_item
         IS ''FLAGS=AMIUL^DATATYPE=STRING(200)^ENUMERATION=ExchangeItem^PROMPT=Exchange Item^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.exchange_item_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Exchange Item^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.supply_site_reserve_type
         IS ''FLAGS=AMIU-^DATATYPE=STRING(200)^ENUMERATION=SupplySiteReserveType^PROMPT=Supply Site Reserve Type^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.supply_site_reserve_type_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Supply Site Reserve Type^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.originating_rel_no
         IS ''FLAGS=A-IU-^DATATYPE=STRING(4)^PROMPT=Originating Rel No^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.originating_line_item_no
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Originating Line Item No^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.release_planning
         IS ''FLAGS=AMIUL^DATATYPE=STRING(200)^ENUMERATION=ReleasePlanning^PROMPT=Release Planning^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.release_planning_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Release Planning^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.supplier_ship_via_transit
         IS ''FLAGS=A-IU-^DATATYPE=STRING(3)/UPPERCASE^PROMPT=Supplier Ship Via Transit^REF=MpccomShipVia/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.supplier_ship_via_transit_desc
         IS ''FLAGS=A-IU-^DATATYPE=STRING(35)^PROMPT=Supplier Ship Via Transit Desc^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.supply_site
         IS ''FLAGS=A-IU-^DATATYPE=STRING(5)/UPPERCASE^PROMPT=Site^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.replicate_changes
         IS ''FLAGS=A----^DATATYPE=STRING(5)^PROMPT=Replicate Changes^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.change_request
         IS ''FLAGS=A----^DATATYPE=STRING(5)^PROMPT=Change Request^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.shipment_connected
         IS ''FLAGS=A-IU-^DATATYPE=STRING(200)^ENUMERATION=FndBoolean^PROMPT=Shipment Connected^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.shipment_connected_db
         IS ''FLAGS=A----^DATATYPE=STRING(5)^PROMPT=Shipment Connected^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.self_billing_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Self Billing^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.activity_seq
         IS ''FLAGS=A-IUL^DATATYPE=NUMBER^PROMPT=Activity seq^REF=Activity/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.deliver_to_customer_no
         IS ''FLAGS=AMI--^DATATYPE=STRING(20)/UPPERCASE^PROMPT=Deliver to Customer No^REF=CustOrdCustomer/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.cancel_reason
         IS ''FLAGS=A-IU-^DATATYPE=STRING(10)/UPPERCASE^PROMPT=Cancellation Reason^REF=OrderCancelReason/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.delivery_confirmed
         IS ''FLAGS=AMIU-^DATATYPE=STRING(200)^ENUMERATION=FndBoolean^PROMPT=Delivery Confirmed^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.delivery_confirmed_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Delivery Confirmed^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.qty_confirmeddiff
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Qty Confirmeddiff^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.provisional_price
         IS ''FLAGS=AMIU-^DATATYPE=STRING(200)^ENUMERATION=FndBoolean^PROMPT=Provisional Price^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.provisional_price_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Provisional Price^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.customer_po_line_no
         IS ''FLAGS=A-IU-^DATATYPE=STRING(4)^PROMPT=Customer Po Line No^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.customer_po_rel_no
         IS ''FLAGS=A-IU-^DATATYPE=STRING(4)^PROMPT=Customer Po Rel No^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.blocked_for_invoicing
         IS ''FLAGS=AMIU-^DATATYPE=STRING(200)^ENUMERATION=FndBoolean^PROMPT=Blocked For Invoicing^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.blocked_for_invoicing_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Blocked For Invoicing^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.note_id
         IS ''FLAGS=A-I--^DATATYPE=NUMBER^PROMPT=Note ID^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.load_id
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Load ID^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.order_objstate
         IS ''FLAGS=A----^DATATYPE=STRING^PROMPT=Order Objstate^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.order_state
         IS ''FLAGS=A---L^DATATYPE=STRING^PROMPT=Order Status^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.state
         IS ''FLAGS=A---L^DATATYPE=STRING(253)^PROMPT=Status^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.first_actual_ship_date
         IS ''FLAGS=A-IU-^DATATYPE=DATE/DATE^PROMPT=First Actual Ship Date^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.tax_id_no
         IS ''FLAGS=A-IU-^DATATYPE=STRING(50)/UPPERCASE^PROMPT=Tax Id No^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.tax_id_validated_date
         IS ''FLAGS=A-IU-^DATATYPE=DATE/DATE^PROMPT=Tax ID Validated Date^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.price_source_net_price
         IS ''FLAGS=AMIU-^DATATYPE=STRING(200)^ENUMERATION=FndBoolean^PROMPT=Price Source Net Price^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.price_source_net_price_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Price Source Net Price^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.dop_new_qty_demand
         IS ''FLAGS=A----^DATATYPE=STRING(2000)^PROMPT=Dop New Qty Demand^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.target_date
         IS ''FLAGS=AMIU-^DATATYPE=DATE/DATETIME^PROMPT=Target Date^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.rebate_builder
         IS ''FLAGS=AMIUL^DATATYPE=STRING(200)^ENUMERATION=FndBoolean^PROMPT=Rebate Builder^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.rebate_builder_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Rebate Builder^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.adjusted_weight_net
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Adjusted Line Total Net Weight^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.adjusted_weight_gross
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Adjusted Line Total Gross Weight^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.adjusted_volume
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Adjusted Line Total Volume^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.part_level
         IS ''FLAGS=A-IUL^DATATYPE=STRING(200)^ENUMERATION=PriceDiscountPartLevel^PROMPT=Part Level^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.part_level_db
         IS ''FLAGS=A----^DATATYPE=STRING(30)^PROMPT=Part Level^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.part_level_id
         IS ''FLAGS=A-IU-^DATATYPE=STRING(200)^PROMPT=Part Level Id^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.customer_level
         IS ''FLAGS=A-IUL^DATATYPE=STRING(200)^ENUMERATION=PriceDiscountCustLevel^PROMPT=Customer Level^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.customer_level_db
         IS ''FLAGS=A----^DATATYPE=STRING(30)^PROMPT=Customer Level^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.customer_level_id
         IS ''FLAGS=A-IU-^DATATYPE=STRING(200)^PROMPT=Customer Level Id^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.customs_value
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER/DECIMAL^PROMPT=Customs Value^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.abnormal_demand_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Abnormal Demand^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.rel_mtrl_planning
         IS ''FLAGS=AMIU-^DATATYPE=STRING(5)^PROMPT=Released for Mtrl Planning^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.inverted_conv_factor
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Inverted Conv Factor^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.open_shipment_qty
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Open Shipment Connected Quantity^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.packing_instruction_id
         IS ''FLAGS=A-IUL^DATATYPE=STRING(50)/UPPERCASE^PROMPT=Packing Instruction ID^REF=PackingInstruction/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.use_price_incl_tax
         IS ''FLAGS=A---L^DATATYPE=STRING(20)^PROMPT=Use Price Incl Tax^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.end_customer_id
         IS ''FLAGS=A-IU-^DATATYPE=STRING(20)/UPPERCASE^PROMPT=End Customer Id^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.cust_part_invert_conv_fact
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Customer Part Inverted Conversion Factor^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.changed_attrib_not_in_pol
         IS ''FLAGS=A----^DATATYPE=STRING(5)^PROMPT=Changed Attrib Not In Pol^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.tax_liability_type_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Tax Liability Type^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.free_of_charge
         IS ''FLAGS=AMIU-^DATATYPE=STRING(200)^ENUMERATION=FndBoolean^PROMPT=Free Of Charge^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.free_of_charge_db
         IS ''FLAGS=A----^DATATYPE=STRING(5)^PROMPT=Free Of Charge^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.free_of_charge_tax_basis
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER/DECIMAL^PROMPT=Free Of Charge Tax Basis^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.tax_calc_structure_id
         IS ''FLAGS=A-IU-^DATATYPE=STRING(20)/UPPERCASE^PROMPT=Tax Calculation Structure^REF=TaxCalcStructure(company)/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.classification_part_no
         IS ''FLAGS=A-IU-^DATATYPE=STRING(25)^PROMPT=Classification Part No^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.classification_standard
         IS ''FLAGS=A-IU-^DATATYPE=STRING(25)/UPPERCASE^PROMPT=Classification Standard^REF=ClassificationStandard/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.classification_unit_meas
         IS ''FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=Classification Unit Meas^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.acquisition_origin
         IS ''FLAGS=A-IUL^DATATYPE=NUMBER^PROMPT=Acquisition Origin^REF=AcquisitionOrigin(company)/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.statistical_code
         IS ''FLAGS=A-IUL^DATATYPE=STRING(15)^PROMPT=Statistical Code^REF=StatisticalCode(company)/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.acquisition_reason_id
         IS ''FLAGS=A-IUL^DATATYPE=STRING(20)^PROMPT=Acquisition Reason Id^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.customer_name
         IS ''PROMPT=Customer Name^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.customer_no_pay
         IS ''PROMPT=Customer No Pay^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.backorder_option
         IS ''PROMPT=Backorder Option^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.backorder_option_db
         IS ''PROMPT=Backorder Option Db^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.delivery_terms_desc
         IS ''PROMPT=Delivery Terms Desc^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.internal_delivery_type_db
         IS ''PROMPT=Internal Delivery Type Db^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.internal_po_no
         IS ''PROMPT=Internal Po No^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.language_code
         IS ''PROMPT=Language Code^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.market_code
         IS ''PROMPT=Market Code^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.order_conf
         IS ''PROMPT=Order Conf^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.order_conf_db
         IS ''PROMPT=Order Conf Db^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.order_id
         IS ''PROMPT=Order Id^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.salesman_code
         IS ''PROMPT=Salesman Code^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.ship_via_desc
         IS ''PROMPT=Ship Via Desc^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.line_delivery_type
         IS ''PROMPT=Line Delivery Type^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.line_pre_accounting_id
         IS ''PROMPT=Line Pre Accounting Id^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.priority
         IS ''PROMPT=Priority^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.confirm_deliveries
         IS ''PROMPT=Confirm Deliveries^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.confirm_deliveries_db
         IS ''PROMPT=Confirm Deliveries Db^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.check_sales_grp_deliv_conf
         IS ''PROMPT=Check Sales Grp Deliv Conf^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.check_sales_grp_deliv_conf_db
         IS ''PROMPT=Check Sales Grp Deliv Conf Db^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.delay_cogs_to_deliv_conf
         IS ''PROMPT=Delay Cogs To Deliv Conf^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.delay_cogs_to_deliv_conf_db
         IS ''PROMPT=Delay Cogs To Deliv Conf Db^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.blocked_reason
         IS ''PROMPT=Blocked Reason^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.sales_contract_no
         IS ''PROMPT=Sales Contract No^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.contract_rev_seq
         IS ''PROMPT=Contract Rev Seq^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.contract_line_no
         IS ''PROMPT=Contract Line No^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.contract_item_no
         IS ''PROMPT=Contract Item No^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.prepayment_approved_db
         IS ''PROMPT=Prepayment Approved Db^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.use_pre_ship_del_note_db
         IS ''PROMPT=Use Pre Ship Del Note Db^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.rebate_customer
         IS ''PROMPT=Rebate Customer^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.use_price_incl_tax_db
         IS ''PROMPT=Use Price Incl Tax Db^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.blocked_type
         IS ''PROMPT=Blocked Type^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.blocked_type_db
         IS ''PROMPT=Blocked Type Db^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_JOIN.limit_sales_to_assortments_db
         IS ''PROMPT=Limit Sales To Assortments Db^''';
      stmt_ := 'CREATE OR REPLACE VIEW CUSTOMER_ORDER_RENTAL_LINE AS'||eol_;
      stmt_ := stmt_ || 'SELECT'||eol_;
   IF Dictionary_SYS.Component_Is_Active('RENTAL') THEN
      stmt_ := stmt_ || '       order_no                                                             order_no,'||eol_;
      stmt_ := stmt_ || '       line_no                                                              line_no,'||eol_;
      stmt_ := stmt_ || '       rel_no                                                               rel_no,'||eol_;
      stmt_ := stmt_ || '       line_item_no                                                         line_item_no,'||eol_;
      stmt_ := stmt_ || '       primary_rental_no                                                    primary_rental_no,'||eol_;
      stmt_ := stmt_ || '       col.contract                                                         contract,'||eol_;
      stmt_ := stmt_ || '       Site_API.Get_Company(col.contract)                                   company,'||eol_;
      stmt_ := stmt_ || '       catalog_no                                                           catalog_no,'||eol_;
      stmt_ := stmt_ || '       note_id                                                              note_id,'||eol_;
      stmt_ := stmt_ || '       order_code                                                           order_code,'||eol_;
      stmt_ := stmt_ || '       part_no                                                              part_no,'||eol_;
      stmt_ := stmt_ || '       pre_accounting_id                                                    pre_accounting_id,'||eol_;
      stmt_ := stmt_ || '       sales_unit_meas                                                      sales_unit_meas,'||eol_;
      stmt_ := stmt_ || '       base_sale_unit_price                                                 base_sale_unit_price,'||eol_;
      stmt_ := stmt_ || '       base_unit_price_incl_tax                                             base_unit_price_incl_tax,'||eol_;
      stmt_ := stmt_ || '       buy_qty_due                                                          buy_qty_due,'||eol_;
      stmt_ := stmt_ || '       catalog_desc                                                         catalog_desc,'||eol_;
      stmt_ := stmt_ || '       Sales_Part_Type_API.Decode(catalog_type)                             catalog_type,'||eol_;
      stmt_ := stmt_ || '       catalog_type                                                         catalog_type_db,'||eol_;
      stmt_ := stmt_ || '       conv_factor                                                          conv_factor,'||eol_;
      stmt_ := stmt_ || '       cost                                                                 cost,'||eol_;
      stmt_ := stmt_ || '       currency_rate                                                        currency_rate,'||eol_;
      stmt_ := stmt_ || '       date_entered                                                         date_entered,'||eol_;
      stmt_ := stmt_ || '       discount                                                             discount,'||eol_;
      stmt_ := stmt_ || '       line_total_qty                                                       line_total_qty,'||eol_;
      stmt_ := stmt_ || '       line_total_weight                                                    line_total_weight,'||eol_;
      stmt_ := stmt_ || '       note_text                                                            note_text,'||eol_;
      stmt_ := stmt_ || '       order_discount                                                       order_discount,'||eol_;
      stmt_ := stmt_ || '       planned_delivery_date                                                planned_delivery_date,'||eol_;
      stmt_ := stmt_ || '       planned_due_date                                                     planned_due_date,'||eol_;
      stmt_ := stmt_ || '       supply_site_due_date                                                 supply_site_due_date,'||eol_;
      stmt_ := stmt_ || '       price_conv_factor                                                    price_conv_factor,'||eol_;
      stmt_ := stmt_ || '       promised_delivery_date                                               promised_delivery_date,'||eol_;
      stmt_ := stmt_ || '       qty_assigned                                                         qty_assigned,'||eol_;
      stmt_ := stmt_ || '       qty_invoiced                                                         qty_invoiced,'||eol_;
      stmt_ := stmt_ || '       qty_on_order                                                         qty_on_order,'||eol_;
      stmt_ := stmt_ || '       qty_picked                                                           qty_picked,'||eol_;
      stmt_ := stmt_ || '       qty_returned                                                         qty_returned,'||eol_;
      stmt_ := stmt_ || '       qty_shipdiff                                                         qty_shipdiff,'||eol_;
      stmt_ := stmt_ || '       qty_shipped                                                          qty_shipped,'||eol_;
      stmt_ := stmt_ || '       qty_to_ship                                                          qty_to_ship,'||eol_;
      stmt_ := stmt_ || '       qty_short                                                            qty_short,'||eol_;
      stmt_ := stmt_ || '       real_ship_date                                                       real_ship_date,'||eol_;
      stmt_ := stmt_ || '       revised_qty_due                                                      revised_qty_due,'||eol_;
      stmt_ := stmt_ || '       sale_unit_price                                                      sale_unit_price,'||eol_;
      stmt_ := stmt_ || '       unit_price_incl_tax                                                  unit_price_incl_tax,'||eol_;
      stmt_ := stmt_ || '       Order_Supply_Type_API.Decode(supply_code)                            supply_code,'||eol_;
      stmt_ := stmt_ || '       supply_code                                                          supply_code_db,'||eol_;
      stmt_ := stmt_ || '       wanted_delivery_date                                                 wanted_delivery_date,'||eol_;
      stmt_ := stmt_ || '       delivery_type                                                        delivery_type,'||eol_;
      stmt_ := stmt_ || '       vendor_no                                                            vendor_no,'||eol_;
      stmt_ := stmt_ || '       tax_code                                                             tax_code,'||eol_;
      stmt_ := stmt_ || '       tax_class_id                                                         tax_class_id,'||eol_;
      stmt_ := stmt_ || '       tax_calc_structure_id                                                tax_calc_structure_id,'||eol_;
      stmt_ := stmt_ || '       customer_part_no                                                     customer_part_no,'||eol_;
      stmt_ := stmt_ || '       customer_part_conv_factor                                            customer_part_conv_factor,'||eol_;
      stmt_ := stmt_ || '       customer_part_unit_meas                                              customer_part_unit_meas,'||eol_;
      stmt_ := stmt_ || '       customer_part_buy_qty                                                customer_part_buy_qty,'||eol_;
      stmt_ := stmt_ || '       planned_ship_date                                                    planned_ship_date,'||eol_;
      stmt_ := stmt_ || '       planned_ship_period                                                  planned_ship_period,'||eol_;
      stmt_ := stmt_ || '       customer_no                                                          customer_no,'||eol_;
      stmt_ := stmt_ || '       Consignment_Stock_API.Decode(consignment_stock)                      consignment_stock,'||eol_;
      stmt_ := stmt_ || '       consignment_stock                                                    consignment_stock_db,'||eol_;
      stmt_ := stmt_ || '       close_tolerance                                                      close_tolerance,'||eol_;
      stmt_ := stmt_ || '       price_list_no                                                        price_list_no,'||eol_;
      stmt_ := stmt_ || '       Charged_Item_API.Decode(charged_item)                                charged_item,'||eol_;
      stmt_ := stmt_ || '       charged_item                                                         charged_item_db,'||eol_;
      stmt_ := stmt_ || '       demand_order_ref1                                                    demand_order_ref1,'||eol_;
      stmt_ := stmt_ || '       demand_order_ref2                                                    demand_order_ref2,'||eol_;
      stmt_ := stmt_ || '       demand_order_ref3                                                    demand_order_ref3,'||eol_;
      stmt_ := stmt_ || '       demand_order_ref4                                                    demand_order_ref4,'||eol_;
      stmt_ := stmt_ || '       Order_Supply_Type_API.Decode(demand_code)                            demand_code,'||eol_;
      stmt_ := stmt_ || '       demand_code                                                          demand_code_db,'||eol_;
      stmt_ := stmt_ || '       Dop_Connection_API.Decode(dop_connection)                            dop_connection,'||eol_;
      stmt_ := stmt_ || '       dop_connection                                                       dop_connection_db,'||eol_;
      stmt_ := stmt_ || '       Create_Sm_Object_Option_API.Decode(create_sm_object_option)          create_sm_object_option,'||eol_;
      stmt_ := stmt_ || '       create_sm_object_option                                              create_sm_object_option_db,'||eol_;
      stmt_ := stmt_ || '       Gen_Yes_No_API.Decode(default_addr_flag)                             default_addr_flag,'||eol_;
      stmt_ := stmt_ || '       default_addr_flag                                                    default_addr_flag_db,'||eol_;
      stmt_ := stmt_ || '       Gen_Yes_No_API.Decode(addr_flag)                                     addr_flag,'||eol_;
      stmt_ := stmt_ || '       addr_flag                                                            addr_flag_db,'||eol_;
      stmt_ := stmt_ || '       ship_addr_no                                                         ship_addr_no,'||eol_;
      stmt_ := stmt_ || '       route_id                                                             route_id,'||eol_;
      stmt_ := stmt_ || '       forward_agent_id                                                     forward_agent_id,'||eol_;
      stmt_ := stmt_ || '       ship_via_code                                                        ship_via_code,'||eol_;
      stmt_ := stmt_ || '       delivery_terms                                                       delivery_terms,'||eol_;
      stmt_ := stmt_ || '       delivery_leadtime                                                    delivery_leadtime,'||eol_;
      stmt_ := stmt_ || '       district_code                                                        district_code,'||eol_;
      stmt_ := stmt_ || '       region_code                                                          region_code,'||eol_;
      stmt_ := stmt_ || '       desired_qty                                                          desired_qty,'||eol_;
      stmt_ := stmt_ || '       purchase_part_no                                                     purchase_part_no,'||eol_;
      stmt_ := stmt_ || '       Staged_Billing_Type_API.Decode(staged_billing)                       staged_billing,'||eol_;
      stmt_ := stmt_ || '       staged_billing                                                       staged_billing_db,'||eol_;
      stmt_ := stmt_ || '       tax_liability                                                        tax_liability,'||eol_;
      stmt_ := stmt_ || '       col.country_code                                                     delivery_country_code,'||eol_;
      stmt_ := stmt_ || '       original_part_no                                                     original_part_no,'||eol_;
      stmt_ := stmt_ || '       sup_sm_contract                                                      sup_sm_contract,'||eol_;
      stmt_ := stmt_ || '       sup_sm_object                                                        sup_sm_object,'||eol_;
      stmt_ := stmt_ || '       Service_Management_Connect_API.Decode(sm_connection)                 sm_connection,'||eol_;
      stmt_ := stmt_ || '       sm_connection                                                        sm_connection_db,'||eol_;
      stmt_ := stmt_ || '       part_price                                                           part_price,'||eol_;
      stmt_ := stmt_ || '       calc_char_price                                                      calc_char_price,'||eol_;
      stmt_ := stmt_ || '       char_price                                                           char_price,'||eol_;
      stmt_ := stmt_ || '       Pricing_Source_API.Decode(price_source)                              price_source,'||eol_;
      stmt_ := stmt_ || '       price_source                                                         price_source_db,'||eol_;
      stmt_ := stmt_ || '       Freeze_Flag_API.Decode(price_freeze)                                 price_freeze,'||eol_;
      stmt_ := stmt_ || '       price_freeze                                                         price_freeze_db,'||eol_;
      stmt_ := stmt_ || '       dock_code                                                            dock_code,'||eol_;
      stmt_ := stmt_ || '       sub_dock_code                                                        sub_dock_code,'||eol_;
      stmt_ := stmt_ || '       ref_id                                                               ref_id,'||eol_;
      stmt_ := stmt_ || '       location_no                                                          location_no,'||eol_;
      stmt_ := stmt_ || '       configuration_id                                                     configuration_id,'||eol_;
      stmt_ := stmt_ || '       price_effectivity_date                                               price_effectivity_date,'||eol_;
      stmt_ := stmt_ || '       configured_line_price_id                                             configured_line_price_id,'||eol_;
      stmt_ := stmt_ || '       latest_release_date                                                  latest_release_date,'||eol_;
      stmt_ := stmt_ || '       Gen_Yes_No_API.Decode(ctp_planned)                                   ctp_planned,'||eol_;
      stmt_ := stmt_ || '       ctp_planned                                                          ctp_planned_db,'||eol_;
      stmt_ := stmt_ || '       job_id                                                               job_id,'||eol_;
      stmt_ := stmt_ || '       cust_warranty_id                                                     cust_warranty_id,'||eol_;
      stmt_ := stmt_ || '       price_source_id                                                      price_source_id,'||eol_;
      stmt_ := stmt_ || '       Intrastat_Exempt_API.Decode(intrastat_exempt)                        intrastat_exempt,'||eol_;
      stmt_ := stmt_ || '       intrastat_exempt                                                     intrastat_exempt_db,'||eol_;
      stmt_ := stmt_ || '       price_unit_meas                                                      price_unit_meas,'||eol_;
      stmt_ := stmt_ || '       condition_code                                                       condition_code,'||eol_;
      stmt_ := stmt_ || '       additional_discount                                                  additional_discount,'||eol_;
      stmt_ := stmt_ || '       Part_Ownership_API.Decode(part_ownership)                            part_ownership,'||eol_;
      stmt_ := stmt_ || '       part_ownership                                                       part_ownership_db,'||eol_;
      stmt_ := stmt_ || '       owning_customer_no                                                   owning_customer_no,'||eol_;
      stmt_ := stmt_ || '       Exchange_Item_API.Decode(exchange_item)                              exchange_item,'||eol_;
      stmt_ := stmt_ || '       exchange_item                                                        exchange_item_db,'||eol_;
      stmt_ := stmt_ || '       Supply_Site_Reserve_Type_API.Decode(supply_site_reserve_type)        supply_site_reserve_type,'||eol_;
      stmt_ := stmt_ || '       supply_site_reserve_type                                             supply_site_reserve_type_db,'||eol_;
      stmt_ := stmt_ || '       originating_rel_no                                                   originating_rel_no,'||eol_;
      stmt_ := stmt_ || '       originating_line_item_no                                             originating_line_item_no,'||eol_;
      stmt_ := stmt_ || '       Release_Planning_API.Decode(release_planning)                        release_planning,'||eol_;
      stmt_ := stmt_ || '       release_planning                                                     release_planning_db,'||eol_;
      stmt_ := stmt_ || '       NULL                                                                 replicate_changes,'||eol_;
      stmt_ := stmt_ || '       NULL                                                                 change_request,'||eol_;
      stmt_ := stmt_ || '       supplier_ship_via_transit                                            supplier_ship_via_transit,'||eol_;
      stmt_ := stmt_ || '       supplier_ship_via_transit_desc                                       supplier_ship_via_transit_desc,'||eol_;
      stmt_ := stmt_ || '       supply_site                                                          supply_site,'||eol_;
      stmt_ := stmt_ || '       Fnd_Boolean_API.Decode(shipment_connected)                           shipment_connected,'||eol_;
      stmt_ := stmt_ || '       shipment_connected                                                   shipment_connected_db,'||eol_;
      stmt_ := stmt_ || '       Self_Billing_Type_API.Decode(self_billing)                           self_billing,'||eol_;
      stmt_ := stmt_ || '       self_billing                                                         self_billing_db,'||eol_;
      stmt_ := stmt_ || '       activity_seq                                                         activity_seq,'||eol_;
      stmt_ := stmt_ || '       project_id                                                           project_id,'||eol_;
      stmt_ := stmt_ || '       NULL                                                                 server_data_change,'||eol_;
      stmt_ := stmt_ || '       deliver_to_customer_no                                               deliver_to_customer_no,'||eol_;
      stmt_ := stmt_ || '       contact                                                              contact,'||eol_;
      stmt_ := stmt_ || '       input_qty                                                            input_qty,'||eol_;
      stmt_ := stmt_ || '       input_unit_meas                                                      input_unit_meas,'||eol_;
      stmt_ := stmt_ || '       input_conv_factor                                                    input_conv_factor,'||eol_;
      stmt_ := stmt_ || '       input_variable_values                                                input_variable_values,'||eol_;
      stmt_ := stmt_ || '       NULL                                                                 dop_new_qty_demand,'||eol_;
      stmt_ := stmt_ || '       Shipment_Creation_API.Decode(shipment_creation)                      shipment_creation,'||eol_;
      stmt_ := stmt_ || '       shipment_creation                                                    shipment_creation_db,'||eol_;
      stmt_ := stmt_ || '       manufacturing_department                                             manufacturing_department,'||eol_;
      stmt_ := stmt_ || '       delivery_sequence                                                    delivery_sequence,'||eol_;
      stmt_ := stmt_ || '       cancel_reason                                                        cancel_reason,'||eol_;
      stmt_ := stmt_ || '       Fnd_Boolean_API.Decode(delivery_confirmed)                           delivery_confirmed,'||eol_;
      stmt_ := stmt_ || '       delivery_confirmed                                                   delivery_confirmed_db,'||eol_;
      stmt_ := stmt_ || '       customer_po_line_no                                                  customer_po_line_no,'||eol_;
      stmt_ := stmt_ || '       customer_po_rel_no                                                   customer_po_rel_no,'||eol_;
      stmt_ := stmt_ || '       NULL                                                                 update_pegged_orders,'||eol_;
      stmt_ := stmt_ || '       qty_confirmeddiff                                                    qty_confirmeddiff,'||eol_;
      stmt_ := stmt_ || '       Fnd_Boolean_API.Decode(blocked_for_invoicing)                        blocked_for_invoicing,'||eol_;
      stmt_ := stmt_ || '       blocked_for_invoicing                                                blocked_for_invoicing_db,'||eol_;
      stmt_ := stmt_ || '       Fnd_Boolean_API.Decode(provisional_price)                            provisional_price,'||eol_;
      stmt_ := stmt_ || '       provisional_price                                                    provisional_price_db,'||eol_;
      stmt_ := stmt_ || '       Receiving_Advice_Type_API.Decode(receiving_advice_type)              receiving_advice_type,'||eol_;
      stmt_ := stmt_ || '       receiving_advice_type                                                receiving_advice_type_db,'||eol_;
      stmt_ := stmt_ || '       NULL                                                                 default_charges,'||eol_;
      stmt_ := stmt_ || '       first_actual_ship_date                                               first_actual_ship_date,'||eol_;
      stmt_ := stmt_ || '       tax_id_no                                                            tax_id_no,'||eol_;
      stmt_ := stmt_ || '       tax_id_validated_date                                                tax_id_validated_date,'||eol_;
      stmt_ := stmt_ || '       Fnd_Boolean_API.Decode(price_source_net_price)                       price_source_net_price,'||eol_;
      stmt_ := stmt_ || '       price_source_net_price                                               price_source_net_price_db,'||eol_;
      stmt_ := stmt_ || '       target_date                                                          target_date,'||eol_;
      stmt_ := stmt_ || '       allocation_id                                                        allocation_id,'||eol_;
      stmt_ := stmt_ || '       del_terms_location                                                   del_terms_location,'||eol_;
      stmt_ := stmt_ || '       classification_part_no                                               classification_part_no,'||eol_;
      stmt_ := stmt_ || '       classification_unit_meas                                             classification_unit_meas,'||eol_;
      stmt_ := stmt_ || '       classification_standard                                              classification_standard,'||eol_;
      stmt_ := stmt_ || '       Fnd_Boolean_API.Decode(rebate_builder)                               rebate_builder,'||eol_;
      stmt_ := stmt_ || '       rebate_builder                                                       rebate_builder_db,'||eol_;
      stmt_ := stmt_ || '       line_total_weight_gross                                              line_total_weight_gross,'||eol_;
      stmt_ := stmt_ || '       freight_map_id                                                       freight_map_id,'||eol_;
      stmt_ := stmt_ || '       zone_id                                                              zone_id,'||eol_;
      stmt_ := stmt_ || '       freight_price_list_no                                                freight_price_list_no,'||eol_;
      stmt_ := stmt_ || '       adjusted_weight_net                                                  adjusted_weight_net,'||eol_;
      stmt_ := stmt_ || '       adjusted_weight_gross                                                adjusted_weight_gross,'||eol_;
      stmt_ := stmt_ || '       adjusted_volume                                                      adjusted_volume,'||eol_;
      stmt_ := stmt_ || '       Fnd_Boolean_API.Decode(freight_free)                                 freight_free,'||eol_;
      stmt_ := stmt_ || '       freight_free                                                         freight_free_db,'||eol_;
      stmt_ := stmt_ || '       Price_Discount_Part_Level_API.Decode(part_level)                     part_level,'||eol_;
      stmt_ := stmt_ || '       part_level                                                           part_level_db,'||eol_;
      stmt_ := stmt_ || '       part_level_id                                                        part_level_id,'||eol_;
      stmt_ := stmt_ || '       Price_Discount_Cust_Level_API.Decode(customer_level)                 customer_level,'||eol_;
      stmt_ := stmt_ || '       customer_level                                                       customer_level_db,'||eol_;
      stmt_ := stmt_ || '       customer_level_id                                                    customer_level_id,'||eol_;
      stmt_ := stmt_ || '       load_id                                                              load_id,'||eol_;
      stmt_ := stmt_ || '       customs_value                                                        customs_value,'||eol_;
      stmt_ := stmt_ || '       Fnd_Boolean_API.Decode(abnormal_demand)                              abnormal_demand,'||eol_;
      stmt_ := stmt_ || '       abnormal_demand                                                      abnormal_demand_db,'||eol_;
      stmt_ := stmt_ || '       NULL                                                                 update_price_effective_date,'||eol_;
      stmt_ := stmt_ || '       cust_calendar_id                                                     cust_calendar_id,'||eol_;
      stmt_ := stmt_ || '       ext_transport_calendar_id                                            ext_transport_calendar_id,'||eol_;
      stmt_ := stmt_ || '       rel_mtrl_planning                                                    rel_mtrl_planning,'||eol_;
      stmt_ := stmt_ || '       qty_per_assembly                                                     qty_per_assembly,'||eol_;
      stmt_ := stmt_ || '       new_comp_after_delivery                                              new_comp_after_delivery,'||eol_;
      stmt_ := stmt_ || '       inverted_conv_factor                                                 inverted_conv_factor,'||eol_;
      stmt_ := stmt_ || '       Fnd_Boolean_API.Decode(rental)                                       rental,'||eol_;
      stmt_ := stmt_ || '       rental                                                               rental_db,'||eol_;
      stmt_ := stmt_ || '       end_customer_id                                                      end_customer_id,'||eol_;
      stmt_ := stmt_ || '       picking_leadtime                                                     picking_leadtime,'||eol_;
      stmt_ := stmt_ || '       shipment_type                                                        shipment_type,'||eol_;
      stmt_ := stmt_ || '       open_shipment_qty                                                    open_shipment_qty,'||eol_;
      stmt_ := stmt_ || '       packing_instruction_id                                               packing_instruction_id,'||eol_;
      stmt_ := stmt_ || '       originating_co_lang_code                                             originating_co_lang_code,'||eol_;
      stmt_ := stmt_ || '       supply_site_part_no                                                  supply_site_part_no,'||eol_;
      stmt_ := stmt_ || '       NULL                                                                 make_reservation,'||eol_;
      stmt_ := stmt_ || '       NULL                                                                 capability_chk_source_flag,'||eol_;
      stmt_ := stmt_ || '       NULL                                                                 shipment_creation_sent,'||eol_;
      stmt_ := stmt_ || '       NULL                                                                 shipment_type_sent,'||eol_;
      stmt_ := stmt_ || '       NULL                                                                 packed_ship_cre_in_init,'||eol_;
      stmt_ := stmt_ || '       NULL                                                                 disconnect_exp_license,'||eol_;
      stmt_ := stmt_ || '       NULL                                                                 po_charged_comp_change,'||eol_;
      stmt_ := stmt_ || '       NULL                                                                 update_ship_qty,'||eol_;
      stmt_ := stmt_ || '       NULL                                                                 connected_shipment_id,'||eol_;
      stmt_ := stmt_ || '       NULL                                                                 changed_attrib_not_in_pol,'||eol_;
      stmt_ := stmt_ || '       NULL                                                                 evaluate_default_info,'||eol_;
      stmt_ := stmt_ || '       planned_rental_start_date                                            planned_rental_start_date,'||eol_;
      stmt_ := stmt_ || '       planned_rental_start_date                                            planned_rental_start_time,'||eol_;
      stmt_ := stmt_ || '       planned_rental_duration                                              planned_rental_duration,'||eol_;
      stmt_ := stmt_ || '       planned_rental_end_date                                              planned_rental_end_date,'||eol_;
      stmt_ := stmt_ || '       planned_rental_end_date                                              planned_rental_end_time,'||eol_;
      stmt_ := stmt_ || '       planned_rental_return_date                                           planned_rental_return_date,'||eol_;
      stmt_ := stmt_ || '       Rental_Duration_Unit_Meas_API.Decode(rental_duration_unit_meas)      rental_duration_unit_meas,'||eol_;
      stmt_ := stmt_ || '       rental_duration_unit_meas                                            rental_duration_unit_meas_db,'||eol_;
      stmt_ := stmt_ || '       Start_Rental_Option_API.Decode(start_rental_option)                  start_rental_option,'||eol_;
      stmt_ := stmt_ || '       start_rental_option                                                  start_rental_option_db,'||eol_;
      stmt_ := stmt_ || '       chargeable_id                                                        chargeable_id, '||eol_;
      stmt_ := stmt_ || '       exception_id                                                         exception_id, '||eol_;
      stmt_ := stmt_ || '       trans_schedule_id                                                    trans_schedule_id,'||eol_;
      stmt_ := stmt_ || '       Rental_Period_Rounding_API.Decode(period_rounding)                   period_rounding,'||eol_;
      stmt_ := stmt_ || '       period_rounding                                                      period_rounding_db,'||eol_;
      stmt_ := stmt_ || '       cust_part_invert_conv_fact                                           cust_part_invert_conv_fact,'||eol_;
      stmt_ := stmt_ || '       country_code                                                         country_code,'||eol_;
      stmt_ := stmt_ || '       Tax_Liability_Type_API.Decode(tax_liability_type)                    tax_liability_type,'||eol_;
      stmt_ := stmt_ || '       tax_liability_type                                                   tax_liability_type_db,       '||eol_;
      stmt_ := stmt_ || '       -- gelr:disc_price_rounded, begin'||eol_;
      stmt_ := stmt_ || '       col.original_discount                    original_discount,'||eol_;
      stmt_ := stmt_ || '       col.original_add_discount                original_add_discount,'||eol_;
      stmt_ := stmt_ || '       col.original_order_discount              original_order_discount,'||eol_;
      stmt_ := stmt_ || '       -- gelr:disc_price_rounded, end'||eol_;
      stmt_ := stmt_ || '       col.rowid                                                            objid,'||eol_;
      stmt_ := stmt_ || '       ltrim(lpad(to_char(col.rowversion,''YYYYMMDDHH24MISS''),2000))         objversion,'||eol_;
      stmt_ := stmt_ || '       col.rowstate                                                         objstate,'||eol_;
      stmt_ := stmt_ || '       CUSTOMER_ORDER_LINE_API.Finite_State_Events__(col.rowstate)          objevents,'||eol_;
      stmt_ := stmt_ || '       CUSTOMER_ORDER_LINE_API.Finite_State_Decode__(col.rowstate)          state,                         '||eol_;
      stmt_ := stmt_ || '       col.rowkey                                                           objkey'||eol_;
      stmt_ := stmt_ || 'FROM   customer_order_line_tab col, rental_object_pub'||eol_;
      stmt_ := stmt_ || 'WHERE  col.order_no     = order_ref1'||eol_;
      stmt_ := stmt_ || 'AND    col.line_no      = order_ref2'||eol_;
      stmt_ := stmt_ || 'AND    col.rel_no       = order_ref3'||eol_;
      stmt_ := stmt_ || 'AND    col.line_item_no = order_ref4'||eol_;
      stmt_ := stmt_ || 'AND    col.rental       = ''TRUE'''||eol_;
      stmt_ := stmt_ || 'AND    rental_type_db   = ''CUST ORDER'''||eol_;
      stmt_ := stmt_ || 'AND    EXISTS (SELECT 1 FROM user_allowed_site_pub WHERE col.contract = site)'||eol_;
      stmt_ := stmt_ || 'AND    col.order_no IN (SELECT * FROM customer_order_usg)'||eol_;
   ELSE
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         order_no,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         line_no,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         rel_no,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       line_item_no,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       primary_rental_no,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         contract,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         company,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         catalog_no,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       note_id,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         order_code,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         part_no,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       pre_accounting_id,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         sales_unit_meas,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       base_sale_unit_price,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       base_unit_price_incl_tax,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       buy_qty_due,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         catalog_desc,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         catalog_type,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         catalog_type_db,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       conv_factor,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       cost,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       currency_rate,'||eol_;
      stmt_ := stmt_ || '      TO_DATE(NULL)                                                         date_entered,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       discount,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       line_total_qty,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       line_total_weight,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         note_text,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       order_discount,'||eol_;
      stmt_ := stmt_ || '      TO_DATE(NULL)                                                         planned_delivery_date,'||eol_;
      stmt_ := stmt_ || '      TO_DATE(NULL)                                                         planned_due_date,'||eol_;
      stmt_ := stmt_ || '      TO_DATE(NULL)                                                         supply_site_due_date,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       price_conv_factor,'||eol_;
      stmt_ := stmt_ || '      TO_DATE(NULL)                                                         promised_delivery_date,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       qty_assigned,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       qty_invoiced,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       qty_on_order,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       qty_picked,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       qty_returned,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       qty_shipdiff,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       qty_shipped,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       qty_to_ship,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       qty_short,'||eol_;
      stmt_ := stmt_ || '      TO_DATE(NULL)                                                         real_ship_date,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       revised_qty_due,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       sale_unit_price,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       unit_price_incl_tax,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         supply_code,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         supply_code_db,'||eol_;
      stmt_ := stmt_ || '      TO_DATE(NULL)                                                         wanted_delivery_date,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         delivery_type,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         vendor_no,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         tax_code,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         tax_class_id,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         tax_calc_structure_id,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         customer_part_no,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       customer_part_conv_factor,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         customer_part_unit_meas,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       customer_part_buy_qty,'||eol_;
      stmt_ := stmt_ || '      TO_DATE(NULL)                                                         planned_ship_date,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       planned_ship_period,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         customer_no,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         consignment_stock,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         consignment_stock_db,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       close_tolerance,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         price_list_no,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         charged_item,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         charged_item_db,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         demand_order_ref1,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         demand_order_ref2,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         demand_order_ref3,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       demand_order_ref4,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         demand_code,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         demand_code_db,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         dop_connection,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         dop_connection_db,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         create_sm_object_option,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         create_sm_object_option_db,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         default_addr_flag,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         default_addr_flag_db,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         addr_flag,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         addr_flag_db,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         ship_addr_no,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         route_id,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         forward_agent_id,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         ship_via_code,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         delivery_terms,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       delivery_leadtime,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         district_code,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         region_code,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       desired_qty,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         purchase_part_no,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         staged_billing,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         staged_billing_db,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         tax_liability,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         delivery_country_code,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         original_part_no,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         sup_sm_contract,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         sup_sm_object,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         sm_connection,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         sm_connection_db,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       part_price,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       calc_char_price,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       char_price,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         price_source,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         price_source_db,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         price_freeze,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         price_freeze_db,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         dock_code,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         sub_dock_code,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         ref_id,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         location_no,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         configuration_id,'||eol_;
      stmt_ := stmt_ || '      TO_DATE(NULL)                                                         price_effectivity_date,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       configured_line_price_id,'||eol_;
      stmt_ := stmt_ || '      TO_DATE(NULL)                                                         latest_release_date,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         ctp_planned,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         ctp_planned_db,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         job_id,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       cust_warranty_id,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         price_source_id,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         intrastat_exempt,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         intrastat_exempt_db,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         price_unit_meas,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         condition_code,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       additional_discount,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         part_ownership,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         part_ownership_db,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         owning_customer_no,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         exchange_item,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         exchange_item_db,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         supply_site_reserve_type,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         supply_site_reserve_type_db,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         originating_rel_no,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       originating_line_item_no,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         release_planning,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         release_planning_db,'||eol_;
      stmt_ := stmt_ || '      NULL                                                                  replicate_changes,'||eol_;
      stmt_ := stmt_ || '      NULL                                                                  change_request,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         supplier_ship_via_transit,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         supplier_ship_via_transit_desc,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         supply_site,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         shipment_connected,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         shipment_connected_db,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         self_billing,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         self_billing_db,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       activity_seq,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         project_id,'||eol_;
      stmt_ := stmt_ || '      NULL                                                                  server_data_change,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         deliver_to_customer_no,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         contact,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       input_qty,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         input_unit_meas,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       input_conv_factor,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         input_variable_values,'||eol_;
      stmt_ := stmt_ || '      NULL                                                                  dop_new_qty_demand,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         shipment_creation,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         shipment_creation_db,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         manufacturing_department,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       delivery_sequence,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         cancel_reason,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         delivery_confirmed,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         delivery_confirmed_db,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         customer_po_line_no,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         customer_po_rel_no,'||eol_;
      stmt_ := stmt_ || '      NULL                                                                  update_pegged_orders,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       qty_confirmeddiff,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         blocked_for_invoicing,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         blocked_for_invoicing_db,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         provisional_price,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         provisional_price_db,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         receiving_advice_type,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         receiving_advice_type_db,'||eol_;
      stmt_ := stmt_ || '      NULL                                                                  default_charges,'||eol_;
      stmt_ := stmt_ || '      TO_DATE(NULL)                                                         first_actual_ship_date,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         tax_id_no,'||eol_;
      stmt_ := stmt_ || '      TO_DATE(NULL)                                                         tax_id_validated_date,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         price_source_net_price,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         price_source_net_price_db,'||eol_;
      stmt_ := stmt_ || '      TO_DATE(NULL)                                                         target_date,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       allocation_id,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         del_terms_location,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         classification_part_no,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         classification_unit_meas,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         classification_standard,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         rebate_builder,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         rebate_builder_db,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       line_total_weight_gross,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         freight_map_id,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         zone_id,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         freight_price_list_no,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       adjusted_weight_net,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       adjusted_weight_gross,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       adjusted_volume,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         freight_free,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         freight_free_db,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         part_level,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         part_level_db,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         part_level_id,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         customer_level,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         customer_level_db,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         customer_level_id,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       load_id,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       customs_value,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         abnormal_demand,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         abnormal_demand_db,'||eol_;
      stmt_ := stmt_ || '      NULL                                                                  update_price_effective_date,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         cust_calendar_id,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         ext_transport_calendar_id,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         rel_mtrl_planning,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       qty_per_assembly,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         new_comp_after_delivery,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       inverted_conv_factor,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         rental,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         rental_db,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         end_customer_id,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       picking_leadtime,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         shipment_type,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       open_shipment_qty,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         packing_instruction_id,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         originating_co_lang_code,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         supply_site_part_no,'||eol_;
      stmt_ := stmt_ || '      NULL                                                                  make_reservation,'||eol_;
      stmt_ := stmt_ || '      NULL                                                                  capability_chk_source_flag,'||eol_;
      stmt_ := stmt_ || '      NULL                                                                  shipment_creation_sent,'||eol_;
      stmt_ := stmt_ || '      NULL                                                                  shipment_type_sent,'||eol_;
      stmt_ := stmt_ || '      NULL                                                                  packed_ship_cre_in_init,'||eol_;
      stmt_ := stmt_ || '      NULL                                                                  disconnect_exp_license,'||eol_;
      stmt_ := stmt_ || '      NULL                                                                  po_charged_comp_change,'||eol_;
      stmt_ := stmt_ || '      NULL                                                                  update_ship_qty,'||eol_;
      stmt_ := stmt_ || '      NULL                                                                  connected_shipment_id,'||eol_;
      stmt_ := stmt_ || '      NULL                                                                  changed_attrib_not_in_pol,'||eol_;
      stmt_ := stmt_ || '      NULL                                                                  evaluate_default_info,'||eol_;
      stmt_ := stmt_ || '      TO_DATE(NULL)                                                         planned_rental_start_date,'||eol_;
      stmt_ := stmt_ || '      TO_DATE(NULL)                                                         planned_rental_start_time,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       planned_rental_duration,'||eol_;
      stmt_ := stmt_ || '      TO_DATE(NULL)                                                         planned_rental_end_date,'||eol_;
      stmt_ := stmt_ || '      TO_DATE(NULL)                                                         planned_rental_end_time,'||eol_;
      stmt_ := stmt_ || '      TO_DATE(NULL)                                                         planned_rental_return_date,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         rental_duration_unit_meas,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         rental_duration_unit_meas_db,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         start_rental_option,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         start_rental_option_db,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         chargeable_id, '||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         exception_id, '||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         trans_schedule_id,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         period_rounding,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         period_rounding_db,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       cust_part_invert_conv_fact,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         country_code,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         tax_liability_type,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         tax_liability_type_db,'||eol_;
      stmt_ := stmt_ || '       -- gelr:disc_price_rounded, begin'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       original_discount,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       original_add_discount,'||eol_;
      stmt_ := stmt_ || '      TO_NUMBER(NULL)                                                       original_order_discount,'||eol_;
      stmt_ := stmt_ || '       -- gelr:disc_price_rounded, end'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         objid,'||eol_;
      stmt_ := stmt_ || '      TO_DATE(NULL)                                                         objversion,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         objstate,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         objevents,'||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         state,                         '||eol_;
      stmt_ := stmt_ || '      TO_CHAR(NULL)                                                         objkey'||eol_;
      stmt_ := stmt_ || 'FROM DUAL'||eol_;
      stmt_ := stmt_ || 'WHERE 1=2'||eol_;
   END IF;
      stmt_ := stmt_ || 'WITH READ ONLY';
      
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE stmt_;
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON TABLE CUSTOMER_ORDER_RENTAL_LINE
         IS ''LU=CustomerOrderLine^PROMPT=Customer Order Rental Line^MODULE=ORDER^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.primary_rental_no
         IS ''FLAGS=AM---^DATATYPE=NUMBER^PROMPT=Rental No^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.planned_rental_start_date
         IS ''FLAGS=A-IU-^DATATYPE=DATE/DATE^PROMPT=Planned Rental Start Date^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.planned_rental_start_time
         IS ''FLAGS=A-IU-^DATATYPE=DATE/TIME^PROMPT=Planned Rental Start Time^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.planned_rental_duration
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Planned Rental Duration^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.planned_rental_end_date
         IS ''FLAGS=A-IU-^DATATYPE=DATE/DATE^PROMPT=Planned Rental End Date^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.planned_rental_end_time
         IS ''FLAGS=A-IU-^DATATYPE=DATE/TIME^PROMPT=Planned Rental End Time^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.planned_rental_return_date
         IS ''FLAGS=A-IU-^DATATYPE=DATE/DATE^PROMPT=Planned Rental Return Date^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.rental_duration_unit_meas
         IS ''FLAGS=A-IU-^DATATYPE=STRING(200)^ENUMERATION=RentalDurationUnitMeas^PROMPT=Rental Duration UoM^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.rental_duration_unit_meas_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Rental Duration UoM^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.start_rental_option
         IS ''FLAGS=A-IU-^DATATYPE=STRING(200)^PROMPT=Start Rental Option^ENUMERATION=StartRentalOption^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.start_rental_option_db
         IS ''FLAGS=A----^DATATYPE=STRING(30)^PROMPT=Start Rental Option^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.chargeable_id
         IS ''FLAGS=A-IU-^DATATYPE=STRING(30)/UPPERCASE^PROMPT=Chargeable Days ID^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.exception_id
         IS ''FLAGS=A-IU-^DATATYPE=STRING(10)/UPPERCASE^PROMPT=Date Exception ID^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.trans_schedule_id
         IS ''FLAGS=A-IU-^DATATYPE=STRING(30)/UPPERCASE^PROMPT=Schedule ID^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.period_rounding
         IS ''FLAGS=AMIUL^DATATYPE=STRING(200)^PROMPT=Period Rounding^ENUMERATION=RentalPeriodRounding^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.period_rounding_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Period Rounding^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.original_discount
         IS ''DATATYPE=NUMBER(5)/DECIMAL^FLAGS=A-IU-^PROMPT=Original Discount^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.original_add_discount
         IS ''DATATYPE=NUMBER(5)/DECIMAL^FLAGS=A----^PROMPT=Original Add Discount^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.original_order_discount
         IS ''DATATYPE=NUMBER(5)/DECIMAL^FLAGS=A----^PROMPT=Original Order Discount^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.order_no
         IS ''FLAGS=PMI-L^DATATYPE=STRING(12)/UPPERCASE^PROMPT=Order No^REF=CustomerOrder/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.line_no
         IS ''FLAGS=KMI-L^DATATYPE=STRING(4)^PROMPT=Line No^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.rel_no
         IS ''FLAGS=KMI-L^DATATYPE=STRING(4)^PROMPT=Rel No^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.line_item_no
         IS ''FLAGS=KMI--^DATATYPE=NUMBER^PROMPT=Line Item No^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.contract
         IS ''FLAGS=AMI--^DATATYPE=STRING(5)/UPPERCASE^PROMPT=Site^REF=Site/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.company
         IS ''FLAGS=A----^DATATYPE=STRING(20)/UPPERCASE^PROMPT=Company^COLUMN=Site_API.Get_Company(contract)^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.catalog_no
         IS ''FLAGS=AMI--^DATATYPE=STRING(25)/UPPERCASE^PROMPT=Sales Part Number^REF=SalesPart(contract)/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.note_id
         IS ''FLAGS=A-I--^DATATYPE=NUMBER^PROMPT=Note ID^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.order_code
         IS ''FLAGS=AMIU-^DATATYPE=STRING(3)/UPPERCASE^PROMPT=Order Code^REF=CustomerOrderCode/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.part_no
         IS ''FLAGS=A-I--^DATATYPE=STRING(25)/UPPERCASE^PROMPT=Part No^REF=InventoryPart(contract)/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.pre_accounting_id
         IS ''FLAGS=A-I--^DATATYPE=NUMBER^PROMPT=Pre Accounting ID^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.sales_unit_meas
         IS ''FLAGS=AMIU-^DATATYPE=STRING(10)^PROMPT=Sales Unit Measure^REF=IsoUnit/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.base_sale_unit_price
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER/DECIMAL^PROMPT=Base Sale Unit Price^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.base_unit_price_incl_tax
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER/DECIMAL^PROMPT=Base Sale Unit Price Incl Tax^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.buy_qty_due
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Buy Qty Due^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.catalog_desc
         IS ''FLAGS=A-IU-^DATATYPE=STRING(200)^PROMPT=Catalog Desc^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.catalog_type
         IS ''FLAGS=AMIU-^DATATYPE=STRING(200)^ENUMERATION=SalesPartType^PROMPT=Catalog Type^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.catalog_type_db
         IS ''FLAGS=A----^DATATYPE=STRING(4)^PROMPT=Catalog Type^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.conv_factor
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Conv Factor^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.cost
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER/DECIMAL^PROMPT=Cost^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.currency_rate
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER/DECIMAL^PROMPT=Currency Rate^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.date_entered
         IS ''FLAGS=A----^DATATYPE=DATE/DATETIME^PROMPT=Date Entered^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.discount
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Discount^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.line_total_qty
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Line Total Qty^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.line_total_weight
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Line Total Weight^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.note_text
         IS ''FLAGS=A-IU-^DATATYPE=STRING(2000)^PROMPT=Note^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.order_discount
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Order Discount^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.planned_delivery_date
         IS ''FLAGS=AMIU-^DATATYPE=DATE/DATETIME^PROMPT=Planned Delivery Date^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.planned_due_date
         IS ''FLAGS=AMIU-^DATATYPE=DATE/DATETIME^PROMPT=Planned Due Date^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.supply_site_due_date
         IS ''FLAGS=A-IU-^DATATYPE=DATE/DATE^PROMPT=Supply Site Due Date^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.price_conv_factor
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Price Conv Factor^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.promised_delivery_date
         IS ''FLAGS=AMIU-^DATATYPE=DATE/DATETIME^PROMPT=Promised Delivery Date^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.qty_assigned
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Qty Assigned^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.qty_invoiced
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Qty Invoiced^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.qty_on_order
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Qty On Order^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.qty_picked
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Qty Picked^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.qty_returned
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Qty Returned^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.qty_shipdiff
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Qty Shipdiff^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.qty_shipped
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Qty Shipped^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.qty_to_ship
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Qty To Ship^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.qty_short
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Qty Short^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.real_ship_date
         IS ''FLAGS=A-IU-^DATATYPE=DATE/DATE^PROMPT=Real Ship Date^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.revised_qty_due
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Revised Qty Due^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.sale_unit_price
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER/DECIMAL^PROMPT=Sale Unit Price^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.unit_price_incl_tax
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER/DECIMAL^PROMPT=Sale Unit Price Incl Tax^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.supply_code
         IS ''FLAGS=AMIU-^DATATYPE=STRING(200)^ENUMERATION=OrderSupplyType^PROMPT=Supply Code^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.supply_code_db
         IS ''FLAGS=A----^DATATYPE=STRING(3)^PROMPT=Supply Code^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.wanted_delivery_date
         IS ''FLAGS=AMIU-^DATATYPE=DATE/DATETIME^PROMPT=Wanted Delivery Date^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.delivery_type
         IS ''FLAGS=A-IU-^DATATYPE=STRING(20)/UPPERCASE^PROMPT=Delivery Type^REF=DeliveryType(company)/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.vendor_no
         IS ''FLAGS=A-IU-^DATATYPE=STRING(20)/UPPERCASE^PROMPT=Supplier^REF=Supplier/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.tax_code
         IS ''FLAGS=A-IU-^DATATYPE=STRING(20)/UPPERCASE^PROMPT=Tax Code^REF=StatutoryFee(company)/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.tax_class_id
         IS ''FLAGS=A-IU-^DATATYPE=STRING(20)/UPPERCASE^PROMPT=Tax Class Id^REF=TaxClass(company)/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.tax_calc_structure_id
         IS ''FLAGS=A-IU-^DATATYPE=STRING(20)/UPPERCASE^PROMPT=Tax Calculation Structure^REF=TaxCalcStructure(company)/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.customer_part_no
         IS ''FLAGS=A-I--^DATATYPE=STRING(45)^PROMPT=Customer Part No^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.customer_part_conv_factor
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Customer Part Conv Factor^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.customer_part_unit_meas
         IS ''FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=Customer Part Unit Meas^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.customer_part_buy_qty
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Customer Part Buy Qty^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.planned_ship_date
         IS ''FLAGS=A-IU-^DATATYPE=DATE/DATETIME^PROMPT=Planned Ship Date^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.planned_ship_period
         IS ''FLAGS=A----^DATATYPE=STRING(10)/UPPERCASE^PROMPT=Planned Ship Period^REF=WorkTimePeriod/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.customer_no
         IS ''FLAGS=AMI--^DATATYPE=STRING(20)/UPPERCASE^PROMPT=Customer No^REF=CustOrdCustomer/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.consignment_stock
         IS ''FLAGS=AMIU-^DATATYPE=STRING(200)^ENUMERATION=ConsignmentStock^PROMPT=Consignment Stock^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.consignment_stock_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Consignment Stock^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.close_tolerance
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Close Tolerance^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.price_list_no
         IS ''FLAGS=A-IU-^DATATYPE=STRING(10)/UPPERCASE^PROMPT=Price List No^REF=SalesPriceList/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.charged_item
         IS ''FLAGS=AMIUL^DATATYPE=STRING(200)^ENUMERATION=ChargedItem^PROMPT=Charged Item^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.charged_item_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Charged Item^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.demand_order_ref1
         IS ''FLAGS=A-IU-^DATATYPE=STRING(15)^PROMPT=Demand Order Ref1^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.demand_order_ref2
         IS ''FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=Demand Order Ref2^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.demand_order_ref3
         IS ''FLAGS=A-IU-^DATATYPE=STRING(4)^PROMPT=Demand Order Ref3^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.demand_order_ref4
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Demand Order Ref4^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.demand_code
         IS ''FLAGS=A-IU-^DATATYPE=STRING(200)^ENUMERATION=OrderSupplyType^PROMPT=Demand Code^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.demand_code_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Demand Code^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.dop_connection
         IS ''FLAGS=A-IU-^DATATYPE=STRING(200)^ENUMERATION=DopConnection^PROMPT=Dop Connection^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.dop_connection_db
         IS ''FLAGS=A----^DATATYPE=STRING(3)^PROMPT=Dop Connection^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.create_sm_object_option
         IS ''FLAGS=AMIU-^DATATYPE=STRING(200)^ENUMERATION=CreateSmObjectOption^PROMPT=Create Sm Object Option^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.create_sm_object_option_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Create Sm Object Option^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.default_addr_flag
         IS ''FLAGS=AMIU-^DATATYPE=STRING(200)^ENUMERATION=GenYesNo^PROMPT=Default Address Flag^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.default_addr_flag_db
         IS ''FLAGS=A----^DATATYPE=STRING(1)^PROMPT=Default Address Flag^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.addr_flag
         IS ''FLAGS=AMIU-^DATATYPE=STRING(200)^ENUMERATION=GenYesNo^PROMPT=Addr Flag^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.addr_flag_db
         IS ''FLAGS=A----^DATATYPE=STRING(1)^PROMPT=Addr Flag^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.ship_addr_no
         IS ''FLAGS=AMIU-^DATATYPE=STRING(50)^PROMPT=Ship Addr No^REF=CustOrdCustomerAddress(deliver_to_customer_no)/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.route_id
         IS ''FLAGS=A-IU-^DATATYPE=STRING(12)^PROMPT=Route ID^REF=DeliveryRoute/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.forward_agent_id
         IS ''FLAGS=A-IU-^DATATYPE=STRING(20)/UPPERCASE^PROMPT=Forward Agent ID^REF=ForwarderInfo/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.ship_via_code
         IS ''FLAGS=AMIU-^DATATYPE=STRING(3)/UPPERCASE^PROMPT=Ship Via Code^REF=MpccomShipVia/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.delivery_terms
         IS ''FLAGS=AMIU-^DATATYPE=STRING(5)/UPPERCASE^PROMPT=Delivery Terms^REF=OrderDeliveryTerm/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.delivery_leadtime
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER(3)^PROMPT=External Transport Lead Time^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.district_code
         IS ''FLAGS=A-IU-^DATATYPE=STRING(10)/UPPERCASE^PROMPT=District Code^REF=SalesDistrict/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.region_code
         IS ''FLAGS=A-IU-^DATATYPE=STRING(10)/UPPERCASE^PROMPT=Region Code^REF=SalesRegion/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.desired_qty
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Desired Qty^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.purchase_part_no
         IS ''FLAGS=A-IU-^DATATYPE=STRING(25)/UPPERCASE^PROMPT=Purchase Part No^REF=PurchasePart(contract)/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.staged_billing
         IS ''FLAGS=AMIU-^DATATYPE=STRING(200)^ENUMERATION=StagedBillingType^PROMPT=Staged Billing^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.staged_billing_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Staged Billing^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.tax_liability
         IS ''FLAGS=AMIU-^DATATYPE=STRING(20)/UPPERCASE^PROMPT=Tax Liability^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.delivery_country_code
         IS ''FLAGS=A----^DATATYPE=STRING(2)/UPPERCASE^PROMPT=Delivery Country Code^COLUMN=Cust_Order_Line_Address_API.Get_Country_Code(order_no, line_no, rel_no, line_item_no)^REF=TaxLiability(tax_liability)/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.original_part_no
         IS ''FLAGS=A-IU-^DATATYPE=STRING(25)/UPPERCASE^PROMPT=Original Part No^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.sup_sm_contract
         IS ''FLAGS=A-IU-^DATATYPE=STRING(5)/UPPERCASE^PROMPT=Superior SM Contract^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.sup_sm_object
         IS ''FLAGS=A-IU-^DATATYPE=STRING(100)/UPPERCASE^PROMPT=Superior SM Object^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.sm_connection
         IS ''FLAGS=AMIU-^DATATYPE=STRING(200)^ENUMERATION=ServiceManagementConnect^PROMPT=SM Connection^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.sm_connection_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=SM Connection^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.part_price
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Part Price^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.calc_char_price
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Calc Char Price^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.char_price
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Char Price^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.price_source
         IS ''FLAGS=AMIU-^DATATYPE=STRING(200)^ENUMERATION=PricingSource^PROMPT=Price Source^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.price_source_db
         IS ''FLAGS=A----^DATATYPE=STRING(25)^PROMPT=Price Source^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.price_freeze
         IS ''FLAGS=AMIU-^DATATYPE=STRING(200)^ENUMERATION=FreezeFlag^PROMPT=Price Freeze^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.price_freeze_db
         IS ''FLAGS=A----^DATATYPE=STRING(6)^PROMPT=Price Freeze^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.dock_code
         IS ''FLAGS=A-IU-^DATATYPE=STRING(35)^PROMPT=Dock Code^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.sub_dock_code
         IS ''FLAGS=A-IU-^DATATYPE=STRING(35)^PROMPT=Sub Dock Code^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.ref_id
         IS ''FLAGS=A-IU-^DATATYPE=STRING(35)^PROMPT=Ref ID^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.location_no
         IS ''FLAGS=A-IU-^DATATYPE=STRING(35)^PROMPT=Location No^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.configuration_id
         IS ''FLAGS=AMIU-^DATATYPE=STRING(50)^PROMPT=Configuration ID^REF=ConfigurationSpec(part_no)/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.price_effectivity_date
         IS ''FLAGS=A-IU-^DATATYPE=DATE/DATE^PROMPT=Price Effectivity Date^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.configured_line_price_id
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Configured Line Price ID^REF=ConfiguredLinePrice/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.latest_release_date
         IS ''FLAGS=A-IU-^DATATYPE=DATE/DATE^PROMPT=Latest Release Date^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.ctp_planned
         IS ''FLAGS=AMIU-^DATATYPE=STRING(200)^ENUMERATION=GenYesNo^PROMPT=Ctp Planned^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.ctp_planned_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Ctp Planned^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.job_id
         IS ''FLAGS=A-IU-^DATATYPE=STRING(10)/UPPERCASE^PROMPT=Job ID^REF=AccountingProject(company)/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.cust_warranty_id
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Customer Warranty ID^REF=CustWarranty/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.price_source_id
         IS ''FLAGS=A-IU-^DATATYPE=STRING(25)^PROMPT=Price Source ID^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.intrastat_exempt
         IS ''FLAGS=AMIU-^DATATYPE=STRING(200)^ENUMERATION=IntrastatExempt^PROMPT=Intrastat Exempt^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.intrastat_exempt_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Intrastat Exempt^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.price_unit_meas
         IS ''FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=Price Unit Measure^REF=IsoUnit/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.condition_code
         IS ''FLAGS=A-IUL^DATATYPE=STRING(10)/UPPERCASE^PROMPT=Condition Code^REF=ConditionCode/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.additional_discount
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Additional Discount^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.part_ownership
         IS ''FLAGS=AMIUL^DATATYPE=STRING(200)^ENUMERATION=PartOwnership^PROMPT=Part Ownership^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.part_ownership_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Part Ownership^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.owning_customer_no
         IS ''FLAGS=A-IUL^DATATYPE=STRING(20)/UPPERCASE^PROMPT=Owning Customer No^REF=CustOrdCustomer/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.exchange_item
         IS ''FLAGS=AMIUL^DATATYPE=STRING(200)^ENUMERATION=ExchangeItem^PROMPT=Exchange Item^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.exchange_item_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Exchange Item^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.supply_site_reserve_type
         IS ''FLAGS=AMIU-^DATATYPE=STRING(200)^ENUMERATION=SupplySiteReserveType^PROMPT=Supply Site Reserve Type^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.supply_site_reserve_type_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Supply Site Reserve Type^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.originating_rel_no
         IS ''FLAGS=A-IU-^DATATYPE=STRING(4)^PROMPT=Originating Rel No^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.originating_line_item_no
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Originating Line Item No^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.release_planning
         IS ''FLAGS=AMIUL^DATATYPE=STRING(200)^ENUMERATION=ReleasePlanning^PROMPT=Release Planning^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.release_planning_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Release Planning^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.replicate_changes
         IS ''FLAGS=A----^DATATYPE=STRING(5)^PROMPT=Replicate Changes^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.change_request
         IS ''FLAGS=A----^DATATYPE=STRING(5)^PROMPT=Change Request^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.supplier_ship_via_transit
         IS ''FLAGS=A-IU-^DATATYPE=STRING(3)/UPPERCASE^PROMPT=Supplier Ship Via Transit^REF=MpccomShipVia/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.supplier_ship_via_transit_desc
         IS ''FLAGS=A-IU-^DATATYPE=STRING(35)^PROMPT=Supplier Ship Via Transit Desc^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.supply_site
         IS ''FLAGS=A-IU-^DATATYPE=STRING(5)/UPPERCASE^PROMPT=Site^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.shipment_connected
         IS ''FLAGS=A-IU-^DATATYPE=STRING(200)^ENUMERATION=FndBoolean^PROMPT=Shipment Connected^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.shipment_connected_db
         IS ''FLAGS=A----^DATATYPE=STRING(5)^PROMPT=Shipment Connected^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.self_billing
         IS ''FLAGS=A-IU-^DATATYPE=STRING(200)^ENUMERATION=SelfBillingType^PROMPT=Self Billing^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.self_billing_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Self Billing^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.activity_seq
         IS ''FLAGS=A-IUL^DATATYPE=NUMBER^PROMPT=Activity seq^REF=Activity/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.project_id
         IS ''FLAGS=A----^DATATYPE=STRING(10)/UPPERCASE^PROMPT=Project ID^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.server_data_change
         IS ''FLAGS=A----^DATATYPE=NUMBER(1)^PROMPT=Server Data Change^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.deliver_to_customer_no
         IS ''FLAGS=AMI--^DATATYPE=STRING(20)/UPPERCASE^PROMPT=Deliver to Customer No^REF=CustOrdCustomer/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.contact
         IS ''FLAGS=A-IU-^DATATYPE=STRING(100)^PROMPT=Contact^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.input_qty
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Input Qty^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.input_unit_meas
         IS ''FLAGS=A-IU-^DATATYPE=STRING(30)^PROMPT=Input Unit Meas^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.input_conv_factor
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Input Conv Factor^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.input_variable_values
         IS ''FLAGS=A-IU-^DATATYPE=STRING(2000)^PROMPT=Input Variable Values^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.dop_new_qty_demand
         IS ''FLAGS=A----^DATATYPE=STRING(2000)^PROMPT=Dop New Qty Demand^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.shipment_creation
         IS ''FLAGS=AMIUL^DATATYPE=STRING(200)^ENUMERATION=ShipmentCreation^PROMPT=Shipment Creation^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.shipment_creation_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Shipment Creation^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.manufacturing_department
         IS ''FLAGS=A-IU-^DATATYPE=STRING(2000)^PROMPT=Manufacturing Department^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.delivery_sequence
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Delivery Sequence^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.cancel_reason
         IS ''FLAGS=A-IU-^DATATYPE=STRING(10)/UPPERCASE^PROMPT=Cancellation Reason^REF=OrderCancelReason/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.delivery_confirmed
         IS ''FLAGS=AMIU-^DATATYPE=STRING(200)^ENUMERATION=FndBoolean^PROMPT=Delivery Confirmed^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.delivery_confirmed_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Delivery Confirmed^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.customer_po_line_no
         IS ''FLAGS=A-IU-^DATATYPE=STRING(4)^PROMPT=Customer Po Line No^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.customer_po_rel_no
         IS ''FLAGS=A-IU-^DATATYPE=STRING(4)^PROMPT=Customer Po Rel No^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.update_pegged_orders
         IS ''FLAGS=A----^DATATYPE=STRING(5)^PROMPT=Update Pegged Orders^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.qty_confirmeddiff
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Qty Confirmeddiff^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.blocked_for_invoicing
         IS ''FLAGS=AMIU-^DATATYPE=STRING(200)^ENUMERATION=FndBoolean^PROMPT=Blocked For Invoicing^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.blocked_for_invoicing_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Blocked For Invoicing^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.provisional_price
         IS ''FLAGS=AMIU-^DATATYPE=STRING(200)^ENUMERATION=FndBoolean^PROMPT=Provisional Price^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.provisional_price_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Provisional Price^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.receiving_advice_type
         IS ''FLAGS=AMIU-^DATATYPE=STRING(200)^ENUMERATION=ReceivingAdviceType^PROMPT=Receiving Advice Type^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.receiving_advice_type_db
         IS ''FLAGS=A----^DATATYPE=STRING(30)^PROMPT=Receiving Advice Type^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.default_charges
         IS ''FLAGS=A----^DATATYPE=BOOLEAN^PROMPT=Default Charges^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.first_actual_ship_date
         IS ''FLAGS=A-IU-^DATATYPE=DATE/DATE^PROMPT=First Actual Ship Date^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.tax_id_no
         IS ''FLAGS=A-IU-^DATATYPE=STRING(50)/UPPERCASE^PROMPT=Tax Id No^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.tax_id_validated_date
         IS ''FLAGS=A-IU-^DATATYPE=DATE/DATE^PROMPT=Tax ID Validated Date^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.price_source_net_price
         IS ''FLAGS=AMIU-^DATATYPE=STRING(200)^ENUMERATION=FndBoolean^PROMPT=Price Source Net Price^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.price_source_net_price_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Price Source Net Price^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.target_date
         IS ''FLAGS=AMIU-^DATATYPE=DATE/DATETIME^PROMPT=Target Date^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.allocation_id
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Allocation Id^REF=PeriodAllocationRule/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.del_terms_location
         IS ''FLAGS=A-IU-^DATATYPE=STRING(100)^PROMPT=Del Terms Location^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.classification_part_no
         IS ''FLAGS=A-IU-^DATATYPE=STRING(25)^PROMPT=Classification Part No^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.classification_unit_meas
         IS ''FLAGS=A-IU-^DATATYPE=STRING(10)^PROMPT=Classification Unit Meas^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.classification_standard
         IS ''FLAGS=A-IU-^DATATYPE=STRING(25)/UPPERCASE^PROMPT=Classification Standard^REF=ClassificationStandard/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.rebate_builder
         IS ''FLAGS=AMIUL^DATATYPE=STRING(200)^ENUMERATION=FndBoolean^PROMPT=Rebate Builder^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.rebate_builder_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Rebate Builder^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.line_total_weight_gross
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Line Total Gross Weight^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.freight_map_id
         IS ''FLAGS=A-IUL^DATATYPE=STRING(15)/UPPERCASE^PROMPT=Freight Map ID^REF=FreightMap/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.zone_id
         IS ''FLAGS=A-IUL^DATATYPE=STRING(15)/UPPERCASE^PROMPT=Zone Id^REF=FreightZone(freight_map_id)/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.freight_price_list_no
         IS ''FLAGS=A-IUL^DATATYPE=STRING(10)^PROMPT=Freight Price List No^REF=FreightPriceListBase/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.adjusted_weight_net
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Adjusted Line Total Net Weight^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.adjusted_weight_gross
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Adjusted Line Total Gross Weight^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.adjusted_volume
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Adjusted Line Total Volume^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.freight_free
         IS ''FLAGS=AMIUL^DATATYPE=STRING(200)^ENUMERATION=FndBoolean^PROMPT=Freight Free^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.freight_free_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Freight Free^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.part_level
         IS ''FLAGS=A-IUL^DATATYPE=STRING(200)^ENUMERATION=PriceDiscountPartLevel^PROMPT=Part Level^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.part_level_db
         IS ''FLAGS=A----^DATATYPE=STRING(30)^PROMPT=Part Level^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.part_level_id
         IS ''FLAGS=A-IU-^DATATYPE=STRING(200)^PROMPT=Part Level Id^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.customer_level
         IS ''FLAGS=A-IUL^DATATYPE=STRING(200)^ENUMERATION=PriceDiscountCustLevel^PROMPT=Customer Level^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.customer_level_db
         IS ''FLAGS=A----^DATATYPE=STRING(30)^PROMPT=Customer Level^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.customer_level_id
         IS ''FLAGS=A-IU-^DATATYPE=STRING(200)^PROMPT=Customer Level Id^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.load_id
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Load ID^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.customs_value
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER/DECIMAL^PROMPT=Customs Value^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.abnormal_demand
         IS ''FLAGS=AMIU-^DATATYPE=STRING(200)^ENUMERATION=FndBoolean^PROMPT=Abnormal Demand^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.abnormal_demand_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Abnormal Demand^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.update_price_effective_date
         IS ''FLAGS=A----^DATATYPE=BOOLEAN^PROMPT=Update Price Effective Date^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.cust_calendar_id
         IS ''FLAGS=A-IUL^DATATYPE=STRING(10)^PROMPT=Cust Calendar Id^REF=WorkTimeCalendar/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.ext_transport_calendar_id
         IS ''FLAGS=A-IUL^DATATYPE=STRING(10)^PROMPT=External Transport Calendar ID^REF=WorkTimeCalendar/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.rel_mtrl_planning
         IS ''FLAGS=AMIU-^DATATYPE=STRING(5)^PROMPT=Released for Mtrl Planning^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.qty_per_assembly
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Qty Per Assembly^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.new_comp_after_delivery
         IS ''FLAGS=A-IU-^DATATYPE=STRING(5)^PROMPT=New Component After Delivery^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.inverted_conv_factor
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Inverted Conv Factor^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.rental
         IS ''FLAGS=AMI--^DATATYPE=STRING(200)^ENUMERATION=FndBoolean^PROMPT=Rental^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.rental_db
         IS ''FLAGS=A----^DATATYPE=STRING(5)^PROMPT=Rental^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.end_customer_id
         IS ''FLAGS=A-IU-^DATATYPE=STRING(20)/UPPERCASE^PROMPT=End Customer Id^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.picking_leadtime
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Picking Lead Time^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.shipment_type
         IS ''FLAGS=AMIU-^DATATYPE=STRING(3)/UPPERCASE^PROMPT=Shipment Type^REF=ShipmentType/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.open_shipment_qty
         IS ''FLAGS=AMIU-^DATATYPE=NUMBER^PROMPT=Open Shipment Connected Quantity^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.packing_instruction_id
         IS ''FLAGS=A-IUL^DATATYPE=STRING(50)/UPPERCASE^PROMPT=Packing Instruction ID^REF=PackingInstruction/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.originating_co_lang_code
         IS ''FLAGS=A-IU-^DATATYPE=STRING(2)^PROMPT=Originating Co Lang Code^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.supply_site_part_no
         IS ''FLAGS=A-IU-^DATATYPE=STRING(25)/UPPERCASE^PROMPT=Supply Site Part No^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.make_reservation
         IS ''FLAGS=A----^DATATYPE=STRING(5)^PROMPT=Make Reservation^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.capability_chk_source_flag
         IS ''FLAGS=A----^DATATYPE=STRING(5)^PROMPT=Capability Chk Source Flag^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.shipment_creation_sent
         IS ''FLAGS=A----^DATATYPE=STRING(5)^PROMPT=Shipment Creation Sent^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.shipment_type_sent
         IS ''FLAGS=A----^DATATYPE=STRING(5)^PROMPT=Shipment Type Sent^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.packed_ship_cre_in_init
         IS ''FLAGS=A----^DATATYPE=STRING(5)^PROMPT=Packed Ship Cre In Init^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.disconnect_exp_license
         IS ''FLAGS=A----^DATATYPE=STRING(5)^PROMPT=Disconnect Exp License^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.po_charged_comp_change
         IS ''FLAGS=A----^DATATYPE=STRING(5)^PROMPT=Po Charged Comp Change^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.update_ship_qty
         IS ''FLAGS=A----^DATATYPE=STRING(5)^PROMPT=Update Ship Qty^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.connected_shipment_id
         IS ''FLAGS=A----^DATATYPE=NUMBER^PROMPT=Connected Shipment Id^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.changed_attrib_not_in_pol
         IS ''FLAGS=A----^DATATYPE=STRING(5)^PROMPT=Changed Attrib Not In Pol^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.evaluate_default_info
         IS ''FLAGS=A----^DATATYPE=STRING(5)^PROMPT=Evaluate Default Info^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.cust_part_invert_conv_fact
         IS ''FLAGS=A-IU-^DATATYPE=NUMBER^PROMPT=Customer Part Inverted Conversion Factor^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.country_code
         IS ''FLAGS=AMIU-^DATATYPE=STRING(2)/UPPERCASE^PROMPT=Country Code^REF=IsoCountry/NOCHECK^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.tax_liability_type
         IS ''FLAGS=AMIU-^DATATYPE=STRING(200)^ENUMERATION=TaxLiabilityType^PROMPT=Tax Liability Type^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.tax_liability_type_db
         IS ''FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Tax Liability Type^''';
      -- ifs_assert_safe codegen
      EXECUTE IMMEDIATE 'COMMENT ON COLUMN CUSTOMER_ORDER_RENTAL_LINE.state
         IS ''FLAGS=A---L^DATATYPE=STRING(253)^PROMPT=Status^''';
END Post_Installation_View;

BEGIN
   Init;
END Customer_Order_Line_API;